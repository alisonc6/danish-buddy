"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/google-logging-utils";
exports.ids = ["vendor-chunks/google-logging-utils"];
exports.modules = {

/***/ "(rsc)/./node_modules/google-logging-utils/build/src/colours.js":
/*!****************************************************************!*\
  !*** ./node_modules/google-logging-utils/build/src/colours.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\n// Copyright 2024 Google LLC\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     https://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Colours = void 0;\r\n/**\r\n * Handles figuring out if we can use ANSI colours and handing out the escape codes.\r\n *\r\n * This is for package-internal use only, and may change at any time.\r\n *\r\n * @private\r\n * @internal\r\n */\r\nclass Colours {\r\n    /**\r\n     * @param stream The stream (e.g. process.stderr)\r\n     * @returns true if the stream should have colourization enabled\r\n     */\r\n    static isEnabled(stream) {\r\n        return (stream && // May happen in browsers.\r\n            stream.isTTY &&\r\n            (typeof stream.getColorDepth === 'function'\r\n                ? stream.getColorDepth() > 2\r\n                : true));\r\n    }\r\n    static refresh() {\r\n        Colours.enabled = Colours.isEnabled(process === null || process === void 0 ? void 0 : process.stderr);\r\n        if (!this.enabled) {\r\n            Colours.reset = '';\r\n            Colours.bright = '';\r\n            Colours.dim = '';\r\n            Colours.red = '';\r\n            Colours.green = '';\r\n            Colours.yellow = '';\r\n            Colours.blue = '';\r\n            Colours.magenta = '';\r\n            Colours.cyan = '';\r\n            Colours.white = '';\r\n            Colours.grey = '';\r\n        }\r\n        else {\r\n            Colours.reset = '\\u001b[0m';\r\n            Colours.bright = '\\u001b[1m';\r\n            Colours.dim = '\\u001b[2m';\r\n            Colours.red = '\\u001b[31m';\r\n            Colours.green = '\\u001b[32m';\r\n            Colours.yellow = '\\u001b[33m';\r\n            Colours.blue = '\\u001b[34m';\r\n            Colours.magenta = '\\u001b[35m';\r\n            Colours.cyan = '\\u001b[36m';\r\n            Colours.white = '\\u001b[37m';\r\n            Colours.grey = '\\u001b[90m';\r\n        }\r\n    }\r\n}\r\nexports.Colours = Colours;\r\nColours.enabled = false;\r\nColours.reset = '';\r\nColours.bright = '';\r\nColours.dim = '';\r\nColours.red = '';\r\nColours.green = '';\r\nColours.yellow = '';\r\nColours.blue = '';\r\nColours.magenta = '';\r\nColours.cyan = '';\r\nColours.white = '';\r\nColours.grey = '';\r\nColours.refresh();\r\n//# sourceMappingURL=colours.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWxvZ2dpbmctdXRpbHMvYnVpbGQvc3JjL2NvbG91cnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFuaXNoLWJ1ZGR5Ly4vbm9kZV9tb2R1bGVzL2dvb2dsZS1sb2dnaW5nLXV0aWxzL2J1aWxkL3NyYy9jb2xvdXJzLmpzPzAxMzEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8vIENvcHlyaWdodCAyMDI0IEdvb2dsZSBMTENcclxuLy9cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuLy9cclxuLy8gICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuLy9cclxuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuQ29sb3VycyA9IHZvaWQgMDtcclxuLyoqXHJcbiAqIEhhbmRsZXMgZmlndXJpbmcgb3V0IGlmIHdlIGNhbiB1c2UgQU5TSSBjb2xvdXJzIGFuZCBoYW5kaW5nIG91dCB0aGUgZXNjYXBlIGNvZGVzLlxyXG4gKlxyXG4gKiBUaGlzIGlzIGZvciBwYWNrYWdlLWludGVybmFsIHVzZSBvbmx5LCBhbmQgbWF5IGNoYW5nZSBhdCBhbnkgdGltZS5cclxuICpcclxuICogQHByaXZhdGVcclxuICogQGludGVybmFsXHJcbiAqL1xyXG5jbGFzcyBDb2xvdXJzIHtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHN0cmVhbSBUaGUgc3RyZWFtIChlLmcuIHByb2Nlc3Muc3RkZXJyKVxyXG4gICAgICogQHJldHVybnMgdHJ1ZSBpZiB0aGUgc3RyZWFtIHNob3VsZCBoYXZlIGNvbG91cml6YXRpb24gZW5hYmxlZFxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgaXNFbmFibGVkKHN0cmVhbSkge1xyXG4gICAgICAgIHJldHVybiAoc3RyZWFtICYmIC8vIE1heSBoYXBwZW4gaW4gYnJvd3NlcnMuXHJcbiAgICAgICAgICAgIHN0cmVhbS5pc1RUWSAmJlxyXG4gICAgICAgICAgICAodHlwZW9mIHN0cmVhbS5nZXRDb2xvckRlcHRoID09PSAnZnVuY3Rpb24nXHJcbiAgICAgICAgICAgICAgICA/IHN0cmVhbS5nZXRDb2xvckRlcHRoKCkgPiAyXHJcbiAgICAgICAgICAgICAgICA6IHRydWUpKTtcclxuICAgIH1cclxuICAgIHN0YXRpYyByZWZyZXNoKCkge1xyXG4gICAgICAgIENvbG91cnMuZW5hYmxlZCA9IENvbG91cnMuaXNFbmFibGVkKHByb2Nlc3MgPT09IG51bGwgfHwgcHJvY2VzcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcHJvY2Vzcy5zdGRlcnIpO1xyXG4gICAgICAgIGlmICghdGhpcy5lbmFibGVkKSB7XHJcbiAgICAgICAgICAgIENvbG91cnMucmVzZXQgPSAnJztcclxuICAgICAgICAgICAgQ29sb3Vycy5icmlnaHQgPSAnJztcclxuICAgICAgICAgICAgQ29sb3Vycy5kaW0gPSAnJztcclxuICAgICAgICAgICAgQ29sb3Vycy5yZWQgPSAnJztcclxuICAgICAgICAgICAgQ29sb3Vycy5ncmVlbiA9ICcnO1xyXG4gICAgICAgICAgICBDb2xvdXJzLnllbGxvdyA9ICcnO1xyXG4gICAgICAgICAgICBDb2xvdXJzLmJsdWUgPSAnJztcclxuICAgICAgICAgICAgQ29sb3Vycy5tYWdlbnRhID0gJyc7XHJcbiAgICAgICAgICAgIENvbG91cnMuY3lhbiA9ICcnO1xyXG4gICAgICAgICAgICBDb2xvdXJzLndoaXRlID0gJyc7XHJcbiAgICAgICAgICAgIENvbG91cnMuZ3JleSA9ICcnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgQ29sb3Vycy5yZXNldCA9ICdcXHUwMDFiWzBtJztcclxuICAgICAgICAgICAgQ29sb3Vycy5icmlnaHQgPSAnXFx1MDAxYlsxbSc7XHJcbiAgICAgICAgICAgIENvbG91cnMuZGltID0gJ1xcdTAwMWJbMm0nO1xyXG4gICAgICAgICAgICBDb2xvdXJzLnJlZCA9ICdcXHUwMDFiWzMxbSc7XHJcbiAgICAgICAgICAgIENvbG91cnMuZ3JlZW4gPSAnXFx1MDAxYlszMm0nO1xyXG4gICAgICAgICAgICBDb2xvdXJzLnllbGxvdyA9ICdcXHUwMDFiWzMzbSc7XHJcbiAgICAgICAgICAgIENvbG91cnMuYmx1ZSA9ICdcXHUwMDFiWzM0bSc7XHJcbiAgICAgICAgICAgIENvbG91cnMubWFnZW50YSA9ICdcXHUwMDFiWzM1bSc7XHJcbiAgICAgICAgICAgIENvbG91cnMuY3lhbiA9ICdcXHUwMDFiWzM2bSc7XHJcbiAgICAgICAgICAgIENvbG91cnMud2hpdGUgPSAnXFx1MDAxYlszN20nO1xyXG4gICAgICAgICAgICBDb2xvdXJzLmdyZXkgPSAnXFx1MDAxYls5MG0nO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5leHBvcnRzLkNvbG91cnMgPSBDb2xvdXJzO1xyXG5Db2xvdXJzLmVuYWJsZWQgPSBmYWxzZTtcclxuQ29sb3Vycy5yZXNldCA9ICcnO1xyXG5Db2xvdXJzLmJyaWdodCA9ICcnO1xyXG5Db2xvdXJzLmRpbSA9ICcnO1xyXG5Db2xvdXJzLnJlZCA9ICcnO1xyXG5Db2xvdXJzLmdyZWVuID0gJyc7XHJcbkNvbG91cnMueWVsbG93ID0gJyc7XHJcbkNvbG91cnMuYmx1ZSA9ICcnO1xyXG5Db2xvdXJzLm1hZ2VudGEgPSAnJztcclxuQ29sb3Vycy5jeWFuID0gJyc7XHJcbkNvbG91cnMud2hpdGUgPSAnJztcclxuQ29sb3Vycy5ncmV5ID0gJyc7XHJcbkNvbG91cnMucmVmcmVzaCgpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb2xvdXJzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-logging-utils/build/src/colours.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-logging-utils/build/src/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/google-logging-utils/build/src/index.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\n// Copyright 2024 Google LLC\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     https://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n__exportStar(__webpack_require__(/*! ./logging-utils */ \"(rsc)/./node_modules/google-logging-utils/build/src/logging-utils.js\"), exports);\r\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWxvZ2dpbmctdXRpbHMvYnVpbGQvc3JjL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxtQkFBTyxDQUFDLDZGQUFpQjtBQUN0QyIsInNvdXJjZXMiOlsid2VicGFjazovL2RhbmlzaC1idWRkeS8uL25vZGVfbW9kdWxlcy9nb29nbGUtbG9nZ2luZy11dGlscy9idWlsZC9zcmMvaW5kZXguanM/MWYyZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuLy8gQ29weXJpZ2h0IDIwMjQgR29vZ2xlIExMQ1xyXG4vL1xyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4vL1xyXG4vLyAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4vL1xyXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XHJcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xyXG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcclxufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICBvW2syXSA9IG1ba107XHJcbn0pKTtcclxudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2xvZ2dpbmctdXRpbHNcIiksIGV4cG9ydHMpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-logging-utils/build/src/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-logging-utils/build/src/logging-utils.js":
/*!**********************************************************************!*\
  !*** ./node_modules/google-logging-utils/build/src/logging-utils.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\n// Copyright 2021-2024 Google LLC\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     https://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || (function () {\r\n    var ownKeys = function(o) {\r\n        ownKeys = Object.getOwnPropertyNames || function (o) {\r\n            var ar = [];\r\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\r\n            return ar;\r\n        };\r\n        return ownKeys(o);\r\n    };\r\n    return function (mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\r\n        __setModuleDefault(result, mod);\r\n        return result;\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.env = exports.DebugLogBackendBase = exports.placeholder = exports.AdhocDebugLogger = exports.LogSeverity = void 0;\r\nexports.getNodeBackend = getNodeBackend;\r\nexports.getDebugBackend = getDebugBackend;\r\nexports.getStructuredBackend = getStructuredBackend;\r\nexports.setBackend = setBackend;\r\nexports.log = log;\r\nconst events_1 = __webpack_require__(/*! events */ \"events\");\r\nconst process = __importStar(__webpack_require__(/*! process */ \"process\"));\r\nconst util = __importStar(__webpack_require__(/*! util */ \"util\"));\r\nconst colours_1 = __webpack_require__(/*! ./colours */ \"(rsc)/./node_modules/google-logging-utils/build/src/colours.js\");\r\n// Some functions (as noted) are based on the Node standard library, from\r\n// the following file:\r\n//\r\n// https://github.com/nodejs/node/blob/main/lib/internal/util/debuglog.js\r\n/**\r\n * This module defines an ad-hoc debug logger for Google Cloud Platform\r\n * client libraries in Node. An ad-hoc debug logger is a tool which lets\r\n * users use an external, unified interface (in this case, environment\r\n * variables) to determine what logging they want to see at runtime. This\r\n * isn't necessarily fed into the console, but is meant to be under the\r\n * control of the user. The kind of logging that will be produced by this\r\n * is more like \"call retry happened\", not \"events you'd want to record\r\n * in Cloud Logger\".\r\n *\r\n * More for Googlers implementing libraries with it:\r\n * go/cloud-client-logging-design\r\n */\r\n/**\r\n * Possible log levels. These are a subset of Cloud Observability levels.\r\n * https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#LogSeverity\r\n */\r\nvar LogSeverity;\r\n(function (LogSeverity) {\r\n    LogSeverity[\"DEFAULT\"] = \"DEFAULT\";\r\n    LogSeverity[\"DEBUG\"] = \"DEBUG\";\r\n    LogSeverity[\"INFO\"] = \"INFO\";\r\n    LogSeverity[\"WARNING\"] = \"WARNING\";\r\n    LogSeverity[\"ERROR\"] = \"ERROR\";\r\n})(LogSeverity || (exports.LogSeverity = LogSeverity = {}));\r\n/**\r\n * Our logger instance. This actually contains the meat of dealing\r\n * with log lines, including EventEmitter. This contains the function\r\n * that will be passed back to users of the package.\r\n */\r\nclass AdhocDebugLogger extends events_1.EventEmitter {\r\n    /**\r\n     * @param upstream The backend will pass a function that will be\r\n     *   called whenever our logger function is invoked.\r\n     */\r\n    constructor(namespace, upstream) {\r\n        super();\r\n        this.namespace = namespace;\r\n        this.upstream = upstream;\r\n        this.func = Object.assign(this.invoke.bind(this), {\r\n            // Also add an instance pointer back to us.\r\n            instance: this,\r\n            // And pull over the EventEmitter functionality.\r\n            on: (event, listener) => this.on(event, listener),\r\n        });\r\n        // Convenience methods for log levels.\r\n        this.func.debug = (...args) => this.invokeSeverity(LogSeverity.DEBUG, ...args);\r\n        this.func.info = (...args) => this.invokeSeverity(LogSeverity.INFO, ...args);\r\n        this.func.warn = (...args) => this.invokeSeverity(LogSeverity.WARNING, ...args);\r\n        this.func.error = (...args) => this.invokeSeverity(LogSeverity.ERROR, ...args);\r\n        this.func.sublog = (namespace) => log(namespace, this.func);\r\n    }\r\n    invoke(fields, ...args) {\r\n        // Push out any upstream logger first.\r\n        if (this.upstream) {\r\n            try {\r\n                this.upstream(fields, ...args);\r\n            }\r\n            catch (e) {\r\n                // Swallow exceptions to avoid interfering with other logging.\r\n            }\r\n        }\r\n        // Emit sink events.\r\n        try {\r\n            this.emit('log', fields, args);\r\n        }\r\n        catch (e) {\r\n            // Swallow exceptions to avoid interfering with other logging.\r\n        }\r\n    }\r\n    invokeSeverity(severity, ...args) {\r\n        this.invoke({ severity }, ...args);\r\n    }\r\n}\r\nexports.AdhocDebugLogger = AdhocDebugLogger;\r\n/**\r\n * This can be used in place of a real logger while waiting for Promises or disabling logging.\r\n */\r\nexports.placeholder = new AdhocDebugLogger('', () => { }).func;\r\n/**\r\n * The base class for debug logging backends. It's possible to use this, but the\r\n * same non-guarantees above still apply (unstable interface, etc).\r\n *\r\n * @private\r\n * @internal\r\n */\r\nclass DebugLogBackendBase {\r\n    constructor() {\r\n        var _a;\r\n        this.cached = new Map();\r\n        this.filters = [];\r\n        this.filtersSet = false;\r\n        // Look for the Node config variable for what systems to enable. We'll store\r\n        // these for the log method below, which will call setFilters() once.\r\n        let nodeFlag = (_a = process.env[exports.env.nodeEnables]) !== null && _a !== void 0 ? _a : '*';\r\n        if (nodeFlag === 'all') {\r\n            nodeFlag = '*';\r\n        }\r\n        this.filters = nodeFlag.split(',');\r\n    }\r\n    log(namespace, fields, ...args) {\r\n        try {\r\n            if (!this.filtersSet) {\r\n                this.setFilters();\r\n                this.filtersSet = true;\r\n            }\r\n            let logger = this.cached.get(namespace);\r\n            if (!logger) {\r\n                logger = this.makeLogger(namespace);\r\n                this.cached.set(namespace, logger);\r\n            }\r\n            logger(fields, ...args);\r\n        }\r\n        catch (e) {\r\n            // Silently ignore all errors; we don't want them to interfere with\r\n            // the user's running app.\r\n            // e;\r\n            console.error(e);\r\n        }\r\n    }\r\n}\r\nexports.DebugLogBackendBase = DebugLogBackendBase;\r\n// The basic backend. This one definitely works, but it's less feature-filled.\r\n//\r\n// Rather than using util.debuglog, this implements the same basic logic directly.\r\n// The reason for this decision is that debuglog checks the value of the\r\n// NODE_DEBUG environment variable before any user code runs; we therefore\r\n// can't pipe our own enables into it (and util.debuglog will never print unless\r\n// the user duplicates it into NODE_DEBUG, which isn't reasonable).\r\n//\r\nclass NodeBackend extends DebugLogBackendBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        // Default to allowing all systems, since we gate earlier based on whether the\r\n        // variable is empty.\r\n        this.enabledRegexp = /.*/g;\r\n    }\r\n    isEnabled(namespace) {\r\n        return this.enabledRegexp.test(namespace);\r\n    }\r\n    makeLogger(namespace) {\r\n        if (!this.enabledRegexp.test(namespace)) {\r\n            return () => { };\r\n        }\r\n        return (fields, ...args) => {\r\n            var _a;\r\n            // TODO: `fields` needs to be turned into a string here, one way or another.\r\n            const nscolour = `${colours_1.Colours.green}${namespace}${colours_1.Colours.reset}`;\r\n            const pid = `${colours_1.Colours.yellow}${process.pid}${colours_1.Colours.reset}`;\r\n            let level;\r\n            switch (fields.severity) {\r\n                case LogSeverity.ERROR:\r\n                    level = `${colours_1.Colours.red}${fields.severity}${colours_1.Colours.reset}`;\r\n                    break;\r\n                case LogSeverity.INFO:\r\n                    level = `${colours_1.Colours.magenta}${fields.severity}${colours_1.Colours.reset}`;\r\n                    break;\r\n                case LogSeverity.WARNING:\r\n                    level = `${colours_1.Colours.yellow}${fields.severity}${colours_1.Colours.reset}`;\r\n                    break;\r\n                default:\r\n                    level = (_a = fields.severity) !== null && _a !== void 0 ? _a : LogSeverity.DEFAULT;\r\n                    break;\r\n            }\r\n            const msg = util.formatWithOptions({ colors: colours_1.Colours.enabled }, ...args);\r\n            const filteredFields = Object.assign({}, fields);\r\n            delete filteredFields.severity;\r\n            const fieldsJson = Object.getOwnPropertyNames(filteredFields).length\r\n                ? JSON.stringify(filteredFields)\r\n                : '';\r\n            const fieldsColour = fieldsJson\r\n                ? `${colours_1.Colours.grey}${fieldsJson}${colours_1.Colours.reset}`\r\n                : '';\r\n            console.error('%s [%s|%s] %s%s', pid, nscolour, level, msg, fieldsJson ? ` ${fieldsColour}` : '');\r\n        };\r\n    }\r\n    // Regexp patterns below are from here:\r\n    // https://github.com/nodejs/node/blob/c0aebed4b3395bd65d54b18d1fd00f071002ac20/lib/internal/util/debuglog.js#L36\r\n    setFilters() {\r\n        const totalFilters = this.filters.join(',');\r\n        const regexp = totalFilters\r\n            .replace(/[|\\\\{}()[\\]^$+?.]/g, '\\\\$&')\r\n            .replace(/\\*/g, '.*')\r\n            .replace(/,/g, '$|^');\r\n        this.enabledRegexp = new RegExp(`^${regexp}$`, 'i');\r\n    }\r\n}\r\n/**\r\n * @returns A backend based on Node util.debuglog; this is the default.\r\n */\r\nfunction getNodeBackend() {\r\n    return new NodeBackend();\r\n}\r\nclass DebugBackend extends DebugLogBackendBase {\r\n    constructor(pkg) {\r\n        super();\r\n        this.debugPkg = pkg;\r\n    }\r\n    makeLogger(namespace) {\r\n        const debugLogger = this.debugPkg(namespace);\r\n        return (fields, ...args) => {\r\n            // TODO: `fields` needs to be turned into a string here.\r\n            debugLogger(args[0], ...args.slice(1));\r\n        };\r\n    }\r\n    setFilters() {\r\n        var _a;\r\n        const existingFilters = (_a = process.env['NODE_DEBUG']) !== null && _a !== void 0 ? _a : '';\r\n        process.env['NODE_DEBUG'] = `${existingFilters}${existingFilters ? ',' : ''}${this.filters.join(',')}`;\r\n    }\r\n}\r\n/**\r\n * Creates a \"debug\" package backend. The user must call require('debug') and pass\r\n * the resulting object to this function.\r\n *\r\n * ```\r\n *  setBackend(getDebugBackend(require('debug')))\r\n * ```\r\n *\r\n * https://www.npmjs.com/package/debug\r\n *\r\n * Note: Google does not explicitly endorse or recommend this package; it's just\r\n * being provided as an option.\r\n *\r\n * @returns A backend based on the npm \"debug\" package.\r\n */\r\nfunction getDebugBackend(debugPkg) {\r\n    return new DebugBackend(debugPkg);\r\n}\r\n/**\r\n * This pretty much works like the Node logger, but it outputs structured\r\n * logging JSON matching Google Cloud's ingestion specs. Rather than handling\r\n * its own output, it wraps another backend. The passed backend must be a subclass\r\n * of `DebugLogBackendBase` (any of the backends exposed by this package will work).\r\n */\r\nclass StructuredBackend extends DebugLogBackendBase {\r\n    constructor(upstream) {\r\n        var _a;\r\n        super();\r\n        this.upstream = (_a = upstream) !== null && _a !== void 0 ? _a : undefined;\r\n    }\r\n    makeLogger(namespace) {\r\n        var _a;\r\n        const debugLogger = (_a = this.upstream) === null || _a === void 0 ? void 0 : _a.makeLogger(namespace);\r\n        return (fields, ...args) => {\r\n            var _a;\r\n            const severity = (_a = fields.severity) !== null && _a !== void 0 ? _a : LogSeverity.INFO;\r\n            const json = Object.assign({\r\n                severity,\r\n                message: util.format(...args),\r\n            }, fields);\r\n            const jsonString = JSON.stringify(json);\r\n            if (debugLogger) {\r\n                debugLogger(fields, jsonString);\r\n            }\r\n            else {\r\n                console.log('%s', jsonString);\r\n            }\r\n        };\r\n    }\r\n    setFilters() {\r\n        var _a;\r\n        (_a = this.upstream) === null || _a === void 0 ? void 0 : _a.setFilters();\r\n    }\r\n}\r\n/**\r\n * Creates a \"structured logging\" backend. This pretty much works like the\r\n * Node logger, but it outputs structured logging JSON matching Google\r\n * Cloud's ingestion specs instead of plain text.\r\n *\r\n * ```\r\n *  setBackend(getStructuredBackend())\r\n * ```\r\n *\r\n * @param upstream If you want to use something besides the Node backend to\r\n *   write the actual log lines into, pass that here.\r\n * @returns A backend based on Google Cloud structured logging.\r\n */\r\nfunction getStructuredBackend(upstream) {\r\n    return new StructuredBackend(upstream);\r\n}\r\n/**\r\n * The environment variables that we standardized on, for all ad-hoc logging.\r\n */\r\nexports.env = {\r\n    /**\r\n     * Filter wildcards specific to the Node syntax, and similar to the built-in\r\n     * utils.debuglog() environment variable. If missing, disables logging.\r\n     */\r\n    nodeEnables: 'GOOGLE_SDK_NODE_LOGGING',\r\n};\r\n// Keep a copy of all namespaced loggers so users can reliably .on() them.\r\n// Note that these cached functions will need to deal with changes in the backend.\r\nconst loggerCache = new Map();\r\n// Our current global backend. This might be:\r\nlet cachedBackend = undefined;\r\n/**\r\n * Set the backend to use for our log output.\r\n * - A backend object\r\n * - null to disable logging\r\n * - undefined for \"nothing yet\", defaults to the Node backend\r\n *\r\n * @param backend Results from one of the get*Backend() functions.\r\n */\r\nfunction setBackend(backend) {\r\n    cachedBackend = backend;\r\n    loggerCache.clear();\r\n}\r\n/**\r\n * Creates a logging function. Multiple calls to this with the same namespace\r\n * will produce the same logger, with the same event emitter hooks.\r\n *\r\n * Namespaces can be a simple string (\"system\" name), or a qualified string\r\n * (system:subsystem), which can be used for filtering, or for \"system:*\".\r\n *\r\n * @param namespace The namespace, a descriptive text string.\r\n * @returns A function you can call that works similar to console.log().\r\n */\r\nfunction log(namespace, parent) {\r\n    // If the enable environment variable isn't set, do nothing. The user\r\n    // can still choose to set a backend of their choice using the manual\r\n    // `setBackend()`.\r\n    if (!cachedBackend) {\r\n        const enablesFlag = process.env[exports.env.nodeEnables];\r\n        if (!enablesFlag) {\r\n            return exports.placeholder;\r\n        }\r\n    }\r\n    // This might happen mostly if the typings are dropped in a user's code,\r\n    // or if they're calling from JavaScript.\r\n    if (!namespace) {\r\n        return exports.placeholder;\r\n    }\r\n    // Handle sub-loggers.\r\n    if (parent) {\r\n        namespace = `${parent.instance.namespace}:${namespace}`;\r\n    }\r\n    // Reuse loggers so things like event sinks are persistent.\r\n    const existing = loggerCache.get(namespace);\r\n    if (existing) {\r\n        return existing.func;\r\n    }\r\n    // Do we have a backend yet?\r\n    if (cachedBackend === null) {\r\n        // Explicitly disabled.\r\n        return exports.placeholder;\r\n    }\r\n    else if (cachedBackend === undefined) {\r\n        // One hasn't been made yet, so default to Node.\r\n        cachedBackend = getNodeBackend();\r\n    }\r\n    // The logger is further wrapped so we can handle the backend changing out.\r\n    const logger = (() => {\r\n        let previousBackend = undefined;\r\n        const newLogger = new AdhocDebugLogger(namespace, (fields, ...args) => {\r\n            if (previousBackend !== cachedBackend) {\r\n                // Did the user pass a custom backend?\r\n                if (cachedBackend === null) {\r\n                    // Explicitly disabled.\r\n                    return;\r\n                }\r\n                else if (cachedBackend === undefined) {\r\n                    // One hasn't been made yet, so default to Node.\r\n                    cachedBackend = getNodeBackend();\r\n                }\r\n                previousBackend = cachedBackend;\r\n            }\r\n            cachedBackend === null || cachedBackend === void 0 ? void 0 : cachedBackend.log(namespace, fields, ...args);\r\n        });\r\n        return newLogger;\r\n    })();\r\n    loggerCache.set(namespace, logger);\r\n    return logger.func;\r\n}\r\n//# sourceMappingURL=logging-utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-logging-utils/build/src/logging-utils.js\n");

/***/ })

};
;