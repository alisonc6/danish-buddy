"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/object-hash";
exports.ids = ["vendor-chunks/object-hash"];
exports.modules = {

/***/ "(rsc)/./node_modules/object-hash/index.js":
/*!*******************************************!*\
  !*** ./node_modules/object-hash/index.js ***!
  \*******************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\r\n\r\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\r\n\r\n/**\r\n * Exported function\r\n *\r\n * Options:\r\n *\r\n *  - `algorithm` hash algo to be used by this instance: *'sha1', 'md5'\r\n *  - `excludeValues` {true|*false} hash object keys, values ignored\r\n *  - `encoding` hash encoding, supports 'buffer', '*hex', 'binary', 'base64'\r\n *  - `ignoreUnknown` {true|*false} ignore unknown object types\r\n *  - `replacer` optional function that replaces values before hashing\r\n *  - `respectFunctionProperties` {*true|false} consider function properties when hashing\r\n *  - `respectFunctionNames` {*true|false} consider 'name' property of functions for hashing\r\n *  - `respectType` {*true|false} Respect special properties (prototype, constructor)\r\n *    when hashing to distinguish between types\r\n *  - `unorderedArrays` {true|*false} Sort all arrays before hashing\r\n *  - `unorderedSets` {*true|false} Sort `Set` and `Map` instances before hashing\r\n *  * = default\r\n *\r\n * @param {object} object value to hash\r\n * @param {object} options hashing options\r\n * @return {string} hash value\r\n * @api public\r\n */\r\nexports = module.exports = objectHash;\r\n\r\nfunction objectHash(object, options){\r\n  options = applyDefaults(object, options);\r\n\r\n  return hash(object, options);\r\n}\r\n\r\n/**\r\n * Exported sugar methods\r\n *\r\n * @param {object} object value to hash\r\n * @return {string} hash value\r\n * @api public\r\n */\r\nexports.sha1 = function(object){\r\n  return objectHash(object);\r\n};\r\nexports.keys = function(object){\r\n  return objectHash(object, {excludeValues: true, algorithm: 'sha1', encoding: 'hex'});\r\n};\r\nexports.MD5 = function(object){\r\n  return objectHash(object, {algorithm: 'md5', encoding: 'hex'});\r\n};\r\nexports.keysMD5 = function(object){\r\n  return objectHash(object, {algorithm: 'md5', encoding: 'hex', excludeValues: true});\r\n};\r\n\r\n// Internals\r\nvar hashes = crypto.getHashes ? crypto.getHashes().slice() : ['sha1', 'md5'];\r\nhashes.push('passthrough');\r\nvar encodings = ['buffer', 'hex', 'binary', 'base64'];\r\n\r\nfunction applyDefaults(object, sourceOptions){\r\n  sourceOptions = sourceOptions || {};\r\n\r\n  // create a copy rather than mutating\r\n  var options = {};\r\n  options.algorithm = sourceOptions.algorithm || 'sha1';\r\n  options.encoding = sourceOptions.encoding || 'hex';\r\n  options.excludeValues = sourceOptions.excludeValues ? true : false;\r\n  options.algorithm = options.algorithm.toLowerCase();\r\n  options.encoding = options.encoding.toLowerCase();\r\n  options.ignoreUnknown = sourceOptions.ignoreUnknown !== true ? false : true; // default to false\r\n  options.respectType = sourceOptions.respectType === false ? false : true; // default to true\r\n  options.respectFunctionNames = sourceOptions.respectFunctionNames === false ? false : true;\r\n  options.respectFunctionProperties = sourceOptions.respectFunctionProperties === false ? false : true;\r\n  options.unorderedArrays = sourceOptions.unorderedArrays !== true ? false : true; // default to false\r\n  options.unorderedSets = sourceOptions.unorderedSets === false ? false : true; // default to false\r\n  options.unorderedObjects = sourceOptions.unorderedObjects === false ? false : true; // default to true\r\n  options.replacer = sourceOptions.replacer || undefined;\r\n  options.excludeKeys = sourceOptions.excludeKeys || undefined;\r\n\r\n  if(typeof object === 'undefined') {\r\n    throw new Error('Object argument required.');\r\n  }\r\n\r\n  // if there is a case-insensitive match in the hashes list, accept it\r\n  // (i.e. SHA256 for sha256)\r\n  for (var i = 0; i < hashes.length; ++i) {\r\n    if (hashes[i].toLowerCase() === options.algorithm.toLowerCase()) {\r\n      options.algorithm = hashes[i];\r\n    }\r\n  }\r\n\r\n  if(hashes.indexOf(options.algorithm) === -1){\r\n    throw new Error('Algorithm \"' + options.algorithm + '\"  not supported. ' +\r\n      'supported values: ' + hashes.join(', '));\r\n  }\r\n\r\n  if(encodings.indexOf(options.encoding) === -1 &&\r\n     options.algorithm !== 'passthrough'){\r\n    throw new Error('Encoding \"' + options.encoding + '\"  not supported. ' +\r\n      'supported values: ' + encodings.join(', '));\r\n  }\r\n\r\n  return options;\r\n}\r\n\r\n/** Check if the given function is a native function */\r\nfunction isNativeFunction(f) {\r\n  if ((typeof f) !== 'function') {\r\n    return false;\r\n  }\r\n  var exp = /^function\\s+\\w*\\s*\\(\\s*\\)\\s*{\\s+\\[native code\\]\\s+}$/i;\r\n  return exp.exec(Function.prototype.toString.call(f)) != null;\r\n}\r\n\r\nfunction hash(object, options) {\r\n  var hashingStream;\r\n\r\n  if (options.algorithm !== 'passthrough') {\r\n    hashingStream = crypto.createHash(options.algorithm);\r\n  } else {\r\n    hashingStream = new PassThrough();\r\n  }\r\n\r\n  if (typeof hashingStream.write === 'undefined') {\r\n    hashingStream.write = hashingStream.update;\r\n    hashingStream.end   = hashingStream.update;\r\n  }\r\n\r\n  var hasher = typeHasher(options, hashingStream);\r\n  hasher.dispatch(object);\r\n  if (!hashingStream.update) {\r\n    hashingStream.end('');\r\n  }\r\n\r\n  if (hashingStream.digest) {\r\n    return hashingStream.digest(options.encoding === 'buffer' ? undefined : options.encoding);\r\n  }\r\n\r\n  var buf = hashingStream.read();\r\n  if (options.encoding === 'buffer') {\r\n    return buf;\r\n  }\r\n\r\n  return buf.toString(options.encoding);\r\n}\r\n\r\n/**\r\n * Expose streaming API\r\n *\r\n * @param {object} object  Value to serialize\r\n * @param {object} options  Options, as for hash()\r\n * @param {object} stream  A stream to write the serializiation to\r\n * @api public\r\n */\r\nexports.writeToStream = function(object, options, stream) {\r\n  if (typeof stream === 'undefined') {\r\n    stream = options;\r\n    options = {};\r\n  }\r\n\r\n  options = applyDefaults(object, options);\r\n\r\n  return typeHasher(options, stream).dispatch(object);\r\n};\r\n\r\nfunction typeHasher(options, writeTo, context){\r\n  context = context || [];\r\n  var write = function(str) {\r\n    if (writeTo.update) {\r\n      return writeTo.update(str, 'utf8');\r\n    } else {\r\n      return writeTo.write(str, 'utf8');\r\n    }\r\n  };\r\n\r\n  return {\r\n    dispatch: function(value){\r\n      if (options.replacer) {\r\n        value = options.replacer(value);\r\n      }\r\n\r\n      var type = typeof value;\r\n      if (value === null) {\r\n        type = 'null';\r\n      }\r\n\r\n      //console.log(\"[DEBUG] Dispatch: \", value, \"->\", type, \" -> \", \"_\" + type);\r\n\r\n      return this['_' + type](value);\r\n    },\r\n    _object: function(object) {\r\n      var pattern = (/\\[object (.*)\\]/i);\r\n      var objString = Object.prototype.toString.call(object);\r\n      var objType = pattern.exec(objString);\r\n      if (!objType) { // object type did not match [object ...]\r\n        objType = 'unknown:[' + objString + ']';\r\n      } else {\r\n        objType = objType[1]; // take only the class name\r\n      }\r\n\r\n      objType = objType.toLowerCase();\r\n\r\n      var objectNumber = null;\r\n\r\n      if ((objectNumber = context.indexOf(object)) >= 0) {\r\n        return this.dispatch('[CIRCULAR:' + objectNumber + ']');\r\n      } else {\r\n        context.push(object);\r\n      }\r\n\r\n      if (typeof Buffer !== 'undefined' && Buffer.isBuffer && Buffer.isBuffer(object)) {\r\n        write('buffer:');\r\n        return write(object);\r\n      }\r\n\r\n      if(objType !== 'object' && objType !== 'function' && objType !== 'asyncfunction') {\r\n        if(this['_' + objType]) {\r\n          this['_' + objType](object);\r\n        } else if (options.ignoreUnknown) {\r\n          return write('[' + objType + ']');\r\n        } else {\r\n          throw new Error('Unknown object type \"' + objType + '\"');\r\n        }\r\n      }else{\r\n        var keys = Object.keys(object);\r\n        if (options.unorderedObjects) {\r\n          keys = keys.sort();\r\n        }\r\n        // Make sure to incorporate special properties, so\r\n        // Types with different prototypes will produce\r\n        // a different hash and objects derived from\r\n        // different functions (`new Foo`, `new Bar`) will\r\n        // produce different hashes.\r\n        // We never do this for native functions since some\r\n        // seem to break because of that.\r\n        if (options.respectType !== false && !isNativeFunction(object)) {\r\n          keys.splice(0, 0, 'prototype', '__proto__', 'constructor');\r\n        }\r\n\r\n        if (options.excludeKeys) {\r\n          keys = keys.filter(function(key) { return !options.excludeKeys(key); });\r\n        }\r\n\r\n        write('object:' + keys.length + ':');\r\n        var self = this;\r\n        return keys.forEach(function(key){\r\n          self.dispatch(key);\r\n          write(':');\r\n          if(!options.excludeValues) {\r\n            self.dispatch(object[key]);\r\n          }\r\n          write(',');\r\n        });\r\n      }\r\n    },\r\n    _array: function(arr, unordered){\r\n      unordered = typeof unordered !== 'undefined' ? unordered :\r\n        options.unorderedArrays !== false; // default to options.unorderedArrays\r\n\r\n      var self = this;\r\n      write('array:' + arr.length + ':');\r\n      if (!unordered || arr.length <= 1) {\r\n        return arr.forEach(function(entry) {\r\n          return self.dispatch(entry);\r\n        });\r\n      }\r\n\r\n      // the unordered case is a little more complicated:\r\n      // since there is no canonical ordering on objects,\r\n      // i.e. {a:1} < {a:2} and {a:1} > {a:2} are both false,\r\n      // we first serialize each entry using a PassThrough stream\r\n      // before sorting.\r\n      // also: we can’t use the same context array for all entries\r\n      // since the order of hashing should *not* matter. instead,\r\n      // we keep track of the additions to a copy of the context array\r\n      // and add all of them to the global context array when we’re done\r\n      var contextAdditions = [];\r\n      var entries = arr.map(function(entry) {\r\n        var strm = new PassThrough();\r\n        var localContext = context.slice(); // make copy\r\n        var hasher = typeHasher(options, strm, localContext);\r\n        hasher.dispatch(entry);\r\n        // take only what was added to localContext and append it to contextAdditions\r\n        contextAdditions = contextAdditions.concat(localContext.slice(context.length));\r\n        return strm.read().toString();\r\n      });\r\n      context = context.concat(contextAdditions);\r\n      entries.sort();\r\n      return this._array(entries, false);\r\n    },\r\n    _date: function(date){\r\n      return write('date:' + date.toJSON());\r\n    },\r\n    _symbol: function(sym){\r\n      return write('symbol:' + sym.toString());\r\n    },\r\n    _error: function(err){\r\n      return write('error:' + err.toString());\r\n    },\r\n    _boolean: function(bool){\r\n      return write('bool:' + bool.toString());\r\n    },\r\n    _string: function(string){\r\n      write('string:' + string.length + ':');\r\n      write(string.toString());\r\n    },\r\n    _function: function(fn){\r\n      write('fn:');\r\n      if (isNativeFunction(fn)) {\r\n        this.dispatch('[native]');\r\n      } else {\r\n        this.dispatch(fn.toString());\r\n      }\r\n\r\n      if (options.respectFunctionNames !== false) {\r\n        // Make sure we can still distinguish native functions\r\n        // by their name, otherwise String and Function will\r\n        // have the same hash\r\n        this.dispatch(\"function-name:\" + String(fn.name));\r\n      }\r\n\r\n      if (options.respectFunctionProperties) {\r\n        this._object(fn);\r\n      }\r\n    },\r\n    _number: function(number){\r\n      return write('number:' + number.toString());\r\n    },\r\n    _xml: function(xml){\r\n      return write('xml:' + xml.toString());\r\n    },\r\n    _null: function() {\r\n      return write('Null');\r\n    },\r\n    _undefined: function() {\r\n      return write('Undefined');\r\n    },\r\n    _regexp: function(regex){\r\n      return write('regex:' + regex.toString());\r\n    },\r\n    _uint8array: function(arr){\r\n      write('uint8array:');\r\n      return this.dispatch(Array.prototype.slice.call(arr));\r\n    },\r\n    _uint8clampedarray: function(arr){\r\n      write('uint8clampedarray:');\r\n      return this.dispatch(Array.prototype.slice.call(arr));\r\n    },\r\n    _int8array: function(arr){\r\n      write('int8array:');\r\n      return this.dispatch(Array.prototype.slice.call(arr));\r\n    },\r\n    _uint16array: function(arr){\r\n      write('uint16array:');\r\n      return this.dispatch(Array.prototype.slice.call(arr));\r\n    },\r\n    _int16array: function(arr){\r\n      write('int16array:');\r\n      return this.dispatch(Array.prototype.slice.call(arr));\r\n    },\r\n    _uint32array: function(arr){\r\n      write('uint32array:');\r\n      return this.dispatch(Array.prototype.slice.call(arr));\r\n    },\r\n    _int32array: function(arr){\r\n      write('int32array:');\r\n      return this.dispatch(Array.prototype.slice.call(arr));\r\n    },\r\n    _float32array: function(arr){\r\n      write('float32array:');\r\n      return this.dispatch(Array.prototype.slice.call(arr));\r\n    },\r\n    _float64array: function(arr){\r\n      write('float64array:');\r\n      return this.dispatch(Array.prototype.slice.call(arr));\r\n    },\r\n    _arraybuffer: function(arr){\r\n      write('arraybuffer:');\r\n      return this.dispatch(new Uint8Array(arr));\r\n    },\r\n    _url: function(url) {\r\n      return write('url:' + url.toString(), 'utf8');\r\n    },\r\n    _map: function(map) {\r\n      write('map:');\r\n      var arr = Array.from(map);\r\n      return this._array(arr, options.unorderedSets !== false);\r\n    },\r\n    _set: function(set) {\r\n      write('set:');\r\n      var arr = Array.from(set);\r\n      return this._array(arr, options.unorderedSets !== false);\r\n    },\r\n    _file: function(file) {\r\n      write('file:');\r\n      return this.dispatch([file.name, file.size, file.type, file.lastModfied]);\r\n    },\r\n    _blob: function() {\r\n      if (options.ignoreUnknown) {\r\n        return write('[blob]');\r\n      }\r\n\r\n      throw Error('Hashing Blob objects is currently not supported\\n' +\r\n        '(see https://github.com/puleos/object-hash/issues/26)\\n' +\r\n        'Use \"options.replacer\" or \"options.ignoreUnknown\"\\n');\r\n    },\r\n    _domwindow: function() { return write('domwindow'); },\r\n    _bigint: function(number){\r\n      return write('bigint:' + number.toString());\r\n    },\r\n    /* Node.js standard native objects */\r\n    _process: function() { return write('process'); },\r\n    _timer: function() { return write('timer'); },\r\n    _pipe: function() { return write('pipe'); },\r\n    _tcp: function() { return write('tcp'); },\r\n    _udp: function() { return write('udp'); },\r\n    _tty: function() { return write('tty'); },\r\n    _statwatcher: function() { return write('statwatcher'); },\r\n    _securecontext: function() { return write('securecontext'); },\r\n    _connection: function() { return write('connection'); },\r\n    _zlib: function() { return write('zlib'); },\r\n    _context: function() { return write('context'); },\r\n    _nodescript: function() { return write('nodescript'); },\r\n    _httpparser: function() { return write('httpparser'); },\r\n    _dataview: function() { return write('dataview'); },\r\n    _signal: function() { return write('signal'); },\r\n    _fsevent: function() { return write('fsevent'); },\r\n    _tlswrap: function() { return write('tlswrap'); },\r\n  };\r\n}\r\n\r\n// Mini-implementation of stream.PassThrough\r\n// We are far from having need for the full implementation, and we can\r\n// make assumptions like \"many writes, then only one final read\"\r\n// and we can ignore encoding specifics\r\nfunction PassThrough() {\r\n  return {\r\n    buf: '',\r\n\r\n    write: function(b) {\r\n      this.buf += b;\r\n    },\r\n\r\n    end: function(b) {\r\n      this.buf += b;\r\n    },\r\n\r\n    read: function() {\r\n      return this.buf;\r\n    }\r\n  };\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/object-hash/index.js\n");

/***/ })

};
;