"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@grpc";
exports.ids = ["vendor-chunks/@grpc"];
exports.modules = {

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/admin.js":
/*!*******************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/admin.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\n/*\r\n * Copyright 2021 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.registerAdminService = registerAdminService;\r\nexports.addAdminServicesToServer = addAdminServicesToServer;\r\nconst registeredAdminServices = [];\r\nfunction registerAdminService(getServiceDefinition, getHandlers) {\r\n    registeredAdminServices.push({ getServiceDefinition, getHandlers });\r\n}\r\nfunction addAdminServicesToServer(server) {\r\n    for (const { getServiceDefinition, getHandlers } of registeredAdminServices) {\r\n        server.addService(getServiceDefinition(), getHandlers());\r\n    }\r\n}\r\n//# sourceMappingURL=admin.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvYWRtaW4uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw0QkFBNEI7QUFDNUIsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQSxtQ0FBbUMsbUNBQW1DO0FBQ3RFO0FBQ0E7QUFDQSxpQkFBaUIsb0NBQW9DO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFuaXNoLWJ1ZGR5Ly4vbm9kZV9tb2R1bGVzL0BncnBjL2dycGMtanMvYnVpbGQvc3JjL2FkbWluLmpzP2ZlMjYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8qXHJcbiAqIENvcHlyaWdodCAyMDIxIGdSUEMgYXV0aG9ycy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqXHJcbiAqL1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMucmVnaXN0ZXJBZG1pblNlcnZpY2UgPSByZWdpc3RlckFkbWluU2VydmljZTtcclxuZXhwb3J0cy5hZGRBZG1pblNlcnZpY2VzVG9TZXJ2ZXIgPSBhZGRBZG1pblNlcnZpY2VzVG9TZXJ2ZXI7XHJcbmNvbnN0IHJlZ2lzdGVyZWRBZG1pblNlcnZpY2VzID0gW107XHJcbmZ1bmN0aW9uIHJlZ2lzdGVyQWRtaW5TZXJ2aWNlKGdldFNlcnZpY2VEZWZpbml0aW9uLCBnZXRIYW5kbGVycykge1xyXG4gICAgcmVnaXN0ZXJlZEFkbWluU2VydmljZXMucHVzaCh7IGdldFNlcnZpY2VEZWZpbml0aW9uLCBnZXRIYW5kbGVycyB9KTtcclxufVxyXG5mdW5jdGlvbiBhZGRBZG1pblNlcnZpY2VzVG9TZXJ2ZXIoc2VydmVyKSB7XHJcbiAgICBmb3IgKGNvbnN0IHsgZ2V0U2VydmljZURlZmluaXRpb24sIGdldEhhbmRsZXJzIH0gb2YgcmVnaXN0ZXJlZEFkbWluU2VydmljZXMpIHtcclxuICAgICAgICBzZXJ2ZXIuYWRkU2VydmljZShnZXRTZXJ2aWNlRGVmaW5pdGlvbigpLCBnZXRIYW5kbGVycygpKTtcclxuICAgIH1cclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hZG1pbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/admin.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/backoff-timeout.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/backoff-timeout.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.BackoffTimeout = void 0;\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\r\nconst TRACER_NAME = 'backoff';\r\nconst INITIAL_BACKOFF_MS = 1000;\r\nconst BACKOFF_MULTIPLIER = 1.6;\r\nconst MAX_BACKOFF_MS = 120000;\r\nconst BACKOFF_JITTER = 0.2;\r\n/**\r\n * Get a number uniformly at random in the range [min, max)\r\n * @param min\r\n * @param max\r\n */\r\nfunction uniformRandom(min, max) {\r\n    return Math.random() * (max - min) + min;\r\n}\r\nclass BackoffTimeout {\r\n    constructor(callback, options) {\r\n        this.callback = callback;\r\n        /**\r\n         * The delay time at the start, and after each reset.\r\n         */\r\n        this.initialDelay = INITIAL_BACKOFF_MS;\r\n        /**\r\n         * The exponential backoff multiplier.\r\n         */\r\n        this.multiplier = BACKOFF_MULTIPLIER;\r\n        /**\r\n         * The maximum delay time\r\n         */\r\n        this.maxDelay = MAX_BACKOFF_MS;\r\n        /**\r\n         * The maximum fraction by which the delay time can randomly vary after\r\n         * applying the multiplier.\r\n         */\r\n        this.jitter = BACKOFF_JITTER;\r\n        /**\r\n         * Indicates whether the timer is currently running.\r\n         */\r\n        this.running = false;\r\n        /**\r\n         * Indicates whether the timer should keep the Node process running if no\r\n         * other async operation is doing so.\r\n         */\r\n        this.hasRef = true;\r\n        /**\r\n         * The time that the currently running timer was started. Only valid if\r\n         * running is true.\r\n         */\r\n        this.startTime = new Date();\r\n        /**\r\n         * The approximate time that the currently running timer will end. Only valid\r\n         * if running is true.\r\n         */\r\n        this.endTime = new Date();\r\n        this.id = BackoffTimeout.getNextId();\r\n        if (options) {\r\n            if (options.initialDelay) {\r\n                this.initialDelay = options.initialDelay;\r\n            }\r\n            if (options.multiplier) {\r\n                this.multiplier = options.multiplier;\r\n            }\r\n            if (options.jitter) {\r\n                this.jitter = options.jitter;\r\n            }\r\n            if (options.maxDelay) {\r\n                this.maxDelay = options.maxDelay;\r\n            }\r\n        }\r\n        this.trace('constructed initialDelay=' + this.initialDelay + ' multiplier=' + this.multiplier + ' jitter=' + this.jitter + ' maxDelay=' + this.maxDelay);\r\n        this.nextDelay = this.initialDelay;\r\n        this.timerId = setTimeout(() => { }, 0);\r\n        clearTimeout(this.timerId);\r\n    }\r\n    static getNextId() {\r\n        return this.nextId++;\r\n    }\r\n    trace(text) {\r\n        logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, '{' + this.id + '} ' + text);\r\n    }\r\n    runTimer(delay) {\r\n        var _a, _b;\r\n        this.trace('runTimer(delay=' + delay + ')');\r\n        this.endTime = this.startTime;\r\n        this.endTime.setMilliseconds(this.endTime.getMilliseconds() + delay);\r\n        clearTimeout(this.timerId);\r\n        this.timerId = setTimeout(() => {\r\n            this.trace('timer fired');\r\n            this.running = false;\r\n            this.callback();\r\n        }, delay);\r\n        if (!this.hasRef) {\r\n            (_b = (_a = this.timerId).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\r\n        }\r\n    }\r\n    /**\r\n     * Call the callback after the current amount of delay time\r\n     */\r\n    runOnce() {\r\n        this.trace('runOnce()');\r\n        this.running = true;\r\n        this.startTime = new Date();\r\n        this.runTimer(this.nextDelay);\r\n        const nextBackoff = Math.min(this.nextDelay * this.multiplier, this.maxDelay);\r\n        const jitterMagnitude = nextBackoff * this.jitter;\r\n        this.nextDelay =\r\n            nextBackoff + uniformRandom(-jitterMagnitude, jitterMagnitude);\r\n    }\r\n    /**\r\n     * Stop the timer. The callback will not be called until `runOnce` is called\r\n     * again.\r\n     */\r\n    stop() {\r\n        this.trace('stop()');\r\n        clearTimeout(this.timerId);\r\n        this.running = false;\r\n    }\r\n    /**\r\n     * Reset the delay time to its initial value. If the timer is still running,\r\n     * retroactively apply that reset to the current timer.\r\n     */\r\n    reset() {\r\n        this.trace('reset() running=' + this.running);\r\n        this.nextDelay = this.initialDelay;\r\n        if (this.running) {\r\n            const now = new Date();\r\n            const newEndTime = this.startTime;\r\n            newEndTime.setMilliseconds(newEndTime.getMilliseconds() + this.nextDelay);\r\n            clearTimeout(this.timerId);\r\n            if (now < newEndTime) {\r\n                this.runTimer(newEndTime.getTime() - now.getTime());\r\n            }\r\n            else {\r\n                this.running = false;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Check whether the timer is currently running.\r\n     */\r\n    isRunning() {\r\n        return this.running;\r\n    }\r\n    /**\r\n     * Set that while the timer is running, it should keep the Node process\r\n     * running.\r\n     */\r\n    ref() {\r\n        var _a, _b;\r\n        this.hasRef = true;\r\n        (_b = (_a = this.timerId).ref) === null || _b === void 0 ? void 0 : _b.call(_a);\r\n    }\r\n    /**\r\n     * Set that while the timer is running, it should not keep the Node process\r\n     * running.\r\n     */\r\n    unref() {\r\n        var _a, _b;\r\n        this.hasRef = false;\r\n        (_b = (_a = this.timerId).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\r\n    }\r\n    /**\r\n     * Get the approximate timestamp of when the timer will fire. Only valid if\r\n     * this.isRunning() is true.\r\n     */\r\n    getEndTime() {\r\n        return this.endTime;\r\n    }\r\n}\r\nexports.BackoffTimeout = BackoffTimeout;\r\nBackoffTimeout.nextId = 0;\r\n//# sourceMappingURL=backoff-timeout.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/backoff-timeout.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/call-credentials.js":
/*!******************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/call-credentials.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.CallCredentials = void 0;\r\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/metadata.js\");\r\nfunction isCurrentOauth2Client(client) {\r\n    return ('getRequestHeaders' in client &&\r\n        typeof client.getRequestHeaders === 'function');\r\n}\r\n/**\r\n * A class that represents a generic method of adding authentication-related\r\n * metadata on a per-request basis.\r\n */\r\nclass CallCredentials {\r\n    /**\r\n     * Creates a new CallCredentials object from a given function that generates\r\n     * Metadata objects.\r\n     * @param metadataGenerator A function that accepts a set of options, and\r\n     * generates a Metadata object based on these options, which is passed back\r\n     * to the caller via a supplied (err, metadata) callback.\r\n     */\r\n    static createFromMetadataGenerator(metadataGenerator) {\r\n        return new SingleCallCredentials(metadataGenerator);\r\n    }\r\n    /**\r\n     * Create a gRPC credential from a Google credential object.\r\n     * @param googleCredentials The authentication client to use.\r\n     * @return The resulting CallCredentials object.\r\n     */\r\n    static createFromGoogleCredential(googleCredentials) {\r\n        return CallCredentials.createFromMetadataGenerator((options, callback) => {\r\n            let getHeaders;\r\n            if (isCurrentOauth2Client(googleCredentials)) {\r\n                getHeaders = googleCredentials.getRequestHeaders(options.service_url);\r\n            }\r\n            else {\r\n                getHeaders = new Promise((resolve, reject) => {\r\n                    googleCredentials.getRequestMetadata(options.service_url, (err, headers) => {\r\n                        if (err) {\r\n                            reject(err);\r\n                            return;\r\n                        }\r\n                        if (!headers) {\r\n                            reject(new Error('Headers not set by metadata plugin'));\r\n                            return;\r\n                        }\r\n                        resolve(headers);\r\n                    });\r\n                });\r\n            }\r\n            getHeaders.then(headers => {\r\n                const metadata = new metadata_1.Metadata();\r\n                for (const key of Object.keys(headers)) {\r\n                    metadata.add(key, headers[key]);\r\n                }\r\n                callback(null, metadata);\r\n            }, err => {\r\n                callback(err);\r\n            });\r\n        });\r\n    }\r\n    static createEmpty() {\r\n        return new EmptyCallCredentials();\r\n    }\r\n}\r\nexports.CallCredentials = CallCredentials;\r\nclass ComposedCallCredentials extends CallCredentials {\r\n    constructor(creds) {\r\n        super();\r\n        this.creds = creds;\r\n    }\r\n    async generateMetadata(options) {\r\n        const base = new metadata_1.Metadata();\r\n        const generated = await Promise.all(this.creds.map(cred => cred.generateMetadata(options)));\r\n        for (const gen of generated) {\r\n            base.merge(gen);\r\n        }\r\n        return base;\r\n    }\r\n    compose(other) {\r\n        return new ComposedCallCredentials(this.creds.concat([other]));\r\n    }\r\n    _equals(other) {\r\n        if (this === other) {\r\n            return true;\r\n        }\r\n        if (other instanceof ComposedCallCredentials) {\r\n            return this.creds.every((value, index) => value._equals(other.creds[index]));\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\nclass SingleCallCredentials extends CallCredentials {\r\n    constructor(metadataGenerator) {\r\n        super();\r\n        this.metadataGenerator = metadataGenerator;\r\n    }\r\n    generateMetadata(options) {\r\n        return new Promise((resolve, reject) => {\r\n            this.metadataGenerator(options, (err, metadata) => {\r\n                if (metadata !== undefined) {\r\n                    resolve(metadata);\r\n                }\r\n                else {\r\n                    reject(err);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    compose(other) {\r\n        return new ComposedCallCredentials([this, other]);\r\n    }\r\n    _equals(other) {\r\n        if (this === other) {\r\n            return true;\r\n        }\r\n        if (other instanceof SingleCallCredentials) {\r\n            return this.metadataGenerator === other.metadataGenerator;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\nclass EmptyCallCredentials extends CallCredentials {\r\n    generateMetadata(options) {\r\n        return Promise.resolve(new metadata_1.Metadata());\r\n    }\r\n    compose(other) {\r\n        return other;\r\n    }\r\n    _equals(other) {\r\n        return other instanceof EmptyCallCredentials;\r\n    }\r\n}\r\n//# sourceMappingURL=call-credentials.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/call-credentials.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/call-interface.js":
/*!****************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/call-interface.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\n/*\r\n * Copyright 2022 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.InterceptingListenerImpl = void 0;\r\nexports.isInterceptingListener = isInterceptingListener;\r\nfunction isInterceptingListener(listener) {\r\n    return (listener.onReceiveMetadata !== undefined &&\r\n        listener.onReceiveMetadata.length === 1);\r\n}\r\nclass InterceptingListenerImpl {\r\n    constructor(listener, nextListener) {\r\n        this.listener = listener;\r\n        this.nextListener = nextListener;\r\n        this.processingMetadata = false;\r\n        this.hasPendingMessage = false;\r\n        this.processingMessage = false;\r\n        this.pendingStatus = null;\r\n    }\r\n    processPendingMessage() {\r\n        if (this.hasPendingMessage) {\r\n            this.nextListener.onReceiveMessage(this.pendingMessage);\r\n            this.pendingMessage = null;\r\n            this.hasPendingMessage = false;\r\n        }\r\n    }\r\n    processPendingStatus() {\r\n        if (this.pendingStatus) {\r\n            this.nextListener.onReceiveStatus(this.pendingStatus);\r\n        }\r\n    }\r\n    onReceiveMetadata(metadata) {\r\n        this.processingMetadata = true;\r\n        this.listener.onReceiveMetadata(metadata, metadata => {\r\n            this.processingMetadata = false;\r\n            this.nextListener.onReceiveMetadata(metadata);\r\n            this.processPendingMessage();\r\n            this.processPendingStatus();\r\n        });\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    onReceiveMessage(message) {\r\n        /* If this listener processes messages asynchronously, the last message may\r\n         * be reordered with respect to the status */\r\n        this.processingMessage = true;\r\n        this.listener.onReceiveMessage(message, msg => {\r\n            this.processingMessage = false;\r\n            if (this.processingMetadata) {\r\n                this.pendingMessage = msg;\r\n                this.hasPendingMessage = true;\r\n            }\r\n            else {\r\n                this.nextListener.onReceiveMessage(msg);\r\n                this.processPendingStatus();\r\n            }\r\n        });\r\n    }\r\n    onReceiveStatus(status) {\r\n        this.listener.onReceiveStatus(status, processedStatus => {\r\n            if (this.processingMetadata || this.processingMessage) {\r\n                this.pendingStatus = processedStatus;\r\n            }\r\n            else {\r\n                this.nextListener.onReceiveStatus(processedStatus);\r\n            }\r\n        });\r\n    }\r\n}\r\nexports.InterceptingListenerImpl = InterceptingListenerImpl;\r\n//# sourceMappingURL=call-interface.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvY2FsbC1pbnRlcmZhY2UuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQ0FBZ0M7QUFDaEMsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYW5pc2gtYnVkZHkvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvY2FsbC1pbnRlcmZhY2UuanM/OWY0OSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuLypcclxuICogQ29weXJpZ2h0IDIwMjIgZ1JQQyBhdXRob3JzLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICpcclxuICovXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5JbnRlcmNlcHRpbmdMaXN0ZW5lckltcGwgPSB2b2lkIDA7XHJcbmV4cG9ydHMuaXNJbnRlcmNlcHRpbmdMaXN0ZW5lciA9IGlzSW50ZXJjZXB0aW5nTGlzdGVuZXI7XHJcbmZ1bmN0aW9uIGlzSW50ZXJjZXB0aW5nTGlzdGVuZXIobGlzdGVuZXIpIHtcclxuICAgIHJldHVybiAobGlzdGVuZXIub25SZWNlaXZlTWV0YWRhdGEgIT09IHVuZGVmaW5lZCAmJlxyXG4gICAgICAgIGxpc3RlbmVyLm9uUmVjZWl2ZU1ldGFkYXRhLmxlbmd0aCA9PT0gMSk7XHJcbn1cclxuY2xhc3MgSW50ZXJjZXB0aW5nTGlzdGVuZXJJbXBsIHtcclxuICAgIGNvbnN0cnVjdG9yKGxpc3RlbmVyLCBuZXh0TGlzdGVuZXIpIHtcclxuICAgICAgICB0aGlzLmxpc3RlbmVyID0gbGlzdGVuZXI7XHJcbiAgICAgICAgdGhpcy5uZXh0TGlzdGVuZXIgPSBuZXh0TGlzdGVuZXI7XHJcbiAgICAgICAgdGhpcy5wcm9jZXNzaW5nTWV0YWRhdGEgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmhhc1BlbmRpbmdNZXNzYWdlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5wcm9jZXNzaW5nTWVzc2FnZSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMucGVuZGluZ1N0YXR1cyA9IG51bGw7XHJcbiAgICB9XHJcbiAgICBwcm9jZXNzUGVuZGluZ01lc3NhZ2UoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaGFzUGVuZGluZ01lc3NhZ2UpIHtcclxuICAgICAgICAgICAgdGhpcy5uZXh0TGlzdGVuZXIub25SZWNlaXZlTWVzc2FnZSh0aGlzLnBlbmRpbmdNZXNzYWdlKTtcclxuICAgICAgICAgICAgdGhpcy5wZW5kaW5nTWVzc2FnZSA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuaGFzUGVuZGluZ01lc3NhZ2UgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBwcm9jZXNzUGVuZGluZ1N0YXR1cygpIHtcclxuICAgICAgICBpZiAodGhpcy5wZW5kaW5nU3RhdHVzKSB7XHJcbiAgICAgICAgICAgIHRoaXMubmV4dExpc3RlbmVyLm9uUmVjZWl2ZVN0YXR1cyh0aGlzLnBlbmRpbmdTdGF0dXMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIG9uUmVjZWl2ZU1ldGFkYXRhKG1ldGFkYXRhKSB7XHJcbiAgICAgICAgdGhpcy5wcm9jZXNzaW5nTWV0YWRhdGEgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMubGlzdGVuZXIub25SZWNlaXZlTWV0YWRhdGEobWV0YWRhdGEsIG1ldGFkYXRhID0+IHtcclxuICAgICAgICAgICAgdGhpcy5wcm9jZXNzaW5nTWV0YWRhdGEgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5uZXh0TGlzdGVuZXIub25SZWNlaXZlTWV0YWRhdGEobWV0YWRhdGEpO1xyXG4gICAgICAgICAgICB0aGlzLnByb2Nlc3NQZW5kaW5nTWVzc2FnZSgpO1xyXG4gICAgICAgICAgICB0aGlzLnByb2Nlc3NQZW5kaW5nU3RhdHVzKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxyXG4gICAgb25SZWNlaXZlTWVzc2FnZShtZXNzYWdlKSB7XHJcbiAgICAgICAgLyogSWYgdGhpcyBsaXN0ZW5lciBwcm9jZXNzZXMgbWVzc2FnZXMgYXN5bmNocm9ub3VzbHksIHRoZSBsYXN0IG1lc3NhZ2UgbWF5XHJcbiAgICAgICAgICogYmUgcmVvcmRlcmVkIHdpdGggcmVzcGVjdCB0byB0aGUgc3RhdHVzICovXHJcbiAgICAgICAgdGhpcy5wcm9jZXNzaW5nTWVzc2FnZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5saXN0ZW5lci5vblJlY2VpdmVNZXNzYWdlKG1lc3NhZ2UsIG1zZyA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucHJvY2Vzc2luZ01lc3NhZ2UgPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKHRoaXMucHJvY2Vzc2luZ01ldGFkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBlbmRpbmdNZXNzYWdlID0gbXNnO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5oYXNQZW5kaW5nTWVzc2FnZSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5leHRMaXN0ZW5lci5vblJlY2VpdmVNZXNzYWdlKG1zZyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnByb2Nlc3NQZW5kaW5nU3RhdHVzKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIG9uUmVjZWl2ZVN0YXR1cyhzdGF0dXMpIHtcclxuICAgICAgICB0aGlzLmxpc3RlbmVyLm9uUmVjZWl2ZVN0YXR1cyhzdGF0dXMsIHByb2Nlc3NlZFN0YXR1cyA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnByb2Nlc3NpbmdNZXRhZGF0YSB8fCB0aGlzLnByb2Nlc3NpbmdNZXNzYWdlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBlbmRpbmdTdGF0dXMgPSBwcm9jZXNzZWRTdGF0dXM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5leHRMaXN0ZW5lci5vblJlY2VpdmVTdGF0dXMocHJvY2Vzc2VkU3RhdHVzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuSW50ZXJjZXB0aW5nTGlzdGVuZXJJbXBsID0gSW50ZXJjZXB0aW5nTGlzdGVuZXJJbXBsO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jYWxsLWludGVyZmFjZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/call-interface.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/call-number.js":
/*!*************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/call-number.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\n/*\r\n * Copyright 2022 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.getNextCallNumber = getNextCallNumber;\r\nlet nextCallNumber = 0;\r\nfunction getNextCallNumber() {\r\n    return nextCallNumber++;\r\n}\r\n//# sourceMappingURL=call-number.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvY2FsbC1udW1iZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2RhbmlzaC1idWRkeS8uL25vZGVfbW9kdWxlcy9AZ3JwYy9ncnBjLWpzL2J1aWxkL3NyYy9jYWxsLW51bWJlci5qcz9hZWE1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG4vKlxyXG4gKiBDb3B5cmlnaHQgMjAyMiBnUlBDIGF1dGhvcnMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKlxyXG4gKi9cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLmdldE5leHRDYWxsTnVtYmVyID0gZ2V0TmV4dENhbGxOdW1iZXI7XHJcbmxldCBuZXh0Q2FsbE51bWJlciA9IDA7XHJcbmZ1bmN0aW9uIGdldE5leHRDYWxsTnVtYmVyKCkge1xyXG4gICAgcmV0dXJuIG5leHRDYWxsTnVtYmVyKys7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2FsbC1udW1iZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/call-number.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/call.js":
/*!******************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/call.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ClientDuplexStreamImpl = exports.ClientWritableStreamImpl = exports.ClientReadableStreamImpl = exports.ClientUnaryCallImpl = void 0;\r\nexports.callErrorFromStatus = callErrorFromStatus;\r\nconst events_1 = __webpack_require__(/*! events */ \"events\");\r\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\n/**\r\n * Construct a ServiceError from a StatusObject. This function exists primarily\r\n * as an attempt to make the error stack trace clearly communicate that the\r\n * error is not necessarily a problem in gRPC itself.\r\n * @param status\r\n */\r\nfunction callErrorFromStatus(status, callerStack) {\r\n    const message = `${status.code} ${constants_1.Status[status.code]}: ${status.details}`;\r\n    const error = new Error(message);\r\n    const stack = `${error.stack}\\nfor call at\\n${callerStack}`;\r\n    return Object.assign(new Error(message), status, { stack });\r\n}\r\nclass ClientUnaryCallImpl extends events_1.EventEmitter {\r\n    constructor() {\r\n        super();\r\n    }\r\n    cancel() {\r\n        var _a;\r\n        (_a = this.call) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(constants_1.Status.CANCELLED, 'Cancelled on client');\r\n    }\r\n    getPeer() {\r\n        var _a, _b;\r\n        return (_b = (_a = this.call) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : 'unknown';\r\n    }\r\n}\r\nexports.ClientUnaryCallImpl = ClientUnaryCallImpl;\r\nclass ClientReadableStreamImpl extends stream_1.Readable {\r\n    constructor(deserialize) {\r\n        super({ objectMode: true });\r\n        this.deserialize = deserialize;\r\n    }\r\n    cancel() {\r\n        var _a;\r\n        (_a = this.call) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(constants_1.Status.CANCELLED, 'Cancelled on client');\r\n    }\r\n    getPeer() {\r\n        var _a, _b;\r\n        return (_b = (_a = this.call) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : 'unknown';\r\n    }\r\n    _read(_size) {\r\n        var _a;\r\n        (_a = this.call) === null || _a === void 0 ? void 0 : _a.startRead();\r\n    }\r\n}\r\nexports.ClientReadableStreamImpl = ClientReadableStreamImpl;\r\nclass ClientWritableStreamImpl extends stream_1.Writable {\r\n    constructor(serialize) {\r\n        super({ objectMode: true });\r\n        this.serialize = serialize;\r\n    }\r\n    cancel() {\r\n        var _a;\r\n        (_a = this.call) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(constants_1.Status.CANCELLED, 'Cancelled on client');\r\n    }\r\n    getPeer() {\r\n        var _a, _b;\r\n        return (_b = (_a = this.call) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : 'unknown';\r\n    }\r\n    _write(chunk, encoding, cb) {\r\n        var _a;\r\n        const context = {\r\n            callback: cb,\r\n        };\r\n        const flags = Number(encoding);\r\n        if (!Number.isNaN(flags)) {\r\n            context.flags = flags;\r\n        }\r\n        (_a = this.call) === null || _a === void 0 ? void 0 : _a.sendMessageWithContext(context, chunk);\r\n    }\r\n    _final(cb) {\r\n        var _a;\r\n        (_a = this.call) === null || _a === void 0 ? void 0 : _a.halfClose();\r\n        cb();\r\n    }\r\n}\r\nexports.ClientWritableStreamImpl = ClientWritableStreamImpl;\r\nclass ClientDuplexStreamImpl extends stream_1.Duplex {\r\n    constructor(serialize, deserialize) {\r\n        super({ objectMode: true });\r\n        this.serialize = serialize;\r\n        this.deserialize = deserialize;\r\n    }\r\n    cancel() {\r\n        var _a;\r\n        (_a = this.call) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(constants_1.Status.CANCELLED, 'Cancelled on client');\r\n    }\r\n    getPeer() {\r\n        var _a, _b;\r\n        return (_b = (_a = this.call) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : 'unknown';\r\n    }\r\n    _read(_size) {\r\n        var _a;\r\n        (_a = this.call) === null || _a === void 0 ? void 0 : _a.startRead();\r\n    }\r\n    _write(chunk, encoding, cb) {\r\n        var _a;\r\n        const context = {\r\n            callback: cb,\r\n        };\r\n        const flags = Number(encoding);\r\n        if (!Number.isNaN(flags)) {\r\n            context.flags = flags;\r\n        }\r\n        (_a = this.call) === null || _a === void 0 ? void 0 : _a.sendMessageWithContext(context, chunk);\r\n    }\r\n    _final(cb) {\r\n        var _a;\r\n        (_a = this.call) === null || _a === void 0 ? void 0 : _a.halfClose();\r\n        cb();\r\n    }\r\n}\r\nexports.ClientDuplexStreamImpl = ClientDuplexStreamImpl;\r\n//# sourceMappingURL=call.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/call.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/certificate-provider.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/certificate-provider.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2024 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.FileWatcherCertificateProvider = void 0;\r\nconst fs = __webpack_require__(/*! fs */ \"fs\");\r\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nconst util_1 = __webpack_require__(/*! util */ \"util\");\r\nconst TRACER_NAME = 'certificate_provider';\r\nfunction trace(text) {\r\n    logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);\r\n}\r\nconst readFilePromise = (0, util_1.promisify)(fs.readFile);\r\nclass FileWatcherCertificateProvider {\r\n    constructor(config) {\r\n        this.config = config;\r\n        this.refreshTimer = null;\r\n        this.fileResultPromise = null;\r\n        this.latestCaUpdate = undefined;\r\n        this.caListeners = new Set();\r\n        this.latestIdentityUpdate = undefined;\r\n        this.identityListeners = new Set();\r\n        this.lastUpdateTime = null;\r\n        if ((config.certificateFile === undefined) !== (config.privateKeyFile === undefined)) {\r\n            throw new Error('certificateFile and privateKeyFile must be set or unset together');\r\n        }\r\n        if (config.certificateFile === undefined && config.caCertificateFile === undefined) {\r\n            throw new Error('At least one of certificateFile and caCertificateFile must be set');\r\n        }\r\n        trace('File watcher constructed with config ' + JSON.stringify(config));\r\n    }\r\n    updateCertificates() {\r\n        if (this.fileResultPromise) {\r\n            return;\r\n        }\r\n        this.fileResultPromise = Promise.allSettled([\r\n            this.config.certificateFile ? readFilePromise(this.config.certificateFile) : Promise.reject(),\r\n            this.config.privateKeyFile ? readFilePromise(this.config.privateKeyFile) : Promise.reject(),\r\n            this.config.caCertificateFile ? readFilePromise(this.config.caCertificateFile) : Promise.reject()\r\n        ]);\r\n        this.fileResultPromise.then(([certificateResult, privateKeyResult, caCertificateResult]) => {\r\n            if (!this.refreshTimer) {\r\n                return;\r\n            }\r\n            trace('File watcher read certificates certificate ' + certificateResult.status + ', privateKey ' + privateKeyResult.status + ', CA certificate ' + caCertificateResult.status);\r\n            this.lastUpdateTime = new Date();\r\n            this.fileResultPromise = null;\r\n            if (certificateResult.status === 'fulfilled' && privateKeyResult.status === 'fulfilled') {\r\n                this.latestIdentityUpdate = {\r\n                    certificate: certificateResult.value,\r\n                    privateKey: privateKeyResult.value\r\n                };\r\n            }\r\n            else {\r\n                this.latestIdentityUpdate = null;\r\n            }\r\n            if (caCertificateResult.status === 'fulfilled') {\r\n                this.latestCaUpdate = {\r\n                    caCertificate: caCertificateResult.value\r\n                };\r\n            }\r\n            else {\r\n                this.latestCaUpdate = null;\r\n            }\r\n            for (const listener of this.identityListeners) {\r\n                listener(this.latestIdentityUpdate);\r\n            }\r\n            for (const listener of this.caListeners) {\r\n                listener(this.latestCaUpdate);\r\n            }\r\n        });\r\n        trace('File watcher initiated certificate update');\r\n    }\r\n    maybeStartWatchingFiles() {\r\n        if (!this.refreshTimer) {\r\n            /* Perform the first read immediately, but only if there was not already\r\n             * a recent read, to avoid reading from the filesystem significantly more\r\n             * frequently than configured if the provider quickly switches between\r\n             * used and unused. */\r\n            const timeSinceLastUpdate = this.lastUpdateTime ? (new Date()).getTime() - this.lastUpdateTime.getTime() : Infinity;\r\n            if (timeSinceLastUpdate > this.config.refreshIntervalMs) {\r\n                this.updateCertificates();\r\n            }\r\n            if (timeSinceLastUpdate > this.config.refreshIntervalMs * 2) {\r\n                // Clear out old updates if they are definitely stale\r\n                this.latestCaUpdate = undefined;\r\n                this.latestIdentityUpdate = undefined;\r\n            }\r\n            this.refreshTimer = setInterval(() => this.updateCertificates(), this.config.refreshIntervalMs);\r\n            trace('File watcher started watching');\r\n        }\r\n    }\r\n    maybeStopWatchingFiles() {\r\n        if (this.caListeners.size === 0 && this.identityListeners.size === 0) {\r\n            this.fileResultPromise = null;\r\n            if (this.refreshTimer) {\r\n                clearInterval(this.refreshTimer);\r\n                this.refreshTimer = null;\r\n            }\r\n        }\r\n    }\r\n    addCaCertificateListener(listener) {\r\n        this.caListeners.add(listener);\r\n        this.maybeStartWatchingFiles();\r\n        if (this.latestCaUpdate !== undefined) {\r\n            process.nextTick(listener, this.latestCaUpdate);\r\n        }\r\n    }\r\n    removeCaCertificateListener(listener) {\r\n        this.caListeners.delete(listener);\r\n        this.maybeStopWatchingFiles();\r\n    }\r\n    addIdentityCertificateListener(listener) {\r\n        this.identityListeners.add(listener);\r\n        this.maybeStartWatchingFiles();\r\n        if (this.latestIdentityUpdate !== undefined) {\r\n            process.nextTick(listener, this.latestIdentityUpdate);\r\n        }\r\n    }\r\n    removeIdentityCertificateListener(listener) {\r\n        this.identityListeners.delete(listener);\r\n        this.maybeStopWatchingFiles();\r\n    }\r\n}\r\nexports.FileWatcherCertificateProvider = FileWatcherCertificateProvider;\r\n//# sourceMappingURL=certificate-provider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/certificate-provider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/channel-credentials.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/channel-credentials.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ChannelCredentials = void 0;\r\nexports.createCertificateProviderChannelCredentials = createCertificateProviderChannelCredentials;\r\nconst tls_1 = __webpack_require__(/*! tls */ \"tls\");\r\nconst call_credentials_1 = __webpack_require__(/*! ./call-credentials */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/call-credentials.js\");\r\nconst tls_helpers_1 = __webpack_require__(/*! ./tls-helpers */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/tls-helpers.js\");\r\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\r\nconst resolver_1 = __webpack_require__(/*! ./resolver */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/resolver.js\");\r\nconst logging_1 = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nfunction verifyIsBufferOrNull(obj, friendlyName) {\r\n    if (obj && !(obj instanceof Buffer)) {\r\n        throw new TypeError(`${friendlyName}, if provided, must be a Buffer.`);\r\n    }\r\n}\r\n/**\r\n * A class that contains credentials for communicating over a channel, as well\r\n * as a set of per-call credentials, which are applied to every method call made\r\n * over a channel initialized with an instance of this class.\r\n */\r\nclass ChannelCredentials {\r\n    /**\r\n     * Returns a copy of this object with the included set of per-call credentials\r\n     * expanded to include callCredentials.\r\n     * @param callCredentials A CallCredentials object to associate with this\r\n     * instance.\r\n     */\r\n    compose(callCredentials) {\r\n        return new ComposedChannelCredentialsImpl(this, callCredentials);\r\n    }\r\n    /**\r\n     * Return a new ChannelCredentials instance with a given set of credentials.\r\n     * The resulting instance can be used to construct a Channel that communicates\r\n     * over TLS.\r\n     * @param rootCerts The root certificate data.\r\n     * @param privateKey The client certificate private key, if available.\r\n     * @param certChain The client certificate key chain, if available.\r\n     * @param verifyOptions Additional options to modify certificate verification\r\n     */\r\n    static createSsl(rootCerts, privateKey, certChain, verifyOptions) {\r\n        var _a;\r\n        verifyIsBufferOrNull(rootCerts, 'Root certificate');\r\n        verifyIsBufferOrNull(privateKey, 'Private key');\r\n        verifyIsBufferOrNull(certChain, 'Certificate chain');\r\n        if (privateKey && !certChain) {\r\n            throw new Error('Private key must be given with accompanying certificate chain');\r\n        }\r\n        if (!privateKey && certChain) {\r\n            throw new Error('Certificate chain must be given with accompanying private key');\r\n        }\r\n        const secureContext = (0, tls_1.createSecureContext)({\r\n            ca: (_a = rootCerts !== null && rootCerts !== void 0 ? rootCerts : (0, tls_helpers_1.getDefaultRootsData)()) !== null && _a !== void 0 ? _a : undefined,\r\n            key: privateKey !== null && privateKey !== void 0 ? privateKey : undefined,\r\n            cert: certChain !== null && certChain !== void 0 ? certChain : undefined,\r\n            ciphers: tls_helpers_1.CIPHER_SUITES,\r\n        });\r\n        return new SecureChannelCredentialsImpl(secureContext, verifyOptions !== null && verifyOptions !== void 0 ? verifyOptions : {});\r\n    }\r\n    /**\r\n     * Return a new ChannelCredentials instance with credentials created using\r\n     * the provided secureContext. The resulting instances can be used to\r\n     * construct a Channel that communicates over TLS. gRPC will not override\r\n     * anything in the provided secureContext, so the environment variables\r\n     * GRPC_SSL_CIPHER_SUITES and GRPC_DEFAULT_SSL_ROOTS_FILE_PATH will\r\n     * not be applied.\r\n     * @param secureContext The return value of tls.createSecureContext()\r\n     * @param verifyOptions Additional options to modify certificate verification\r\n     */\r\n    static createFromSecureContext(secureContext, verifyOptions) {\r\n        return new SecureChannelCredentialsImpl(secureContext, verifyOptions !== null && verifyOptions !== void 0 ? verifyOptions : {});\r\n    }\r\n    /**\r\n     * Return a new ChannelCredentials instance with no credentials.\r\n     */\r\n    static createInsecure() {\r\n        return new InsecureChannelCredentialsImpl();\r\n    }\r\n}\r\nexports.ChannelCredentials = ChannelCredentials;\r\nclass InsecureChannelCredentialsImpl extends ChannelCredentials {\r\n    constructor() {\r\n        super();\r\n    }\r\n    compose(callCredentials) {\r\n        throw new Error('Cannot compose insecure credentials');\r\n    }\r\n    _isSecure() {\r\n        return false;\r\n    }\r\n    _equals(other) {\r\n        return other instanceof InsecureChannelCredentialsImpl;\r\n    }\r\n    _createSecureConnector(channelTarget, options, callCredentials) {\r\n        return {\r\n            connect(socket) {\r\n                return Promise.resolve({\r\n                    socket,\r\n                    secure: false\r\n                });\r\n            },\r\n            waitForReady: () => {\r\n                return Promise.resolve();\r\n            },\r\n            getCallCredentials: () => {\r\n                return callCredentials !== null && callCredentials !== void 0 ? callCredentials : call_credentials_1.CallCredentials.createEmpty();\r\n            },\r\n            destroy() { }\r\n        };\r\n    }\r\n}\r\nfunction getConnectionOptions(secureContext, verifyOptions, channelTarget, options) {\r\n    var _a, _b, _c, _d;\r\n    const connectionOptions = {\r\n        secureContext: secureContext\r\n    };\r\n    if (verifyOptions.checkServerIdentity) {\r\n        connectionOptions.checkServerIdentity = verifyOptions.checkServerIdentity;\r\n    }\r\n    if (verifyOptions.rejectUnauthorized !== undefined) {\r\n        connectionOptions.rejectUnauthorized = verifyOptions.rejectUnauthorized;\r\n    }\r\n    connectionOptions.ALPNProtocols = ['h2'];\r\n    if (options['grpc.ssl_target_name_override']) {\r\n        const sslTargetNameOverride = options['grpc.ssl_target_name_override'];\r\n        const originalCheckServerIdentity = (_a = connectionOptions.checkServerIdentity) !== null && _a !== void 0 ? _a : tls_1.checkServerIdentity;\r\n        connectionOptions.checkServerIdentity = (host, cert) => {\r\n            return originalCheckServerIdentity(sslTargetNameOverride, cert);\r\n        };\r\n        connectionOptions.servername = sslTargetNameOverride;\r\n    }\r\n    else {\r\n        if ('grpc.http_connect_target' in options) {\r\n            /* This is more or less how servername will be set in createSession\r\n             * if a connection is successfully established through the proxy.\r\n             * If the proxy is not used, these connectionOptions are discarded\r\n             * anyway */\r\n            const targetPath = (0, resolver_1.getDefaultAuthority)((_b = (0, uri_parser_1.parseUri)(options['grpc.http_connect_target'])) !== null && _b !== void 0 ? _b : {\r\n                path: 'localhost',\r\n            });\r\n            const hostPort = (0, uri_parser_1.splitHostPort)(targetPath);\r\n            connectionOptions.servername = (_c = hostPort === null || hostPort === void 0 ? void 0 : hostPort.host) !== null && _c !== void 0 ? _c : targetPath;\r\n        }\r\n    }\r\n    if (options['grpc-node.tls_enable_trace']) {\r\n        connectionOptions.enableTrace = true;\r\n    }\r\n    let realTarget = channelTarget;\r\n    if ('grpc.http_connect_target' in options) {\r\n        const parsedTarget = (0, uri_parser_1.parseUri)(options['grpc.http_connect_target']);\r\n        if (parsedTarget) {\r\n            realTarget = parsedTarget;\r\n        }\r\n    }\r\n    const targetPath = (0, resolver_1.getDefaultAuthority)(realTarget);\r\n    const hostPort = (0, uri_parser_1.splitHostPort)(targetPath);\r\n    const remoteHost = (_d = hostPort === null || hostPort === void 0 ? void 0 : hostPort.host) !== null && _d !== void 0 ? _d : targetPath;\r\n    connectionOptions.host = remoteHost;\r\n    connectionOptions.servername = remoteHost;\r\n    return connectionOptions;\r\n}\r\nclass SecureConnectorImpl {\r\n    constructor(connectionOptions, callCredentials) {\r\n        this.connectionOptions = connectionOptions;\r\n        this.callCredentials = callCredentials;\r\n    }\r\n    connect(socket) {\r\n        const tlsConnectOptions = Object.assign({ socket: socket }, this.connectionOptions);\r\n        return new Promise((resolve, reject) => {\r\n            const tlsSocket = (0, tls_1.connect)(tlsConnectOptions, () => {\r\n                var _a;\r\n                if (((_a = this.connectionOptions.rejectUnauthorized) !== null && _a !== void 0 ? _a : true) && !tlsSocket.authorized) {\r\n                    reject(tlsSocket.authorizationError);\r\n                    return;\r\n                }\r\n                resolve({\r\n                    socket: tlsSocket,\r\n                    secure: true\r\n                });\r\n            });\r\n            tlsSocket.on('error', (error) => {\r\n                reject(error);\r\n            });\r\n        });\r\n    }\r\n    waitForReady() {\r\n        return Promise.resolve();\r\n    }\r\n    getCallCredentials() {\r\n        return this.callCredentials;\r\n    }\r\n    destroy() { }\r\n}\r\nclass SecureChannelCredentialsImpl extends ChannelCredentials {\r\n    constructor(secureContext, verifyOptions) {\r\n        super();\r\n        this.secureContext = secureContext;\r\n        this.verifyOptions = verifyOptions;\r\n    }\r\n    _isSecure() {\r\n        return true;\r\n    }\r\n    _equals(other) {\r\n        if (this === other) {\r\n            return true;\r\n        }\r\n        if (other instanceof SecureChannelCredentialsImpl) {\r\n            return (this.secureContext === other.secureContext &&\r\n                this.verifyOptions.checkServerIdentity ===\r\n                    other.verifyOptions.checkServerIdentity);\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    _createSecureConnector(channelTarget, options, callCredentials) {\r\n        const connectionOptions = getConnectionOptions(this.secureContext, this.verifyOptions, channelTarget, options);\r\n        return new SecureConnectorImpl(connectionOptions, callCredentials !== null && callCredentials !== void 0 ? callCredentials : call_credentials_1.CallCredentials.createEmpty());\r\n    }\r\n}\r\nclass CertificateProviderChannelCredentialsImpl extends ChannelCredentials {\r\n    constructor(caCertificateProvider, identityCertificateProvider, verifyOptions) {\r\n        super();\r\n        this.caCertificateProvider = caCertificateProvider;\r\n        this.identityCertificateProvider = identityCertificateProvider;\r\n        this.verifyOptions = verifyOptions;\r\n        this.refcount = 0;\r\n        /**\r\n         * `undefined` means that the certificates have not yet been loaded. `null`\r\n         * means that an attempt to load them has completed, and has failed.\r\n         */\r\n        this.latestCaUpdate = undefined;\r\n        /**\r\n         * `undefined` means that the certificates have not yet been loaded. `null`\r\n         * means that an attempt to load them has completed, and has failed.\r\n         */\r\n        this.latestIdentityUpdate = undefined;\r\n        this.caCertificateUpdateListener = this.handleCaCertificateUpdate.bind(this);\r\n        this.identityCertificateUpdateListener = this.handleIdentityCertitificateUpdate.bind(this);\r\n        this.secureContextWatchers = [];\r\n    }\r\n    _isSecure() {\r\n        return true;\r\n    }\r\n    _equals(other) {\r\n        var _a, _b;\r\n        if (this === other) {\r\n            return true;\r\n        }\r\n        if (other instanceof CertificateProviderChannelCredentialsImpl) {\r\n            return this.caCertificateProvider === other.caCertificateProvider &&\r\n                this.identityCertificateProvider === other.identityCertificateProvider &&\r\n                ((_a = this.verifyOptions) === null || _a === void 0 ? void 0 : _a.checkServerIdentity) === ((_b = other.verifyOptions) === null || _b === void 0 ? void 0 : _b.checkServerIdentity);\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    ref() {\r\n        var _a;\r\n        if (this.refcount === 0) {\r\n            this.caCertificateProvider.addCaCertificateListener(this.caCertificateUpdateListener);\r\n            (_a = this.identityCertificateProvider) === null || _a === void 0 ? void 0 : _a.addIdentityCertificateListener(this.identityCertificateUpdateListener);\r\n        }\r\n        this.refcount += 1;\r\n    }\r\n    unref() {\r\n        var _a;\r\n        this.refcount -= 1;\r\n        if (this.refcount === 0) {\r\n            this.caCertificateProvider.removeCaCertificateListener(this.caCertificateUpdateListener);\r\n            (_a = this.identityCertificateProvider) === null || _a === void 0 ? void 0 : _a.removeIdentityCertificateListener(this.identityCertificateUpdateListener);\r\n        }\r\n    }\r\n    _createSecureConnector(channelTarget, options, callCredentials) {\r\n        this.ref();\r\n        return new CertificateProviderChannelCredentialsImpl.SecureConnectorImpl(this, channelTarget, options, callCredentials !== null && callCredentials !== void 0 ? callCredentials : call_credentials_1.CallCredentials.createEmpty());\r\n    }\r\n    maybeUpdateWatchers() {\r\n        if (this.hasReceivedUpdates()) {\r\n            for (const watcher of this.secureContextWatchers) {\r\n                watcher(this.getLatestSecureContext());\r\n            }\r\n            this.secureContextWatchers = [];\r\n        }\r\n    }\r\n    handleCaCertificateUpdate(update) {\r\n        this.latestCaUpdate = update;\r\n        this.maybeUpdateWatchers();\r\n    }\r\n    handleIdentityCertitificateUpdate(update) {\r\n        this.latestIdentityUpdate = update;\r\n        this.maybeUpdateWatchers();\r\n    }\r\n    hasReceivedUpdates() {\r\n        if (this.latestCaUpdate === undefined) {\r\n            return false;\r\n        }\r\n        if (this.identityCertificateProvider && this.latestIdentityUpdate === undefined) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    getSecureContext() {\r\n        if (this.hasReceivedUpdates()) {\r\n            return Promise.resolve(this.getLatestSecureContext());\r\n        }\r\n        else {\r\n            return new Promise(resolve => {\r\n                this.secureContextWatchers.push(resolve);\r\n            });\r\n        }\r\n    }\r\n    getLatestSecureContext() {\r\n        var _a, _b;\r\n        if (!this.latestCaUpdate) {\r\n            return null;\r\n        }\r\n        if (this.identityCertificateProvider !== null && !this.latestIdentityUpdate) {\r\n            return null;\r\n        }\r\n        try {\r\n            return (0, tls_1.createSecureContext)({\r\n                ca: this.latestCaUpdate.caCertificate,\r\n                key: (_a = this.latestIdentityUpdate) === null || _a === void 0 ? void 0 : _a.privateKey,\r\n                cert: (_b = this.latestIdentityUpdate) === null || _b === void 0 ? void 0 : _b.certificate,\r\n                ciphers: tls_helpers_1.CIPHER_SUITES\r\n            });\r\n        }\r\n        catch (e) {\r\n            (0, logging_1.log)(constants_1.LogVerbosity.ERROR, 'Failed to createSecureContext with error ' + e.message);\r\n            return null;\r\n        }\r\n    }\r\n}\r\nCertificateProviderChannelCredentialsImpl.SecureConnectorImpl = class {\r\n    constructor(parent, channelTarget, options, callCredentials) {\r\n        this.parent = parent;\r\n        this.channelTarget = channelTarget;\r\n        this.options = options;\r\n        this.callCredentials = callCredentials;\r\n    }\r\n    connect(socket) {\r\n        return new Promise((resolve, reject) => {\r\n            const secureContext = this.parent.getLatestSecureContext();\r\n            if (!secureContext) {\r\n                reject(new Error('Failed to load credentials'));\r\n                return;\r\n            }\r\n            if (socket.closed) {\r\n                reject(new Error('Socket closed while loading credentials'));\r\n            }\r\n            const connnectionOptions = getConnectionOptions(secureContext, this.parent.verifyOptions, this.channelTarget, this.options);\r\n            const tlsConnectOptions = Object.assign({ socket: socket }, connnectionOptions);\r\n            const closeCallback = () => {\r\n                reject(new Error('Socket closed'));\r\n            };\r\n            const errorCallback = (error) => {\r\n                reject(error);\r\n            };\r\n            const tlsSocket = (0, tls_1.connect)(tlsConnectOptions, () => {\r\n                var _a;\r\n                tlsSocket.removeListener('close', closeCallback);\r\n                tlsSocket.removeListener('error', errorCallback);\r\n                if (((_a = this.parent.verifyOptions.rejectUnauthorized) !== null && _a !== void 0 ? _a : true) && !tlsSocket.authorized) {\r\n                    reject(tlsSocket.authorizationError);\r\n                    return;\r\n                }\r\n                resolve({\r\n                    socket: tlsSocket,\r\n                    secure: true\r\n                });\r\n            });\r\n            tlsSocket.once('close', closeCallback);\r\n            tlsSocket.once('error', errorCallback);\r\n        });\r\n    }\r\n    async waitForReady() {\r\n        await this.parent.getSecureContext();\r\n    }\r\n    getCallCredentials() {\r\n        return this.callCredentials;\r\n    }\r\n    destroy() {\r\n        this.parent.unref();\r\n    }\r\n};\r\nfunction createCertificateProviderChannelCredentials(caCertificateProvider, identityCertificateProvider, verifyOptions) {\r\n    return new CertificateProviderChannelCredentialsImpl(caCertificateProvider, identityCertificateProvider, verifyOptions !== null && verifyOptions !== void 0 ? verifyOptions : {});\r\n}\r\nclass ComposedChannelCredentialsImpl extends ChannelCredentials {\r\n    constructor(channelCredentials, callCredentials) {\r\n        super();\r\n        this.channelCredentials = channelCredentials;\r\n        this.callCredentials = callCredentials;\r\n        if (!channelCredentials._isSecure()) {\r\n            throw new Error('Cannot compose insecure credentials');\r\n        }\r\n    }\r\n    compose(callCredentials) {\r\n        const combinedCallCredentials = this.callCredentials.compose(callCredentials);\r\n        return new ComposedChannelCredentialsImpl(this.channelCredentials, combinedCallCredentials);\r\n    }\r\n    _isSecure() {\r\n        return true;\r\n    }\r\n    _equals(other) {\r\n        if (this === other) {\r\n            return true;\r\n        }\r\n        if (other instanceof ComposedChannelCredentialsImpl) {\r\n            return (this.channelCredentials._equals(other.channelCredentials) &&\r\n                this.callCredentials._equals(other.callCredentials));\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    _createSecureConnector(channelTarget, options, callCredentials) {\r\n        const combinedCallCredentials = this.callCredentials.compose(callCredentials !== null && callCredentials !== void 0 ? callCredentials : call_credentials_1.CallCredentials.createEmpty());\r\n        return this.channelCredentials._createSecureConnector(channelTarget, options, combinedCallCredentials);\r\n    }\r\n}\r\n//# sourceMappingURL=channel-credentials.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/channel-credentials.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/channel-options.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/channel-options.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.recognizedOptions = void 0;\r\nexports.channelOptionsEqual = channelOptionsEqual;\r\n/**\r\n * This is for checking provided options at runtime. This is an object for\r\n * easier membership checking.\r\n */\r\nexports.recognizedOptions = {\r\n    'grpc.ssl_target_name_override': true,\r\n    'grpc.primary_user_agent': true,\r\n    'grpc.secondary_user_agent': true,\r\n    'grpc.default_authority': true,\r\n    'grpc.keepalive_time_ms': true,\r\n    'grpc.keepalive_timeout_ms': true,\r\n    'grpc.keepalive_permit_without_calls': true,\r\n    'grpc.service_config': true,\r\n    'grpc.max_concurrent_streams': true,\r\n    'grpc.initial_reconnect_backoff_ms': true,\r\n    'grpc.max_reconnect_backoff_ms': true,\r\n    'grpc.use_local_subchannel_pool': true,\r\n    'grpc.max_send_message_length': true,\r\n    'grpc.max_receive_message_length': true,\r\n    'grpc.enable_http_proxy': true,\r\n    'grpc.enable_channelz': true,\r\n    'grpc.dns_min_time_between_resolutions_ms': true,\r\n    'grpc.enable_retries': true,\r\n    'grpc.per_rpc_retry_buffer_size': true,\r\n    'grpc.retry_buffer_size': true,\r\n    'grpc.max_connection_age_ms': true,\r\n    'grpc.max_connection_age_grace_ms': true,\r\n    'grpc-node.max_session_memory': true,\r\n    'grpc.service_config_disable_resolution': true,\r\n    'grpc.client_idle_timeout_ms': true,\r\n    'grpc-node.tls_enable_trace': true,\r\n    'grpc.lb.ring_hash.ring_size_cap': true,\r\n    'grpc-node.retry_max_attempts_limit': true,\r\n    'grpc-node.flow_control_window': true,\r\n};\r\nfunction channelOptionsEqual(options1, options2) {\r\n    const keys1 = Object.keys(options1).sort();\r\n    const keys2 = Object.keys(options2).sort();\r\n    if (keys1.length !== keys2.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < keys1.length; i += 1) {\r\n        if (keys1[i] !== keys2[i]) {\r\n            return false;\r\n        }\r\n        if (options1[keys1[i]] !== options2[keys2[i]]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n//# sourceMappingURL=channel-options.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvY2hhbm5lbC1vcHRpb25zLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QseUJBQXlCO0FBQ3pCLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0Isa0JBQWtCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFuaXNoLWJ1ZGR5Ly4vbm9kZV9tb2R1bGVzL0BncnBjL2dycGMtanMvYnVpbGQvc3JjL2NoYW5uZWwtb3B0aW9ucy5qcz9iZGVjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG4vKlxyXG4gKiBDb3B5cmlnaHQgMjAxOSBnUlBDIGF1dGhvcnMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKlxyXG4gKi9cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnJlY29nbml6ZWRPcHRpb25zID0gdm9pZCAwO1xyXG5leHBvcnRzLmNoYW5uZWxPcHRpb25zRXF1YWwgPSBjaGFubmVsT3B0aW9uc0VxdWFsO1xyXG4vKipcclxuICogVGhpcyBpcyBmb3IgY2hlY2tpbmcgcHJvdmlkZWQgb3B0aW9ucyBhdCBydW50aW1lLiBUaGlzIGlzIGFuIG9iamVjdCBmb3JcclxuICogZWFzaWVyIG1lbWJlcnNoaXAgY2hlY2tpbmcuXHJcbiAqL1xyXG5leHBvcnRzLnJlY29nbml6ZWRPcHRpb25zID0ge1xyXG4gICAgJ2dycGMuc3NsX3RhcmdldF9uYW1lX292ZXJyaWRlJzogdHJ1ZSxcclxuICAgICdncnBjLnByaW1hcnlfdXNlcl9hZ2VudCc6IHRydWUsXHJcbiAgICAnZ3JwYy5zZWNvbmRhcnlfdXNlcl9hZ2VudCc6IHRydWUsXHJcbiAgICAnZ3JwYy5kZWZhdWx0X2F1dGhvcml0eSc6IHRydWUsXHJcbiAgICAnZ3JwYy5rZWVwYWxpdmVfdGltZV9tcyc6IHRydWUsXHJcbiAgICAnZ3JwYy5rZWVwYWxpdmVfdGltZW91dF9tcyc6IHRydWUsXHJcbiAgICAnZ3JwYy5rZWVwYWxpdmVfcGVybWl0X3dpdGhvdXRfY2FsbHMnOiB0cnVlLFxyXG4gICAgJ2dycGMuc2VydmljZV9jb25maWcnOiB0cnVlLFxyXG4gICAgJ2dycGMubWF4X2NvbmN1cnJlbnRfc3RyZWFtcyc6IHRydWUsXHJcbiAgICAnZ3JwYy5pbml0aWFsX3JlY29ubmVjdF9iYWNrb2ZmX21zJzogdHJ1ZSxcclxuICAgICdncnBjLm1heF9yZWNvbm5lY3RfYmFja29mZl9tcyc6IHRydWUsXHJcbiAgICAnZ3JwYy51c2VfbG9jYWxfc3ViY2hhbm5lbF9wb29sJzogdHJ1ZSxcclxuICAgICdncnBjLm1heF9zZW5kX21lc3NhZ2VfbGVuZ3RoJzogdHJ1ZSxcclxuICAgICdncnBjLm1heF9yZWNlaXZlX21lc3NhZ2VfbGVuZ3RoJzogdHJ1ZSxcclxuICAgICdncnBjLmVuYWJsZV9odHRwX3Byb3h5JzogdHJ1ZSxcclxuICAgICdncnBjLmVuYWJsZV9jaGFubmVseic6IHRydWUsXHJcbiAgICAnZ3JwYy5kbnNfbWluX3RpbWVfYmV0d2Vlbl9yZXNvbHV0aW9uc19tcyc6IHRydWUsXHJcbiAgICAnZ3JwYy5lbmFibGVfcmV0cmllcyc6IHRydWUsXHJcbiAgICAnZ3JwYy5wZXJfcnBjX3JldHJ5X2J1ZmZlcl9zaXplJzogdHJ1ZSxcclxuICAgICdncnBjLnJldHJ5X2J1ZmZlcl9zaXplJzogdHJ1ZSxcclxuICAgICdncnBjLm1heF9jb25uZWN0aW9uX2FnZV9tcyc6IHRydWUsXHJcbiAgICAnZ3JwYy5tYXhfY29ubmVjdGlvbl9hZ2VfZ3JhY2VfbXMnOiB0cnVlLFxyXG4gICAgJ2dycGMtbm9kZS5tYXhfc2Vzc2lvbl9tZW1vcnknOiB0cnVlLFxyXG4gICAgJ2dycGMuc2VydmljZV9jb25maWdfZGlzYWJsZV9yZXNvbHV0aW9uJzogdHJ1ZSxcclxuICAgICdncnBjLmNsaWVudF9pZGxlX3RpbWVvdXRfbXMnOiB0cnVlLFxyXG4gICAgJ2dycGMtbm9kZS50bHNfZW5hYmxlX3RyYWNlJzogdHJ1ZSxcclxuICAgICdncnBjLmxiLnJpbmdfaGFzaC5yaW5nX3NpemVfY2FwJzogdHJ1ZSxcclxuICAgICdncnBjLW5vZGUucmV0cnlfbWF4X2F0dGVtcHRzX2xpbWl0JzogdHJ1ZSxcclxuICAgICdncnBjLW5vZGUuZmxvd19jb250cm9sX3dpbmRvdyc6IHRydWUsXHJcbn07XHJcbmZ1bmN0aW9uIGNoYW5uZWxPcHRpb25zRXF1YWwob3B0aW9uczEsIG9wdGlvbnMyKSB7XHJcbiAgICBjb25zdCBrZXlzMSA9IE9iamVjdC5rZXlzKG9wdGlvbnMxKS5zb3J0KCk7XHJcbiAgICBjb25zdCBrZXlzMiA9IE9iamVjdC5rZXlzKG9wdGlvbnMyKS5zb3J0KCk7XHJcbiAgICBpZiAoa2V5czEubGVuZ3RoICE9PSBrZXlzMi5sZW5ndGgpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMxLmxlbmd0aDsgaSArPSAxKSB7XHJcbiAgICAgICAgaWYgKGtleXMxW2ldICE9PSBrZXlzMltpXSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvcHRpb25zMVtrZXlzMVtpXV0gIT09IG9wdGlvbnMyW2tleXMyW2ldXSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2hhbm5lbC1vcHRpb25zLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/channel-options.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/channel.js":
/*!*********************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/channel.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ChannelImplementation = void 0;\r\nconst channel_credentials_1 = __webpack_require__(/*! ./channel-credentials */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/channel-credentials.js\");\r\nconst internal_channel_1 = __webpack_require__(/*! ./internal-channel */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/internal-channel.js\");\r\nclass ChannelImplementation {\r\n    constructor(target, credentials, options) {\r\n        if (typeof target !== 'string') {\r\n            throw new TypeError('Channel target must be a string');\r\n        }\r\n        if (!(credentials instanceof channel_credentials_1.ChannelCredentials)) {\r\n            throw new TypeError('Channel credentials must be a ChannelCredentials object');\r\n        }\r\n        if (options) {\r\n            if (typeof options !== 'object') {\r\n                throw new TypeError('Channel options must be an object');\r\n            }\r\n        }\r\n        this.internalChannel = new internal_channel_1.InternalChannel(target, credentials, options);\r\n    }\r\n    close() {\r\n        this.internalChannel.close();\r\n    }\r\n    getTarget() {\r\n        return this.internalChannel.getTarget();\r\n    }\r\n    getConnectivityState(tryToConnect) {\r\n        return this.internalChannel.getConnectivityState(tryToConnect);\r\n    }\r\n    watchConnectivityState(currentState, deadline, callback) {\r\n        this.internalChannel.watchConnectivityState(currentState, deadline, callback);\r\n    }\r\n    /**\r\n     * Get the channelz reference object for this channel. The returned value is\r\n     * garbage if channelz is disabled for this channel.\r\n     * @returns\r\n     */\r\n    getChannelzRef() {\r\n        return this.internalChannel.getChannelzRef();\r\n    }\r\n    createCall(method, deadline, host, parentCall, propagateFlags) {\r\n        if (typeof method !== 'string') {\r\n            throw new TypeError('Channel#createCall: method must be a string');\r\n        }\r\n        if (!(typeof deadline === 'number' || deadline instanceof Date)) {\r\n            throw new TypeError('Channel#createCall: deadline must be a number or Date');\r\n        }\r\n        return this.internalChannel.createCall(method, deadline, host, parentCall, propagateFlags);\r\n    }\r\n}\r\nexports.ChannelImplementation = ChannelImplementation;\r\n//# sourceMappingURL=channel.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvY2hhbm5lbC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDZCQUE2QjtBQUM3Qiw4QkFBOEIsbUJBQU8sQ0FBQyxrR0FBdUI7QUFDN0QsMkJBQTJCLG1CQUFPLENBQUMsNEZBQW9CO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QiIsInNvdXJjZXMiOlsid2VicGFjazovL2RhbmlzaC1idWRkeS8uL25vZGVfbW9kdWxlcy9AZ3JwYy9ncnBjLWpzL2J1aWxkL3NyYy9jaGFubmVsLmpzP2UyZjgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8qXHJcbiAqIENvcHlyaWdodCAyMDE5IGdSUEMgYXV0aG9ycy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqXHJcbiAqL1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuQ2hhbm5lbEltcGxlbWVudGF0aW9uID0gdm9pZCAwO1xyXG5jb25zdCBjaGFubmVsX2NyZWRlbnRpYWxzXzEgPSByZXF1aXJlKFwiLi9jaGFubmVsLWNyZWRlbnRpYWxzXCIpO1xyXG5jb25zdCBpbnRlcm5hbF9jaGFubmVsXzEgPSByZXF1aXJlKFwiLi9pbnRlcm5hbC1jaGFubmVsXCIpO1xyXG5jbGFzcyBDaGFubmVsSW1wbGVtZW50YXRpb24ge1xyXG4gICAgY29uc3RydWN0b3IodGFyZ2V0LCBjcmVkZW50aWFscywgb3B0aW9ucykge1xyXG4gICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0ICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDaGFubmVsIHRhcmdldCBtdXN0IGJlIGEgc3RyaW5nJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghKGNyZWRlbnRpYWxzIGluc3RhbmNlb2YgY2hhbm5lbF9jcmVkZW50aWFsc18xLkNoYW5uZWxDcmVkZW50aWFscykpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2hhbm5lbCBjcmVkZW50aWFscyBtdXN0IGJlIGEgQ2hhbm5lbENyZWRlbnRpYWxzIG9iamVjdCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob3B0aW9ucykge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDaGFubmVsIG9wdGlvbnMgbXVzdCBiZSBhbiBvYmplY3QnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmludGVybmFsQ2hhbm5lbCA9IG5ldyBpbnRlcm5hbF9jaGFubmVsXzEuSW50ZXJuYWxDaGFubmVsKHRhcmdldCwgY3JlZGVudGlhbHMsIG9wdGlvbnMpO1xyXG4gICAgfVxyXG4gICAgY2xvc2UoKSB7XHJcbiAgICAgICAgdGhpcy5pbnRlcm5hbENoYW5uZWwuY2xvc2UoKTtcclxuICAgIH1cclxuICAgIGdldFRhcmdldCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pbnRlcm5hbENoYW5uZWwuZ2V0VGFyZ2V0KCk7XHJcbiAgICB9XHJcbiAgICBnZXRDb25uZWN0aXZpdHlTdGF0ZSh0cnlUb0Nvbm5lY3QpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pbnRlcm5hbENoYW5uZWwuZ2V0Q29ubmVjdGl2aXR5U3RhdGUodHJ5VG9Db25uZWN0KTtcclxuICAgIH1cclxuICAgIHdhdGNoQ29ubmVjdGl2aXR5U3RhdGUoY3VycmVudFN0YXRlLCBkZWFkbGluZSwgY2FsbGJhY2spIHtcclxuICAgICAgICB0aGlzLmludGVybmFsQ2hhbm5lbC53YXRjaENvbm5lY3Rpdml0eVN0YXRlKGN1cnJlbnRTdGF0ZSwgZGVhZGxpbmUsIGNhbGxiYWNrKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogR2V0IHRoZSBjaGFubmVseiByZWZlcmVuY2Ugb2JqZWN0IGZvciB0aGlzIGNoYW5uZWwuIFRoZSByZXR1cm5lZCB2YWx1ZSBpc1xyXG4gICAgICogZ2FyYmFnZSBpZiBjaGFubmVseiBpcyBkaXNhYmxlZCBmb3IgdGhpcyBjaGFubmVsLlxyXG4gICAgICogQHJldHVybnNcclxuICAgICAqL1xyXG4gICAgZ2V0Q2hhbm5lbHpSZWYoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaW50ZXJuYWxDaGFubmVsLmdldENoYW5uZWx6UmVmKCk7XHJcbiAgICB9XHJcbiAgICBjcmVhdGVDYWxsKG1ldGhvZCwgZGVhZGxpbmUsIGhvc3QsIHBhcmVudENhbGwsIHByb3BhZ2F0ZUZsYWdzKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBtZXRob2QgIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0NoYW5uZWwjY3JlYXRlQ2FsbDogbWV0aG9kIG11c3QgYmUgYSBzdHJpbmcnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCEodHlwZW9mIGRlYWRsaW5lID09PSAnbnVtYmVyJyB8fCBkZWFkbGluZSBpbnN0YW5jZW9mIERhdGUpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0NoYW5uZWwjY3JlYXRlQ2FsbDogZGVhZGxpbmUgbXVzdCBiZSBhIG51bWJlciBvciBEYXRlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmludGVybmFsQ2hhbm5lbC5jcmVhdGVDYWxsKG1ldGhvZCwgZGVhZGxpbmUsIGhvc3QsIHBhcmVudENhbGwsIHByb3BhZ2F0ZUZsYWdzKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkNoYW5uZWxJbXBsZW1lbnRhdGlvbiA9IENoYW5uZWxJbXBsZW1lbnRhdGlvbjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2hhbm5lbC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/channel.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/channelz.js":
/*!**********************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/channelz.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2021 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.registerChannelzSocket = exports.registerChannelzServer = exports.registerChannelzSubchannel = exports.registerChannelzChannel = exports.ChannelzCallTrackerStub = exports.ChannelzCallTracker = exports.ChannelzChildrenTrackerStub = exports.ChannelzChildrenTracker = exports.ChannelzTrace = exports.ChannelzTraceStub = void 0;\r\nexports.unregisterChannelzRef = unregisterChannelzRef;\r\nexports.getChannelzHandlers = getChannelzHandlers;\r\nexports.getChannelzServiceDefinition = getChannelzServiceDefinition;\r\nexports.setup = setup;\r\nconst net_1 = __webpack_require__(/*! net */ \"net\");\r\nconst ordered_map_1 = __webpack_require__(/*! @js-sdsl/ordered-map */ \"(rsc)/./node_modules/@js-sdsl/ordered-map/dist/esm/index.js\");\r\nconst connectivity_state_1 = __webpack_require__(/*! ./connectivity-state */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/connectivity-state.js\");\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nconst subchannel_address_1 = __webpack_require__(/*! ./subchannel-address */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/subchannel-address.js\");\r\nconst admin_1 = __webpack_require__(/*! ./admin */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/admin.js\");\r\nconst make_client_1 = __webpack_require__(/*! ./make-client */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/make-client.js\");\r\nfunction channelRefToMessage(ref) {\r\n    return {\r\n        channel_id: ref.id,\r\n        name: ref.name,\r\n    };\r\n}\r\nfunction subchannelRefToMessage(ref) {\r\n    return {\r\n        subchannel_id: ref.id,\r\n        name: ref.name,\r\n    };\r\n}\r\nfunction serverRefToMessage(ref) {\r\n    return {\r\n        server_id: ref.id,\r\n    };\r\n}\r\nfunction socketRefToMessage(ref) {\r\n    return {\r\n        socket_id: ref.id,\r\n        name: ref.name,\r\n    };\r\n}\r\n/**\r\n * The loose upper bound on the number of events that should be retained in a\r\n * trace. This may be exceeded by up to a factor of 2. Arbitrarily chosen as a\r\n * number that should be large enough to contain the recent relevant\r\n * information, but small enough to not use excessive memory.\r\n */\r\nconst TARGET_RETAINED_TRACES = 32;\r\n/**\r\n * Default number of sockets/servers/channels/subchannels to return\r\n */\r\nconst DEFAULT_MAX_RESULTS = 100;\r\nclass ChannelzTraceStub {\r\n    constructor() {\r\n        this.events = [];\r\n        this.creationTimestamp = new Date();\r\n        this.eventsLogged = 0;\r\n    }\r\n    addTrace() { }\r\n    getTraceMessage() {\r\n        return {\r\n            creation_timestamp: dateToProtoTimestamp(this.creationTimestamp),\r\n            num_events_logged: this.eventsLogged,\r\n            events: [],\r\n        };\r\n    }\r\n}\r\nexports.ChannelzTraceStub = ChannelzTraceStub;\r\nclass ChannelzTrace {\r\n    constructor() {\r\n        this.events = [];\r\n        this.eventsLogged = 0;\r\n        this.creationTimestamp = new Date();\r\n    }\r\n    addTrace(severity, description, child) {\r\n        const timestamp = new Date();\r\n        this.events.push({\r\n            description: description,\r\n            severity: severity,\r\n            timestamp: timestamp,\r\n            childChannel: (child === null || child === void 0 ? void 0 : child.kind) === 'channel' ? child : undefined,\r\n            childSubchannel: (child === null || child === void 0 ? void 0 : child.kind) === 'subchannel' ? child : undefined,\r\n        });\r\n        // Whenever the trace array gets too large, discard the first half\r\n        if (this.events.length >= TARGET_RETAINED_TRACES * 2) {\r\n            this.events = this.events.slice(TARGET_RETAINED_TRACES);\r\n        }\r\n        this.eventsLogged += 1;\r\n    }\r\n    getTraceMessage() {\r\n        return {\r\n            creation_timestamp: dateToProtoTimestamp(this.creationTimestamp),\r\n            num_events_logged: this.eventsLogged,\r\n            events: this.events.map(event => {\r\n                return {\r\n                    description: event.description,\r\n                    severity: event.severity,\r\n                    timestamp: dateToProtoTimestamp(event.timestamp),\r\n                    channel_ref: event.childChannel\r\n                        ? channelRefToMessage(event.childChannel)\r\n                        : null,\r\n                    subchannel_ref: event.childSubchannel\r\n                        ? subchannelRefToMessage(event.childSubchannel)\r\n                        : null,\r\n                };\r\n            }),\r\n        };\r\n    }\r\n}\r\nexports.ChannelzTrace = ChannelzTrace;\r\nclass ChannelzChildrenTracker {\r\n    constructor() {\r\n        this.channelChildren = new ordered_map_1.OrderedMap();\r\n        this.subchannelChildren = new ordered_map_1.OrderedMap();\r\n        this.socketChildren = new ordered_map_1.OrderedMap();\r\n        this.trackerMap = {\r\n            [\"channel\" /* EntityTypes.channel */]: this.channelChildren,\r\n            [\"subchannel\" /* EntityTypes.subchannel */]: this.subchannelChildren,\r\n            [\"socket\" /* EntityTypes.socket */]: this.socketChildren,\r\n        };\r\n    }\r\n    refChild(child) {\r\n        const tracker = this.trackerMap[child.kind];\r\n        const trackedChild = tracker.find(child.id);\r\n        if (trackedChild.equals(tracker.end())) {\r\n            tracker.setElement(child.id, {\r\n                ref: child,\r\n                count: 1,\r\n            }, trackedChild);\r\n        }\r\n        else {\r\n            trackedChild.pointer[1].count += 1;\r\n        }\r\n    }\r\n    unrefChild(child) {\r\n        const tracker = this.trackerMap[child.kind];\r\n        const trackedChild = tracker.getElementByKey(child.id);\r\n        if (trackedChild !== undefined) {\r\n            trackedChild.count -= 1;\r\n            if (trackedChild.count === 0) {\r\n                tracker.eraseElementByKey(child.id);\r\n            }\r\n        }\r\n    }\r\n    getChildLists() {\r\n        return {\r\n            channels: this.channelChildren,\r\n            subchannels: this.subchannelChildren,\r\n            sockets: this.socketChildren,\r\n        };\r\n    }\r\n}\r\nexports.ChannelzChildrenTracker = ChannelzChildrenTracker;\r\nclass ChannelzChildrenTrackerStub extends ChannelzChildrenTracker {\r\n    refChild() { }\r\n    unrefChild() { }\r\n}\r\nexports.ChannelzChildrenTrackerStub = ChannelzChildrenTrackerStub;\r\nclass ChannelzCallTracker {\r\n    constructor() {\r\n        this.callsStarted = 0;\r\n        this.callsSucceeded = 0;\r\n        this.callsFailed = 0;\r\n        this.lastCallStartedTimestamp = null;\r\n    }\r\n    addCallStarted() {\r\n        this.callsStarted += 1;\r\n        this.lastCallStartedTimestamp = new Date();\r\n    }\r\n    addCallSucceeded() {\r\n        this.callsSucceeded += 1;\r\n    }\r\n    addCallFailed() {\r\n        this.callsFailed += 1;\r\n    }\r\n}\r\nexports.ChannelzCallTracker = ChannelzCallTracker;\r\nclass ChannelzCallTrackerStub extends ChannelzCallTracker {\r\n    addCallStarted() { }\r\n    addCallSucceeded() { }\r\n    addCallFailed() { }\r\n}\r\nexports.ChannelzCallTrackerStub = ChannelzCallTrackerStub;\r\nconst entityMaps = {\r\n    [\"channel\" /* EntityTypes.channel */]: new ordered_map_1.OrderedMap(),\r\n    [\"subchannel\" /* EntityTypes.subchannel */]: new ordered_map_1.OrderedMap(),\r\n    [\"server\" /* EntityTypes.server */]: new ordered_map_1.OrderedMap(),\r\n    [\"socket\" /* EntityTypes.socket */]: new ordered_map_1.OrderedMap(),\r\n};\r\nconst generateRegisterFn = (kind) => {\r\n    let nextId = 1;\r\n    function getNextId() {\r\n        return nextId++;\r\n    }\r\n    const entityMap = entityMaps[kind];\r\n    return (name, getInfo, channelzEnabled) => {\r\n        const id = getNextId();\r\n        const ref = { id, name, kind };\r\n        if (channelzEnabled) {\r\n            entityMap.setElement(id, { ref, getInfo });\r\n        }\r\n        return ref;\r\n    };\r\n};\r\nexports.registerChannelzChannel = generateRegisterFn(\"channel\" /* EntityTypes.channel */);\r\nexports.registerChannelzSubchannel = generateRegisterFn(\"subchannel\" /* EntityTypes.subchannel */);\r\nexports.registerChannelzServer = generateRegisterFn(\"server\" /* EntityTypes.server */);\r\nexports.registerChannelzSocket = generateRegisterFn(\"socket\" /* EntityTypes.socket */);\r\nfunction unregisterChannelzRef(ref) {\r\n    entityMaps[ref.kind].eraseElementByKey(ref.id);\r\n}\r\n/**\r\n * Parse a single section of an IPv6 address as two bytes\r\n * @param addressSection A hexadecimal string of length up to 4\r\n * @returns The pair of bytes representing this address section\r\n */\r\nfunction parseIPv6Section(addressSection) {\r\n    const numberValue = Number.parseInt(addressSection, 16);\r\n    return [(numberValue / 256) | 0, numberValue % 256];\r\n}\r\n/**\r\n * Parse a chunk of an IPv6 address string to some number of bytes\r\n * @param addressChunk Some number of segments of up to 4 hexadecimal\r\n *   characters each, joined by colons.\r\n * @returns The list of bytes representing this address chunk\r\n */\r\nfunction parseIPv6Chunk(addressChunk) {\r\n    if (addressChunk === '') {\r\n        return [];\r\n    }\r\n    const bytePairs = addressChunk\r\n        .split(':')\r\n        .map(section => parseIPv6Section(section));\r\n    const result = [];\r\n    return result.concat(...bytePairs);\r\n}\r\nfunction isIPv6MappedIPv4(ipAddress) {\r\n    return (0, net_1.isIPv6)(ipAddress) && ipAddress.toLowerCase().startsWith('::ffff:') && (0, net_1.isIPv4)(ipAddress.substring(7));\r\n}\r\n/**\r\n * Prerequisite: isIPv4(ipAddress)\r\n * @param ipAddress\r\n * @returns\r\n */\r\nfunction ipv4AddressStringToBuffer(ipAddress) {\r\n    return Buffer.from(Uint8Array.from(ipAddress.split('.').map(segment => Number.parseInt(segment))));\r\n}\r\n/**\r\n * Converts an IPv4 or IPv6 address from string representation to binary\r\n * representation\r\n * @param ipAddress an IP address in standard IPv4 or IPv6 text format\r\n * @returns\r\n */\r\nfunction ipAddressStringToBuffer(ipAddress) {\r\n    if ((0, net_1.isIPv4)(ipAddress)) {\r\n        return ipv4AddressStringToBuffer(ipAddress);\r\n    }\r\n    else if (isIPv6MappedIPv4(ipAddress)) {\r\n        return ipv4AddressStringToBuffer(ipAddress.substring(7));\r\n    }\r\n    else if ((0, net_1.isIPv6)(ipAddress)) {\r\n        let leftSection;\r\n        let rightSection;\r\n        const doubleColonIndex = ipAddress.indexOf('::');\r\n        if (doubleColonIndex === -1) {\r\n            leftSection = ipAddress;\r\n            rightSection = '';\r\n        }\r\n        else {\r\n            leftSection = ipAddress.substring(0, doubleColonIndex);\r\n            rightSection = ipAddress.substring(doubleColonIndex + 2);\r\n        }\r\n        const leftBuffer = Buffer.from(parseIPv6Chunk(leftSection));\r\n        const rightBuffer = Buffer.from(parseIPv6Chunk(rightSection));\r\n        const middleBuffer = Buffer.alloc(16 - leftBuffer.length - rightBuffer.length, 0);\r\n        return Buffer.concat([leftBuffer, middleBuffer, rightBuffer]);\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\nfunction connectivityStateToMessage(state) {\r\n    switch (state) {\r\n        case connectivity_state_1.ConnectivityState.CONNECTING:\r\n            return {\r\n                state: 'CONNECTING',\r\n            };\r\n        case connectivity_state_1.ConnectivityState.IDLE:\r\n            return {\r\n                state: 'IDLE',\r\n            };\r\n        case connectivity_state_1.ConnectivityState.READY:\r\n            return {\r\n                state: 'READY',\r\n            };\r\n        case connectivity_state_1.ConnectivityState.SHUTDOWN:\r\n            return {\r\n                state: 'SHUTDOWN',\r\n            };\r\n        case connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE:\r\n            return {\r\n                state: 'TRANSIENT_FAILURE',\r\n            };\r\n        default:\r\n            return {\r\n                state: 'UNKNOWN',\r\n            };\r\n    }\r\n}\r\nfunction dateToProtoTimestamp(date) {\r\n    if (!date) {\r\n        return null;\r\n    }\r\n    const millisSinceEpoch = date.getTime();\r\n    return {\r\n        seconds: (millisSinceEpoch / 1000) | 0,\r\n        nanos: (millisSinceEpoch % 1000) * 1000000,\r\n    };\r\n}\r\nfunction getChannelMessage(channelEntry) {\r\n    const resolvedInfo = channelEntry.getInfo();\r\n    const channelRef = [];\r\n    const subchannelRef = [];\r\n    resolvedInfo.children.channels.forEach(el => {\r\n        channelRef.push(channelRefToMessage(el[1].ref));\r\n    });\r\n    resolvedInfo.children.subchannels.forEach(el => {\r\n        subchannelRef.push(subchannelRefToMessage(el[1].ref));\r\n    });\r\n    return {\r\n        ref: channelRefToMessage(channelEntry.ref),\r\n        data: {\r\n            target: resolvedInfo.target,\r\n            state: connectivityStateToMessage(resolvedInfo.state),\r\n            calls_started: resolvedInfo.callTracker.callsStarted,\r\n            calls_succeeded: resolvedInfo.callTracker.callsSucceeded,\r\n            calls_failed: resolvedInfo.callTracker.callsFailed,\r\n            last_call_started_timestamp: dateToProtoTimestamp(resolvedInfo.callTracker.lastCallStartedTimestamp),\r\n            trace: resolvedInfo.trace.getTraceMessage(),\r\n        },\r\n        channel_ref: channelRef,\r\n        subchannel_ref: subchannelRef,\r\n    };\r\n}\r\nfunction GetChannel(call, callback) {\r\n    const channelId = parseInt(call.request.channel_id, 10);\r\n    const channelEntry = entityMaps[\"channel\" /* EntityTypes.channel */].getElementByKey(channelId);\r\n    if (channelEntry === undefined) {\r\n        callback({\r\n            code: constants_1.Status.NOT_FOUND,\r\n            details: 'No channel data found for id ' + channelId,\r\n        });\r\n        return;\r\n    }\r\n    callback(null, { channel: getChannelMessage(channelEntry) });\r\n}\r\nfunction GetTopChannels(call, callback) {\r\n    const maxResults = parseInt(call.request.max_results, 10) || DEFAULT_MAX_RESULTS;\r\n    const resultList = [];\r\n    const startId = parseInt(call.request.start_channel_id, 10);\r\n    const channelEntries = entityMaps[\"channel\" /* EntityTypes.channel */];\r\n    let i;\r\n    for (i = channelEntries.lowerBound(startId); !i.equals(channelEntries.end()) && resultList.length < maxResults; i = i.next()) {\r\n        resultList.push(getChannelMessage(i.pointer[1]));\r\n    }\r\n    callback(null, {\r\n        channel: resultList,\r\n        end: i.equals(channelEntries.end()),\r\n    });\r\n}\r\nfunction getServerMessage(serverEntry) {\r\n    const resolvedInfo = serverEntry.getInfo();\r\n    const listenSocket = [];\r\n    resolvedInfo.listenerChildren.sockets.forEach(el => {\r\n        listenSocket.push(socketRefToMessage(el[1].ref));\r\n    });\r\n    return {\r\n        ref: serverRefToMessage(serverEntry.ref),\r\n        data: {\r\n            calls_started: resolvedInfo.callTracker.callsStarted,\r\n            calls_succeeded: resolvedInfo.callTracker.callsSucceeded,\r\n            calls_failed: resolvedInfo.callTracker.callsFailed,\r\n            last_call_started_timestamp: dateToProtoTimestamp(resolvedInfo.callTracker.lastCallStartedTimestamp),\r\n            trace: resolvedInfo.trace.getTraceMessage(),\r\n        },\r\n        listen_socket: listenSocket,\r\n    };\r\n}\r\nfunction GetServer(call, callback) {\r\n    const serverId = parseInt(call.request.server_id, 10);\r\n    const serverEntries = entityMaps[\"server\" /* EntityTypes.server */];\r\n    const serverEntry = serverEntries.getElementByKey(serverId);\r\n    if (serverEntry === undefined) {\r\n        callback({\r\n            code: constants_1.Status.NOT_FOUND,\r\n            details: 'No server data found for id ' + serverId,\r\n        });\r\n        return;\r\n    }\r\n    callback(null, { server: getServerMessage(serverEntry) });\r\n}\r\nfunction GetServers(call, callback) {\r\n    const maxResults = parseInt(call.request.max_results, 10) || DEFAULT_MAX_RESULTS;\r\n    const startId = parseInt(call.request.start_server_id, 10);\r\n    const serverEntries = entityMaps[\"server\" /* EntityTypes.server */];\r\n    const resultList = [];\r\n    let i;\r\n    for (i = serverEntries.lowerBound(startId); !i.equals(serverEntries.end()) && resultList.length < maxResults; i = i.next()) {\r\n        resultList.push(getServerMessage(i.pointer[1]));\r\n    }\r\n    callback(null, {\r\n        server: resultList,\r\n        end: i.equals(serverEntries.end()),\r\n    });\r\n}\r\nfunction GetSubchannel(call, callback) {\r\n    const subchannelId = parseInt(call.request.subchannel_id, 10);\r\n    const subchannelEntry = entityMaps[\"subchannel\" /* EntityTypes.subchannel */].getElementByKey(subchannelId);\r\n    if (subchannelEntry === undefined) {\r\n        callback({\r\n            code: constants_1.Status.NOT_FOUND,\r\n            details: 'No subchannel data found for id ' + subchannelId,\r\n        });\r\n        return;\r\n    }\r\n    const resolvedInfo = subchannelEntry.getInfo();\r\n    const listenSocket = [];\r\n    resolvedInfo.children.sockets.forEach(el => {\r\n        listenSocket.push(socketRefToMessage(el[1].ref));\r\n    });\r\n    const subchannelMessage = {\r\n        ref: subchannelRefToMessage(subchannelEntry.ref),\r\n        data: {\r\n            target: resolvedInfo.target,\r\n            state: connectivityStateToMessage(resolvedInfo.state),\r\n            calls_started: resolvedInfo.callTracker.callsStarted,\r\n            calls_succeeded: resolvedInfo.callTracker.callsSucceeded,\r\n            calls_failed: resolvedInfo.callTracker.callsFailed,\r\n            last_call_started_timestamp: dateToProtoTimestamp(resolvedInfo.callTracker.lastCallStartedTimestamp),\r\n            trace: resolvedInfo.trace.getTraceMessage(),\r\n        },\r\n        socket_ref: listenSocket,\r\n    };\r\n    callback(null, { subchannel: subchannelMessage });\r\n}\r\nfunction subchannelAddressToAddressMessage(subchannelAddress) {\r\n    var _a;\r\n    if ((0, subchannel_address_1.isTcpSubchannelAddress)(subchannelAddress)) {\r\n        return {\r\n            address: 'tcpip_address',\r\n            tcpip_address: {\r\n                ip_address: (_a = ipAddressStringToBuffer(subchannelAddress.host)) !== null && _a !== void 0 ? _a : undefined,\r\n                port: subchannelAddress.port,\r\n            },\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            address: 'uds_address',\r\n            uds_address: {\r\n                filename: subchannelAddress.path,\r\n            },\r\n        };\r\n    }\r\n}\r\nfunction GetSocket(call, callback) {\r\n    var _a, _b, _c, _d, _e;\r\n    const socketId = parseInt(call.request.socket_id, 10);\r\n    const socketEntry = entityMaps[\"socket\" /* EntityTypes.socket */].getElementByKey(socketId);\r\n    if (socketEntry === undefined) {\r\n        callback({\r\n            code: constants_1.Status.NOT_FOUND,\r\n            details: 'No socket data found for id ' + socketId,\r\n        });\r\n        return;\r\n    }\r\n    const resolvedInfo = socketEntry.getInfo();\r\n    const securityMessage = resolvedInfo.security\r\n        ? {\r\n            model: 'tls',\r\n            tls: {\r\n                cipher_suite: resolvedInfo.security.cipherSuiteStandardName\r\n                    ? 'standard_name'\r\n                    : 'other_name',\r\n                standard_name: (_a = resolvedInfo.security.cipherSuiteStandardName) !== null && _a !== void 0 ? _a : undefined,\r\n                other_name: (_b = resolvedInfo.security.cipherSuiteOtherName) !== null && _b !== void 0 ? _b : undefined,\r\n                local_certificate: (_c = resolvedInfo.security.localCertificate) !== null && _c !== void 0 ? _c : undefined,\r\n                remote_certificate: (_d = resolvedInfo.security.remoteCertificate) !== null && _d !== void 0 ? _d : undefined,\r\n            },\r\n        }\r\n        : null;\r\n    const socketMessage = {\r\n        ref: socketRefToMessage(socketEntry.ref),\r\n        local: resolvedInfo.localAddress\r\n            ? subchannelAddressToAddressMessage(resolvedInfo.localAddress)\r\n            : null,\r\n        remote: resolvedInfo.remoteAddress\r\n            ? subchannelAddressToAddressMessage(resolvedInfo.remoteAddress)\r\n            : null,\r\n        remote_name: (_e = resolvedInfo.remoteName) !== null && _e !== void 0 ? _e : undefined,\r\n        security: securityMessage,\r\n        data: {\r\n            keep_alives_sent: resolvedInfo.keepAlivesSent,\r\n            streams_started: resolvedInfo.streamsStarted,\r\n            streams_succeeded: resolvedInfo.streamsSucceeded,\r\n            streams_failed: resolvedInfo.streamsFailed,\r\n            last_local_stream_created_timestamp: dateToProtoTimestamp(resolvedInfo.lastLocalStreamCreatedTimestamp),\r\n            last_remote_stream_created_timestamp: dateToProtoTimestamp(resolvedInfo.lastRemoteStreamCreatedTimestamp),\r\n            messages_received: resolvedInfo.messagesReceived,\r\n            messages_sent: resolvedInfo.messagesSent,\r\n            last_message_received_timestamp: dateToProtoTimestamp(resolvedInfo.lastMessageReceivedTimestamp),\r\n            last_message_sent_timestamp: dateToProtoTimestamp(resolvedInfo.lastMessageSentTimestamp),\r\n            local_flow_control_window: resolvedInfo.localFlowControlWindow\r\n                ? { value: resolvedInfo.localFlowControlWindow }\r\n                : null,\r\n            remote_flow_control_window: resolvedInfo.remoteFlowControlWindow\r\n                ? { value: resolvedInfo.remoteFlowControlWindow }\r\n                : null,\r\n        },\r\n    };\r\n    callback(null, { socket: socketMessage });\r\n}\r\nfunction GetServerSockets(call, callback) {\r\n    const serverId = parseInt(call.request.server_id, 10);\r\n    const serverEntry = entityMaps[\"server\" /* EntityTypes.server */].getElementByKey(serverId);\r\n    if (serverEntry === undefined) {\r\n        callback({\r\n            code: constants_1.Status.NOT_FOUND,\r\n            details: 'No server data found for id ' + serverId,\r\n        });\r\n        return;\r\n    }\r\n    const startId = parseInt(call.request.start_socket_id, 10);\r\n    const maxResults = parseInt(call.request.max_results, 10) || DEFAULT_MAX_RESULTS;\r\n    const resolvedInfo = serverEntry.getInfo();\r\n    // If we wanted to include listener sockets in the result, this line would\r\n    // instead say\r\n    // const allSockets = resolvedInfo.listenerChildren.sockets.concat(resolvedInfo.sessionChildren.sockets).sort((ref1, ref2) => ref1.id - ref2.id);\r\n    const allSockets = resolvedInfo.sessionChildren.sockets;\r\n    const resultList = [];\r\n    let i;\r\n    for (i = allSockets.lowerBound(startId); !i.equals(allSockets.end()) && resultList.length < maxResults; i = i.next()) {\r\n        resultList.push(socketRefToMessage(i.pointer[1].ref));\r\n    }\r\n    callback(null, {\r\n        socket_ref: resultList,\r\n        end: i.equals(allSockets.end()),\r\n    });\r\n}\r\nfunction getChannelzHandlers() {\r\n    return {\r\n        GetChannel,\r\n        GetTopChannels,\r\n        GetServer,\r\n        GetServers,\r\n        GetSubchannel,\r\n        GetSocket,\r\n        GetServerSockets,\r\n    };\r\n}\r\nlet loadedChannelzDefinition = null;\r\nfunction getChannelzServiceDefinition() {\r\n    if (loadedChannelzDefinition) {\r\n        return loadedChannelzDefinition;\r\n    }\r\n    /* The purpose of this complexity is to avoid loading @grpc/proto-loader at\r\n     * runtime for users who will not use/enable channelz. */\r\n    const loaderLoadSync = (__webpack_require__(/*! @grpc/proto-loader */ \"(rsc)/./node_modules/@grpc/proto-loader/build/src/index.js\").loadSync);\r\n    const loadedProto = loaderLoadSync('channelz.proto', {\r\n        keepCase: true,\r\n        longs: String,\r\n        enums: String,\r\n        defaults: true,\r\n        oneofs: true,\r\n        includeDirs: [`${__dirname}/../../proto`],\r\n    });\r\n    const channelzGrpcObject = (0, make_client_1.loadPackageDefinition)(loadedProto);\r\n    loadedChannelzDefinition =\r\n        channelzGrpcObject.grpc.channelz.v1.Channelz.service;\r\n    return loadedChannelzDefinition;\r\n}\r\nfunction setup() {\r\n    (0, admin_1.registerAdminService)(getChannelzServiceDefinition, getChannelzHandlers);\r\n}\r\n//# sourceMappingURL=channelz.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/channelz.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/client-interceptors.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/client-interceptors.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.InterceptingCall = exports.RequesterBuilder = exports.ListenerBuilder = exports.InterceptorConfigurationError = void 0;\r\nexports.getInterceptingCall = getInterceptingCall;\r\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/metadata.js\");\r\nconst call_interface_1 = __webpack_require__(/*! ./call-interface */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/call-interface.js\");\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nconst error_1 = __webpack_require__(/*! ./error */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/error.js\");\r\n/**\r\n * Error class associated with passing both interceptors and interceptor\r\n * providers to a client constructor or as call options.\r\n */\r\nclass InterceptorConfigurationError extends Error {\r\n    constructor(message) {\r\n        super(message);\r\n        this.name = 'InterceptorConfigurationError';\r\n        Error.captureStackTrace(this, InterceptorConfigurationError);\r\n    }\r\n}\r\nexports.InterceptorConfigurationError = InterceptorConfigurationError;\r\nclass ListenerBuilder {\r\n    constructor() {\r\n        this.metadata = undefined;\r\n        this.message = undefined;\r\n        this.status = undefined;\r\n    }\r\n    withOnReceiveMetadata(onReceiveMetadata) {\r\n        this.metadata = onReceiveMetadata;\r\n        return this;\r\n    }\r\n    withOnReceiveMessage(onReceiveMessage) {\r\n        this.message = onReceiveMessage;\r\n        return this;\r\n    }\r\n    withOnReceiveStatus(onReceiveStatus) {\r\n        this.status = onReceiveStatus;\r\n        return this;\r\n    }\r\n    build() {\r\n        return {\r\n            onReceiveMetadata: this.metadata,\r\n            onReceiveMessage: this.message,\r\n            onReceiveStatus: this.status,\r\n        };\r\n    }\r\n}\r\nexports.ListenerBuilder = ListenerBuilder;\r\nclass RequesterBuilder {\r\n    constructor() {\r\n        this.start = undefined;\r\n        this.message = undefined;\r\n        this.halfClose = undefined;\r\n        this.cancel = undefined;\r\n    }\r\n    withStart(start) {\r\n        this.start = start;\r\n        return this;\r\n    }\r\n    withSendMessage(sendMessage) {\r\n        this.message = sendMessage;\r\n        return this;\r\n    }\r\n    withHalfClose(halfClose) {\r\n        this.halfClose = halfClose;\r\n        return this;\r\n    }\r\n    withCancel(cancel) {\r\n        this.cancel = cancel;\r\n        return this;\r\n    }\r\n    build() {\r\n        return {\r\n            start: this.start,\r\n            sendMessage: this.message,\r\n            halfClose: this.halfClose,\r\n            cancel: this.cancel,\r\n        };\r\n    }\r\n}\r\nexports.RequesterBuilder = RequesterBuilder;\r\n/**\r\n * A Listener with a default pass-through implementation of each method. Used\r\n * for filling out Listeners with some methods omitted.\r\n */\r\nconst defaultListener = {\r\n    onReceiveMetadata: (metadata, next) => {\r\n        next(metadata);\r\n    },\r\n    onReceiveMessage: (message, next) => {\r\n        next(message);\r\n    },\r\n    onReceiveStatus: (status, next) => {\r\n        next(status);\r\n    },\r\n};\r\n/**\r\n * A Requester with a default pass-through implementation of each method. Used\r\n * for filling out Requesters with some methods omitted.\r\n */\r\nconst defaultRequester = {\r\n    start: (metadata, listener, next) => {\r\n        next(metadata, listener);\r\n    },\r\n    sendMessage: (message, next) => {\r\n        next(message);\r\n    },\r\n    halfClose: next => {\r\n        next();\r\n    },\r\n    cancel: next => {\r\n        next();\r\n    },\r\n};\r\nclass InterceptingCall {\r\n    constructor(nextCall, requester) {\r\n        var _a, _b, _c, _d;\r\n        this.nextCall = nextCall;\r\n        /**\r\n         * Indicates that metadata has been passed to the requester's start\r\n         * method but it has not been passed to the corresponding next callback\r\n         */\r\n        this.processingMetadata = false;\r\n        /**\r\n         * Message context for a pending message that is waiting for\r\n         */\r\n        this.pendingMessageContext = null;\r\n        /**\r\n         * Indicates that a message has been passed to the requester's sendMessage\r\n         * method but it has not been passed to the corresponding next callback\r\n         */\r\n        this.processingMessage = false;\r\n        /**\r\n         * Indicates that a status was received but could not be propagated because\r\n         * a message was still being processed.\r\n         */\r\n        this.pendingHalfClose = false;\r\n        if (requester) {\r\n            this.requester = {\r\n                start: (_a = requester.start) !== null && _a !== void 0 ? _a : defaultRequester.start,\r\n                sendMessage: (_b = requester.sendMessage) !== null && _b !== void 0 ? _b : defaultRequester.sendMessage,\r\n                halfClose: (_c = requester.halfClose) !== null && _c !== void 0 ? _c : defaultRequester.halfClose,\r\n                cancel: (_d = requester.cancel) !== null && _d !== void 0 ? _d : defaultRequester.cancel,\r\n            };\r\n        }\r\n        else {\r\n            this.requester = defaultRequester;\r\n        }\r\n    }\r\n    cancelWithStatus(status, details) {\r\n        this.requester.cancel(() => {\r\n            this.nextCall.cancelWithStatus(status, details);\r\n        });\r\n    }\r\n    getPeer() {\r\n        return this.nextCall.getPeer();\r\n    }\r\n    processPendingMessage() {\r\n        if (this.pendingMessageContext) {\r\n            this.nextCall.sendMessageWithContext(this.pendingMessageContext, this.pendingMessage);\r\n            this.pendingMessageContext = null;\r\n            this.pendingMessage = null;\r\n        }\r\n    }\r\n    processPendingHalfClose() {\r\n        if (this.pendingHalfClose) {\r\n            this.nextCall.halfClose();\r\n        }\r\n    }\r\n    start(metadata, interceptingListener) {\r\n        var _a, _b, _c, _d, _e, _f;\r\n        const fullInterceptingListener = {\r\n            onReceiveMetadata: (_b = (_a = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveMetadata) === null || _a === void 0 ? void 0 : _a.bind(interceptingListener)) !== null && _b !== void 0 ? _b : (metadata => { }),\r\n            onReceiveMessage: (_d = (_c = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveMessage) === null || _c === void 0 ? void 0 : _c.bind(interceptingListener)) !== null && _d !== void 0 ? _d : (message => { }),\r\n            onReceiveStatus: (_f = (_e = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveStatus) === null || _e === void 0 ? void 0 : _e.bind(interceptingListener)) !== null && _f !== void 0 ? _f : (status => { }),\r\n        };\r\n        this.processingMetadata = true;\r\n        this.requester.start(metadata, fullInterceptingListener, (md, listener) => {\r\n            var _a, _b, _c;\r\n            this.processingMetadata = false;\r\n            let finalInterceptingListener;\r\n            if ((0, call_interface_1.isInterceptingListener)(listener)) {\r\n                finalInterceptingListener = listener;\r\n            }\r\n            else {\r\n                const fullListener = {\r\n                    onReceiveMetadata: (_a = listener.onReceiveMetadata) !== null && _a !== void 0 ? _a : defaultListener.onReceiveMetadata,\r\n                    onReceiveMessage: (_b = listener.onReceiveMessage) !== null && _b !== void 0 ? _b : defaultListener.onReceiveMessage,\r\n                    onReceiveStatus: (_c = listener.onReceiveStatus) !== null && _c !== void 0 ? _c : defaultListener.onReceiveStatus,\r\n                };\r\n                finalInterceptingListener = new call_interface_1.InterceptingListenerImpl(fullListener, fullInterceptingListener);\r\n            }\r\n            this.nextCall.start(md, finalInterceptingListener);\r\n            this.processPendingMessage();\r\n            this.processPendingHalfClose();\r\n        });\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    sendMessageWithContext(context, message) {\r\n        this.processingMessage = true;\r\n        this.requester.sendMessage(message, finalMessage => {\r\n            this.processingMessage = false;\r\n            if (this.processingMetadata) {\r\n                this.pendingMessageContext = context;\r\n                this.pendingMessage = message;\r\n            }\r\n            else {\r\n                this.nextCall.sendMessageWithContext(context, finalMessage);\r\n                this.processPendingHalfClose();\r\n            }\r\n        });\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    sendMessage(message) {\r\n        this.sendMessageWithContext({}, message);\r\n    }\r\n    startRead() {\r\n        this.nextCall.startRead();\r\n    }\r\n    halfClose() {\r\n        this.requester.halfClose(() => {\r\n            if (this.processingMetadata || this.processingMessage) {\r\n                this.pendingHalfClose = true;\r\n            }\r\n            else {\r\n                this.nextCall.halfClose();\r\n            }\r\n        });\r\n    }\r\n}\r\nexports.InterceptingCall = InterceptingCall;\r\nfunction getCall(channel, path, options) {\r\n    var _a, _b;\r\n    const deadline = (_a = options.deadline) !== null && _a !== void 0 ? _a : Infinity;\r\n    const host = options.host;\r\n    const parent = (_b = options.parent) !== null && _b !== void 0 ? _b : null;\r\n    const propagateFlags = options.propagate_flags;\r\n    const credentials = options.credentials;\r\n    const call = channel.createCall(path, deadline, host, parent, propagateFlags);\r\n    if (credentials) {\r\n        call.setCredentials(credentials);\r\n    }\r\n    return call;\r\n}\r\n/**\r\n * InterceptingCall implementation that directly owns the underlying Call\r\n * object and handles serialization and deseraizliation.\r\n */\r\nclass BaseInterceptingCall {\r\n    constructor(call, \r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    methodDefinition) {\r\n        this.call = call;\r\n        this.methodDefinition = methodDefinition;\r\n    }\r\n    cancelWithStatus(status, details) {\r\n        this.call.cancelWithStatus(status, details);\r\n    }\r\n    getPeer() {\r\n        return this.call.getPeer();\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    sendMessageWithContext(context, message) {\r\n        let serialized;\r\n        try {\r\n            serialized = this.methodDefinition.requestSerialize(message);\r\n        }\r\n        catch (e) {\r\n            this.call.cancelWithStatus(constants_1.Status.INTERNAL, `Request message serialization failure: ${(0, error_1.getErrorMessage)(e)}`);\r\n            return;\r\n        }\r\n        this.call.sendMessageWithContext(context, serialized);\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    sendMessage(message) {\r\n        this.sendMessageWithContext({}, message);\r\n    }\r\n    start(metadata, interceptingListener) {\r\n        let readError = null;\r\n        this.call.start(metadata, {\r\n            onReceiveMetadata: metadata => {\r\n                var _a;\r\n                (_a = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveMetadata) === null || _a === void 0 ? void 0 : _a.call(interceptingListener, metadata);\r\n            },\r\n            onReceiveMessage: message => {\r\n                var _a;\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                let deserialized;\r\n                try {\r\n                    deserialized = this.methodDefinition.responseDeserialize(message);\r\n                }\r\n                catch (e) {\r\n                    readError = {\r\n                        code: constants_1.Status.INTERNAL,\r\n                        details: `Response message parsing error: ${(0, error_1.getErrorMessage)(e)}`,\r\n                        metadata: new metadata_1.Metadata(),\r\n                    };\r\n                    this.call.cancelWithStatus(readError.code, readError.details);\r\n                    return;\r\n                }\r\n                (_a = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveMessage) === null || _a === void 0 ? void 0 : _a.call(interceptingListener, deserialized);\r\n            },\r\n            onReceiveStatus: status => {\r\n                var _a, _b;\r\n                if (readError) {\r\n                    (_a = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveStatus) === null || _a === void 0 ? void 0 : _a.call(interceptingListener, readError);\r\n                }\r\n                else {\r\n                    (_b = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveStatus) === null || _b === void 0 ? void 0 : _b.call(interceptingListener, status);\r\n                }\r\n            },\r\n        });\r\n    }\r\n    startRead() {\r\n        this.call.startRead();\r\n    }\r\n    halfClose() {\r\n        this.call.halfClose();\r\n    }\r\n}\r\n/**\r\n * BaseInterceptingCall with special-cased behavior for methods with unary\r\n * responses.\r\n */\r\nclass BaseUnaryInterceptingCall extends BaseInterceptingCall {\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    constructor(call, methodDefinition) {\r\n        super(call, methodDefinition);\r\n    }\r\n    start(metadata, listener) {\r\n        var _a, _b;\r\n        let receivedMessage = false;\r\n        const wrapperListener = {\r\n            onReceiveMetadata: (_b = (_a = listener === null || listener === void 0 ? void 0 : listener.onReceiveMetadata) === null || _a === void 0 ? void 0 : _a.bind(listener)) !== null && _b !== void 0 ? _b : (metadata => { }),\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            onReceiveMessage: (message) => {\r\n                var _a;\r\n                receivedMessage = true;\r\n                (_a = listener === null || listener === void 0 ? void 0 : listener.onReceiveMessage) === null || _a === void 0 ? void 0 : _a.call(listener, message);\r\n            },\r\n            onReceiveStatus: (status) => {\r\n                var _a, _b;\r\n                if (!receivedMessage) {\r\n                    (_a = listener === null || listener === void 0 ? void 0 : listener.onReceiveMessage) === null || _a === void 0 ? void 0 : _a.call(listener, null);\r\n                }\r\n                (_b = listener === null || listener === void 0 ? void 0 : listener.onReceiveStatus) === null || _b === void 0 ? void 0 : _b.call(listener, status);\r\n            },\r\n        };\r\n        super.start(metadata, wrapperListener);\r\n        this.call.startRead();\r\n    }\r\n}\r\n/**\r\n * BaseInterceptingCall with special-cased behavior for methods with streaming\r\n * responses.\r\n */\r\nclass BaseStreamingInterceptingCall extends BaseInterceptingCall {\r\n}\r\nfunction getBottomInterceptingCall(channel, options, \r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nmethodDefinition) {\r\n    const call = getCall(channel, methodDefinition.path, options);\r\n    if (methodDefinition.responseStream) {\r\n        return new BaseStreamingInterceptingCall(call, methodDefinition);\r\n    }\r\n    else {\r\n        return new BaseUnaryInterceptingCall(call, methodDefinition);\r\n    }\r\n}\r\nfunction getInterceptingCall(interceptorArgs, \r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nmethodDefinition, options, channel) {\r\n    if (interceptorArgs.clientInterceptors.length > 0 &&\r\n        interceptorArgs.clientInterceptorProviders.length > 0) {\r\n        throw new InterceptorConfigurationError('Both interceptors and interceptor_providers were passed as options ' +\r\n            'to the client constructor. Only one of these is allowed.');\r\n    }\r\n    if (interceptorArgs.callInterceptors.length > 0 &&\r\n        interceptorArgs.callInterceptorProviders.length > 0) {\r\n        throw new InterceptorConfigurationError('Both interceptors and interceptor_providers were passed as call ' +\r\n            'options. Only one of these is allowed.');\r\n    }\r\n    let interceptors = [];\r\n    // Interceptors passed to the call override interceptors passed to the client constructor\r\n    if (interceptorArgs.callInterceptors.length > 0 ||\r\n        interceptorArgs.callInterceptorProviders.length > 0) {\r\n        interceptors = []\r\n            .concat(interceptorArgs.callInterceptors, interceptorArgs.callInterceptorProviders.map(provider => provider(methodDefinition)))\r\n            .filter(interceptor => interceptor);\r\n        // Filter out falsy values when providers return nothing\r\n    }\r\n    else {\r\n        interceptors = []\r\n            .concat(interceptorArgs.clientInterceptors, interceptorArgs.clientInterceptorProviders.map(provider => provider(methodDefinition)))\r\n            .filter(interceptor => interceptor);\r\n        // Filter out falsy values when providers return nothing\r\n    }\r\n    const interceptorOptions = Object.assign({}, options, {\r\n        method_definition: methodDefinition,\r\n    });\r\n    /* For each interceptor in the list, the nextCall function passed to it is\r\n     * based on the next interceptor in the list, using a nextCall function\r\n     * constructed with the following interceptor in the list, and so on. The\r\n     * initialValue, which is effectively at the end of the list, is a nextCall\r\n     * function that invokes getBottomInterceptingCall, the result of which\r\n     * handles (de)serialization and also gets the underlying call from the\r\n     * channel. */\r\n    const getCall = interceptors.reduceRight((nextCall, nextInterceptor) => {\r\n        return currentOptions => nextInterceptor(currentOptions, nextCall);\r\n    }, (finalOptions) => getBottomInterceptingCall(channel, finalOptions, methodDefinition));\r\n    return getCall(interceptorOptions);\r\n}\r\n//# sourceMappingURL=client-interceptors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/client-interceptors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/client.js":
/*!********************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/client.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Client = void 0;\r\nconst call_1 = __webpack_require__(/*! ./call */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/call.js\");\r\nconst channel_1 = __webpack_require__(/*! ./channel */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/channel.js\");\r\nconst connectivity_state_1 = __webpack_require__(/*! ./connectivity-state */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/connectivity-state.js\");\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/metadata.js\");\r\nconst client_interceptors_1 = __webpack_require__(/*! ./client-interceptors */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/client-interceptors.js\");\r\nconst CHANNEL_SYMBOL = Symbol();\r\nconst INTERCEPTOR_SYMBOL = Symbol();\r\nconst INTERCEPTOR_PROVIDER_SYMBOL = Symbol();\r\nconst CALL_INVOCATION_TRANSFORMER_SYMBOL = Symbol();\r\nfunction isFunction(arg) {\r\n    return typeof arg === 'function';\r\n}\r\nfunction getErrorStackString(error) {\r\n    var _a;\r\n    return ((_a = error.stack) === null || _a === void 0 ? void 0 : _a.split('\\n').slice(1).join('\\n')) || 'no stack trace available';\r\n}\r\n/**\r\n * A generic gRPC client. Primarily useful as a base class for all generated\r\n * clients.\r\n */\r\nclass Client {\r\n    constructor(address, credentials, options = {}) {\r\n        var _a, _b;\r\n        options = Object.assign({}, options);\r\n        this[INTERCEPTOR_SYMBOL] = (_a = options.interceptors) !== null && _a !== void 0 ? _a : [];\r\n        delete options.interceptors;\r\n        this[INTERCEPTOR_PROVIDER_SYMBOL] = (_b = options.interceptor_providers) !== null && _b !== void 0 ? _b : [];\r\n        delete options.interceptor_providers;\r\n        if (this[INTERCEPTOR_SYMBOL].length > 0 &&\r\n            this[INTERCEPTOR_PROVIDER_SYMBOL].length > 0) {\r\n            throw new Error('Both interceptors and interceptor_providers were passed as options ' +\r\n                'to the client constructor. Only one of these is allowed.');\r\n        }\r\n        this[CALL_INVOCATION_TRANSFORMER_SYMBOL] =\r\n            options.callInvocationTransformer;\r\n        delete options.callInvocationTransformer;\r\n        if (options.channelOverride) {\r\n            this[CHANNEL_SYMBOL] = options.channelOverride;\r\n        }\r\n        else if (options.channelFactoryOverride) {\r\n            const channelFactoryOverride = options.channelFactoryOverride;\r\n            delete options.channelFactoryOverride;\r\n            this[CHANNEL_SYMBOL] = channelFactoryOverride(address, credentials, options);\r\n        }\r\n        else {\r\n            this[CHANNEL_SYMBOL] = new channel_1.ChannelImplementation(address, credentials, options);\r\n        }\r\n    }\r\n    close() {\r\n        this[CHANNEL_SYMBOL].close();\r\n    }\r\n    getChannel() {\r\n        return this[CHANNEL_SYMBOL];\r\n    }\r\n    waitForReady(deadline, callback) {\r\n        const checkState = (err) => {\r\n            if (err) {\r\n                callback(new Error('Failed to connect before the deadline'));\r\n                return;\r\n            }\r\n            let newState;\r\n            try {\r\n                newState = this[CHANNEL_SYMBOL].getConnectivityState(true);\r\n            }\r\n            catch (e) {\r\n                callback(new Error('The channel has been closed'));\r\n                return;\r\n            }\r\n            if (newState === connectivity_state_1.ConnectivityState.READY) {\r\n                callback();\r\n            }\r\n            else {\r\n                try {\r\n                    this[CHANNEL_SYMBOL].watchConnectivityState(newState, deadline, checkState);\r\n                }\r\n                catch (e) {\r\n                    callback(new Error('The channel has been closed'));\r\n                }\r\n            }\r\n        };\r\n        setImmediate(checkState);\r\n    }\r\n    checkOptionalUnaryResponseArguments(arg1, arg2, arg3) {\r\n        if (isFunction(arg1)) {\r\n            return { metadata: new metadata_1.Metadata(), options: {}, callback: arg1 };\r\n        }\r\n        else if (isFunction(arg2)) {\r\n            if (arg1 instanceof metadata_1.Metadata) {\r\n                return { metadata: arg1, options: {}, callback: arg2 };\r\n            }\r\n            else {\r\n                return { metadata: new metadata_1.Metadata(), options: arg1, callback: arg2 };\r\n            }\r\n        }\r\n        else {\r\n            if (!(arg1 instanceof metadata_1.Metadata &&\r\n                arg2 instanceof Object &&\r\n                isFunction(arg3))) {\r\n                throw new Error('Incorrect arguments passed');\r\n            }\r\n            return { metadata: arg1, options: arg2, callback: arg3 };\r\n        }\r\n    }\r\n    makeUnaryRequest(method, serialize, deserialize, argument, metadata, options, callback) {\r\n        var _a, _b;\r\n        const checkedArguments = this.checkOptionalUnaryResponseArguments(metadata, options, callback);\r\n        const methodDefinition = {\r\n            path: method,\r\n            requestStream: false,\r\n            responseStream: false,\r\n            requestSerialize: serialize,\r\n            responseDeserialize: deserialize,\r\n        };\r\n        let callProperties = {\r\n            argument: argument,\r\n            metadata: checkedArguments.metadata,\r\n            call: new call_1.ClientUnaryCallImpl(),\r\n            channel: this[CHANNEL_SYMBOL],\r\n            methodDefinition: methodDefinition,\r\n            callOptions: checkedArguments.options,\r\n            callback: checkedArguments.callback,\r\n        };\r\n        if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {\r\n            callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL](callProperties);\r\n        }\r\n        const emitter = callProperties.call;\r\n        const interceptorArgs = {\r\n            clientInterceptors: this[INTERCEPTOR_SYMBOL],\r\n            clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],\r\n            callInterceptors: (_a = callProperties.callOptions.interceptors) !== null && _a !== void 0 ? _a : [],\r\n            callInterceptorProviders: (_b = callProperties.callOptions.interceptor_providers) !== null && _b !== void 0 ? _b : [],\r\n        };\r\n        const call = (0, client_interceptors_1.getInterceptingCall)(interceptorArgs, callProperties.methodDefinition, callProperties.callOptions, callProperties.channel);\r\n        /* This needs to happen before the emitter is used. Unfortunately we can't\r\n         * enforce this with the type system. We need to construct this emitter\r\n         * before calling the CallInvocationTransformer, and we need to create the\r\n         * call after that. */\r\n        emitter.call = call;\r\n        let responseMessage = null;\r\n        let receivedStatus = false;\r\n        let callerStackError = new Error();\r\n        call.start(callProperties.metadata, {\r\n            onReceiveMetadata: metadata => {\r\n                emitter.emit('metadata', metadata);\r\n            },\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            onReceiveMessage(message) {\r\n                if (responseMessage !== null) {\r\n                    call.cancelWithStatus(constants_1.Status.UNIMPLEMENTED, 'Too many responses received');\r\n                }\r\n                responseMessage = message;\r\n            },\r\n            onReceiveStatus(status) {\r\n                if (receivedStatus) {\r\n                    return;\r\n                }\r\n                receivedStatus = true;\r\n                if (status.code === constants_1.Status.OK) {\r\n                    if (responseMessage === null) {\r\n                        const callerStack = getErrorStackString(callerStackError);\r\n                        callProperties.callback((0, call_1.callErrorFromStatus)({\r\n                            code: constants_1.Status.UNIMPLEMENTED,\r\n                            details: 'No message received',\r\n                            metadata: status.metadata,\r\n                        }, callerStack));\r\n                    }\r\n                    else {\r\n                        callProperties.callback(null, responseMessage);\r\n                    }\r\n                }\r\n                else {\r\n                    const callerStack = getErrorStackString(callerStackError);\r\n                    callProperties.callback((0, call_1.callErrorFromStatus)(status, callerStack));\r\n                }\r\n                /* Avoid retaining the callerStackError object in the call context of\r\n                 * the status event handler. */\r\n                callerStackError = null;\r\n                emitter.emit('status', status);\r\n            },\r\n        });\r\n        call.sendMessage(argument);\r\n        call.halfClose();\r\n        return emitter;\r\n    }\r\n    makeClientStreamRequest(method, serialize, deserialize, metadata, options, callback) {\r\n        var _a, _b;\r\n        const checkedArguments = this.checkOptionalUnaryResponseArguments(metadata, options, callback);\r\n        const methodDefinition = {\r\n            path: method,\r\n            requestStream: true,\r\n            responseStream: false,\r\n            requestSerialize: serialize,\r\n            responseDeserialize: deserialize,\r\n        };\r\n        let callProperties = {\r\n            metadata: checkedArguments.metadata,\r\n            call: new call_1.ClientWritableStreamImpl(serialize),\r\n            channel: this[CHANNEL_SYMBOL],\r\n            methodDefinition: methodDefinition,\r\n            callOptions: checkedArguments.options,\r\n            callback: checkedArguments.callback,\r\n        };\r\n        if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {\r\n            callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL](callProperties);\r\n        }\r\n        const emitter = callProperties.call;\r\n        const interceptorArgs = {\r\n            clientInterceptors: this[INTERCEPTOR_SYMBOL],\r\n            clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],\r\n            callInterceptors: (_a = callProperties.callOptions.interceptors) !== null && _a !== void 0 ? _a : [],\r\n            callInterceptorProviders: (_b = callProperties.callOptions.interceptor_providers) !== null && _b !== void 0 ? _b : [],\r\n        };\r\n        const call = (0, client_interceptors_1.getInterceptingCall)(interceptorArgs, callProperties.methodDefinition, callProperties.callOptions, callProperties.channel);\r\n        /* This needs to happen before the emitter is used. Unfortunately we can't\r\n         * enforce this with the type system. We need to construct this emitter\r\n         * before calling the CallInvocationTransformer, and we need to create the\r\n         * call after that. */\r\n        emitter.call = call;\r\n        let responseMessage = null;\r\n        let receivedStatus = false;\r\n        let callerStackError = new Error();\r\n        call.start(callProperties.metadata, {\r\n            onReceiveMetadata: metadata => {\r\n                emitter.emit('metadata', metadata);\r\n            },\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            onReceiveMessage(message) {\r\n                if (responseMessage !== null) {\r\n                    call.cancelWithStatus(constants_1.Status.UNIMPLEMENTED, 'Too many responses received');\r\n                }\r\n                responseMessage = message;\r\n                call.startRead();\r\n            },\r\n            onReceiveStatus(status) {\r\n                if (receivedStatus) {\r\n                    return;\r\n                }\r\n                receivedStatus = true;\r\n                if (status.code === constants_1.Status.OK) {\r\n                    if (responseMessage === null) {\r\n                        const callerStack = getErrorStackString(callerStackError);\r\n                        callProperties.callback((0, call_1.callErrorFromStatus)({\r\n                            code: constants_1.Status.UNIMPLEMENTED,\r\n                            details: 'No message received',\r\n                            metadata: status.metadata,\r\n                        }, callerStack));\r\n                    }\r\n                    else {\r\n                        callProperties.callback(null, responseMessage);\r\n                    }\r\n                }\r\n                else {\r\n                    const callerStack = getErrorStackString(callerStackError);\r\n                    callProperties.callback((0, call_1.callErrorFromStatus)(status, callerStack));\r\n                }\r\n                /* Avoid retaining the callerStackError object in the call context of\r\n                 * the status event handler. */\r\n                callerStackError = null;\r\n                emitter.emit('status', status);\r\n            },\r\n        });\r\n        return emitter;\r\n    }\r\n    checkMetadataAndOptions(arg1, arg2) {\r\n        let metadata;\r\n        let options;\r\n        if (arg1 instanceof metadata_1.Metadata) {\r\n            metadata = arg1;\r\n            if (arg2) {\r\n                options = arg2;\r\n            }\r\n            else {\r\n                options = {};\r\n            }\r\n        }\r\n        else {\r\n            if (arg1) {\r\n                options = arg1;\r\n            }\r\n            else {\r\n                options = {};\r\n            }\r\n            metadata = new metadata_1.Metadata();\r\n        }\r\n        return { metadata, options };\r\n    }\r\n    makeServerStreamRequest(method, serialize, deserialize, argument, metadata, options) {\r\n        var _a, _b;\r\n        const checkedArguments = this.checkMetadataAndOptions(metadata, options);\r\n        const methodDefinition = {\r\n            path: method,\r\n            requestStream: false,\r\n            responseStream: true,\r\n            requestSerialize: serialize,\r\n            responseDeserialize: deserialize,\r\n        };\r\n        let callProperties = {\r\n            argument: argument,\r\n            metadata: checkedArguments.metadata,\r\n            call: new call_1.ClientReadableStreamImpl(deserialize),\r\n            channel: this[CHANNEL_SYMBOL],\r\n            methodDefinition: methodDefinition,\r\n            callOptions: checkedArguments.options,\r\n        };\r\n        if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {\r\n            callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL](callProperties);\r\n        }\r\n        const stream = callProperties.call;\r\n        const interceptorArgs = {\r\n            clientInterceptors: this[INTERCEPTOR_SYMBOL],\r\n            clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],\r\n            callInterceptors: (_a = callProperties.callOptions.interceptors) !== null && _a !== void 0 ? _a : [],\r\n            callInterceptorProviders: (_b = callProperties.callOptions.interceptor_providers) !== null && _b !== void 0 ? _b : [],\r\n        };\r\n        const call = (0, client_interceptors_1.getInterceptingCall)(interceptorArgs, callProperties.methodDefinition, callProperties.callOptions, callProperties.channel);\r\n        /* This needs to happen before the emitter is used. Unfortunately we can't\r\n         * enforce this with the type system. We need to construct this emitter\r\n         * before calling the CallInvocationTransformer, and we need to create the\r\n         * call after that. */\r\n        stream.call = call;\r\n        let receivedStatus = false;\r\n        let callerStackError = new Error();\r\n        call.start(callProperties.metadata, {\r\n            onReceiveMetadata(metadata) {\r\n                stream.emit('metadata', metadata);\r\n            },\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            onReceiveMessage(message) {\r\n                stream.push(message);\r\n            },\r\n            onReceiveStatus(status) {\r\n                if (receivedStatus) {\r\n                    return;\r\n                }\r\n                receivedStatus = true;\r\n                stream.push(null);\r\n                if (status.code !== constants_1.Status.OK) {\r\n                    const callerStack = getErrorStackString(callerStackError);\r\n                    stream.emit('error', (0, call_1.callErrorFromStatus)(status, callerStack));\r\n                }\r\n                /* Avoid retaining the callerStackError object in the call context of\r\n                 * the status event handler. */\r\n                callerStackError = null;\r\n                stream.emit('status', status);\r\n            },\r\n        });\r\n        call.sendMessage(argument);\r\n        call.halfClose();\r\n        return stream;\r\n    }\r\n    makeBidiStreamRequest(method, serialize, deserialize, metadata, options) {\r\n        var _a, _b;\r\n        const checkedArguments = this.checkMetadataAndOptions(metadata, options);\r\n        const methodDefinition = {\r\n            path: method,\r\n            requestStream: true,\r\n            responseStream: true,\r\n            requestSerialize: serialize,\r\n            responseDeserialize: deserialize,\r\n        };\r\n        let callProperties = {\r\n            metadata: checkedArguments.metadata,\r\n            call: new call_1.ClientDuplexStreamImpl(serialize, deserialize),\r\n            channel: this[CHANNEL_SYMBOL],\r\n            methodDefinition: methodDefinition,\r\n            callOptions: checkedArguments.options,\r\n        };\r\n        if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {\r\n            callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL](callProperties);\r\n        }\r\n        const stream = callProperties.call;\r\n        const interceptorArgs = {\r\n            clientInterceptors: this[INTERCEPTOR_SYMBOL],\r\n            clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],\r\n            callInterceptors: (_a = callProperties.callOptions.interceptors) !== null && _a !== void 0 ? _a : [],\r\n            callInterceptorProviders: (_b = callProperties.callOptions.interceptor_providers) !== null && _b !== void 0 ? _b : [],\r\n        };\r\n        const call = (0, client_interceptors_1.getInterceptingCall)(interceptorArgs, callProperties.methodDefinition, callProperties.callOptions, callProperties.channel);\r\n        /* This needs to happen before the emitter is used. Unfortunately we can't\r\n         * enforce this with the type system. We need to construct this emitter\r\n         * before calling the CallInvocationTransformer, and we need to create the\r\n         * call after that. */\r\n        stream.call = call;\r\n        let receivedStatus = false;\r\n        let callerStackError = new Error();\r\n        call.start(callProperties.metadata, {\r\n            onReceiveMetadata(metadata) {\r\n                stream.emit('metadata', metadata);\r\n            },\r\n            onReceiveMessage(message) {\r\n                stream.push(message);\r\n            },\r\n            onReceiveStatus(status) {\r\n                if (receivedStatus) {\r\n                    return;\r\n                }\r\n                receivedStatus = true;\r\n                stream.push(null);\r\n                if (status.code !== constants_1.Status.OK) {\r\n                    const callerStack = getErrorStackString(callerStackError);\r\n                    stream.emit('error', (0, call_1.callErrorFromStatus)(status, callerStack));\r\n                }\r\n                /* Avoid retaining the callerStackError object in the call context of\r\n                 * the status event handler. */\r\n                callerStackError = null;\r\n                stream.emit('status', status);\r\n            },\r\n        });\r\n        return stream;\r\n    }\r\n}\r\nexports.Client = Client;\r\n//# sourceMappingURL=client.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/client.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/compression-algorithms.js":
/*!************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/compression-algorithms.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\n/*\r\n * Copyright 2021 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.CompressionAlgorithms = void 0;\r\nvar CompressionAlgorithms;\r\n(function (CompressionAlgorithms) {\r\n    CompressionAlgorithms[CompressionAlgorithms[\"identity\"] = 0] = \"identity\";\r\n    CompressionAlgorithms[CompressionAlgorithms[\"deflate\"] = 1] = \"deflate\";\r\n    CompressionAlgorithms[CompressionAlgorithms[\"gzip\"] = 2] = \"gzip\";\r\n})(CompressionAlgorithms || (exports.CompressionAlgorithms = CompressionAlgorithms = {}));\r\n//# sourceMappingURL=compression-algorithms.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvY29tcHJlc3Npb24tYWxnb3JpdGhtcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw0QkFBNEIsNkJBQTZCLDZCQUE2QjtBQUN2RiIsInNvdXJjZXMiOlsid2VicGFjazovL2RhbmlzaC1idWRkeS8uL25vZGVfbW9kdWxlcy9AZ3JwYy9ncnBjLWpzL2J1aWxkL3NyYy9jb21wcmVzc2lvbi1hbGdvcml0aG1zLmpzPzY0ZTgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8qXHJcbiAqIENvcHlyaWdodCAyMDIxIGdSUEMgYXV0aG9ycy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqXHJcbiAqL1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuQ29tcHJlc3Npb25BbGdvcml0aG1zID0gdm9pZCAwO1xyXG52YXIgQ29tcHJlc3Npb25BbGdvcml0aG1zO1xyXG4oZnVuY3Rpb24gKENvbXByZXNzaW9uQWxnb3JpdGhtcykge1xyXG4gICAgQ29tcHJlc3Npb25BbGdvcml0aG1zW0NvbXByZXNzaW9uQWxnb3JpdGhtc1tcImlkZW50aXR5XCJdID0gMF0gPSBcImlkZW50aXR5XCI7XHJcbiAgICBDb21wcmVzc2lvbkFsZ29yaXRobXNbQ29tcHJlc3Npb25BbGdvcml0aG1zW1wiZGVmbGF0ZVwiXSA9IDFdID0gXCJkZWZsYXRlXCI7XHJcbiAgICBDb21wcmVzc2lvbkFsZ29yaXRobXNbQ29tcHJlc3Npb25BbGdvcml0aG1zW1wiZ3ppcFwiXSA9IDJdID0gXCJnemlwXCI7XHJcbn0pKENvbXByZXNzaW9uQWxnb3JpdGhtcyB8fCAoZXhwb3J0cy5Db21wcmVzc2lvbkFsZ29yaXRobXMgPSBDb21wcmVzc2lvbkFsZ29yaXRobXMgPSB7fSkpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21wcmVzc2lvbi1hbGdvcml0aG1zLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/compression-algorithms.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/compression-filter.js":
/*!********************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/compression-filter.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.CompressionFilterFactory = exports.CompressionFilter = void 0;\r\nconst zlib = __webpack_require__(/*! zlib */ \"zlib\");\r\nconst compression_algorithms_1 = __webpack_require__(/*! ./compression-algorithms */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/compression-algorithms.js\");\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nconst filter_1 = __webpack_require__(/*! ./filter */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/filter.js\");\r\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\r\nconst isCompressionAlgorithmKey = (key) => {\r\n    return (typeof key === 'number' && typeof compression_algorithms_1.CompressionAlgorithms[key] === 'string');\r\n};\r\nclass CompressionHandler {\r\n    /**\r\n     * @param message Raw uncompressed message bytes\r\n     * @param compress Indicates whether the message should be compressed\r\n     * @return Framed message, compressed if applicable\r\n     */\r\n    async writeMessage(message, compress) {\r\n        let messageBuffer = message;\r\n        if (compress) {\r\n            messageBuffer = await this.compressMessage(messageBuffer);\r\n        }\r\n        const output = Buffer.allocUnsafe(messageBuffer.length + 5);\r\n        output.writeUInt8(compress ? 1 : 0, 0);\r\n        output.writeUInt32BE(messageBuffer.length, 1);\r\n        messageBuffer.copy(output, 5);\r\n        return output;\r\n    }\r\n    /**\r\n     * @param data Framed message, possibly compressed\r\n     * @return Uncompressed message\r\n     */\r\n    async readMessage(data) {\r\n        const compressed = data.readUInt8(0) === 1;\r\n        let messageBuffer = data.slice(5);\r\n        if (compressed) {\r\n            messageBuffer = await this.decompressMessage(messageBuffer);\r\n        }\r\n        return messageBuffer;\r\n    }\r\n}\r\nclass IdentityHandler extends CompressionHandler {\r\n    async compressMessage(message) {\r\n        return message;\r\n    }\r\n    async writeMessage(message, compress) {\r\n        const output = Buffer.allocUnsafe(message.length + 5);\r\n        /* With \"identity\" compression, messages should always be marked as\r\n         * uncompressed */\r\n        output.writeUInt8(0, 0);\r\n        output.writeUInt32BE(message.length, 1);\r\n        message.copy(output, 5);\r\n        return output;\r\n    }\r\n    decompressMessage(message) {\r\n        return Promise.reject(new Error('Received compressed message but \"grpc-encoding\" header was identity'));\r\n    }\r\n}\r\nclass DeflateHandler extends CompressionHandler {\r\n    constructor(maxRecvMessageLength) {\r\n        super();\r\n        this.maxRecvMessageLength = maxRecvMessageLength;\r\n    }\r\n    compressMessage(message) {\r\n        return new Promise((resolve, reject) => {\r\n            zlib.deflate(message, (err, output) => {\r\n                if (err) {\r\n                    reject(err);\r\n                }\r\n                else {\r\n                    resolve(output);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    decompressMessage(message) {\r\n        return new Promise((resolve, reject) => {\r\n            let totalLength = 0;\r\n            const messageParts = [];\r\n            const decompresser = zlib.createInflate();\r\n            decompresser.on('data', (chunk) => {\r\n                messageParts.push(chunk);\r\n                totalLength += chunk.byteLength;\r\n                if (this.maxRecvMessageLength !== -1 && totalLength > this.maxRecvMessageLength) {\r\n                    decompresser.destroy();\r\n                    reject({\r\n                        code: constants_1.Status.RESOURCE_EXHAUSTED,\r\n                        details: `Received message that decompresses to a size larger than ${this.maxRecvMessageLength}`\r\n                    });\r\n                }\r\n            });\r\n            decompresser.on('end', () => {\r\n                resolve(Buffer.concat(messageParts));\r\n            });\r\n            decompresser.write(message);\r\n            decompresser.end();\r\n        });\r\n    }\r\n}\r\nclass GzipHandler extends CompressionHandler {\r\n    constructor(maxRecvMessageLength) {\r\n        super();\r\n        this.maxRecvMessageLength = maxRecvMessageLength;\r\n    }\r\n    compressMessage(message) {\r\n        return new Promise((resolve, reject) => {\r\n            zlib.gzip(message, (err, output) => {\r\n                if (err) {\r\n                    reject(err);\r\n                }\r\n                else {\r\n                    resolve(output);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    decompressMessage(message) {\r\n        return new Promise((resolve, reject) => {\r\n            let totalLength = 0;\r\n            const messageParts = [];\r\n            const decompresser = zlib.createGunzip();\r\n            decompresser.on('data', (chunk) => {\r\n                messageParts.push(chunk);\r\n                totalLength += chunk.byteLength;\r\n                if (this.maxRecvMessageLength !== -1 && totalLength > this.maxRecvMessageLength) {\r\n                    decompresser.destroy();\r\n                    reject({\r\n                        code: constants_1.Status.RESOURCE_EXHAUSTED,\r\n                        details: `Received message that decompresses to a size larger than ${this.maxRecvMessageLength}`\r\n                    });\r\n                }\r\n            });\r\n            decompresser.on('end', () => {\r\n                resolve(Buffer.concat(messageParts));\r\n            });\r\n            decompresser.write(message);\r\n            decompresser.end();\r\n        });\r\n    }\r\n}\r\nclass UnknownHandler extends CompressionHandler {\r\n    constructor(compressionName) {\r\n        super();\r\n        this.compressionName = compressionName;\r\n    }\r\n    compressMessage(message) {\r\n        return Promise.reject(new Error(`Received message compressed with unsupported compression method ${this.compressionName}`));\r\n    }\r\n    decompressMessage(message) {\r\n        // This should be unreachable\r\n        return Promise.reject(new Error(`Compression method not supported: ${this.compressionName}`));\r\n    }\r\n}\r\nfunction getCompressionHandler(compressionName, maxReceiveMessageSize) {\r\n    switch (compressionName) {\r\n        case 'identity':\r\n            return new IdentityHandler();\r\n        case 'deflate':\r\n            return new DeflateHandler(maxReceiveMessageSize);\r\n        case 'gzip':\r\n            return new GzipHandler(maxReceiveMessageSize);\r\n        default:\r\n            return new UnknownHandler(compressionName);\r\n    }\r\n}\r\nclass CompressionFilter extends filter_1.BaseFilter {\r\n    constructor(channelOptions, sharedFilterConfig) {\r\n        var _a, _b, _c;\r\n        super();\r\n        this.sharedFilterConfig = sharedFilterConfig;\r\n        this.sendCompression = new IdentityHandler();\r\n        this.receiveCompression = new IdentityHandler();\r\n        this.currentCompressionAlgorithm = 'identity';\r\n        const compressionAlgorithmKey = channelOptions['grpc.default_compression_algorithm'];\r\n        this.maxReceiveMessageLength = (_a = channelOptions['grpc.max_receive_message_length']) !== null && _a !== void 0 ? _a : constants_1.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH;\r\n        this.maxSendMessageLength = (_b = channelOptions['grpc.max_send_message_length']) !== null && _b !== void 0 ? _b : constants_1.DEFAULT_MAX_SEND_MESSAGE_LENGTH;\r\n        if (compressionAlgorithmKey !== undefined) {\r\n            if (isCompressionAlgorithmKey(compressionAlgorithmKey)) {\r\n                const clientSelectedEncoding = compression_algorithms_1.CompressionAlgorithms[compressionAlgorithmKey];\r\n                const serverSupportedEncodings = (_c = sharedFilterConfig.serverSupportedEncodingHeader) === null || _c === void 0 ? void 0 : _c.split(',');\r\n                /**\r\n                 * There are two possible situations here:\r\n                 * 1) We don't have any info yet from the server about what compression it supports\r\n                 *    In that case we should just use what the client tells us to use\r\n                 * 2) We've previously received a response from the server including a grpc-accept-encoding header\r\n                 *    In that case we only want to use the encoding chosen by the client if the server supports it\r\n                 */\r\n                if (!serverSupportedEncodings ||\r\n                    serverSupportedEncodings.includes(clientSelectedEncoding)) {\r\n                    this.currentCompressionAlgorithm = clientSelectedEncoding;\r\n                    this.sendCompression = getCompressionHandler(this.currentCompressionAlgorithm, -1);\r\n                }\r\n            }\r\n            else {\r\n                logging.log(constants_1.LogVerbosity.ERROR, `Invalid value provided for grpc.default_compression_algorithm option: ${compressionAlgorithmKey}`);\r\n            }\r\n        }\r\n    }\r\n    async sendMetadata(metadata) {\r\n        const headers = await metadata;\r\n        headers.set('grpc-accept-encoding', 'identity,deflate,gzip');\r\n        headers.set('accept-encoding', 'identity');\r\n        // No need to send the header if it's \"identity\" -  behavior is identical; save the bandwidth\r\n        if (this.currentCompressionAlgorithm === 'identity') {\r\n            headers.remove('grpc-encoding');\r\n        }\r\n        else {\r\n            headers.set('grpc-encoding', this.currentCompressionAlgorithm);\r\n        }\r\n        return headers;\r\n    }\r\n    receiveMetadata(metadata) {\r\n        const receiveEncoding = metadata.get('grpc-encoding');\r\n        if (receiveEncoding.length > 0) {\r\n            const encoding = receiveEncoding[0];\r\n            if (typeof encoding === 'string') {\r\n                this.receiveCompression = getCompressionHandler(encoding, this.maxReceiveMessageLength);\r\n            }\r\n        }\r\n        metadata.remove('grpc-encoding');\r\n        /* Check to see if the compression we're using to send messages is supported by the server\r\n         * If not, reset the sendCompression filter and have it use the default IdentityHandler */\r\n        const serverSupportedEncodingsHeader = metadata.get('grpc-accept-encoding')[0];\r\n        if (serverSupportedEncodingsHeader) {\r\n            this.sharedFilterConfig.serverSupportedEncodingHeader =\r\n                serverSupportedEncodingsHeader;\r\n            const serverSupportedEncodings = serverSupportedEncodingsHeader.split(',');\r\n            if (!serverSupportedEncodings.includes(this.currentCompressionAlgorithm)) {\r\n                this.sendCompression = new IdentityHandler();\r\n                this.currentCompressionAlgorithm = 'identity';\r\n            }\r\n        }\r\n        metadata.remove('grpc-accept-encoding');\r\n        return metadata;\r\n    }\r\n    async sendMessage(message) {\r\n        var _a;\r\n        /* This filter is special. The input message is the bare message bytes,\r\n         * and the output is a framed and possibly compressed message. For this\r\n         * reason, this filter should be at the bottom of the filter stack */\r\n        const resolvedMessage = await message;\r\n        if (this.maxSendMessageLength !== -1 && resolvedMessage.message.length > this.maxSendMessageLength) {\r\n            throw {\r\n                code: constants_1.Status.RESOURCE_EXHAUSTED,\r\n                details: `Attempted to send message with a size larger than ${this.maxSendMessageLength}`\r\n            };\r\n        }\r\n        let compress;\r\n        if (this.sendCompression instanceof IdentityHandler) {\r\n            compress = false;\r\n        }\r\n        else {\r\n            compress = (((_a = resolvedMessage.flags) !== null && _a !== void 0 ? _a : 0) & 2 /* WriteFlags.NoCompress */) === 0;\r\n        }\r\n        return {\r\n            message: await this.sendCompression.writeMessage(resolvedMessage.message, compress),\r\n            flags: resolvedMessage.flags,\r\n        };\r\n    }\r\n    async receiveMessage(message) {\r\n        /* This filter is also special. The input message is framed and possibly\r\n         * compressed, and the output message is deframed and uncompressed. So\r\n         * this is another reason that this filter should be at the bottom of the\r\n         * filter stack. */\r\n        return this.receiveCompression.readMessage(await message);\r\n    }\r\n}\r\nexports.CompressionFilter = CompressionFilter;\r\nclass CompressionFilterFactory {\r\n    constructor(channel, options) {\r\n        this.options = options;\r\n        this.sharedFilterConfig = {};\r\n    }\r\n    createFilter() {\r\n        return new CompressionFilter(this.options, this.sharedFilterConfig);\r\n    }\r\n}\r\nexports.CompressionFilterFactory = CompressionFilterFactory;\r\n//# sourceMappingURL=compression-filter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/compression-filter.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/connectivity-state.js":
/*!********************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/connectivity-state.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\n/*\r\n * Copyright 2021 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ConnectivityState = void 0;\r\nvar ConnectivityState;\r\n(function (ConnectivityState) {\r\n    ConnectivityState[ConnectivityState[\"IDLE\"] = 0] = \"IDLE\";\r\n    ConnectivityState[ConnectivityState[\"CONNECTING\"] = 1] = \"CONNECTING\";\r\n    ConnectivityState[ConnectivityState[\"READY\"] = 2] = \"READY\";\r\n    ConnectivityState[ConnectivityState[\"TRANSIENT_FAILURE\"] = 3] = \"TRANSIENT_FAILURE\";\r\n    ConnectivityState[ConnectivityState[\"SHUTDOWN\"] = 4] = \"SHUTDOWN\";\r\n})(ConnectivityState || (exports.ConnectivityState = ConnectivityState = {}));\r\n//# sourceMappingURL=connectivity-state.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvY29ubmVjdGl2aXR5LXN0YXRlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyx3QkFBd0IseUJBQXlCLHlCQUF5QjtBQUMzRSIsInNvdXJjZXMiOlsid2VicGFjazovL2RhbmlzaC1idWRkeS8uL25vZGVfbW9kdWxlcy9AZ3JwYy9ncnBjLWpzL2J1aWxkL3NyYy9jb25uZWN0aXZpdHktc3RhdGUuanM/OGIwOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuLypcclxuICogQ29weXJpZ2h0IDIwMjEgZ1JQQyBhdXRob3JzLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICpcclxuICovXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5Db25uZWN0aXZpdHlTdGF0ZSA9IHZvaWQgMDtcclxudmFyIENvbm5lY3Rpdml0eVN0YXRlO1xyXG4oZnVuY3Rpb24gKENvbm5lY3Rpdml0eVN0YXRlKSB7XHJcbiAgICBDb25uZWN0aXZpdHlTdGF0ZVtDb25uZWN0aXZpdHlTdGF0ZVtcIklETEVcIl0gPSAwXSA9IFwiSURMRVwiO1xyXG4gICAgQ29ubmVjdGl2aXR5U3RhdGVbQ29ubmVjdGl2aXR5U3RhdGVbXCJDT05ORUNUSU5HXCJdID0gMV0gPSBcIkNPTk5FQ1RJTkdcIjtcclxuICAgIENvbm5lY3Rpdml0eVN0YXRlW0Nvbm5lY3Rpdml0eVN0YXRlW1wiUkVBRFlcIl0gPSAyXSA9IFwiUkVBRFlcIjtcclxuICAgIENvbm5lY3Rpdml0eVN0YXRlW0Nvbm5lY3Rpdml0eVN0YXRlW1wiVFJBTlNJRU5UX0ZBSUxVUkVcIl0gPSAzXSA9IFwiVFJBTlNJRU5UX0ZBSUxVUkVcIjtcclxuICAgIENvbm5lY3Rpdml0eVN0YXRlW0Nvbm5lY3Rpdml0eVN0YXRlW1wiU0hVVERPV05cIl0gPSA0XSA9IFwiU0hVVERPV05cIjtcclxufSkoQ29ubmVjdGl2aXR5U3RhdGUgfHwgKGV4cG9ydHMuQ29ubmVjdGl2aXR5U3RhdGUgPSBDb25uZWN0aXZpdHlTdGF0ZSA9IHt9KSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbm5lY3Rpdml0eS1zdGF0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/connectivity-state.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js":
/*!***********************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/constants.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH = exports.DEFAULT_MAX_SEND_MESSAGE_LENGTH = exports.Propagate = exports.LogVerbosity = exports.Status = void 0;\r\nvar Status;\r\n(function (Status) {\r\n    Status[Status[\"OK\"] = 0] = \"OK\";\r\n    Status[Status[\"CANCELLED\"] = 1] = \"CANCELLED\";\r\n    Status[Status[\"UNKNOWN\"] = 2] = \"UNKNOWN\";\r\n    Status[Status[\"INVALID_ARGUMENT\"] = 3] = \"INVALID_ARGUMENT\";\r\n    Status[Status[\"DEADLINE_EXCEEDED\"] = 4] = \"DEADLINE_EXCEEDED\";\r\n    Status[Status[\"NOT_FOUND\"] = 5] = \"NOT_FOUND\";\r\n    Status[Status[\"ALREADY_EXISTS\"] = 6] = \"ALREADY_EXISTS\";\r\n    Status[Status[\"PERMISSION_DENIED\"] = 7] = \"PERMISSION_DENIED\";\r\n    Status[Status[\"RESOURCE_EXHAUSTED\"] = 8] = \"RESOURCE_EXHAUSTED\";\r\n    Status[Status[\"FAILED_PRECONDITION\"] = 9] = \"FAILED_PRECONDITION\";\r\n    Status[Status[\"ABORTED\"] = 10] = \"ABORTED\";\r\n    Status[Status[\"OUT_OF_RANGE\"] = 11] = \"OUT_OF_RANGE\";\r\n    Status[Status[\"UNIMPLEMENTED\"] = 12] = \"UNIMPLEMENTED\";\r\n    Status[Status[\"INTERNAL\"] = 13] = \"INTERNAL\";\r\n    Status[Status[\"UNAVAILABLE\"] = 14] = \"UNAVAILABLE\";\r\n    Status[Status[\"DATA_LOSS\"] = 15] = \"DATA_LOSS\";\r\n    Status[Status[\"UNAUTHENTICATED\"] = 16] = \"UNAUTHENTICATED\";\r\n})(Status || (exports.Status = Status = {}));\r\nvar LogVerbosity;\r\n(function (LogVerbosity) {\r\n    LogVerbosity[LogVerbosity[\"DEBUG\"] = 0] = \"DEBUG\";\r\n    LogVerbosity[LogVerbosity[\"INFO\"] = 1] = \"INFO\";\r\n    LogVerbosity[LogVerbosity[\"ERROR\"] = 2] = \"ERROR\";\r\n    LogVerbosity[LogVerbosity[\"NONE\"] = 3] = \"NONE\";\r\n})(LogVerbosity || (exports.LogVerbosity = LogVerbosity = {}));\r\n/**\r\n * NOTE: This enum is not currently used in any implemented API in this\r\n * library. It is included only for type parity with the other implementation.\r\n */\r\nvar Propagate;\r\n(function (Propagate) {\r\n    Propagate[Propagate[\"DEADLINE\"] = 1] = \"DEADLINE\";\r\n    Propagate[Propagate[\"CENSUS_STATS_CONTEXT\"] = 2] = \"CENSUS_STATS_CONTEXT\";\r\n    Propagate[Propagate[\"CENSUS_TRACING_CONTEXT\"] = 4] = \"CENSUS_TRACING_CONTEXT\";\r\n    Propagate[Propagate[\"CANCELLATION\"] = 8] = \"CANCELLATION\";\r\n    // https://github.com/grpc/grpc/blob/master/include/grpc/impl/codegen/propagation_bits.h#L43\r\n    Propagate[Propagate[\"DEFAULTS\"] = 65535] = \"DEFAULTS\";\r\n})(Propagate || (exports.Propagate = Propagate = {}));\r\n// -1 means unlimited\r\nexports.DEFAULT_MAX_SEND_MESSAGE_LENGTH = -1;\r\n// 4 MB default\r\nexports.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH = 4 * 1024 * 1024;\r\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvY29uc3RhbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMENBQTBDLEdBQUcsdUNBQXVDLEdBQUcsaUJBQWlCLEdBQUcsb0JBQW9CLEdBQUcsY0FBYztBQUNoSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsYUFBYSxjQUFjLGNBQWM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxtQkFBbUIsb0JBQW9CLG9CQUFvQjtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLGdCQUFnQixpQkFBaUIsaUJBQWlCO0FBQ25EO0FBQ0EsdUNBQXVDO0FBQ3ZDO0FBQ0EsMENBQTBDO0FBQzFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFuaXNoLWJ1ZGR5Ly4vbm9kZV9tb2R1bGVzL0BncnBjL2dycGMtanMvYnVpbGQvc3JjL2NvbnN0YW50cy5qcz8xYTFlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG4vKlxyXG4gKiBDb3B5cmlnaHQgMjAxOSBnUlBDIGF1dGhvcnMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKlxyXG4gKi9cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLkRFRkFVTFRfTUFYX1JFQ0VJVkVfTUVTU0FHRV9MRU5HVEggPSBleHBvcnRzLkRFRkFVTFRfTUFYX1NFTkRfTUVTU0FHRV9MRU5HVEggPSBleHBvcnRzLlByb3BhZ2F0ZSA9IGV4cG9ydHMuTG9nVmVyYm9zaXR5ID0gZXhwb3J0cy5TdGF0dXMgPSB2b2lkIDA7XHJcbnZhciBTdGF0dXM7XHJcbihmdW5jdGlvbiAoU3RhdHVzKSB7XHJcbiAgICBTdGF0dXNbU3RhdHVzW1wiT0tcIl0gPSAwXSA9IFwiT0tcIjtcclxuICAgIFN0YXR1c1tTdGF0dXNbXCJDQU5DRUxMRURcIl0gPSAxXSA9IFwiQ0FOQ0VMTEVEXCI7XHJcbiAgICBTdGF0dXNbU3RhdHVzW1wiVU5LTk9XTlwiXSA9IDJdID0gXCJVTktOT1dOXCI7XHJcbiAgICBTdGF0dXNbU3RhdHVzW1wiSU5WQUxJRF9BUkdVTUVOVFwiXSA9IDNdID0gXCJJTlZBTElEX0FSR1VNRU5UXCI7XHJcbiAgICBTdGF0dXNbU3RhdHVzW1wiREVBRExJTkVfRVhDRUVERURcIl0gPSA0XSA9IFwiREVBRExJTkVfRVhDRUVERURcIjtcclxuICAgIFN0YXR1c1tTdGF0dXNbXCJOT1RfRk9VTkRcIl0gPSA1XSA9IFwiTk9UX0ZPVU5EXCI7XHJcbiAgICBTdGF0dXNbU3RhdHVzW1wiQUxSRUFEWV9FWElTVFNcIl0gPSA2XSA9IFwiQUxSRUFEWV9FWElTVFNcIjtcclxuICAgIFN0YXR1c1tTdGF0dXNbXCJQRVJNSVNTSU9OX0RFTklFRFwiXSA9IDddID0gXCJQRVJNSVNTSU9OX0RFTklFRFwiO1xyXG4gICAgU3RhdHVzW1N0YXR1c1tcIlJFU09VUkNFX0VYSEFVU1RFRFwiXSA9IDhdID0gXCJSRVNPVVJDRV9FWEhBVVNURURcIjtcclxuICAgIFN0YXR1c1tTdGF0dXNbXCJGQUlMRURfUFJFQ09ORElUSU9OXCJdID0gOV0gPSBcIkZBSUxFRF9QUkVDT05ESVRJT05cIjtcclxuICAgIFN0YXR1c1tTdGF0dXNbXCJBQk9SVEVEXCJdID0gMTBdID0gXCJBQk9SVEVEXCI7XHJcbiAgICBTdGF0dXNbU3RhdHVzW1wiT1VUX09GX1JBTkdFXCJdID0gMTFdID0gXCJPVVRfT0ZfUkFOR0VcIjtcclxuICAgIFN0YXR1c1tTdGF0dXNbXCJVTklNUExFTUVOVEVEXCJdID0gMTJdID0gXCJVTklNUExFTUVOVEVEXCI7XHJcbiAgICBTdGF0dXNbU3RhdHVzW1wiSU5URVJOQUxcIl0gPSAxM10gPSBcIklOVEVSTkFMXCI7XHJcbiAgICBTdGF0dXNbU3RhdHVzW1wiVU5BVkFJTEFCTEVcIl0gPSAxNF0gPSBcIlVOQVZBSUxBQkxFXCI7XHJcbiAgICBTdGF0dXNbU3RhdHVzW1wiREFUQV9MT1NTXCJdID0gMTVdID0gXCJEQVRBX0xPU1NcIjtcclxuICAgIFN0YXR1c1tTdGF0dXNbXCJVTkFVVEhFTlRJQ0FURURcIl0gPSAxNl0gPSBcIlVOQVVUSEVOVElDQVRFRFwiO1xyXG59KShTdGF0dXMgfHwgKGV4cG9ydHMuU3RhdHVzID0gU3RhdHVzID0ge30pKTtcclxudmFyIExvZ1ZlcmJvc2l0eTtcclxuKGZ1bmN0aW9uIChMb2dWZXJib3NpdHkpIHtcclxuICAgIExvZ1ZlcmJvc2l0eVtMb2dWZXJib3NpdHlbXCJERUJVR1wiXSA9IDBdID0gXCJERUJVR1wiO1xyXG4gICAgTG9nVmVyYm9zaXR5W0xvZ1ZlcmJvc2l0eVtcIklORk9cIl0gPSAxXSA9IFwiSU5GT1wiO1xyXG4gICAgTG9nVmVyYm9zaXR5W0xvZ1ZlcmJvc2l0eVtcIkVSUk9SXCJdID0gMl0gPSBcIkVSUk9SXCI7XHJcbiAgICBMb2dWZXJib3NpdHlbTG9nVmVyYm9zaXR5W1wiTk9ORVwiXSA9IDNdID0gXCJOT05FXCI7XHJcbn0pKExvZ1ZlcmJvc2l0eSB8fCAoZXhwb3J0cy5Mb2dWZXJib3NpdHkgPSBMb2dWZXJib3NpdHkgPSB7fSkpO1xyXG4vKipcclxuICogTk9URTogVGhpcyBlbnVtIGlzIG5vdCBjdXJyZW50bHkgdXNlZCBpbiBhbnkgaW1wbGVtZW50ZWQgQVBJIGluIHRoaXNcclxuICogbGlicmFyeS4gSXQgaXMgaW5jbHVkZWQgb25seSBmb3IgdHlwZSBwYXJpdHkgd2l0aCB0aGUgb3RoZXIgaW1wbGVtZW50YXRpb24uXHJcbiAqL1xyXG52YXIgUHJvcGFnYXRlO1xyXG4oZnVuY3Rpb24gKFByb3BhZ2F0ZSkge1xyXG4gICAgUHJvcGFnYXRlW1Byb3BhZ2F0ZVtcIkRFQURMSU5FXCJdID0gMV0gPSBcIkRFQURMSU5FXCI7XHJcbiAgICBQcm9wYWdhdGVbUHJvcGFnYXRlW1wiQ0VOU1VTX1NUQVRTX0NPTlRFWFRcIl0gPSAyXSA9IFwiQ0VOU1VTX1NUQVRTX0NPTlRFWFRcIjtcclxuICAgIFByb3BhZ2F0ZVtQcm9wYWdhdGVbXCJDRU5TVVNfVFJBQ0lOR19DT05URVhUXCJdID0gNF0gPSBcIkNFTlNVU19UUkFDSU5HX0NPTlRFWFRcIjtcclxuICAgIFByb3BhZ2F0ZVtQcm9wYWdhdGVbXCJDQU5DRUxMQVRJT05cIl0gPSA4XSA9IFwiQ0FOQ0VMTEFUSU9OXCI7XHJcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZ3JwYy9ncnBjL2Jsb2IvbWFzdGVyL2luY2x1ZGUvZ3JwYy9pbXBsL2NvZGVnZW4vcHJvcGFnYXRpb25fYml0cy5oI0w0M1xyXG4gICAgUHJvcGFnYXRlW1Byb3BhZ2F0ZVtcIkRFRkFVTFRTXCJdID0gNjU1MzVdID0gXCJERUZBVUxUU1wiO1xyXG59KShQcm9wYWdhdGUgfHwgKGV4cG9ydHMuUHJvcGFnYXRlID0gUHJvcGFnYXRlID0ge30pKTtcclxuLy8gLTEgbWVhbnMgdW5saW1pdGVkXHJcbmV4cG9ydHMuREVGQVVMVF9NQVhfU0VORF9NRVNTQUdFX0xFTkdUSCA9IC0xO1xyXG4vLyA0IE1CIGRlZmF1bHRcclxuZXhwb3J0cy5ERUZBVUxUX01BWF9SRUNFSVZFX01FU1NBR0VfTEVOR1RIID0gNCAqIDEwMjQgKiAxMDI0O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/control-plane-status.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/control-plane-status.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2022 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.restrictControlPlaneStatusCode = restrictControlPlaneStatusCode;\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nconst INAPPROPRIATE_CONTROL_PLANE_CODES = [\r\n    constants_1.Status.OK,\r\n    constants_1.Status.INVALID_ARGUMENT,\r\n    constants_1.Status.NOT_FOUND,\r\n    constants_1.Status.ALREADY_EXISTS,\r\n    constants_1.Status.FAILED_PRECONDITION,\r\n    constants_1.Status.ABORTED,\r\n    constants_1.Status.OUT_OF_RANGE,\r\n    constants_1.Status.DATA_LOSS,\r\n];\r\nfunction restrictControlPlaneStatusCode(code, details) {\r\n    if (INAPPROPRIATE_CONTROL_PLANE_CODES.includes(code)) {\r\n        return {\r\n            code: constants_1.Status.INTERNAL,\r\n            details: `Invalid status from control plane: ${code} ${constants_1.Status[code]} ${details}`,\r\n        };\r\n    }\r\n    else {\r\n        return { code, details };\r\n    }\r\n}\r\n//# sourceMappingURL=control-plane-status.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvY29udHJvbC1wbGFuZS1zdGF0dXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQ0FBc0M7QUFDdEMsb0JBQW9CLG1CQUFPLENBQUMsOEVBQWE7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUEyRCxNQUFNLEVBQUUsMEJBQTBCLEVBQUUsUUFBUTtBQUN2RztBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFuaXNoLWJ1ZGR5Ly4vbm9kZV9tb2R1bGVzL0BncnBjL2dycGMtanMvYnVpbGQvc3JjL2NvbnRyb2wtcGxhbmUtc3RhdHVzLmpzPzhhZWUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8qXHJcbiAqIENvcHlyaWdodCAyMDIyIGdSUEMgYXV0aG9ycy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqXHJcbiAqL1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMucmVzdHJpY3RDb250cm9sUGxhbmVTdGF0dXNDb2RlID0gcmVzdHJpY3RDb250cm9sUGxhbmVTdGF0dXNDb2RlO1xyXG5jb25zdCBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKTtcclxuY29uc3QgSU5BUFBST1BSSUFURV9DT05UUk9MX1BMQU5FX0NPREVTID0gW1xyXG4gICAgY29uc3RhbnRzXzEuU3RhdHVzLk9LLFxyXG4gICAgY29uc3RhbnRzXzEuU3RhdHVzLklOVkFMSURfQVJHVU1FTlQsXHJcbiAgICBjb25zdGFudHNfMS5TdGF0dXMuTk9UX0ZPVU5ELFxyXG4gICAgY29uc3RhbnRzXzEuU3RhdHVzLkFMUkVBRFlfRVhJU1RTLFxyXG4gICAgY29uc3RhbnRzXzEuU3RhdHVzLkZBSUxFRF9QUkVDT05ESVRJT04sXHJcbiAgICBjb25zdGFudHNfMS5TdGF0dXMuQUJPUlRFRCxcclxuICAgIGNvbnN0YW50c18xLlN0YXR1cy5PVVRfT0ZfUkFOR0UsXHJcbiAgICBjb25zdGFudHNfMS5TdGF0dXMuREFUQV9MT1NTLFxyXG5dO1xyXG5mdW5jdGlvbiByZXN0cmljdENvbnRyb2xQbGFuZVN0YXR1c0NvZGUoY29kZSwgZGV0YWlscykge1xyXG4gICAgaWYgKElOQVBQUk9QUklBVEVfQ09OVFJPTF9QTEFORV9DT0RFUy5pbmNsdWRlcyhjb2RlKSkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGNvZGU6IGNvbnN0YW50c18xLlN0YXR1cy5JTlRFUk5BTCxcclxuICAgICAgICAgICAgZGV0YWlsczogYEludmFsaWQgc3RhdHVzIGZyb20gY29udHJvbCBwbGFuZTogJHtjb2RlfSAke2NvbnN0YW50c18xLlN0YXR1c1tjb2RlXX0gJHtkZXRhaWxzfWAsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiB7IGNvZGUsIGRldGFpbHMgfTtcclxuICAgIH1cclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb250cm9sLXBsYW5lLXN0YXR1cy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/control-plane-status.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/deadline.js":
/*!**********************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/deadline.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.minDeadline = minDeadline;\r\nexports.getDeadlineTimeoutString = getDeadlineTimeoutString;\r\nexports.getRelativeTimeout = getRelativeTimeout;\r\nexports.deadlineToString = deadlineToString;\r\nexports.formatDateDifference = formatDateDifference;\r\nfunction minDeadline(...deadlineList) {\r\n    let minValue = Infinity;\r\n    for (const deadline of deadlineList) {\r\n        const deadlineMsecs = deadline instanceof Date ? deadline.getTime() : deadline;\r\n        if (deadlineMsecs < minValue) {\r\n            minValue = deadlineMsecs;\r\n        }\r\n    }\r\n    return minValue;\r\n}\r\nconst units = [\r\n    ['m', 1],\r\n    ['S', 1000],\r\n    ['M', 60 * 1000],\r\n    ['H', 60 * 60 * 1000],\r\n];\r\nfunction getDeadlineTimeoutString(deadline) {\r\n    const now = new Date().getTime();\r\n    if (deadline instanceof Date) {\r\n        deadline = deadline.getTime();\r\n    }\r\n    const timeoutMs = Math.max(deadline - now, 0);\r\n    for (const [unit, factor] of units) {\r\n        const amount = timeoutMs / factor;\r\n        if (amount < 1e8) {\r\n            return String(Math.ceil(amount)) + unit;\r\n        }\r\n    }\r\n    throw new Error('Deadline is too far in the future');\r\n}\r\n/**\r\n * See https://nodejs.org/api/timers.html#settimeoutcallback-delay-args\r\n * In particular, \"When delay is larger than 2147483647 or less than 1, the\r\n * delay will be set to 1. Non-integer delays are truncated to an integer.\"\r\n * This number of milliseconds is almost 25 days.\r\n */\r\nconst MAX_TIMEOUT_TIME = 2147483647;\r\n/**\r\n * Get the timeout value that should be passed to setTimeout now for the timer\r\n * to end at the deadline. For any deadline before now, the timer should end\r\n * immediately, represented by a value of 0. For any deadline more than\r\n * MAX_TIMEOUT_TIME milliseconds in the future, a timer cannot be set that will\r\n * end at that time, so it is treated as infinitely far in the future.\r\n * @param deadline\r\n * @returns\r\n */\r\nfunction getRelativeTimeout(deadline) {\r\n    const deadlineMs = deadline instanceof Date ? deadline.getTime() : deadline;\r\n    const now = new Date().getTime();\r\n    const timeout = deadlineMs - now;\r\n    if (timeout < 0) {\r\n        return 0;\r\n    }\r\n    else if (timeout > MAX_TIMEOUT_TIME) {\r\n        return Infinity;\r\n    }\r\n    else {\r\n        return timeout;\r\n    }\r\n}\r\nfunction deadlineToString(deadline) {\r\n    if (deadline instanceof Date) {\r\n        return deadline.toISOString();\r\n    }\r\n    else {\r\n        const dateDeadline = new Date(deadline);\r\n        if (Number.isNaN(dateDeadline.getTime())) {\r\n            return '' + deadline;\r\n        }\r\n        else {\r\n            return dateDeadline.toISOString();\r\n        }\r\n    }\r\n}\r\n/**\r\n * Calculate the difference between two dates as a number of seconds and format\r\n * it as a string.\r\n * @param startDate\r\n * @param endDate\r\n * @returns\r\n */\r\nfunction formatDateDifference(startDate, endDate) {\r\n    return ((endDate.getTime() - startDate.getTime()) / 1000).toFixed(3) + 's';\r\n}\r\n//# sourceMappingURL=deadline.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvZGVhZGxpbmUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxtQkFBbUI7QUFDbkIsZ0NBQWdDO0FBQ2hDLDBCQUEwQjtBQUMxQix3QkFBd0I7QUFDeEIsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFuaXNoLWJ1ZGR5Ly4vbm9kZV9tb2R1bGVzL0BncnBjL2dycGMtanMvYnVpbGQvc3JjL2RlYWRsaW5lLmpzPzVlZTgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8qXHJcbiAqIENvcHlyaWdodCAyMDE5IGdSUEMgYXV0aG9ycy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqXHJcbiAqL1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMubWluRGVhZGxpbmUgPSBtaW5EZWFkbGluZTtcclxuZXhwb3J0cy5nZXREZWFkbGluZVRpbWVvdXRTdHJpbmcgPSBnZXREZWFkbGluZVRpbWVvdXRTdHJpbmc7XHJcbmV4cG9ydHMuZ2V0UmVsYXRpdmVUaW1lb3V0ID0gZ2V0UmVsYXRpdmVUaW1lb3V0O1xyXG5leHBvcnRzLmRlYWRsaW5lVG9TdHJpbmcgPSBkZWFkbGluZVRvU3RyaW5nO1xyXG5leHBvcnRzLmZvcm1hdERhdGVEaWZmZXJlbmNlID0gZm9ybWF0RGF0ZURpZmZlcmVuY2U7XHJcbmZ1bmN0aW9uIG1pbkRlYWRsaW5lKC4uLmRlYWRsaW5lTGlzdCkge1xyXG4gICAgbGV0IG1pblZhbHVlID0gSW5maW5pdHk7XHJcbiAgICBmb3IgKGNvbnN0IGRlYWRsaW5lIG9mIGRlYWRsaW5lTGlzdCkge1xyXG4gICAgICAgIGNvbnN0IGRlYWRsaW5lTXNlY3MgPSBkZWFkbGluZSBpbnN0YW5jZW9mIERhdGUgPyBkZWFkbGluZS5nZXRUaW1lKCkgOiBkZWFkbGluZTtcclxuICAgICAgICBpZiAoZGVhZGxpbmVNc2VjcyA8IG1pblZhbHVlKSB7XHJcbiAgICAgICAgICAgIG1pblZhbHVlID0gZGVhZGxpbmVNc2VjcztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbWluVmFsdWU7XHJcbn1cclxuY29uc3QgdW5pdHMgPSBbXHJcbiAgICBbJ20nLCAxXSxcclxuICAgIFsnUycsIDEwMDBdLFxyXG4gICAgWydNJywgNjAgKiAxMDAwXSxcclxuICAgIFsnSCcsIDYwICogNjAgKiAxMDAwXSxcclxuXTtcclxuZnVuY3Rpb24gZ2V0RGVhZGxpbmVUaW1lb3V0U3RyaW5nKGRlYWRsaW5lKSB7XHJcbiAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgIGlmIChkZWFkbGluZSBpbnN0YW5jZW9mIERhdGUpIHtcclxuICAgICAgICBkZWFkbGluZSA9IGRlYWRsaW5lLmdldFRpbWUoKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHRpbWVvdXRNcyA9IE1hdGgubWF4KGRlYWRsaW5lIC0gbm93LCAwKTtcclxuICAgIGZvciAoY29uc3QgW3VuaXQsIGZhY3Rvcl0gb2YgdW5pdHMpIHtcclxuICAgICAgICBjb25zdCBhbW91bnQgPSB0aW1lb3V0TXMgLyBmYWN0b3I7XHJcbiAgICAgICAgaWYgKGFtb3VudCA8IDFlOCkge1xyXG4gICAgICAgICAgICByZXR1cm4gU3RyaW5nKE1hdGguY2VpbChhbW91bnQpKSArIHVuaXQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdEZWFkbGluZSBpcyB0b28gZmFyIGluIHRoZSBmdXR1cmUnKTtcclxufVxyXG4vKipcclxuICogU2VlIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvdGltZXJzLmh0bWwjc2V0dGltZW91dGNhbGxiYWNrLWRlbGF5LWFyZ3NcclxuICogSW4gcGFydGljdWxhciwgXCJXaGVuIGRlbGF5IGlzIGxhcmdlciB0aGFuIDIxNDc0ODM2NDcgb3IgbGVzcyB0aGFuIDEsIHRoZVxyXG4gKiBkZWxheSB3aWxsIGJlIHNldCB0byAxLiBOb24taW50ZWdlciBkZWxheXMgYXJlIHRydW5jYXRlZCB0byBhbiBpbnRlZ2VyLlwiXHJcbiAqIFRoaXMgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpcyBhbG1vc3QgMjUgZGF5cy5cclxuICovXHJcbmNvbnN0IE1BWF9USU1FT1VUX1RJTUUgPSAyMTQ3NDgzNjQ3O1xyXG4vKipcclxuICogR2V0IHRoZSB0aW1lb3V0IHZhbHVlIHRoYXQgc2hvdWxkIGJlIHBhc3NlZCB0byBzZXRUaW1lb3V0IG5vdyBmb3IgdGhlIHRpbWVyXHJcbiAqIHRvIGVuZCBhdCB0aGUgZGVhZGxpbmUuIEZvciBhbnkgZGVhZGxpbmUgYmVmb3JlIG5vdywgdGhlIHRpbWVyIHNob3VsZCBlbmRcclxuICogaW1tZWRpYXRlbHksIHJlcHJlc2VudGVkIGJ5IGEgdmFsdWUgb2YgMC4gRm9yIGFueSBkZWFkbGluZSBtb3JlIHRoYW5cclxuICogTUFYX1RJTUVPVVRfVElNRSBtaWxsaXNlY29uZHMgaW4gdGhlIGZ1dHVyZSwgYSB0aW1lciBjYW5ub3QgYmUgc2V0IHRoYXQgd2lsbFxyXG4gKiBlbmQgYXQgdGhhdCB0aW1lLCBzbyBpdCBpcyB0cmVhdGVkIGFzIGluZmluaXRlbHkgZmFyIGluIHRoZSBmdXR1cmUuXHJcbiAqIEBwYXJhbSBkZWFkbGluZVxyXG4gKiBAcmV0dXJuc1xyXG4gKi9cclxuZnVuY3Rpb24gZ2V0UmVsYXRpdmVUaW1lb3V0KGRlYWRsaW5lKSB7XHJcbiAgICBjb25zdCBkZWFkbGluZU1zID0gZGVhZGxpbmUgaW5zdGFuY2VvZiBEYXRlID8gZGVhZGxpbmUuZ2V0VGltZSgpIDogZGVhZGxpbmU7XHJcbiAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgIGNvbnN0IHRpbWVvdXQgPSBkZWFkbGluZU1zIC0gbm93O1xyXG4gICAgaWYgKHRpbWVvdXQgPCAwKSB7XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh0aW1lb3V0ID4gTUFYX1RJTUVPVVRfVElNRSkge1xyXG4gICAgICAgIHJldHVybiBJbmZpbml0eTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiB0aW1lb3V0O1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGRlYWRsaW5lVG9TdHJpbmcoZGVhZGxpbmUpIHtcclxuICAgIGlmIChkZWFkbGluZSBpbnN0YW5jZW9mIERhdGUpIHtcclxuICAgICAgICByZXR1cm4gZGVhZGxpbmUudG9JU09TdHJpbmcoKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGNvbnN0IGRhdGVEZWFkbGluZSA9IG5ldyBEYXRlKGRlYWRsaW5lKTtcclxuICAgICAgICBpZiAoTnVtYmVyLmlzTmFOKGRhdGVEZWFkbGluZS5nZXRUaW1lKCkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJyArIGRlYWRsaW5lO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGRhdGVEZWFkbGluZS50b0lTT1N0cmluZygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4vKipcclxuICogQ2FsY3VsYXRlIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gdHdvIGRhdGVzIGFzIGEgbnVtYmVyIG9mIHNlY29uZHMgYW5kIGZvcm1hdFxyXG4gKiBpdCBhcyBhIHN0cmluZy5cclxuICogQHBhcmFtIHN0YXJ0RGF0ZVxyXG4gKiBAcGFyYW0gZW5kRGF0ZVxyXG4gKiBAcmV0dXJuc1xyXG4gKi9cclxuZnVuY3Rpb24gZm9ybWF0RGF0ZURpZmZlcmVuY2Uoc3RhcnREYXRlLCBlbmREYXRlKSB7XHJcbiAgICByZXR1cm4gKChlbmREYXRlLmdldFRpbWUoKSAtIHN0YXJ0RGF0ZS5nZXRUaW1lKCkpIC8gMTAwMCkudG9GaXhlZCgzKSArICdzJztcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWFkbGluZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/deadline.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/duration.js":
/*!**********************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/duration.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\n/*\r\n * Copyright 2022 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.msToDuration = msToDuration;\r\nexports.durationToMs = durationToMs;\r\nexports.isDuration = isDuration;\r\nexports.parseDuration = parseDuration;\r\nfunction msToDuration(millis) {\r\n    return {\r\n        seconds: (millis / 1000) | 0,\r\n        nanos: ((millis % 1000) * 1000000) | 0,\r\n    };\r\n}\r\nfunction durationToMs(duration) {\r\n    return (duration.seconds * 1000 + duration.nanos / 1000000) | 0;\r\n}\r\nfunction isDuration(value) {\r\n    return typeof value.seconds === 'number' && typeof value.nanos === 'number';\r\n}\r\nconst durationRegex = /^(\\d+)(?:\\.(\\d+))?s$/;\r\nfunction parseDuration(value) {\r\n    const match = value.match(durationRegex);\r\n    if (!match) {\r\n        return null;\r\n    }\r\n    return {\r\n        seconds: Number.parseInt(match[1], 10),\r\n        nanos: match[2] ? Number.parseInt(match[2].padEnd(9, '0'), 10) : 0\r\n    };\r\n}\r\n//# sourceMappingURL=duration.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvZHVyYXRpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQkFBb0I7QUFDcEIsb0JBQW9CO0FBQ3BCLGtCQUFrQjtBQUNsQixxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFuaXNoLWJ1ZGR5Ly4vbm9kZV9tb2R1bGVzL0BncnBjL2dycGMtanMvYnVpbGQvc3JjL2R1cmF0aW9uLmpzP2UxOWEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8qXHJcbiAqIENvcHlyaWdodCAyMDIyIGdSUEMgYXV0aG9ycy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqXHJcbiAqL1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMubXNUb0R1cmF0aW9uID0gbXNUb0R1cmF0aW9uO1xyXG5leHBvcnRzLmR1cmF0aW9uVG9NcyA9IGR1cmF0aW9uVG9NcztcclxuZXhwb3J0cy5pc0R1cmF0aW9uID0gaXNEdXJhdGlvbjtcclxuZXhwb3J0cy5wYXJzZUR1cmF0aW9uID0gcGFyc2VEdXJhdGlvbjtcclxuZnVuY3Rpb24gbXNUb0R1cmF0aW9uKG1pbGxpcykge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBzZWNvbmRzOiAobWlsbGlzIC8gMTAwMCkgfCAwLFxyXG4gICAgICAgIG5hbm9zOiAoKG1pbGxpcyAlIDEwMDApICogMTAwMDAwMCkgfCAwLFxyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBkdXJhdGlvblRvTXMoZHVyYXRpb24pIHtcclxuICAgIHJldHVybiAoZHVyYXRpb24uc2Vjb25kcyAqIDEwMDAgKyBkdXJhdGlvbi5uYW5vcyAvIDEwMDAwMDApIHwgMDtcclxufVxyXG5mdW5jdGlvbiBpc0R1cmF0aW9uKHZhbHVlKSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlLnNlY29uZHMgPT09ICdudW1iZXInICYmIHR5cGVvZiB2YWx1ZS5uYW5vcyA9PT0gJ251bWJlcic7XHJcbn1cclxuY29uc3QgZHVyYXRpb25SZWdleCA9IC9eKFxcZCspKD86XFwuKFxcZCspKT9zJC87XHJcbmZ1bmN0aW9uIHBhcnNlRHVyYXRpb24odmFsdWUpIHtcclxuICAgIGNvbnN0IG1hdGNoID0gdmFsdWUubWF0Y2goZHVyYXRpb25SZWdleCk7XHJcbiAgICBpZiAoIW1hdGNoKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHNlY29uZHM6IE51bWJlci5wYXJzZUludChtYXRjaFsxXSwgMTApLFxyXG4gICAgICAgIG5hbm9zOiBtYXRjaFsyXSA/IE51bWJlci5wYXJzZUludChtYXRjaFsyXS5wYWRFbmQoOSwgJzAnKSwgMTApIDogMFxyXG4gICAgfTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kdXJhdGlvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/duration.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/environment.js":
/*!*************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/environment.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\n/*\r\n * Copyright 2024 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nvar _a;\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.GRPC_NODE_USE_ALTERNATIVE_RESOLVER = void 0;\r\nexports.GRPC_NODE_USE_ALTERNATIVE_RESOLVER = ((_a = process.env.GRPC_NODE_USE_ALTERNATIVE_RESOLVER) !== null && _a !== void 0 ? _a : 'false') === 'true';\r\n//# sourceMappingURL=environment.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvZW52aXJvbm1lbnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDBDQUEwQztBQUMxQywwQ0FBMEM7QUFDMUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYW5pc2gtYnVkZHkvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvZW52aXJvbm1lbnQuanM/YjlhZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuLypcclxuICogQ29weXJpZ2h0IDIwMjQgZ1JQQyBhdXRob3JzLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICpcclxuICovXHJcbnZhciBfYTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLkdSUENfTk9ERV9VU0VfQUxURVJOQVRJVkVfUkVTT0xWRVIgPSB2b2lkIDA7XHJcbmV4cG9ydHMuR1JQQ19OT0RFX1VTRV9BTFRFUk5BVElWRV9SRVNPTFZFUiA9ICgoX2EgPSBwcm9jZXNzLmVudi5HUlBDX05PREVfVVNFX0FMVEVSTkFUSVZFX1JFU09MVkVSKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAnZmFsc2UnKSA9PT0gJ3RydWUnO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbnZpcm9ubWVudC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/environment.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/error.js":
/*!*******************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/error.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\n/*\r\n * Copyright 2022 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.getErrorMessage = getErrorMessage;\r\nexports.getErrorCode = getErrorCode;\r\nfunction getErrorMessage(error) {\r\n    if (error instanceof Error) {\r\n        return error.message;\r\n    }\r\n    else {\r\n        return String(error);\r\n    }\r\n}\r\nfunction getErrorCode(error) {\r\n    if (typeof error === 'object' &&\r\n        error !== null &&\r\n        'code' in error &&\r\n        typeof error.code === 'number') {\r\n        return error.code;\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\n//# sourceMappingURL=error.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvZXJyb3IuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx1QkFBdUI7QUFDdkIsb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYW5pc2gtYnVkZHkvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvZXJyb3IuanM/N2RkYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuLypcclxuICogQ29weXJpZ2h0IDIwMjIgZ1JQQyBhdXRob3JzLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICpcclxuICovXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5nZXRFcnJvck1lc3NhZ2UgPSBnZXRFcnJvck1lc3NhZ2U7XHJcbmV4cG9ydHMuZ2V0RXJyb3JDb2RlID0gZ2V0RXJyb3JDb2RlO1xyXG5mdW5jdGlvbiBnZXRFcnJvck1lc3NhZ2UoZXJyb3IpIHtcclxuICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIGVycm9yLm1lc3NhZ2U7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gU3RyaW5nKGVycm9yKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBnZXRFcnJvckNvZGUoZXJyb3IpIHtcclxuICAgIGlmICh0eXBlb2YgZXJyb3IgPT09ICdvYmplY3QnICYmXHJcbiAgICAgICAgZXJyb3IgIT09IG51bGwgJiZcclxuICAgICAgICAnY29kZScgaW4gZXJyb3IgJiZcclxuICAgICAgICB0eXBlb2YgZXJyb3IuY29kZSA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICByZXR1cm4gZXJyb3IuY29kZTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9yLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/error.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/experimental.js":
/*!**************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/experimental.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.SUBCHANNEL_ARGS_EXCLUDE_KEY_PREFIX = exports.createCertificateProviderChannelCredentials = exports.FileWatcherCertificateProvider = exports.createCertificateProviderServerCredentials = exports.createServerCredentialsWithInterceptors = exports.BaseSubchannelWrapper = exports.registerAdminService = exports.FilterStackFactory = exports.BaseFilter = exports.PickResultType = exports.QueuePicker = exports.UnavailablePicker = exports.ChildLoadBalancerHandler = exports.EndpointMap = exports.endpointHasAddress = exports.endpointToString = exports.subchannelAddressToString = exports.LeafLoadBalancer = exports.isLoadBalancerNameRegistered = exports.parseLoadBalancingConfig = exports.selectLbConfigFromList = exports.registerLoadBalancerType = exports.createChildChannelControlHelper = exports.BackoffTimeout = exports.parseDuration = exports.durationToMs = exports.splitHostPort = exports.uriToString = exports.createResolver = exports.registerResolver = exports.log = exports.trace = void 0;\r\nvar logging_1 = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\r\nObject.defineProperty(exports, \"trace\", ({ enumerable: true, get: function () { return logging_1.trace; } }));\r\nObject.defineProperty(exports, \"log\", ({ enumerable: true, get: function () { return logging_1.log; } }));\r\nvar resolver_1 = __webpack_require__(/*! ./resolver */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/resolver.js\");\r\nObject.defineProperty(exports, \"registerResolver\", ({ enumerable: true, get: function () { return resolver_1.registerResolver; } }));\r\nObject.defineProperty(exports, \"createResolver\", ({ enumerable: true, get: function () { return resolver_1.createResolver; } }));\r\nvar uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\r\nObject.defineProperty(exports, \"uriToString\", ({ enumerable: true, get: function () { return uri_parser_1.uriToString; } }));\r\nObject.defineProperty(exports, \"splitHostPort\", ({ enumerable: true, get: function () { return uri_parser_1.splitHostPort; } }));\r\nvar duration_1 = __webpack_require__(/*! ./duration */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/duration.js\");\r\nObject.defineProperty(exports, \"durationToMs\", ({ enumerable: true, get: function () { return duration_1.durationToMs; } }));\r\nObject.defineProperty(exports, \"parseDuration\", ({ enumerable: true, get: function () { return duration_1.parseDuration; } }));\r\nvar backoff_timeout_1 = __webpack_require__(/*! ./backoff-timeout */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/backoff-timeout.js\");\r\nObject.defineProperty(exports, \"BackoffTimeout\", ({ enumerable: true, get: function () { return backoff_timeout_1.BackoffTimeout; } }));\r\nvar load_balancer_1 = __webpack_require__(/*! ./load-balancer */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/load-balancer.js\");\r\nObject.defineProperty(exports, \"createChildChannelControlHelper\", ({ enumerable: true, get: function () { return load_balancer_1.createChildChannelControlHelper; } }));\r\nObject.defineProperty(exports, \"registerLoadBalancerType\", ({ enumerable: true, get: function () { return load_balancer_1.registerLoadBalancerType; } }));\r\nObject.defineProperty(exports, \"selectLbConfigFromList\", ({ enumerable: true, get: function () { return load_balancer_1.selectLbConfigFromList; } }));\r\nObject.defineProperty(exports, \"parseLoadBalancingConfig\", ({ enumerable: true, get: function () { return load_balancer_1.parseLoadBalancingConfig; } }));\r\nObject.defineProperty(exports, \"isLoadBalancerNameRegistered\", ({ enumerable: true, get: function () { return load_balancer_1.isLoadBalancerNameRegistered; } }));\r\nvar load_balancer_pick_first_1 = __webpack_require__(/*! ./load-balancer-pick-first */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/load-balancer-pick-first.js\");\r\nObject.defineProperty(exports, \"LeafLoadBalancer\", ({ enumerable: true, get: function () { return load_balancer_pick_first_1.LeafLoadBalancer; } }));\r\nvar subchannel_address_1 = __webpack_require__(/*! ./subchannel-address */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/subchannel-address.js\");\r\nObject.defineProperty(exports, \"subchannelAddressToString\", ({ enumerable: true, get: function () { return subchannel_address_1.subchannelAddressToString; } }));\r\nObject.defineProperty(exports, \"endpointToString\", ({ enumerable: true, get: function () { return subchannel_address_1.endpointToString; } }));\r\nObject.defineProperty(exports, \"endpointHasAddress\", ({ enumerable: true, get: function () { return subchannel_address_1.endpointHasAddress; } }));\r\nObject.defineProperty(exports, \"EndpointMap\", ({ enumerable: true, get: function () { return subchannel_address_1.EndpointMap; } }));\r\nvar load_balancer_child_handler_1 = __webpack_require__(/*! ./load-balancer-child-handler */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/load-balancer-child-handler.js\");\r\nObject.defineProperty(exports, \"ChildLoadBalancerHandler\", ({ enumerable: true, get: function () { return load_balancer_child_handler_1.ChildLoadBalancerHandler; } }));\r\nvar picker_1 = __webpack_require__(/*! ./picker */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/picker.js\");\r\nObject.defineProperty(exports, \"UnavailablePicker\", ({ enumerable: true, get: function () { return picker_1.UnavailablePicker; } }));\r\nObject.defineProperty(exports, \"QueuePicker\", ({ enumerable: true, get: function () { return picker_1.QueuePicker; } }));\r\nObject.defineProperty(exports, \"PickResultType\", ({ enumerable: true, get: function () { return picker_1.PickResultType; } }));\r\nvar filter_1 = __webpack_require__(/*! ./filter */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/filter.js\");\r\nObject.defineProperty(exports, \"BaseFilter\", ({ enumerable: true, get: function () { return filter_1.BaseFilter; } }));\r\nvar filter_stack_1 = __webpack_require__(/*! ./filter-stack */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/filter-stack.js\");\r\nObject.defineProperty(exports, \"FilterStackFactory\", ({ enumerable: true, get: function () { return filter_stack_1.FilterStackFactory; } }));\r\nvar admin_1 = __webpack_require__(/*! ./admin */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/admin.js\");\r\nObject.defineProperty(exports, \"registerAdminService\", ({ enumerable: true, get: function () { return admin_1.registerAdminService; } }));\r\nvar subchannel_interface_1 = __webpack_require__(/*! ./subchannel-interface */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/subchannel-interface.js\");\r\nObject.defineProperty(exports, \"BaseSubchannelWrapper\", ({ enumerable: true, get: function () { return subchannel_interface_1.BaseSubchannelWrapper; } }));\r\nvar server_credentials_1 = __webpack_require__(/*! ./server-credentials */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/server-credentials.js\");\r\nObject.defineProperty(exports, \"createServerCredentialsWithInterceptors\", ({ enumerable: true, get: function () { return server_credentials_1.createServerCredentialsWithInterceptors; } }));\r\nObject.defineProperty(exports, \"createCertificateProviderServerCredentials\", ({ enumerable: true, get: function () { return server_credentials_1.createCertificateProviderServerCredentials; } }));\r\nvar certificate_provider_1 = __webpack_require__(/*! ./certificate-provider */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/certificate-provider.js\");\r\nObject.defineProperty(exports, \"FileWatcherCertificateProvider\", ({ enumerable: true, get: function () { return certificate_provider_1.FileWatcherCertificateProvider; } }));\r\nvar channel_credentials_1 = __webpack_require__(/*! ./channel-credentials */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/channel-credentials.js\");\r\nObject.defineProperty(exports, \"createCertificateProviderChannelCredentials\", ({ enumerable: true, get: function () { return channel_credentials_1.createCertificateProviderChannelCredentials; } }));\r\nvar internal_channel_1 = __webpack_require__(/*! ./internal-channel */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/internal-channel.js\");\r\nObject.defineProperty(exports, \"SUBCHANNEL_ARGS_EXCLUDE_KEY_PREFIX\", ({ enumerable: true, get: function () { return internal_channel_1.SUBCHANNEL_ARGS_EXCLUDE_KEY_PREFIX; } }));\r\n//# sourceMappingURL=experimental.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/experimental.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/filter-stack.js":
/*!**************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/filter-stack.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.FilterStackFactory = exports.FilterStack = void 0;\r\nclass FilterStack {\r\n    constructor(filters) {\r\n        this.filters = filters;\r\n    }\r\n    sendMetadata(metadata) {\r\n        let result = metadata;\r\n        for (let i = 0; i < this.filters.length; i++) {\r\n            result = this.filters[i].sendMetadata(result);\r\n        }\r\n        return result;\r\n    }\r\n    receiveMetadata(metadata) {\r\n        let result = metadata;\r\n        for (let i = this.filters.length - 1; i >= 0; i--) {\r\n            result = this.filters[i].receiveMetadata(result);\r\n        }\r\n        return result;\r\n    }\r\n    sendMessage(message) {\r\n        let result = message;\r\n        for (let i = 0; i < this.filters.length; i++) {\r\n            result = this.filters[i].sendMessage(result);\r\n        }\r\n        return result;\r\n    }\r\n    receiveMessage(message) {\r\n        let result = message;\r\n        for (let i = this.filters.length - 1; i >= 0; i--) {\r\n            result = this.filters[i].receiveMessage(result);\r\n        }\r\n        return result;\r\n    }\r\n    receiveTrailers(status) {\r\n        let result = status;\r\n        for (let i = this.filters.length - 1; i >= 0; i--) {\r\n            result = this.filters[i].receiveTrailers(result);\r\n        }\r\n        return result;\r\n    }\r\n    push(filters) {\r\n        this.filters.unshift(...filters);\r\n    }\r\n    getFilters() {\r\n        return this.filters;\r\n    }\r\n}\r\nexports.FilterStack = FilterStack;\r\nclass FilterStackFactory {\r\n    constructor(factories) {\r\n        this.factories = factories;\r\n    }\r\n    push(filterFactories) {\r\n        this.factories.unshift(...filterFactories);\r\n    }\r\n    clone() {\r\n        return new FilterStackFactory([...this.factories]);\r\n    }\r\n    createFilter() {\r\n        return new FilterStack(this.factories.map(factory => factory.createFilter()));\r\n    }\r\n}\r\nexports.FilterStackFactory = FilterStackFactory;\r\n//# sourceMappingURL=filter-stack.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvZmlsdGVyLXN0YWNrLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMEJBQTBCLEdBQUcsbUJBQW1CO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix5QkFBeUI7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLFFBQVE7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHlCQUF5QjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsUUFBUTtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsUUFBUTtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYW5pc2gtYnVkZHkvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvZmlsdGVyLXN0YWNrLmpzP2FlZjciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8qXHJcbiAqIENvcHlyaWdodCAyMDE5IGdSUEMgYXV0aG9ycy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqXHJcbiAqL1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuRmlsdGVyU3RhY2tGYWN0b3J5ID0gZXhwb3J0cy5GaWx0ZXJTdGFjayA9IHZvaWQgMDtcclxuY2xhc3MgRmlsdGVyU3RhY2sge1xyXG4gICAgY29uc3RydWN0b3IoZmlsdGVycykge1xyXG4gICAgICAgIHRoaXMuZmlsdGVycyA9IGZpbHRlcnM7XHJcbiAgICB9XHJcbiAgICBzZW5kTWV0YWRhdGEobWV0YWRhdGEpIHtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gbWV0YWRhdGE7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmZpbHRlcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5maWx0ZXJzW2ldLnNlbmRNZXRhZGF0YShyZXN1bHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG4gICAgcmVjZWl2ZU1ldGFkYXRhKG1ldGFkYXRhKSB7XHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IG1ldGFkYXRhO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSB0aGlzLmZpbHRlcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5maWx0ZXJzW2ldLnJlY2VpdmVNZXRhZGF0YShyZXN1bHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG4gICAgc2VuZE1lc3NhZ2UobWVzc2FnZSkge1xyXG4gICAgICAgIGxldCByZXN1bHQgPSBtZXNzYWdlO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5maWx0ZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuZmlsdGVyc1tpXS5zZW5kTWVzc2FnZShyZXN1bHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG4gICAgcmVjZWl2ZU1lc3NhZ2UobWVzc2FnZSkge1xyXG4gICAgICAgIGxldCByZXN1bHQgPSBtZXNzYWdlO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSB0aGlzLmZpbHRlcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5maWx0ZXJzW2ldLnJlY2VpdmVNZXNzYWdlKHJlc3VsdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbiAgICByZWNlaXZlVHJhaWxlcnMoc3RhdHVzKSB7XHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IHN0YXR1cztcclxuICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5maWx0ZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuZmlsdGVyc1tpXS5yZWNlaXZlVHJhaWxlcnMocmVzdWx0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuICAgIHB1c2goZmlsdGVycykge1xyXG4gICAgICAgIHRoaXMuZmlsdGVycy51bnNoaWZ0KC4uLmZpbHRlcnMpO1xyXG4gICAgfVxyXG4gICAgZ2V0RmlsdGVycygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5maWx0ZXJzO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuRmlsdGVyU3RhY2sgPSBGaWx0ZXJTdGFjaztcclxuY2xhc3MgRmlsdGVyU3RhY2tGYWN0b3J5IHtcclxuICAgIGNvbnN0cnVjdG9yKGZhY3Rvcmllcykge1xyXG4gICAgICAgIHRoaXMuZmFjdG9yaWVzID0gZmFjdG9yaWVzO1xyXG4gICAgfVxyXG4gICAgcHVzaChmaWx0ZXJGYWN0b3JpZXMpIHtcclxuICAgICAgICB0aGlzLmZhY3Rvcmllcy51bnNoaWZ0KC4uLmZpbHRlckZhY3Rvcmllcyk7XHJcbiAgICB9XHJcbiAgICBjbG9uZSgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IEZpbHRlclN0YWNrRmFjdG9yeShbLi4udGhpcy5mYWN0b3JpZXNdKTtcclxuICAgIH1cclxuICAgIGNyZWF0ZUZpbHRlcigpIHtcclxuICAgICAgICByZXR1cm4gbmV3IEZpbHRlclN0YWNrKHRoaXMuZmFjdG9yaWVzLm1hcChmYWN0b3J5ID0+IGZhY3RvcnkuY3JlYXRlRmlsdGVyKCkpKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkZpbHRlclN0YWNrRmFjdG9yeSA9IEZpbHRlclN0YWNrRmFjdG9yeTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmlsdGVyLXN0YWNrLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/filter-stack.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/filter.js":
/*!********************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/filter.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.BaseFilter = void 0;\r\nclass BaseFilter {\r\n    async sendMetadata(metadata) {\r\n        return metadata;\r\n    }\r\n    receiveMetadata(metadata) {\r\n        return metadata;\r\n    }\r\n    async sendMessage(message) {\r\n        return message;\r\n    }\r\n    async receiveMessage(message) {\r\n        return message;\r\n    }\r\n    receiveTrailers(status) {\r\n        return status;\r\n    }\r\n}\r\nexports.BaseFilter = BaseFilter;\r\n//# sourceMappingURL=filter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvZmlsdGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYW5pc2gtYnVkZHkvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvZmlsdGVyLmpzP2NiYWQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8qXHJcbiAqIENvcHlyaWdodCAyMDE5IGdSUEMgYXV0aG9ycy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqXHJcbiAqL1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuQmFzZUZpbHRlciA9IHZvaWQgMDtcclxuY2xhc3MgQmFzZUZpbHRlciB7XHJcbiAgICBhc3luYyBzZW5kTWV0YWRhdGEobWV0YWRhdGEpIHtcclxuICAgICAgICByZXR1cm4gbWV0YWRhdGE7XHJcbiAgICB9XHJcbiAgICByZWNlaXZlTWV0YWRhdGEobWV0YWRhdGEpIHtcclxuICAgICAgICByZXR1cm4gbWV0YWRhdGE7XHJcbiAgICB9XHJcbiAgICBhc3luYyBzZW5kTWVzc2FnZShtZXNzYWdlKSB7XHJcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XHJcbiAgICB9XHJcbiAgICBhc3luYyByZWNlaXZlTWVzc2FnZShtZXNzYWdlKSB7XHJcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XHJcbiAgICB9XHJcbiAgICByZWNlaXZlVHJhaWxlcnMoc3RhdHVzKSB7XHJcbiAgICAgICAgcmV0dXJuIHN0YXR1cztcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkJhc2VGaWx0ZXIgPSBCYXNlRmlsdGVyO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1maWx0ZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/filter.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/http_proxy.js":
/*!************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/http_proxy.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.parseCIDR = parseCIDR;\r\nexports.mapProxyName = mapProxyName;\r\nexports.getProxiedConnection = getProxiedConnection;\r\nconst logging_1 = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nconst net_1 = __webpack_require__(/*! net */ \"net\");\r\nconst http = __webpack_require__(/*! http */ \"http\");\r\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\r\nconst subchannel_address_1 = __webpack_require__(/*! ./subchannel-address */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/subchannel-address.js\");\r\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\r\nconst url_1 = __webpack_require__(/*! url */ \"url\");\r\nconst resolver_dns_1 = __webpack_require__(/*! ./resolver-dns */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/resolver-dns.js\");\r\nconst TRACER_NAME = 'proxy';\r\nfunction trace(text) {\r\n    logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);\r\n}\r\nfunction getProxyInfo() {\r\n    let proxyEnv = '';\r\n    let envVar = '';\r\n    /* Prefer using 'grpc_proxy'. Fallback on 'http_proxy' if it is not set.\r\n     * Also prefer using 'https_proxy' with fallback on 'http_proxy'. The\r\n     * fallback behavior can be removed if there's a demand for it.\r\n     */\r\n    if (process.env.grpc_proxy) {\r\n        envVar = 'grpc_proxy';\r\n        proxyEnv = process.env.grpc_proxy;\r\n    }\r\n    else if (process.env.https_proxy) {\r\n        envVar = 'https_proxy';\r\n        proxyEnv = process.env.https_proxy;\r\n    }\r\n    else if (process.env.http_proxy) {\r\n        envVar = 'http_proxy';\r\n        proxyEnv = process.env.http_proxy;\r\n    }\r\n    else {\r\n        return {};\r\n    }\r\n    let proxyUrl;\r\n    try {\r\n        proxyUrl = new url_1.URL(proxyEnv);\r\n    }\r\n    catch (e) {\r\n        (0, logging_1.log)(constants_1.LogVerbosity.ERROR, `cannot parse value of \"${envVar}\" env var`);\r\n        return {};\r\n    }\r\n    if (proxyUrl.protocol !== 'http:') {\r\n        (0, logging_1.log)(constants_1.LogVerbosity.ERROR, `\"${proxyUrl.protocol}\" scheme not supported in proxy URI`);\r\n        return {};\r\n    }\r\n    let userCred = null;\r\n    if (proxyUrl.username) {\r\n        if (proxyUrl.password) {\r\n            (0, logging_1.log)(constants_1.LogVerbosity.INFO, 'userinfo found in proxy URI');\r\n            userCred = decodeURIComponent(`${proxyUrl.username}:${proxyUrl.password}`);\r\n        }\r\n        else {\r\n            userCred = proxyUrl.username;\r\n        }\r\n    }\r\n    const hostname = proxyUrl.hostname;\r\n    let port = proxyUrl.port;\r\n    /* The proxy URL uses the scheme \"http:\", which has a default port number of\r\n     * 80. We need to set that explicitly here if it is omitted because otherwise\r\n     * it will use gRPC's default port 443. */\r\n    if (port === '') {\r\n        port = '80';\r\n    }\r\n    const result = {\r\n        address: `${hostname}:${port}`,\r\n    };\r\n    if (userCred) {\r\n        result.creds = userCred;\r\n    }\r\n    trace('Proxy server ' + result.address + ' set by environment variable ' + envVar);\r\n    return result;\r\n}\r\nfunction getNoProxyHostList() {\r\n    /* Prefer using 'no_grpc_proxy'. Fallback on 'no_proxy' if it is not set. */\r\n    let noProxyStr = process.env.no_grpc_proxy;\r\n    let envVar = 'no_grpc_proxy';\r\n    if (!noProxyStr) {\r\n        noProxyStr = process.env.no_proxy;\r\n        envVar = 'no_proxy';\r\n    }\r\n    if (noProxyStr) {\r\n        trace('No proxy server list set by environment variable ' + envVar);\r\n        return noProxyStr.split(',');\r\n    }\r\n    else {\r\n        return [];\r\n    }\r\n}\r\n/*\r\n * The groups correspond to CIDR parts as follows:\r\n * 1. ip\r\n * 2. prefixLength\r\n */\r\nfunction parseCIDR(cidrString) {\r\n    const splitRange = cidrString.split('/');\r\n    if (splitRange.length !== 2) {\r\n        return null;\r\n    }\r\n    const prefixLength = parseInt(splitRange[1], 10);\r\n    if (!(0, net_1.isIPv4)(splitRange[0]) || Number.isNaN(prefixLength) || prefixLength < 0 || prefixLength > 32) {\r\n        return null;\r\n    }\r\n    return {\r\n        ip: ipToInt(splitRange[0]),\r\n        prefixLength: prefixLength\r\n    };\r\n}\r\nfunction ipToInt(ip) {\r\n    return ip.split(\".\").reduce((acc, octet) => (acc << 8) + parseInt(octet, 10), 0);\r\n}\r\nfunction isIpInCIDR(cidr, serverHost) {\r\n    const ip = cidr.ip;\r\n    const mask = -1 << (32 - cidr.prefixLength);\r\n    const hostIP = ipToInt(serverHost);\r\n    return (hostIP & mask) === (ip & mask);\r\n}\r\nfunction hostMatchesNoProxyList(serverHost) {\r\n    for (const host of getNoProxyHostList()) {\r\n        const parsedCIDR = parseCIDR(host);\r\n        // host is a CIDR and serverHost is an IP address\r\n        if ((0, net_1.isIPv4)(serverHost) && parsedCIDR && isIpInCIDR(parsedCIDR, serverHost)) {\r\n            return true;\r\n        }\r\n        else if (serverHost.endsWith(host)) {\r\n            // host is a single IP or a domain name suffix\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction mapProxyName(target, options) {\r\n    var _a;\r\n    const noProxyResult = {\r\n        target: target,\r\n        extraOptions: {},\r\n    };\r\n    if (((_a = options['grpc.enable_http_proxy']) !== null && _a !== void 0 ? _a : 1) === 0) {\r\n        return noProxyResult;\r\n    }\r\n    if (target.scheme === 'unix') {\r\n        return noProxyResult;\r\n    }\r\n    const proxyInfo = getProxyInfo();\r\n    if (!proxyInfo.address) {\r\n        return noProxyResult;\r\n    }\r\n    const hostPort = (0, uri_parser_1.splitHostPort)(target.path);\r\n    if (!hostPort) {\r\n        return noProxyResult;\r\n    }\r\n    const serverHost = hostPort.host;\r\n    if (hostMatchesNoProxyList(serverHost)) {\r\n        trace('Not using proxy for target in no_proxy list: ' + (0, uri_parser_1.uriToString)(target));\r\n        return noProxyResult;\r\n    }\r\n    const extraOptions = {\r\n        'grpc.http_connect_target': (0, uri_parser_1.uriToString)(target),\r\n    };\r\n    if (proxyInfo.creds) {\r\n        extraOptions['grpc.http_connect_creds'] = proxyInfo.creds;\r\n    }\r\n    return {\r\n        target: {\r\n            scheme: 'dns',\r\n            path: proxyInfo.address,\r\n        },\r\n        extraOptions: extraOptions,\r\n    };\r\n}\r\nfunction getProxiedConnection(address, channelOptions) {\r\n    var _a;\r\n    if (!('grpc.http_connect_target' in channelOptions)) {\r\n        return Promise.resolve(null);\r\n    }\r\n    const realTarget = channelOptions['grpc.http_connect_target'];\r\n    const parsedTarget = (0, uri_parser_1.parseUri)(realTarget);\r\n    if (parsedTarget === null) {\r\n        return Promise.resolve(null);\r\n    }\r\n    const splitHostPost = (0, uri_parser_1.splitHostPort)(parsedTarget.path);\r\n    if (splitHostPost === null) {\r\n        return Promise.resolve(null);\r\n    }\r\n    const hostPort = `${splitHostPost.host}:${(_a = splitHostPost.port) !== null && _a !== void 0 ? _a : resolver_dns_1.DEFAULT_PORT}`;\r\n    const options = {\r\n        method: 'CONNECT',\r\n        path: hostPort,\r\n    };\r\n    const headers = {\r\n        Host: hostPort,\r\n    };\r\n    // Connect to the subchannel address as a proxy\r\n    if ((0, subchannel_address_1.isTcpSubchannelAddress)(address)) {\r\n        options.host = address.host;\r\n        options.port = address.port;\r\n    }\r\n    else {\r\n        options.socketPath = address.path;\r\n    }\r\n    if ('grpc.http_connect_creds' in channelOptions) {\r\n        headers['Proxy-Authorization'] =\r\n            'Basic ' +\r\n                Buffer.from(channelOptions['grpc.http_connect_creds']).toString('base64');\r\n    }\r\n    options.headers = headers;\r\n    const proxyAddressString = (0, subchannel_address_1.subchannelAddressToString)(address);\r\n    trace('Using proxy ' + proxyAddressString + ' to connect to ' + options.path);\r\n    return new Promise((resolve, reject) => {\r\n        const request = http.request(options);\r\n        request.once('connect', (res, socket, head) => {\r\n            request.removeAllListeners();\r\n            socket.removeAllListeners();\r\n            if (res.statusCode === 200) {\r\n                trace('Successfully connected to ' +\r\n                    options.path +\r\n                    ' through proxy ' +\r\n                    proxyAddressString);\r\n                // The HTTP client may have already read a few bytes of the proxied\r\n                // connection. If that's the case, put them back into the socket.\r\n                // See https://github.com/grpc/grpc-node/issues/2744.\r\n                if (head.length > 0) {\r\n                    socket.unshift(head);\r\n                }\r\n                trace('Successfully established a plaintext connection to ' +\r\n                    options.path +\r\n                    ' through proxy ' +\r\n                    proxyAddressString);\r\n                resolve(socket);\r\n            }\r\n            else {\r\n                (0, logging_1.log)(constants_1.LogVerbosity.ERROR, 'Failed to connect to ' +\r\n                    options.path +\r\n                    ' through proxy ' +\r\n                    proxyAddressString +\r\n                    ' with status ' +\r\n                    res.statusCode);\r\n                reject();\r\n            }\r\n        });\r\n        request.once('error', err => {\r\n            request.removeAllListeners();\r\n            (0, logging_1.log)(constants_1.LogVerbosity.ERROR, 'Failed to connect to proxy ' +\r\n                proxyAddressString +\r\n                ' with error ' +\r\n                err.message);\r\n            reject();\r\n        });\r\n        request.end();\r\n    });\r\n}\r\n//# sourceMappingURL=http_proxy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/http_proxy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.experimental = exports.ServerInterceptingCall = exports.ResponderBuilder = exports.ServerListenerBuilder = exports.addAdminServicesToServer = exports.getChannelzHandlers = exports.getChannelzServiceDefinition = exports.InterceptorConfigurationError = exports.InterceptingCall = exports.RequesterBuilder = exports.ListenerBuilder = exports.StatusBuilder = exports.getClientChannel = exports.ServerCredentials = exports.Server = exports.setLogVerbosity = exports.setLogger = exports.load = exports.loadObject = exports.CallCredentials = exports.ChannelCredentials = exports.waitForClientReady = exports.closeClient = exports.Channel = exports.makeGenericClientConstructor = exports.makeClientConstructor = exports.loadPackageDefinition = exports.Client = exports.compressionAlgorithms = exports.propagate = exports.connectivityState = exports.status = exports.logVerbosity = exports.Metadata = exports.credentials = void 0;\r\nconst call_credentials_1 = __webpack_require__(/*! ./call-credentials */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/call-credentials.js\");\r\nObject.defineProperty(exports, \"CallCredentials\", ({ enumerable: true, get: function () { return call_credentials_1.CallCredentials; } }));\r\nconst channel_1 = __webpack_require__(/*! ./channel */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/channel.js\");\r\nObject.defineProperty(exports, \"Channel\", ({ enumerable: true, get: function () { return channel_1.ChannelImplementation; } }));\r\nconst compression_algorithms_1 = __webpack_require__(/*! ./compression-algorithms */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/compression-algorithms.js\");\r\nObject.defineProperty(exports, \"compressionAlgorithms\", ({ enumerable: true, get: function () { return compression_algorithms_1.CompressionAlgorithms; } }));\r\nconst connectivity_state_1 = __webpack_require__(/*! ./connectivity-state */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/connectivity-state.js\");\r\nObject.defineProperty(exports, \"connectivityState\", ({ enumerable: true, get: function () { return connectivity_state_1.ConnectivityState; } }));\r\nconst channel_credentials_1 = __webpack_require__(/*! ./channel-credentials */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/channel-credentials.js\");\r\nObject.defineProperty(exports, \"ChannelCredentials\", ({ enumerable: true, get: function () { return channel_credentials_1.ChannelCredentials; } }));\r\nconst client_1 = __webpack_require__(/*! ./client */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/client.js\");\r\nObject.defineProperty(exports, \"Client\", ({ enumerable: true, get: function () { return client_1.Client; } }));\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nObject.defineProperty(exports, \"logVerbosity\", ({ enumerable: true, get: function () { return constants_1.LogVerbosity; } }));\r\nObject.defineProperty(exports, \"status\", ({ enumerable: true, get: function () { return constants_1.Status; } }));\r\nObject.defineProperty(exports, \"propagate\", ({ enumerable: true, get: function () { return constants_1.Propagate; } }));\r\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\r\nconst make_client_1 = __webpack_require__(/*! ./make-client */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/make-client.js\");\r\nObject.defineProperty(exports, \"loadPackageDefinition\", ({ enumerable: true, get: function () { return make_client_1.loadPackageDefinition; } }));\r\nObject.defineProperty(exports, \"makeClientConstructor\", ({ enumerable: true, get: function () { return make_client_1.makeClientConstructor; } }));\r\nObject.defineProperty(exports, \"makeGenericClientConstructor\", ({ enumerable: true, get: function () { return make_client_1.makeClientConstructor; } }));\r\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/metadata.js\");\r\nObject.defineProperty(exports, \"Metadata\", ({ enumerable: true, get: function () { return metadata_1.Metadata; } }));\r\nconst server_1 = __webpack_require__(/*! ./server */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/server.js\");\r\nObject.defineProperty(exports, \"Server\", ({ enumerable: true, get: function () { return server_1.Server; } }));\r\nconst server_credentials_1 = __webpack_require__(/*! ./server-credentials */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/server-credentials.js\");\r\nObject.defineProperty(exports, \"ServerCredentials\", ({ enumerable: true, get: function () { return server_credentials_1.ServerCredentials; } }));\r\nconst status_builder_1 = __webpack_require__(/*! ./status-builder */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/status-builder.js\");\r\nObject.defineProperty(exports, \"StatusBuilder\", ({ enumerable: true, get: function () { return status_builder_1.StatusBuilder; } }));\r\n/**** Client Credentials ****/\r\n// Using assign only copies enumerable properties, which is what we want\r\nexports.credentials = {\r\n    /**\r\n     * Combine a ChannelCredentials with any number of CallCredentials into a\r\n     * single ChannelCredentials object.\r\n     * @param channelCredentials The ChannelCredentials object.\r\n     * @param callCredentials Any number of CallCredentials objects.\r\n     * @return The resulting ChannelCredentials object.\r\n     */\r\n    combineChannelCredentials: (channelCredentials, ...callCredentials) => {\r\n        return callCredentials.reduce((acc, other) => acc.compose(other), channelCredentials);\r\n    },\r\n    /**\r\n     * Combine any number of CallCredentials into a single CallCredentials\r\n     * object.\r\n     * @param first The first CallCredentials object.\r\n     * @param additional Any number of additional CallCredentials objects.\r\n     * @return The resulting CallCredentials object.\r\n     */\r\n    combineCallCredentials: (first, ...additional) => {\r\n        return additional.reduce((acc, other) => acc.compose(other), first);\r\n    },\r\n    // from channel-credentials.ts\r\n    createInsecure: channel_credentials_1.ChannelCredentials.createInsecure,\r\n    createSsl: channel_credentials_1.ChannelCredentials.createSsl,\r\n    createFromSecureContext: channel_credentials_1.ChannelCredentials.createFromSecureContext,\r\n    // from call-credentials.ts\r\n    createFromMetadataGenerator: call_credentials_1.CallCredentials.createFromMetadataGenerator,\r\n    createFromGoogleCredential: call_credentials_1.CallCredentials.createFromGoogleCredential,\r\n    createEmpty: call_credentials_1.CallCredentials.createEmpty,\r\n};\r\n/**\r\n * Close a Client object.\r\n * @param client The client to close.\r\n */\r\nconst closeClient = (client) => client.close();\r\nexports.closeClient = closeClient;\r\nconst waitForClientReady = (client, deadline, callback) => client.waitForReady(deadline, callback);\r\nexports.waitForClientReady = waitForClientReady;\r\n/* eslint-enable @typescript-eslint/no-explicit-any */\r\n/**** Unimplemented function stubs ****/\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\nconst loadObject = (value, options) => {\r\n    throw new Error('Not available in this library. Use @grpc/proto-loader and loadPackageDefinition instead');\r\n};\r\nexports.loadObject = loadObject;\r\nconst load = (filename, format, options) => {\r\n    throw new Error('Not available in this library. Use @grpc/proto-loader and loadPackageDefinition instead');\r\n};\r\nexports.load = load;\r\nconst setLogger = (logger) => {\r\n    logging.setLogger(logger);\r\n};\r\nexports.setLogger = setLogger;\r\nconst setLogVerbosity = (verbosity) => {\r\n    logging.setLoggerVerbosity(verbosity);\r\n};\r\nexports.setLogVerbosity = setLogVerbosity;\r\nconst getClientChannel = (client) => {\r\n    return client_1.Client.prototype.getChannel.call(client);\r\n};\r\nexports.getClientChannel = getClientChannel;\r\nvar client_interceptors_1 = __webpack_require__(/*! ./client-interceptors */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/client-interceptors.js\");\r\nObject.defineProperty(exports, \"ListenerBuilder\", ({ enumerable: true, get: function () { return client_interceptors_1.ListenerBuilder; } }));\r\nObject.defineProperty(exports, \"RequesterBuilder\", ({ enumerable: true, get: function () { return client_interceptors_1.RequesterBuilder; } }));\r\nObject.defineProperty(exports, \"InterceptingCall\", ({ enumerable: true, get: function () { return client_interceptors_1.InterceptingCall; } }));\r\nObject.defineProperty(exports, \"InterceptorConfigurationError\", ({ enumerable: true, get: function () { return client_interceptors_1.InterceptorConfigurationError; } }));\r\nvar channelz_1 = __webpack_require__(/*! ./channelz */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/channelz.js\");\r\nObject.defineProperty(exports, \"getChannelzServiceDefinition\", ({ enumerable: true, get: function () { return channelz_1.getChannelzServiceDefinition; } }));\r\nObject.defineProperty(exports, \"getChannelzHandlers\", ({ enumerable: true, get: function () { return channelz_1.getChannelzHandlers; } }));\r\nvar admin_1 = __webpack_require__(/*! ./admin */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/admin.js\");\r\nObject.defineProperty(exports, \"addAdminServicesToServer\", ({ enumerable: true, get: function () { return admin_1.addAdminServicesToServer; } }));\r\nvar server_interceptors_1 = __webpack_require__(/*! ./server-interceptors */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/server-interceptors.js\");\r\nObject.defineProperty(exports, \"ServerListenerBuilder\", ({ enumerable: true, get: function () { return server_interceptors_1.ServerListenerBuilder; } }));\r\nObject.defineProperty(exports, \"ResponderBuilder\", ({ enumerable: true, get: function () { return server_interceptors_1.ResponderBuilder; } }));\r\nObject.defineProperty(exports, \"ServerInterceptingCall\", ({ enumerable: true, get: function () { return server_interceptors_1.ServerInterceptingCall; } }));\r\nconst experimental = __webpack_require__(/*! ./experimental */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/experimental.js\");\r\nexports.experimental = experimental;\r\nconst resolver_dns = __webpack_require__(/*! ./resolver-dns */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/resolver-dns.js\");\r\nconst resolver_uds = __webpack_require__(/*! ./resolver-uds */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/resolver-uds.js\");\r\nconst resolver_ip = __webpack_require__(/*! ./resolver-ip */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/resolver-ip.js\");\r\nconst load_balancer_pick_first = __webpack_require__(/*! ./load-balancer-pick-first */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/load-balancer-pick-first.js\");\r\nconst load_balancer_round_robin = __webpack_require__(/*! ./load-balancer-round-robin */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/load-balancer-round-robin.js\");\r\nconst load_balancer_outlier_detection = __webpack_require__(/*! ./load-balancer-outlier-detection */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/load-balancer-outlier-detection.js\");\r\nconst channelz = __webpack_require__(/*! ./channelz */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/channelz.js\");\r\n(() => {\r\n    resolver_dns.setup();\r\n    resolver_uds.setup();\r\n    resolver_ip.setup();\r\n    load_balancer_pick_first.setup();\r\n    load_balancer_round_robin.setup();\r\n    load_balancer_outlier_detection.setup();\r\n    channelz.setup();\r\n})();\r\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/internal-channel.js":
/*!******************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/internal-channel.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.InternalChannel = exports.SUBCHANNEL_ARGS_EXCLUDE_KEY_PREFIX = void 0;\r\nconst channel_credentials_1 = __webpack_require__(/*! ./channel-credentials */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/channel-credentials.js\");\r\nconst resolving_load_balancer_1 = __webpack_require__(/*! ./resolving-load-balancer */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/resolving-load-balancer.js\");\r\nconst subchannel_pool_1 = __webpack_require__(/*! ./subchannel-pool */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/subchannel-pool.js\");\r\nconst picker_1 = __webpack_require__(/*! ./picker */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/picker.js\");\r\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/metadata.js\");\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nconst filter_stack_1 = __webpack_require__(/*! ./filter-stack */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/filter-stack.js\");\r\nconst compression_filter_1 = __webpack_require__(/*! ./compression-filter */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/compression-filter.js\");\r\nconst resolver_1 = __webpack_require__(/*! ./resolver */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/resolver.js\");\r\nconst logging_1 = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\r\nconst http_proxy_1 = __webpack_require__(/*! ./http_proxy */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/http_proxy.js\");\r\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\r\nconst connectivity_state_1 = __webpack_require__(/*! ./connectivity-state */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/connectivity-state.js\");\r\nconst channelz_1 = __webpack_require__(/*! ./channelz */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/channelz.js\");\r\nconst load_balancing_call_1 = __webpack_require__(/*! ./load-balancing-call */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/load-balancing-call.js\");\r\nconst deadline_1 = __webpack_require__(/*! ./deadline */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/deadline.js\");\r\nconst resolving_call_1 = __webpack_require__(/*! ./resolving-call */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/resolving-call.js\");\r\nconst call_number_1 = __webpack_require__(/*! ./call-number */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/call-number.js\");\r\nconst control_plane_status_1 = __webpack_require__(/*! ./control-plane-status */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/control-plane-status.js\");\r\nconst retrying_call_1 = __webpack_require__(/*! ./retrying-call */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/retrying-call.js\");\r\nconst subchannel_interface_1 = __webpack_require__(/*! ./subchannel-interface */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/subchannel-interface.js\");\r\n/**\r\n * See https://nodejs.org/api/timers.html#timers_setinterval_callback_delay_args\r\n */\r\nconst MAX_TIMEOUT_TIME = 2147483647;\r\nconst MIN_IDLE_TIMEOUT_MS = 1000;\r\n// 30 minutes\r\nconst DEFAULT_IDLE_TIMEOUT_MS = 30 * 60 * 1000;\r\nconst RETRY_THROTTLER_MAP = new Map();\r\nconst DEFAULT_RETRY_BUFFER_SIZE_BYTES = 1 << 24; // 16 MB\r\nconst DEFAULT_PER_RPC_RETRY_BUFFER_SIZE_BYTES = 1 << 20; // 1 MB\r\nclass ChannelSubchannelWrapper extends subchannel_interface_1.BaseSubchannelWrapper {\r\n    constructor(childSubchannel, channel) {\r\n        super(childSubchannel);\r\n        this.channel = channel;\r\n        this.refCount = 0;\r\n        this.subchannelStateListener = (subchannel, previousState, newState, keepaliveTime) => {\r\n            channel.throttleKeepalive(keepaliveTime);\r\n        };\r\n    }\r\n    ref() {\r\n        if (this.refCount === 0) {\r\n            this.child.addConnectivityStateListener(this.subchannelStateListener);\r\n            this.channel.addWrappedSubchannel(this);\r\n        }\r\n        this.child.ref();\r\n        this.refCount += 1;\r\n    }\r\n    unref() {\r\n        this.child.unref();\r\n        this.refCount -= 1;\r\n        if (this.refCount <= 0) {\r\n            this.child.removeConnectivityStateListener(this.subchannelStateListener);\r\n            this.channel.removeWrappedSubchannel(this);\r\n        }\r\n    }\r\n}\r\nclass ShutdownPicker {\r\n    pick(pickArgs) {\r\n        return {\r\n            pickResultType: picker_1.PickResultType.DROP,\r\n            status: {\r\n                code: constants_1.Status.UNAVAILABLE,\r\n                details: 'Channel closed before call started',\r\n                metadata: new metadata_1.Metadata()\r\n            },\r\n            subchannel: null,\r\n            onCallStarted: null,\r\n            onCallEnded: null\r\n        };\r\n    }\r\n}\r\nexports.SUBCHANNEL_ARGS_EXCLUDE_KEY_PREFIX = 'grpc.internal.no_subchannel';\r\nclass ChannelzInfoTracker {\r\n    constructor(target) {\r\n        this.target = target;\r\n        this.trace = new channelz_1.ChannelzTrace();\r\n        this.callTracker = new channelz_1.ChannelzCallTracker();\r\n        this.childrenTracker = new channelz_1.ChannelzChildrenTracker();\r\n        this.state = connectivity_state_1.ConnectivityState.IDLE;\r\n    }\r\n    getChannelzInfoCallback() {\r\n        return () => {\r\n            return {\r\n                target: this.target,\r\n                state: this.state,\r\n                trace: this.trace,\r\n                callTracker: this.callTracker,\r\n                children: this.childrenTracker.getChildLists()\r\n            };\r\n        };\r\n    }\r\n}\r\nclass InternalChannel {\r\n    constructor(target, credentials, options) {\r\n        var _a, _b, _c, _d, _e, _f;\r\n        this.credentials = credentials;\r\n        this.options = options;\r\n        this.connectivityState = connectivity_state_1.ConnectivityState.IDLE;\r\n        this.currentPicker = new picker_1.UnavailablePicker();\r\n        /**\r\n         * Calls queued up to get a call config. Should only be populated before the\r\n         * first time the resolver returns a result, which includes the ConfigSelector.\r\n         */\r\n        this.configSelectionQueue = [];\r\n        this.pickQueue = [];\r\n        this.connectivityStateWatchers = [];\r\n        /**\r\n         * This timer does not do anything on its own. Its purpose is to hold the\r\n         * event loop open while there are any pending calls for the channel that\r\n         * have not yet been assigned to specific subchannels. In other words,\r\n         * the invariant is that callRefTimer is reffed if and only if pickQueue\r\n         * is non-empty. In addition, the timer is null while the state is IDLE or\r\n         * SHUTDOWN and there are no pending calls.\r\n         */\r\n        this.callRefTimer = null;\r\n        this.configSelector = null;\r\n        /**\r\n         * This is the error from the name resolver if it failed most recently. It\r\n         * is only used to end calls that start while there is no config selector\r\n         * and the name resolver is in backoff, so it should be nulled if\r\n         * configSelector becomes set or the channel state becomes anything other\r\n         * than TRANSIENT_FAILURE.\r\n         */\r\n        this.currentResolutionError = null;\r\n        this.wrappedSubchannels = new Set();\r\n        this.callCount = 0;\r\n        this.idleTimer = null;\r\n        // Channelz info\r\n        this.channelzEnabled = true;\r\n        /**\r\n         * Randomly generated ID to be passed to the config selector, for use by\r\n         * ring_hash in xDS. An integer distributed approximately uniformly between\r\n         * 0 and MAX_SAFE_INTEGER.\r\n         */\r\n        this.randomChannelId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\r\n        if (typeof target !== 'string') {\r\n            throw new TypeError('Channel target must be a string');\r\n        }\r\n        if (!(credentials instanceof channel_credentials_1.ChannelCredentials)) {\r\n            throw new TypeError('Channel credentials must be a ChannelCredentials object');\r\n        }\r\n        if (options) {\r\n            if (typeof options !== 'object') {\r\n                throw new TypeError('Channel options must be an object');\r\n            }\r\n        }\r\n        this.channelzInfoTracker = new ChannelzInfoTracker(target);\r\n        const originalTargetUri = (0, uri_parser_1.parseUri)(target);\r\n        if (originalTargetUri === null) {\r\n            throw new Error(`Could not parse target name \"${target}\"`);\r\n        }\r\n        /* This ensures that the target has a scheme that is registered with the\r\n         * resolver */\r\n        const defaultSchemeMapResult = (0, resolver_1.mapUriDefaultScheme)(originalTargetUri);\r\n        if (defaultSchemeMapResult === null) {\r\n            throw new Error(`Could not find a default scheme for target name \"${target}\"`);\r\n        }\r\n        if (this.options['grpc.enable_channelz'] === 0) {\r\n            this.channelzEnabled = false;\r\n        }\r\n        this.channelzRef = (0, channelz_1.registerChannelzChannel)(target, this.channelzInfoTracker.getChannelzInfoCallback(), this.channelzEnabled);\r\n        if (this.channelzEnabled) {\r\n            this.channelzInfoTracker.trace.addTrace('CT_INFO', 'Channel created');\r\n        }\r\n        if (this.options['grpc.default_authority']) {\r\n            this.defaultAuthority = this.options['grpc.default_authority'];\r\n        }\r\n        else {\r\n            this.defaultAuthority = (0, resolver_1.getDefaultAuthority)(defaultSchemeMapResult);\r\n        }\r\n        const proxyMapResult = (0, http_proxy_1.mapProxyName)(defaultSchemeMapResult, options);\r\n        this.target = proxyMapResult.target;\r\n        this.options = Object.assign({}, this.options, proxyMapResult.extraOptions);\r\n        /* The global boolean parameter to getSubchannelPool has the inverse meaning to what\r\n         * the grpc.use_local_subchannel_pool channel option means. */\r\n        this.subchannelPool = (0, subchannel_pool_1.getSubchannelPool)(((_a = this.options['grpc.use_local_subchannel_pool']) !== null && _a !== void 0 ? _a : 0) === 0);\r\n        this.retryBufferTracker = new retrying_call_1.MessageBufferTracker((_b = this.options['grpc.retry_buffer_size']) !== null && _b !== void 0 ? _b : DEFAULT_RETRY_BUFFER_SIZE_BYTES, (_c = this.options['grpc.per_rpc_retry_buffer_size']) !== null && _c !== void 0 ? _c : DEFAULT_PER_RPC_RETRY_BUFFER_SIZE_BYTES);\r\n        this.keepaliveTime = (_d = this.options['grpc.keepalive_time_ms']) !== null && _d !== void 0 ? _d : -1;\r\n        this.idleTimeoutMs = Math.max((_e = this.options['grpc.client_idle_timeout_ms']) !== null && _e !== void 0 ? _e : DEFAULT_IDLE_TIMEOUT_MS, MIN_IDLE_TIMEOUT_MS);\r\n        const channelControlHelper = {\r\n            createSubchannel: (subchannelAddress, subchannelArgs) => {\r\n                const finalSubchannelArgs = {};\r\n                for (const [key, value] of Object.entries(subchannelArgs)) {\r\n                    if (!key.startsWith(exports.SUBCHANNEL_ARGS_EXCLUDE_KEY_PREFIX)) {\r\n                        finalSubchannelArgs[key] = value;\r\n                    }\r\n                }\r\n                const subchannel = this.subchannelPool.getOrCreateSubchannel(this.target, subchannelAddress, finalSubchannelArgs, this.credentials);\r\n                subchannel.throttleKeepalive(this.keepaliveTime);\r\n                if (this.channelzEnabled) {\r\n                    this.channelzInfoTracker.trace.addTrace('CT_INFO', 'Created subchannel or used existing subchannel', subchannel.getChannelzRef());\r\n                }\r\n                const wrappedSubchannel = new ChannelSubchannelWrapper(subchannel, this);\r\n                return wrappedSubchannel;\r\n            },\r\n            updateState: (connectivityState, picker) => {\r\n                this.currentPicker = picker;\r\n                const queueCopy = this.pickQueue.slice();\r\n                this.pickQueue = [];\r\n                if (queueCopy.length > 0) {\r\n                    this.callRefTimerUnref();\r\n                }\r\n                for (const call of queueCopy) {\r\n                    call.doPick();\r\n                }\r\n                this.updateState(connectivityState);\r\n            },\r\n            requestReresolution: () => {\r\n                // This should never be called.\r\n                throw new Error('Resolving load balancer should never call requestReresolution');\r\n            },\r\n            addChannelzChild: (child) => {\r\n                if (this.channelzEnabled) {\r\n                    this.channelzInfoTracker.childrenTracker.refChild(child);\r\n                }\r\n            },\r\n            removeChannelzChild: (child) => {\r\n                if (this.channelzEnabled) {\r\n                    this.channelzInfoTracker.childrenTracker.unrefChild(child);\r\n                }\r\n            },\r\n        };\r\n        this.resolvingLoadBalancer = new resolving_load_balancer_1.ResolvingLoadBalancer(this.target, channelControlHelper, this.options, (serviceConfig, configSelector) => {\r\n            var _a;\r\n            if (serviceConfig.retryThrottling) {\r\n                RETRY_THROTTLER_MAP.set(this.getTarget(), new retrying_call_1.RetryThrottler(serviceConfig.retryThrottling.maxTokens, serviceConfig.retryThrottling.tokenRatio, RETRY_THROTTLER_MAP.get(this.getTarget())));\r\n            }\r\n            else {\r\n                RETRY_THROTTLER_MAP.delete(this.getTarget());\r\n            }\r\n            if (this.channelzEnabled) {\r\n                this.channelzInfoTracker.trace.addTrace('CT_INFO', 'Address resolution succeeded');\r\n            }\r\n            (_a = this.configSelector) === null || _a === void 0 ? void 0 : _a.unref();\r\n            this.configSelector = configSelector;\r\n            this.currentResolutionError = null;\r\n            /* We process the queue asynchronously to ensure that the corresponding\r\n             * load balancer update has completed. */\r\n            process.nextTick(() => {\r\n                const localQueue = this.configSelectionQueue;\r\n                this.configSelectionQueue = [];\r\n                if (localQueue.length > 0) {\r\n                    this.callRefTimerUnref();\r\n                }\r\n                for (const call of localQueue) {\r\n                    call.getConfig();\r\n                }\r\n            });\r\n        }, status => {\r\n            if (this.channelzEnabled) {\r\n                this.channelzInfoTracker.trace.addTrace('CT_WARNING', 'Address resolution failed with code ' +\r\n                    status.code +\r\n                    ' and details \"' +\r\n                    status.details +\r\n                    '\"');\r\n            }\r\n            if (this.configSelectionQueue.length > 0) {\r\n                this.trace('Name resolution failed with calls queued for config selection');\r\n            }\r\n            if (this.configSelector === null) {\r\n                this.currentResolutionError = Object.assign(Object.assign({}, (0, control_plane_status_1.restrictControlPlaneStatusCode)(status.code, status.details)), { metadata: status.metadata });\r\n            }\r\n            const localQueue = this.configSelectionQueue;\r\n            this.configSelectionQueue = [];\r\n            if (localQueue.length > 0) {\r\n                this.callRefTimerUnref();\r\n            }\r\n            for (const call of localQueue) {\r\n                call.reportResolverError(status);\r\n            }\r\n        });\r\n        this.filterStackFactory = new filter_stack_1.FilterStackFactory([\r\n            new compression_filter_1.CompressionFilterFactory(this, this.options),\r\n        ]);\r\n        this.trace('Channel constructed with options ' +\r\n            JSON.stringify(options, undefined, 2));\r\n        const error = new Error();\r\n        if ((0, logging_1.isTracerEnabled)('channel_stacktrace')) {\r\n            (0, logging_1.trace)(constants_1.LogVerbosity.DEBUG, 'channel_stacktrace', '(' +\r\n                this.channelzRef.id +\r\n                ') ' +\r\n                'Channel constructed \\n' +\r\n                ((_f = error.stack) === null || _f === void 0 ? void 0 : _f.substring(error.stack.indexOf('\\n') + 1)));\r\n        }\r\n        this.lastActivityTimestamp = new Date();\r\n    }\r\n    trace(text, verbosityOverride) {\r\n        (0, logging_1.trace)(verbosityOverride !== null && verbosityOverride !== void 0 ? verbosityOverride : constants_1.LogVerbosity.DEBUG, 'channel', '(' + this.channelzRef.id + ') ' + (0, uri_parser_1.uriToString)(this.target) + ' ' + text);\r\n    }\r\n    callRefTimerRef() {\r\n        var _a, _b, _c, _d;\r\n        if (!this.callRefTimer) {\r\n            this.callRefTimer = setInterval(() => { }, MAX_TIMEOUT_TIME);\r\n        }\r\n        // If the hasRef function does not exist, always run the code\r\n        if (!((_b = (_a = this.callRefTimer).hasRef) === null || _b === void 0 ? void 0 : _b.call(_a))) {\r\n            this.trace('callRefTimer.ref | configSelectionQueue.length=' +\r\n                this.configSelectionQueue.length +\r\n                ' pickQueue.length=' +\r\n                this.pickQueue.length);\r\n            (_d = (_c = this.callRefTimer).ref) === null || _d === void 0 ? void 0 : _d.call(_c);\r\n        }\r\n    }\r\n    callRefTimerUnref() {\r\n        var _a, _b, _c;\r\n        // If the timer or the hasRef function does not exist, always run the code\r\n        if (!((_a = this.callRefTimer) === null || _a === void 0 ? void 0 : _a.hasRef) || this.callRefTimer.hasRef()) {\r\n            this.trace('callRefTimer.unref | configSelectionQueue.length=' +\r\n                this.configSelectionQueue.length +\r\n                ' pickQueue.length=' +\r\n                this.pickQueue.length);\r\n            (_c = (_b = this.callRefTimer) === null || _b === void 0 ? void 0 : _b.unref) === null || _c === void 0 ? void 0 : _c.call(_b);\r\n        }\r\n    }\r\n    removeConnectivityStateWatcher(watcherObject) {\r\n        const watcherIndex = this.connectivityStateWatchers.findIndex(value => value === watcherObject);\r\n        if (watcherIndex >= 0) {\r\n            this.connectivityStateWatchers.splice(watcherIndex, 1);\r\n        }\r\n    }\r\n    updateState(newState) {\r\n        (0, logging_1.trace)(constants_1.LogVerbosity.DEBUG, 'connectivity_state', '(' +\r\n            this.channelzRef.id +\r\n            ') ' +\r\n            (0, uri_parser_1.uriToString)(this.target) +\r\n            ' ' +\r\n            connectivity_state_1.ConnectivityState[this.connectivityState] +\r\n            ' -> ' +\r\n            connectivity_state_1.ConnectivityState[newState]);\r\n        if (this.channelzEnabled) {\r\n            this.channelzInfoTracker.trace.addTrace('CT_INFO', 'Connectivity state change to ' + connectivity_state_1.ConnectivityState[newState]);\r\n        }\r\n        this.connectivityState = newState;\r\n        this.channelzInfoTracker.state = newState;\r\n        const watchersCopy = this.connectivityStateWatchers.slice();\r\n        for (const watcherObject of watchersCopy) {\r\n            if (newState !== watcherObject.currentState) {\r\n                if (watcherObject.timer) {\r\n                    clearTimeout(watcherObject.timer);\r\n                }\r\n                this.removeConnectivityStateWatcher(watcherObject);\r\n                watcherObject.callback();\r\n            }\r\n        }\r\n        if (newState !== connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) {\r\n            this.currentResolutionError = null;\r\n        }\r\n    }\r\n    throttleKeepalive(newKeepaliveTime) {\r\n        if (newKeepaliveTime > this.keepaliveTime) {\r\n            this.keepaliveTime = newKeepaliveTime;\r\n            for (const wrappedSubchannel of this.wrappedSubchannels) {\r\n                wrappedSubchannel.throttleKeepalive(newKeepaliveTime);\r\n            }\r\n        }\r\n    }\r\n    addWrappedSubchannel(wrappedSubchannel) {\r\n        this.wrappedSubchannels.add(wrappedSubchannel);\r\n    }\r\n    removeWrappedSubchannel(wrappedSubchannel) {\r\n        this.wrappedSubchannels.delete(wrappedSubchannel);\r\n    }\r\n    doPick(metadata, extraPickInfo) {\r\n        return this.currentPicker.pick({\r\n            metadata: metadata,\r\n            extraPickInfo: extraPickInfo,\r\n        });\r\n    }\r\n    queueCallForPick(call) {\r\n        this.pickQueue.push(call);\r\n        this.callRefTimerRef();\r\n    }\r\n    getConfig(method, metadata) {\r\n        if (this.connectivityState !== connectivity_state_1.ConnectivityState.SHUTDOWN) {\r\n            this.resolvingLoadBalancer.exitIdle();\r\n        }\r\n        if (this.configSelector) {\r\n            return {\r\n                type: 'SUCCESS',\r\n                config: this.configSelector.invoke(method, metadata, this.randomChannelId),\r\n            };\r\n        }\r\n        else {\r\n            if (this.currentResolutionError) {\r\n                return {\r\n                    type: 'ERROR',\r\n                    error: this.currentResolutionError,\r\n                };\r\n            }\r\n            else {\r\n                return {\r\n                    type: 'NONE',\r\n                };\r\n            }\r\n        }\r\n    }\r\n    queueCallForConfig(call) {\r\n        this.configSelectionQueue.push(call);\r\n        this.callRefTimerRef();\r\n    }\r\n    enterIdle() {\r\n        this.resolvingLoadBalancer.destroy();\r\n        this.updateState(connectivity_state_1.ConnectivityState.IDLE);\r\n        this.currentPicker = new picker_1.QueuePicker(this.resolvingLoadBalancer);\r\n        if (this.idleTimer) {\r\n            clearTimeout(this.idleTimer);\r\n            this.idleTimer = null;\r\n        }\r\n        if (this.callRefTimer) {\r\n            clearInterval(this.callRefTimer);\r\n            this.callRefTimer = null;\r\n        }\r\n    }\r\n    startIdleTimeout(timeoutMs) {\r\n        var _a, _b;\r\n        this.idleTimer = setTimeout(() => {\r\n            if (this.callCount > 0) {\r\n                /* If there is currently a call, the channel will not go idle for a\r\n                 * period of at least idleTimeoutMs, so check again after that time.\r\n                 */\r\n                this.startIdleTimeout(this.idleTimeoutMs);\r\n                return;\r\n            }\r\n            const now = new Date();\r\n            const timeSinceLastActivity = now.valueOf() - this.lastActivityTimestamp.valueOf();\r\n            if (timeSinceLastActivity >= this.idleTimeoutMs) {\r\n                this.trace('Idle timer triggered after ' +\r\n                    this.idleTimeoutMs +\r\n                    'ms of inactivity');\r\n                this.enterIdle();\r\n            }\r\n            else {\r\n                /* Whenever the timer fires with the latest activity being too recent,\r\n                 * set the timer again for the time when the time since the last\r\n                 * activity is equal to the timeout. This should result in the timer\r\n                 * firing no more than once every idleTimeoutMs/2 on average. */\r\n                this.startIdleTimeout(this.idleTimeoutMs - timeSinceLastActivity);\r\n            }\r\n        }, timeoutMs);\r\n        (_b = (_a = this.idleTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\r\n    }\r\n    maybeStartIdleTimer() {\r\n        if (this.connectivityState !== connectivity_state_1.ConnectivityState.SHUTDOWN &&\r\n            !this.idleTimer) {\r\n            this.startIdleTimeout(this.idleTimeoutMs);\r\n        }\r\n    }\r\n    onCallStart() {\r\n        if (this.channelzEnabled) {\r\n            this.channelzInfoTracker.callTracker.addCallStarted();\r\n        }\r\n        this.callCount += 1;\r\n    }\r\n    onCallEnd(status) {\r\n        if (this.channelzEnabled) {\r\n            if (status.code === constants_1.Status.OK) {\r\n                this.channelzInfoTracker.callTracker.addCallSucceeded();\r\n            }\r\n            else {\r\n                this.channelzInfoTracker.callTracker.addCallFailed();\r\n            }\r\n        }\r\n        this.callCount -= 1;\r\n        this.lastActivityTimestamp = new Date();\r\n        this.maybeStartIdleTimer();\r\n    }\r\n    createLoadBalancingCall(callConfig, method, host, credentials, deadline) {\r\n        const callNumber = (0, call_number_1.getNextCallNumber)();\r\n        this.trace('createLoadBalancingCall [' + callNumber + '] method=\"' + method + '\"');\r\n        return new load_balancing_call_1.LoadBalancingCall(this, callConfig, method, host, credentials, deadline, callNumber);\r\n    }\r\n    createRetryingCall(callConfig, method, host, credentials, deadline) {\r\n        const callNumber = (0, call_number_1.getNextCallNumber)();\r\n        this.trace('createRetryingCall [' + callNumber + '] method=\"' + method + '\"');\r\n        return new retrying_call_1.RetryingCall(this, callConfig, method, host, credentials, deadline, callNumber, this.retryBufferTracker, RETRY_THROTTLER_MAP.get(this.getTarget()));\r\n    }\r\n    createResolvingCall(method, deadline, host, parentCall, propagateFlags) {\r\n        const callNumber = (0, call_number_1.getNextCallNumber)();\r\n        this.trace('createResolvingCall [' +\r\n            callNumber +\r\n            '] method=\"' +\r\n            method +\r\n            '\", deadline=' +\r\n            (0, deadline_1.deadlineToString)(deadline));\r\n        const finalOptions = {\r\n            deadline: deadline,\r\n            flags: propagateFlags !== null && propagateFlags !== void 0 ? propagateFlags : constants_1.Propagate.DEFAULTS,\r\n            host: host !== null && host !== void 0 ? host : this.defaultAuthority,\r\n            parentCall: parentCall,\r\n        };\r\n        const call = new resolving_call_1.ResolvingCall(this, method, finalOptions, this.filterStackFactory.clone(), callNumber);\r\n        this.onCallStart();\r\n        call.addStatusWatcher(status => {\r\n            this.onCallEnd(status);\r\n        });\r\n        return call;\r\n    }\r\n    close() {\r\n        var _a;\r\n        this.resolvingLoadBalancer.destroy();\r\n        this.updateState(connectivity_state_1.ConnectivityState.SHUTDOWN);\r\n        this.currentPicker = new ShutdownPicker();\r\n        for (const call of this.configSelectionQueue) {\r\n            call.cancelWithStatus(constants_1.Status.UNAVAILABLE, 'Channel closed before call started');\r\n        }\r\n        this.configSelectionQueue = [];\r\n        for (const call of this.pickQueue) {\r\n            call.cancelWithStatus(constants_1.Status.UNAVAILABLE, 'Channel closed before call started');\r\n        }\r\n        this.pickQueue = [];\r\n        if (this.callRefTimer) {\r\n            clearInterval(this.callRefTimer);\r\n        }\r\n        if (this.idleTimer) {\r\n            clearTimeout(this.idleTimer);\r\n        }\r\n        if (this.channelzEnabled) {\r\n            (0, channelz_1.unregisterChannelzRef)(this.channelzRef);\r\n        }\r\n        this.subchannelPool.unrefUnusedSubchannels();\r\n        (_a = this.configSelector) === null || _a === void 0 ? void 0 : _a.unref();\r\n        this.configSelector = null;\r\n    }\r\n    getTarget() {\r\n        return (0, uri_parser_1.uriToString)(this.target);\r\n    }\r\n    getConnectivityState(tryToConnect) {\r\n        const connectivityState = this.connectivityState;\r\n        if (tryToConnect) {\r\n            this.resolvingLoadBalancer.exitIdle();\r\n            this.lastActivityTimestamp = new Date();\r\n            this.maybeStartIdleTimer();\r\n        }\r\n        return connectivityState;\r\n    }\r\n    watchConnectivityState(currentState, deadline, callback) {\r\n        if (this.connectivityState === connectivity_state_1.ConnectivityState.SHUTDOWN) {\r\n            throw new Error('Channel has been shut down');\r\n        }\r\n        let timer = null;\r\n        if (deadline !== Infinity) {\r\n            const deadlineDate = deadline instanceof Date ? deadline : new Date(deadline);\r\n            const now = new Date();\r\n            if (deadline === -Infinity || deadlineDate <= now) {\r\n                process.nextTick(callback, new Error('Deadline passed without connectivity state change'));\r\n                return;\r\n            }\r\n            timer = setTimeout(() => {\r\n                this.removeConnectivityStateWatcher(watcherObject);\r\n                callback(new Error('Deadline passed without connectivity state change'));\r\n            }, deadlineDate.getTime() - now.getTime());\r\n        }\r\n        const watcherObject = {\r\n            currentState,\r\n            callback,\r\n            timer,\r\n        };\r\n        this.connectivityStateWatchers.push(watcherObject);\r\n    }\r\n    /**\r\n     * Get the channelz reference object for this channel. The returned value is\r\n     * garbage if channelz is disabled for this channel.\r\n     * @returns\r\n     */\r\n    getChannelzRef() {\r\n        return this.channelzRef;\r\n    }\r\n    createCall(method, deadline, host, parentCall, propagateFlags) {\r\n        if (typeof method !== 'string') {\r\n            throw new TypeError('Channel#createCall: method must be a string');\r\n        }\r\n        if (!(typeof deadline === 'number' || deadline instanceof Date)) {\r\n            throw new TypeError('Channel#createCall: deadline must be a number or Date');\r\n        }\r\n        if (this.connectivityState === connectivity_state_1.ConnectivityState.SHUTDOWN) {\r\n            throw new Error('Channel has been shut down');\r\n        }\r\n        return this.createResolvingCall(method, deadline, host, parentCall, propagateFlags);\r\n    }\r\n    getOptions() {\r\n        return this.options;\r\n    }\r\n}\r\nexports.InternalChannel = InternalChannel;\r\n//# sourceMappingURL=internal-channel.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/internal-channel.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/load-balancer-child-handler.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/load-balancer-child-handler.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2020 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ChildLoadBalancerHandler = void 0;\r\nconst load_balancer_1 = __webpack_require__(/*! ./load-balancer */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/load-balancer.js\");\r\nconst connectivity_state_1 = __webpack_require__(/*! ./connectivity-state */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/connectivity-state.js\");\r\nconst TYPE_NAME = 'child_load_balancer_helper';\r\nclass ChildLoadBalancerHandler {\r\n    constructor(channelControlHelper) {\r\n        this.channelControlHelper = channelControlHelper;\r\n        this.currentChild = null;\r\n        this.pendingChild = null;\r\n        this.latestConfig = null;\r\n        this.ChildPolicyHelper = class {\r\n            constructor(parent) {\r\n                this.parent = parent;\r\n                this.child = null;\r\n            }\r\n            createSubchannel(subchannelAddress, subchannelArgs) {\r\n                return this.parent.channelControlHelper.createSubchannel(subchannelAddress, subchannelArgs);\r\n            }\r\n            updateState(connectivityState, picker, errorMessage) {\r\n                var _a;\r\n                if (this.calledByPendingChild()) {\r\n                    if (connectivityState === connectivity_state_1.ConnectivityState.CONNECTING) {\r\n                        return;\r\n                    }\r\n                    (_a = this.parent.currentChild) === null || _a === void 0 ? void 0 : _a.destroy();\r\n                    this.parent.currentChild = this.parent.pendingChild;\r\n                    this.parent.pendingChild = null;\r\n                }\r\n                else if (!this.calledByCurrentChild()) {\r\n                    return;\r\n                }\r\n                this.parent.channelControlHelper.updateState(connectivityState, picker, errorMessage);\r\n            }\r\n            requestReresolution() {\r\n                var _a;\r\n                const latestChild = (_a = this.parent.pendingChild) !== null && _a !== void 0 ? _a : this.parent.currentChild;\r\n                if (this.child === latestChild) {\r\n                    this.parent.channelControlHelper.requestReresolution();\r\n                }\r\n            }\r\n            setChild(newChild) {\r\n                this.child = newChild;\r\n            }\r\n            addChannelzChild(child) {\r\n                this.parent.channelControlHelper.addChannelzChild(child);\r\n            }\r\n            removeChannelzChild(child) {\r\n                this.parent.channelControlHelper.removeChannelzChild(child);\r\n            }\r\n            calledByPendingChild() {\r\n                return this.child === this.parent.pendingChild;\r\n            }\r\n            calledByCurrentChild() {\r\n                return this.child === this.parent.currentChild;\r\n            }\r\n        };\r\n    }\r\n    configUpdateRequiresNewPolicyInstance(oldConfig, newConfig) {\r\n        return oldConfig.getLoadBalancerName() !== newConfig.getLoadBalancerName();\r\n    }\r\n    /**\r\n     * Prerequisites: lbConfig !== null and lbConfig.name is registered\r\n     * @param endpointList\r\n     * @param lbConfig\r\n     * @param attributes\r\n     */\r\n    updateAddressList(endpointList, lbConfig, options) {\r\n        let childToUpdate;\r\n        if (this.currentChild === null ||\r\n            this.latestConfig === null ||\r\n            this.configUpdateRequiresNewPolicyInstance(this.latestConfig, lbConfig)) {\r\n            const newHelper = new this.ChildPolicyHelper(this);\r\n            const newChild = (0, load_balancer_1.createLoadBalancer)(lbConfig, newHelper);\r\n            newHelper.setChild(newChild);\r\n            if (this.currentChild === null) {\r\n                this.currentChild = newChild;\r\n                childToUpdate = this.currentChild;\r\n            }\r\n            else {\r\n                if (this.pendingChild) {\r\n                    this.pendingChild.destroy();\r\n                }\r\n                this.pendingChild = newChild;\r\n                childToUpdate = this.pendingChild;\r\n            }\r\n        }\r\n        else {\r\n            if (this.pendingChild === null) {\r\n                childToUpdate = this.currentChild;\r\n            }\r\n            else {\r\n                childToUpdate = this.pendingChild;\r\n            }\r\n        }\r\n        this.latestConfig = lbConfig;\r\n        childToUpdate.updateAddressList(endpointList, lbConfig, options);\r\n    }\r\n    exitIdle() {\r\n        if (this.currentChild) {\r\n            this.currentChild.exitIdle();\r\n            if (this.pendingChild) {\r\n                this.pendingChild.exitIdle();\r\n            }\r\n        }\r\n    }\r\n    resetBackoff() {\r\n        if (this.currentChild) {\r\n            this.currentChild.resetBackoff();\r\n            if (this.pendingChild) {\r\n                this.pendingChild.resetBackoff();\r\n            }\r\n        }\r\n    }\r\n    destroy() {\r\n        /* Note: state updates are only propagated from the child balancer if that\r\n         * object is equal to this.currentChild or this.pendingChild. Since this\r\n         * function sets both of those to null, no further state updates will\r\n         * occur after this function returns. */\r\n        if (this.currentChild) {\r\n            this.currentChild.destroy();\r\n            this.currentChild = null;\r\n        }\r\n        if (this.pendingChild) {\r\n            this.pendingChild.destroy();\r\n            this.pendingChild = null;\r\n        }\r\n    }\r\n    getTypeName() {\r\n        return TYPE_NAME;\r\n    }\r\n}\r\nexports.ChildLoadBalancerHandler = ChildLoadBalancerHandler;\r\n//# sourceMappingURL=load-balancer-child-handler.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/load-balancer-child-handler.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/load-balancer-outlier-detection.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/load-balancer-outlier-detection.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2022 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nvar _a;\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.OutlierDetectionLoadBalancer = exports.OutlierDetectionLoadBalancingConfig = void 0;\r\nexports.setup = setup;\r\nconst connectivity_state_1 = __webpack_require__(/*! ./connectivity-state */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/connectivity-state.js\");\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nconst duration_1 = __webpack_require__(/*! ./duration */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/duration.js\");\r\nconst experimental_1 = __webpack_require__(/*! ./experimental */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/experimental.js\");\r\nconst load_balancer_1 = __webpack_require__(/*! ./load-balancer */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/load-balancer.js\");\r\nconst load_balancer_child_handler_1 = __webpack_require__(/*! ./load-balancer-child-handler */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/load-balancer-child-handler.js\");\r\nconst picker_1 = __webpack_require__(/*! ./picker */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/picker.js\");\r\nconst subchannel_address_1 = __webpack_require__(/*! ./subchannel-address */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/subchannel-address.js\");\r\nconst subchannel_interface_1 = __webpack_require__(/*! ./subchannel-interface */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/subchannel-interface.js\");\r\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\r\nconst TRACER_NAME = 'outlier_detection';\r\nfunction trace(text) {\r\n    logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);\r\n}\r\nconst TYPE_NAME = 'outlier_detection';\r\nconst OUTLIER_DETECTION_ENABLED = ((_a = process.env.GRPC_EXPERIMENTAL_ENABLE_OUTLIER_DETECTION) !== null && _a !== void 0 ? _a : 'true') === 'true';\r\nconst defaultSuccessRateEjectionConfig = {\r\n    stdev_factor: 1900,\r\n    enforcement_percentage: 100,\r\n    minimum_hosts: 5,\r\n    request_volume: 100,\r\n};\r\nconst defaultFailurePercentageEjectionConfig = {\r\n    threshold: 85,\r\n    enforcement_percentage: 100,\r\n    minimum_hosts: 5,\r\n    request_volume: 50,\r\n};\r\nfunction validateFieldType(obj, fieldName, expectedType, objectName) {\r\n    if (fieldName in obj &&\r\n        obj[fieldName] !== undefined &&\r\n        typeof obj[fieldName] !== expectedType) {\r\n        const fullFieldName = objectName ? `${objectName}.${fieldName}` : fieldName;\r\n        throw new Error(`outlier detection config ${fullFieldName} parse error: expected ${expectedType}, got ${typeof obj[fieldName]}`);\r\n    }\r\n}\r\nfunction validatePositiveDuration(obj, fieldName, objectName) {\r\n    const fullFieldName = objectName ? `${objectName}.${fieldName}` : fieldName;\r\n    if (fieldName in obj && obj[fieldName] !== undefined) {\r\n        if (!(0, duration_1.isDuration)(obj[fieldName])) {\r\n            throw new Error(`outlier detection config ${fullFieldName} parse error: expected Duration, got ${typeof obj[fieldName]}`);\r\n        }\r\n        if (!(obj[fieldName].seconds >= 0 &&\r\n            obj[fieldName].seconds <= 315576000000 &&\r\n            obj[fieldName].nanos >= 0 &&\r\n            obj[fieldName].nanos <= 999999999)) {\r\n            throw new Error(`outlier detection config ${fullFieldName} parse error: values out of range for non-negative Duaration`);\r\n        }\r\n    }\r\n}\r\nfunction validatePercentage(obj, fieldName, objectName) {\r\n    const fullFieldName = objectName ? `${objectName}.${fieldName}` : fieldName;\r\n    validateFieldType(obj, fieldName, 'number', objectName);\r\n    if (fieldName in obj &&\r\n        obj[fieldName] !== undefined &&\r\n        !(obj[fieldName] >= 0 && obj[fieldName] <= 100)) {\r\n        throw new Error(`outlier detection config ${fullFieldName} parse error: value out of range for percentage (0-100)`);\r\n    }\r\n}\r\nclass OutlierDetectionLoadBalancingConfig {\r\n    constructor(intervalMs, baseEjectionTimeMs, maxEjectionTimeMs, maxEjectionPercent, successRateEjection, failurePercentageEjection, childPolicy) {\r\n        this.childPolicy = childPolicy;\r\n        if (childPolicy.getLoadBalancerName() === 'pick_first') {\r\n            throw new Error('outlier_detection LB policy cannot have a pick_first child policy');\r\n        }\r\n        this.intervalMs = intervalMs !== null && intervalMs !== void 0 ? intervalMs : 10000;\r\n        this.baseEjectionTimeMs = baseEjectionTimeMs !== null && baseEjectionTimeMs !== void 0 ? baseEjectionTimeMs : 30000;\r\n        this.maxEjectionTimeMs = maxEjectionTimeMs !== null && maxEjectionTimeMs !== void 0 ? maxEjectionTimeMs : 300000;\r\n        this.maxEjectionPercent = maxEjectionPercent !== null && maxEjectionPercent !== void 0 ? maxEjectionPercent : 10;\r\n        this.successRateEjection = successRateEjection\r\n            ? Object.assign(Object.assign({}, defaultSuccessRateEjectionConfig), successRateEjection) : null;\r\n        this.failurePercentageEjection = failurePercentageEjection\r\n            ? Object.assign(Object.assign({}, defaultFailurePercentageEjectionConfig), failurePercentageEjection) : null;\r\n    }\r\n    getLoadBalancerName() {\r\n        return TYPE_NAME;\r\n    }\r\n    toJsonObject() {\r\n        var _a, _b;\r\n        return {\r\n            outlier_detection: {\r\n                interval: (0, duration_1.msToDuration)(this.intervalMs),\r\n                base_ejection_time: (0, duration_1.msToDuration)(this.baseEjectionTimeMs),\r\n                max_ejection_time: (0, duration_1.msToDuration)(this.maxEjectionTimeMs),\r\n                max_ejection_percent: this.maxEjectionPercent,\r\n                success_rate_ejection: (_a = this.successRateEjection) !== null && _a !== void 0 ? _a : undefined,\r\n                failure_percentage_ejection: (_b = this.failurePercentageEjection) !== null && _b !== void 0 ? _b : undefined,\r\n                child_policy: [this.childPolicy.toJsonObject()],\r\n            },\r\n        };\r\n    }\r\n    getIntervalMs() {\r\n        return this.intervalMs;\r\n    }\r\n    getBaseEjectionTimeMs() {\r\n        return this.baseEjectionTimeMs;\r\n    }\r\n    getMaxEjectionTimeMs() {\r\n        return this.maxEjectionTimeMs;\r\n    }\r\n    getMaxEjectionPercent() {\r\n        return this.maxEjectionPercent;\r\n    }\r\n    getSuccessRateEjectionConfig() {\r\n        return this.successRateEjection;\r\n    }\r\n    getFailurePercentageEjectionConfig() {\r\n        return this.failurePercentageEjection;\r\n    }\r\n    getChildPolicy() {\r\n        return this.childPolicy;\r\n    }\r\n    static createFromJson(obj) {\r\n        var _a;\r\n        validatePositiveDuration(obj, 'interval');\r\n        validatePositiveDuration(obj, 'base_ejection_time');\r\n        validatePositiveDuration(obj, 'max_ejection_time');\r\n        validatePercentage(obj, 'max_ejection_percent');\r\n        if ('success_rate_ejection' in obj &&\r\n            obj.success_rate_ejection !== undefined) {\r\n            if (typeof obj.success_rate_ejection !== 'object') {\r\n                throw new Error('outlier detection config success_rate_ejection must be an object');\r\n            }\r\n            validateFieldType(obj.success_rate_ejection, 'stdev_factor', 'number', 'success_rate_ejection');\r\n            validatePercentage(obj.success_rate_ejection, 'enforcement_percentage', 'success_rate_ejection');\r\n            validateFieldType(obj.success_rate_ejection, 'minimum_hosts', 'number', 'success_rate_ejection');\r\n            validateFieldType(obj.success_rate_ejection, 'request_volume', 'number', 'success_rate_ejection');\r\n        }\r\n        if ('failure_percentage_ejection' in obj &&\r\n            obj.failure_percentage_ejection !== undefined) {\r\n            if (typeof obj.failure_percentage_ejection !== 'object') {\r\n                throw new Error('outlier detection config failure_percentage_ejection must be an object');\r\n            }\r\n            validatePercentage(obj.failure_percentage_ejection, 'threshold', 'failure_percentage_ejection');\r\n            validatePercentage(obj.failure_percentage_ejection, 'enforcement_percentage', 'failure_percentage_ejection');\r\n            validateFieldType(obj.failure_percentage_ejection, 'minimum_hosts', 'number', 'failure_percentage_ejection');\r\n            validateFieldType(obj.failure_percentage_ejection, 'request_volume', 'number', 'failure_percentage_ejection');\r\n        }\r\n        if (!('child_policy' in obj) || !Array.isArray(obj.child_policy)) {\r\n            throw new Error('outlier detection config child_policy must be an array');\r\n        }\r\n        const childPolicy = (0, load_balancer_1.selectLbConfigFromList)(obj.child_policy);\r\n        if (!childPolicy) {\r\n            throw new Error('outlier detection config child_policy: no valid recognized policy found');\r\n        }\r\n        return new OutlierDetectionLoadBalancingConfig(obj.interval ? (0, duration_1.durationToMs)(obj.interval) : null, obj.base_ejection_time ? (0, duration_1.durationToMs)(obj.base_ejection_time) : null, obj.max_ejection_time ? (0, duration_1.durationToMs)(obj.max_ejection_time) : null, (_a = obj.max_ejection_percent) !== null && _a !== void 0 ? _a : null, obj.success_rate_ejection, obj.failure_percentage_ejection, childPolicy);\r\n    }\r\n}\r\nexports.OutlierDetectionLoadBalancingConfig = OutlierDetectionLoadBalancingConfig;\r\nclass OutlierDetectionSubchannelWrapper extends subchannel_interface_1.BaseSubchannelWrapper {\r\n    constructor(childSubchannel, mapEntry) {\r\n        super(childSubchannel);\r\n        this.mapEntry = mapEntry;\r\n        this.refCount = 0;\r\n    }\r\n    ref() {\r\n        this.child.ref();\r\n        this.refCount += 1;\r\n    }\r\n    unref() {\r\n        this.child.unref();\r\n        this.refCount -= 1;\r\n        if (this.refCount <= 0) {\r\n            if (this.mapEntry) {\r\n                const index = this.mapEntry.subchannelWrappers.indexOf(this);\r\n                if (index >= 0) {\r\n                    this.mapEntry.subchannelWrappers.splice(index, 1);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    eject() {\r\n        this.setHealthy(false);\r\n    }\r\n    uneject() {\r\n        this.setHealthy(true);\r\n    }\r\n    getMapEntry() {\r\n        return this.mapEntry;\r\n    }\r\n    getWrappedSubchannel() {\r\n        return this.child;\r\n    }\r\n}\r\nfunction createEmptyBucket() {\r\n    return {\r\n        success: 0,\r\n        failure: 0,\r\n    };\r\n}\r\nclass CallCounter {\r\n    constructor() {\r\n        this.activeBucket = createEmptyBucket();\r\n        this.inactiveBucket = createEmptyBucket();\r\n    }\r\n    addSuccess() {\r\n        this.activeBucket.success += 1;\r\n    }\r\n    addFailure() {\r\n        this.activeBucket.failure += 1;\r\n    }\r\n    switchBuckets() {\r\n        this.inactiveBucket = this.activeBucket;\r\n        this.activeBucket = createEmptyBucket();\r\n    }\r\n    getLastSuccesses() {\r\n        return this.inactiveBucket.success;\r\n    }\r\n    getLastFailures() {\r\n        return this.inactiveBucket.failure;\r\n    }\r\n}\r\nclass OutlierDetectionPicker {\r\n    constructor(wrappedPicker, countCalls) {\r\n        this.wrappedPicker = wrappedPicker;\r\n        this.countCalls = countCalls;\r\n    }\r\n    pick(pickArgs) {\r\n        const wrappedPick = this.wrappedPicker.pick(pickArgs);\r\n        if (wrappedPick.pickResultType === picker_1.PickResultType.COMPLETE) {\r\n            const subchannelWrapper = wrappedPick.subchannel;\r\n            const mapEntry = subchannelWrapper.getMapEntry();\r\n            if (mapEntry) {\r\n                let onCallEnded = wrappedPick.onCallEnded;\r\n                if (this.countCalls) {\r\n                    onCallEnded = statusCode => {\r\n                        var _a;\r\n                        if (statusCode === constants_1.Status.OK) {\r\n                            mapEntry.counter.addSuccess();\r\n                        }\r\n                        else {\r\n                            mapEntry.counter.addFailure();\r\n                        }\r\n                        (_a = wrappedPick.onCallEnded) === null || _a === void 0 ? void 0 : _a.call(wrappedPick, statusCode);\r\n                    };\r\n                }\r\n                return Object.assign(Object.assign({}, wrappedPick), { subchannel: subchannelWrapper.getWrappedSubchannel(), onCallEnded: onCallEnded });\r\n            }\r\n            else {\r\n                return Object.assign(Object.assign({}, wrappedPick), { subchannel: subchannelWrapper.getWrappedSubchannel() });\r\n            }\r\n        }\r\n        else {\r\n            return wrappedPick;\r\n        }\r\n    }\r\n}\r\nclass OutlierDetectionLoadBalancer {\r\n    constructor(channelControlHelper) {\r\n        this.entryMap = new subchannel_address_1.EndpointMap();\r\n        this.latestConfig = null;\r\n        this.timerStartTime = null;\r\n        this.childBalancer = new load_balancer_child_handler_1.ChildLoadBalancerHandler((0, experimental_1.createChildChannelControlHelper)(channelControlHelper, {\r\n            createSubchannel: (subchannelAddress, subchannelArgs) => {\r\n                const originalSubchannel = channelControlHelper.createSubchannel(subchannelAddress, subchannelArgs);\r\n                const mapEntry = this.entryMap.getForSubchannelAddress(subchannelAddress);\r\n                const subchannelWrapper = new OutlierDetectionSubchannelWrapper(originalSubchannel, mapEntry);\r\n                if ((mapEntry === null || mapEntry === void 0 ? void 0 : mapEntry.currentEjectionTimestamp) !== null) {\r\n                    // If the address is ejected, propagate that to the new subchannel wrapper\r\n                    subchannelWrapper.eject();\r\n                }\r\n                mapEntry === null || mapEntry === void 0 ? void 0 : mapEntry.subchannelWrappers.push(subchannelWrapper);\r\n                return subchannelWrapper;\r\n            },\r\n            updateState: (connectivityState, picker, errorMessage) => {\r\n                if (connectivityState === connectivity_state_1.ConnectivityState.READY) {\r\n                    channelControlHelper.updateState(connectivityState, new OutlierDetectionPicker(picker, this.isCountingEnabled()), errorMessage);\r\n                }\r\n                else {\r\n                    channelControlHelper.updateState(connectivityState, picker, errorMessage);\r\n                }\r\n            },\r\n        }));\r\n        this.ejectionTimer = setInterval(() => { }, 0);\r\n        clearInterval(this.ejectionTimer);\r\n    }\r\n    isCountingEnabled() {\r\n        return (this.latestConfig !== null &&\r\n            (this.latestConfig.getSuccessRateEjectionConfig() !== null ||\r\n                this.latestConfig.getFailurePercentageEjectionConfig() !== null));\r\n    }\r\n    getCurrentEjectionPercent() {\r\n        let ejectionCount = 0;\r\n        for (const mapEntry of this.entryMap.values()) {\r\n            if (mapEntry.currentEjectionTimestamp !== null) {\r\n                ejectionCount += 1;\r\n            }\r\n        }\r\n        return (ejectionCount * 100) / this.entryMap.size;\r\n    }\r\n    runSuccessRateCheck(ejectionTimestamp) {\r\n        if (!this.latestConfig) {\r\n            return;\r\n        }\r\n        const successRateConfig = this.latestConfig.getSuccessRateEjectionConfig();\r\n        if (!successRateConfig) {\r\n            return;\r\n        }\r\n        trace('Running success rate check');\r\n        // Step 1\r\n        const targetRequestVolume = successRateConfig.request_volume;\r\n        let addresesWithTargetVolume = 0;\r\n        const successRates = [];\r\n        for (const [endpoint, mapEntry] of this.entryMap.entries()) {\r\n            const successes = mapEntry.counter.getLastSuccesses();\r\n            const failures = mapEntry.counter.getLastFailures();\r\n            trace('Stats for ' +\r\n                (0, subchannel_address_1.endpointToString)(endpoint) +\r\n                ': successes=' +\r\n                successes +\r\n                ' failures=' +\r\n                failures +\r\n                ' targetRequestVolume=' +\r\n                targetRequestVolume);\r\n            if (successes + failures >= targetRequestVolume) {\r\n                addresesWithTargetVolume += 1;\r\n                successRates.push(successes / (successes + failures));\r\n            }\r\n        }\r\n        trace('Found ' +\r\n            addresesWithTargetVolume +\r\n            ' success rate candidates; currentEjectionPercent=' +\r\n            this.getCurrentEjectionPercent() +\r\n            ' successRates=[' +\r\n            successRates +\r\n            ']');\r\n        if (addresesWithTargetVolume < successRateConfig.minimum_hosts) {\r\n            return;\r\n        }\r\n        // Step 2\r\n        const successRateMean = successRates.reduce((a, b) => a + b) / successRates.length;\r\n        let successRateDeviationSum = 0;\r\n        for (const rate of successRates) {\r\n            const deviation = rate - successRateMean;\r\n            successRateDeviationSum += deviation * deviation;\r\n        }\r\n        const successRateVariance = successRateDeviationSum / successRates.length;\r\n        const successRateStdev = Math.sqrt(successRateVariance);\r\n        const ejectionThreshold = successRateMean -\r\n            successRateStdev * (successRateConfig.stdev_factor / 1000);\r\n        trace('stdev=' + successRateStdev + ' ejectionThreshold=' + ejectionThreshold);\r\n        // Step 3\r\n        for (const [address, mapEntry] of this.entryMap.entries()) {\r\n            // Step 3.i\r\n            if (this.getCurrentEjectionPercent() >=\r\n                this.latestConfig.getMaxEjectionPercent()) {\r\n                break;\r\n            }\r\n            // Step 3.ii\r\n            const successes = mapEntry.counter.getLastSuccesses();\r\n            const failures = mapEntry.counter.getLastFailures();\r\n            if (successes + failures < targetRequestVolume) {\r\n                continue;\r\n            }\r\n            // Step 3.iii\r\n            const successRate = successes / (successes + failures);\r\n            trace('Checking candidate ' + address + ' successRate=' + successRate);\r\n            if (successRate < ejectionThreshold) {\r\n                const randomNumber = Math.random() * 100;\r\n                trace('Candidate ' +\r\n                    address +\r\n                    ' randomNumber=' +\r\n                    randomNumber +\r\n                    ' enforcement_percentage=' +\r\n                    successRateConfig.enforcement_percentage);\r\n                if (randomNumber < successRateConfig.enforcement_percentage) {\r\n                    trace('Ejecting candidate ' + address);\r\n                    this.eject(mapEntry, ejectionTimestamp);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    runFailurePercentageCheck(ejectionTimestamp) {\r\n        if (!this.latestConfig) {\r\n            return;\r\n        }\r\n        const failurePercentageConfig = this.latestConfig.getFailurePercentageEjectionConfig();\r\n        if (!failurePercentageConfig) {\r\n            return;\r\n        }\r\n        trace('Running failure percentage check. threshold=' +\r\n            failurePercentageConfig.threshold +\r\n            ' request volume threshold=' +\r\n            failurePercentageConfig.request_volume);\r\n        // Step 1\r\n        let addressesWithTargetVolume = 0;\r\n        for (const mapEntry of this.entryMap.values()) {\r\n            const successes = mapEntry.counter.getLastSuccesses();\r\n            const failures = mapEntry.counter.getLastFailures();\r\n            if (successes + failures >= failurePercentageConfig.request_volume) {\r\n                addressesWithTargetVolume += 1;\r\n            }\r\n        }\r\n        if (addressesWithTargetVolume < failurePercentageConfig.minimum_hosts) {\r\n            return;\r\n        }\r\n        // Step 2\r\n        for (const [address, mapEntry] of this.entryMap.entries()) {\r\n            // Step 2.i\r\n            if (this.getCurrentEjectionPercent() >=\r\n                this.latestConfig.getMaxEjectionPercent()) {\r\n                break;\r\n            }\r\n            // Step 2.ii\r\n            const successes = mapEntry.counter.getLastSuccesses();\r\n            const failures = mapEntry.counter.getLastFailures();\r\n            trace('Candidate successes=' + successes + ' failures=' + failures);\r\n            if (successes + failures < failurePercentageConfig.request_volume) {\r\n                continue;\r\n            }\r\n            // Step 2.iii\r\n            const failurePercentage = (failures * 100) / (failures + successes);\r\n            if (failurePercentage > failurePercentageConfig.threshold) {\r\n                const randomNumber = Math.random() * 100;\r\n                trace('Candidate ' +\r\n                    address +\r\n                    ' randomNumber=' +\r\n                    randomNumber +\r\n                    ' enforcement_percentage=' +\r\n                    failurePercentageConfig.enforcement_percentage);\r\n                if (randomNumber < failurePercentageConfig.enforcement_percentage) {\r\n                    trace('Ejecting candidate ' + address);\r\n                    this.eject(mapEntry, ejectionTimestamp);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    eject(mapEntry, ejectionTimestamp) {\r\n        mapEntry.currentEjectionTimestamp = new Date();\r\n        mapEntry.ejectionTimeMultiplier += 1;\r\n        for (const subchannelWrapper of mapEntry.subchannelWrappers) {\r\n            subchannelWrapper.eject();\r\n        }\r\n    }\r\n    uneject(mapEntry) {\r\n        mapEntry.currentEjectionTimestamp = null;\r\n        for (const subchannelWrapper of mapEntry.subchannelWrappers) {\r\n            subchannelWrapper.uneject();\r\n        }\r\n    }\r\n    switchAllBuckets() {\r\n        for (const mapEntry of this.entryMap.values()) {\r\n            mapEntry.counter.switchBuckets();\r\n        }\r\n    }\r\n    startTimer(delayMs) {\r\n        var _a, _b;\r\n        this.ejectionTimer = setTimeout(() => this.runChecks(), delayMs);\r\n        (_b = (_a = this.ejectionTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\r\n    }\r\n    runChecks() {\r\n        const ejectionTimestamp = new Date();\r\n        trace('Ejection timer running');\r\n        this.switchAllBuckets();\r\n        if (!this.latestConfig) {\r\n            return;\r\n        }\r\n        this.timerStartTime = ejectionTimestamp;\r\n        this.startTimer(this.latestConfig.getIntervalMs());\r\n        this.runSuccessRateCheck(ejectionTimestamp);\r\n        this.runFailurePercentageCheck(ejectionTimestamp);\r\n        for (const [address, mapEntry] of this.entryMap.entries()) {\r\n            if (mapEntry.currentEjectionTimestamp === null) {\r\n                if (mapEntry.ejectionTimeMultiplier > 0) {\r\n                    mapEntry.ejectionTimeMultiplier -= 1;\r\n                }\r\n            }\r\n            else {\r\n                const baseEjectionTimeMs = this.latestConfig.getBaseEjectionTimeMs();\r\n                const maxEjectionTimeMs = this.latestConfig.getMaxEjectionTimeMs();\r\n                const returnTime = new Date(mapEntry.currentEjectionTimestamp.getTime());\r\n                returnTime.setMilliseconds(returnTime.getMilliseconds() +\r\n                    Math.min(baseEjectionTimeMs * mapEntry.ejectionTimeMultiplier, Math.max(baseEjectionTimeMs, maxEjectionTimeMs)));\r\n                if (returnTime < new Date()) {\r\n                    trace('Unejecting ' + address);\r\n                    this.uneject(mapEntry);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    updateAddressList(endpointList, lbConfig, options) {\r\n        if (!(lbConfig instanceof OutlierDetectionLoadBalancingConfig)) {\r\n            return;\r\n        }\r\n        trace('Received update with config: ' + JSON.stringify(lbConfig.toJsonObject(), undefined, 2));\r\n        for (const endpoint of endpointList) {\r\n            if (!this.entryMap.has(endpoint)) {\r\n                trace('Adding map entry for ' + (0, subchannel_address_1.endpointToString)(endpoint));\r\n                this.entryMap.set(endpoint, {\r\n                    counter: new CallCounter(),\r\n                    currentEjectionTimestamp: null,\r\n                    ejectionTimeMultiplier: 0,\r\n                    subchannelWrappers: [],\r\n                });\r\n            }\r\n        }\r\n        this.entryMap.deleteMissing(endpointList);\r\n        const childPolicy = lbConfig.getChildPolicy();\r\n        this.childBalancer.updateAddressList(endpointList, childPolicy, options);\r\n        if (lbConfig.getSuccessRateEjectionConfig() ||\r\n            lbConfig.getFailurePercentageEjectionConfig()) {\r\n            if (this.timerStartTime) {\r\n                trace('Previous timer existed. Replacing timer');\r\n                clearTimeout(this.ejectionTimer);\r\n                const remainingDelay = lbConfig.getIntervalMs() -\r\n                    (new Date().getTime() - this.timerStartTime.getTime());\r\n                this.startTimer(remainingDelay);\r\n            }\r\n            else {\r\n                trace('Starting new timer');\r\n                this.timerStartTime = new Date();\r\n                this.startTimer(lbConfig.getIntervalMs());\r\n                this.switchAllBuckets();\r\n            }\r\n        }\r\n        else {\r\n            trace('Counting disabled. Cancelling timer.');\r\n            this.timerStartTime = null;\r\n            clearTimeout(this.ejectionTimer);\r\n            for (const mapEntry of this.entryMap.values()) {\r\n                this.uneject(mapEntry);\r\n                mapEntry.ejectionTimeMultiplier = 0;\r\n            }\r\n        }\r\n        this.latestConfig = lbConfig;\r\n    }\r\n    exitIdle() {\r\n        this.childBalancer.exitIdle();\r\n    }\r\n    resetBackoff() {\r\n        this.childBalancer.resetBackoff();\r\n    }\r\n    destroy() {\r\n        clearTimeout(this.ejectionTimer);\r\n        this.childBalancer.destroy();\r\n    }\r\n    getTypeName() {\r\n        return TYPE_NAME;\r\n    }\r\n}\r\nexports.OutlierDetectionLoadBalancer = OutlierDetectionLoadBalancer;\r\nfunction setup() {\r\n    if (OUTLIER_DETECTION_ENABLED) {\r\n        (0, experimental_1.registerLoadBalancerType)(TYPE_NAME, OutlierDetectionLoadBalancer, OutlierDetectionLoadBalancingConfig);\r\n    }\r\n}\r\n//# sourceMappingURL=load-balancer-outlier-detection.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/load-balancer-outlier-detection.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/load-balancer-pick-first.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/load-balancer-pick-first.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.LeafLoadBalancer = exports.PickFirstLoadBalancer = exports.PickFirstLoadBalancingConfig = void 0;\r\nexports.shuffled = shuffled;\r\nexports.setup = setup;\r\nconst load_balancer_1 = __webpack_require__(/*! ./load-balancer */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/load-balancer.js\");\r\nconst connectivity_state_1 = __webpack_require__(/*! ./connectivity-state */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/connectivity-state.js\");\r\nconst picker_1 = __webpack_require__(/*! ./picker */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/picker.js\");\r\nconst subchannel_address_1 = __webpack_require__(/*! ./subchannel-address */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/subchannel-address.js\");\r\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nconst subchannel_address_2 = __webpack_require__(/*! ./subchannel-address */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/subchannel-address.js\");\r\nconst net_1 = __webpack_require__(/*! net */ \"net\");\r\nconst TRACER_NAME = 'pick_first';\r\nfunction trace(text) {\r\n    logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);\r\n}\r\nconst TYPE_NAME = 'pick_first';\r\n/**\r\n * Delay after starting a connection on a subchannel before starting a\r\n * connection on the next subchannel in the list, for Happy Eyeballs algorithm.\r\n */\r\nconst CONNECTION_DELAY_INTERVAL_MS = 250;\r\nclass PickFirstLoadBalancingConfig {\r\n    constructor(shuffleAddressList) {\r\n        this.shuffleAddressList = shuffleAddressList;\r\n    }\r\n    getLoadBalancerName() {\r\n        return TYPE_NAME;\r\n    }\r\n    toJsonObject() {\r\n        return {\r\n            [TYPE_NAME]: {\r\n                shuffleAddressList: this.shuffleAddressList,\r\n            },\r\n        };\r\n    }\r\n    getShuffleAddressList() {\r\n        return this.shuffleAddressList;\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    static createFromJson(obj) {\r\n        if ('shuffleAddressList' in obj &&\r\n            !(typeof obj.shuffleAddressList === 'boolean')) {\r\n            throw new Error('pick_first config field shuffleAddressList must be a boolean if provided');\r\n        }\r\n        return new PickFirstLoadBalancingConfig(obj.shuffleAddressList === true);\r\n    }\r\n}\r\nexports.PickFirstLoadBalancingConfig = PickFirstLoadBalancingConfig;\r\n/**\r\n * Picker for a `PickFirstLoadBalancer` in the READY state. Always returns the\r\n * picked subchannel.\r\n */\r\nclass PickFirstPicker {\r\n    constructor(subchannel) {\r\n        this.subchannel = subchannel;\r\n    }\r\n    pick(pickArgs) {\r\n        return {\r\n            pickResultType: picker_1.PickResultType.COMPLETE,\r\n            subchannel: this.subchannel,\r\n            status: null,\r\n            onCallStarted: null,\r\n            onCallEnded: null,\r\n        };\r\n    }\r\n}\r\n/**\r\n * Return a new array with the elements of the input array in a random order\r\n * @param list The input array\r\n * @returns A shuffled array of the elements of list\r\n */\r\nfunction shuffled(list) {\r\n    const result = list.slice();\r\n    for (let i = result.length - 1; i > 1; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        const temp = result[i];\r\n        result[i] = result[j];\r\n        result[j] = temp;\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Interleave addresses in addressList by family in accordance with RFC-8304 section 4\r\n * @param addressList\r\n * @returns\r\n */\r\nfunction interleaveAddressFamilies(addressList) {\r\n    if (addressList.length === 0) {\r\n        return [];\r\n    }\r\n    const result = [];\r\n    const ipv6Addresses = [];\r\n    const ipv4Addresses = [];\r\n    const ipv6First = (0, subchannel_address_2.isTcpSubchannelAddress)(addressList[0]) && (0, net_1.isIPv6)(addressList[0].host);\r\n    for (const address of addressList) {\r\n        if ((0, subchannel_address_2.isTcpSubchannelAddress)(address) && (0, net_1.isIPv6)(address.host)) {\r\n            ipv6Addresses.push(address);\r\n        }\r\n        else {\r\n            ipv4Addresses.push(address);\r\n        }\r\n    }\r\n    const firstList = ipv6First ? ipv6Addresses : ipv4Addresses;\r\n    const secondList = ipv6First ? ipv4Addresses : ipv6Addresses;\r\n    for (let i = 0; i < Math.max(firstList.length, secondList.length); i++) {\r\n        if (i < firstList.length) {\r\n            result.push(firstList[i]);\r\n        }\r\n        if (i < secondList.length) {\r\n            result.push(secondList[i]);\r\n        }\r\n    }\r\n    return result;\r\n}\r\nconst REPORT_HEALTH_STATUS_OPTION_NAME = 'grpc-node.internal.pick-first.report_health_status';\r\nclass PickFirstLoadBalancer {\r\n    /**\r\n     * Load balancer that attempts to connect to each backend in the address list\r\n     * in order, and picks the first one that connects, using it for every\r\n     * request.\r\n     * @param channelControlHelper `ChannelControlHelper` instance provided by\r\n     *     this load balancer's owner.\r\n     */\r\n    constructor(channelControlHelper) {\r\n        this.channelControlHelper = channelControlHelper;\r\n        /**\r\n         * The list of subchannels this load balancer is currently attempting to\r\n         * connect to.\r\n         */\r\n        this.children = [];\r\n        /**\r\n         * The current connectivity state of the load balancer.\r\n         */\r\n        this.currentState = connectivity_state_1.ConnectivityState.IDLE;\r\n        /**\r\n         * The index within the `subchannels` array of the subchannel with the most\r\n         * recently started connection attempt.\r\n         */\r\n        this.currentSubchannelIndex = 0;\r\n        /**\r\n         * The currently picked subchannel used for making calls. Populated if\r\n         * and only if the load balancer's current state is READY. In that case,\r\n         * the subchannel's current state is also READY.\r\n         */\r\n        this.currentPick = null;\r\n        /**\r\n         * Listener callback attached to each subchannel in the `subchannels` list\r\n         * while establishing a connection.\r\n         */\r\n        this.subchannelStateListener = (subchannel, previousState, newState, keepaliveTime, errorMessage) => {\r\n            this.onSubchannelStateUpdate(subchannel, previousState, newState, errorMessage);\r\n        };\r\n        this.pickedSubchannelHealthListener = () => this.calculateAndReportNewState();\r\n        /**\r\n         * The LB policy enters sticky TRANSIENT_FAILURE mode when all\r\n         * subchannels have failed to connect at least once, and it stays in that\r\n         * mode until a connection attempt is successful. While in sticky TF mode,\r\n         * the LB policy continuously attempts to connect to all of its subchannels.\r\n         */\r\n        this.stickyTransientFailureMode = false;\r\n        this.reportHealthStatus = false;\r\n        /**\r\n         * The most recent error reported by any subchannel as it transitioned to\r\n         * TRANSIENT_FAILURE.\r\n         */\r\n        this.lastError = null;\r\n        this.latestAddressList = null;\r\n        this.latestOptions = {};\r\n        this.connectionDelayTimeout = setTimeout(() => { }, 0);\r\n        clearTimeout(this.connectionDelayTimeout);\r\n    }\r\n    allChildrenHaveReportedTF() {\r\n        return this.children.every(child => child.hasReportedTransientFailure);\r\n    }\r\n    resetChildrenReportedTF() {\r\n        this.children.every(child => child.hasReportedTransientFailure = false);\r\n    }\r\n    calculateAndReportNewState() {\r\n        var _a;\r\n        if (this.currentPick) {\r\n            if (this.reportHealthStatus && !this.currentPick.isHealthy()) {\r\n                const errorMessage = `Picked subchannel ${this.currentPick.getAddress()} is unhealthy`;\r\n                this.updateState(connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE, new picker_1.UnavailablePicker({\r\n                    details: errorMessage,\r\n                }), errorMessage);\r\n            }\r\n            else {\r\n                this.updateState(connectivity_state_1.ConnectivityState.READY, new PickFirstPicker(this.currentPick), null);\r\n            }\r\n        }\r\n        else if (((_a = this.latestAddressList) === null || _a === void 0 ? void 0 : _a.length) === 0) {\r\n            const errorMessage = `No connection established. Last error: ${this.lastError}`;\r\n            this.updateState(connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE, new picker_1.UnavailablePicker({\r\n                details: errorMessage,\r\n            }), errorMessage);\r\n        }\r\n        else if (this.children.length === 0) {\r\n            this.updateState(connectivity_state_1.ConnectivityState.IDLE, new picker_1.QueuePicker(this), null);\r\n        }\r\n        else {\r\n            if (this.stickyTransientFailureMode) {\r\n                const errorMessage = `No connection established. Last error: ${this.lastError}`;\r\n                this.updateState(connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE, new picker_1.UnavailablePicker({\r\n                    details: errorMessage,\r\n                }), errorMessage);\r\n            }\r\n            else {\r\n                this.updateState(connectivity_state_1.ConnectivityState.CONNECTING, new picker_1.QueuePicker(this), null);\r\n            }\r\n        }\r\n    }\r\n    requestReresolution() {\r\n        this.channelControlHelper.requestReresolution();\r\n    }\r\n    maybeEnterStickyTransientFailureMode() {\r\n        if (!this.allChildrenHaveReportedTF()) {\r\n            return;\r\n        }\r\n        this.requestReresolution();\r\n        this.resetChildrenReportedTF();\r\n        if (this.stickyTransientFailureMode) {\r\n            this.calculateAndReportNewState();\r\n            return;\r\n        }\r\n        this.stickyTransientFailureMode = true;\r\n        for (const { subchannel } of this.children) {\r\n            subchannel.startConnecting();\r\n        }\r\n        this.calculateAndReportNewState();\r\n    }\r\n    removeCurrentPick() {\r\n        if (this.currentPick !== null) {\r\n            this.currentPick.removeConnectivityStateListener(this.subchannelStateListener);\r\n            this.channelControlHelper.removeChannelzChild(this.currentPick.getChannelzRef());\r\n            this.currentPick.removeHealthStateWatcher(this.pickedSubchannelHealthListener);\r\n            // Unref last, to avoid triggering listeners\r\n            this.currentPick.unref();\r\n            this.currentPick = null;\r\n        }\r\n    }\r\n    onSubchannelStateUpdate(subchannel, previousState, newState, errorMessage) {\r\n        var _a;\r\n        if ((_a = this.currentPick) === null || _a === void 0 ? void 0 : _a.realSubchannelEquals(subchannel)) {\r\n            if (newState !== connectivity_state_1.ConnectivityState.READY) {\r\n                this.removeCurrentPick();\r\n                this.calculateAndReportNewState();\r\n            }\r\n            return;\r\n        }\r\n        for (const [index, child] of this.children.entries()) {\r\n            if (subchannel.realSubchannelEquals(child.subchannel)) {\r\n                if (newState === connectivity_state_1.ConnectivityState.READY) {\r\n                    this.pickSubchannel(child.subchannel);\r\n                }\r\n                if (newState === connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) {\r\n                    child.hasReportedTransientFailure = true;\r\n                    if (errorMessage) {\r\n                        this.lastError = errorMessage;\r\n                    }\r\n                    this.maybeEnterStickyTransientFailureMode();\r\n                    if (index === this.currentSubchannelIndex) {\r\n                        this.startNextSubchannelConnecting(index + 1);\r\n                    }\r\n                }\r\n                child.subchannel.startConnecting();\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    startNextSubchannelConnecting(startIndex) {\r\n        clearTimeout(this.connectionDelayTimeout);\r\n        for (const [index, child] of this.children.entries()) {\r\n            if (index >= startIndex) {\r\n                const subchannelState = child.subchannel.getConnectivityState();\r\n                if (subchannelState === connectivity_state_1.ConnectivityState.IDLE ||\r\n                    subchannelState === connectivity_state_1.ConnectivityState.CONNECTING) {\r\n                    this.startConnecting(index);\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        this.maybeEnterStickyTransientFailureMode();\r\n    }\r\n    /**\r\n     * Have a single subchannel in the `subchannels` list start connecting.\r\n     * @param subchannelIndex The index into the `subchannels` list.\r\n     */\r\n    startConnecting(subchannelIndex) {\r\n        var _a, _b;\r\n        clearTimeout(this.connectionDelayTimeout);\r\n        this.currentSubchannelIndex = subchannelIndex;\r\n        if (this.children[subchannelIndex].subchannel.getConnectivityState() ===\r\n            connectivity_state_1.ConnectivityState.IDLE) {\r\n            trace('Start connecting to subchannel with address ' +\r\n                this.children[subchannelIndex].subchannel.getAddress());\r\n            process.nextTick(() => {\r\n                var _a;\r\n                (_a = this.children[subchannelIndex]) === null || _a === void 0 ? void 0 : _a.subchannel.startConnecting();\r\n            });\r\n        }\r\n        this.connectionDelayTimeout = setTimeout(() => {\r\n            this.startNextSubchannelConnecting(subchannelIndex + 1);\r\n        }, CONNECTION_DELAY_INTERVAL_MS);\r\n        (_b = (_a = this.connectionDelayTimeout).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\r\n    }\r\n    /**\r\n     * Declare that the specified subchannel should be used to make requests.\r\n     * This functions the same independent of whether subchannel is a member of\r\n     * this.children and whether it is equal to this.currentPick.\r\n     * Prerequisite: subchannel.getConnectivityState() === READY.\r\n     * @param subchannel\r\n     */\r\n    pickSubchannel(subchannel) {\r\n        trace('Pick subchannel with address ' + subchannel.getAddress());\r\n        this.stickyTransientFailureMode = false;\r\n        /* Ref before removeCurrentPick and resetSubchannelList to avoid the\r\n         * refcount dropping to 0 during this process. */\r\n        subchannel.ref();\r\n        this.channelControlHelper.addChannelzChild(subchannel.getChannelzRef());\r\n        this.removeCurrentPick();\r\n        this.resetSubchannelList();\r\n        subchannel.addConnectivityStateListener(this.subchannelStateListener);\r\n        subchannel.addHealthStateWatcher(this.pickedSubchannelHealthListener);\r\n        this.currentPick = subchannel;\r\n        clearTimeout(this.connectionDelayTimeout);\r\n        this.calculateAndReportNewState();\r\n    }\r\n    updateState(newState, picker, errorMessage) {\r\n        trace(connectivity_state_1.ConnectivityState[this.currentState] +\r\n            ' -> ' +\r\n            connectivity_state_1.ConnectivityState[newState]);\r\n        this.currentState = newState;\r\n        this.channelControlHelper.updateState(newState, picker, errorMessage);\r\n    }\r\n    resetSubchannelList() {\r\n        for (const child of this.children) {\r\n            /* Always remoev the connectivity state listener. If the subchannel is\r\n               getting picked, it will be re-added then. */\r\n            child.subchannel.removeConnectivityStateListener(this.subchannelStateListener);\r\n            /* Refs are counted independently for the children list and the\r\n             * currentPick, so we call unref whether or not the child is the\r\n             * currentPick. Channelz child references are also refcounted, so\r\n             * removeChannelzChild can be handled the same way. */\r\n            child.subchannel.unref();\r\n            this.channelControlHelper.removeChannelzChild(child.subchannel.getChannelzRef());\r\n        }\r\n        this.currentSubchannelIndex = 0;\r\n        this.children = [];\r\n    }\r\n    connectToAddressList(addressList, options) {\r\n        trace('connectToAddressList([' + addressList.map(address => (0, subchannel_address_1.subchannelAddressToString)(address)) + '])');\r\n        const newChildrenList = addressList.map(address => ({\r\n            subchannel: this.channelControlHelper.createSubchannel(address, options),\r\n            hasReportedTransientFailure: false,\r\n        }));\r\n        for (const { subchannel } of newChildrenList) {\r\n            if (subchannel.getConnectivityState() === connectivity_state_1.ConnectivityState.READY) {\r\n                this.pickSubchannel(subchannel);\r\n                return;\r\n            }\r\n        }\r\n        /* Ref each subchannel before resetting the list, to ensure that\r\n         * subchannels shared between the list don't drop to 0 refs during the\r\n         * transition. */\r\n        for (const { subchannel } of newChildrenList) {\r\n            subchannel.ref();\r\n            this.channelControlHelper.addChannelzChild(subchannel.getChannelzRef());\r\n        }\r\n        this.resetSubchannelList();\r\n        this.children = newChildrenList;\r\n        for (const { subchannel } of this.children) {\r\n            subchannel.addConnectivityStateListener(this.subchannelStateListener);\r\n        }\r\n        for (const child of this.children) {\r\n            if (child.subchannel.getConnectivityState() ===\r\n                connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) {\r\n                child.hasReportedTransientFailure = true;\r\n            }\r\n        }\r\n        this.startNextSubchannelConnecting(0);\r\n        this.calculateAndReportNewState();\r\n    }\r\n    updateAddressList(endpointList, lbConfig, options) {\r\n        if (!(lbConfig instanceof PickFirstLoadBalancingConfig)) {\r\n            return;\r\n        }\r\n        this.reportHealthStatus = options[REPORT_HEALTH_STATUS_OPTION_NAME];\r\n        /* Previously, an update would be discarded if it was identical to the\r\n         * previous update, to minimize churn. Now the DNS resolver is\r\n         * rate-limited, so that is less of a concern. */\r\n        if (lbConfig.getShuffleAddressList()) {\r\n            endpointList = shuffled(endpointList);\r\n        }\r\n        const rawAddressList = [].concat(...endpointList.map(endpoint => endpoint.addresses));\r\n        trace('updateAddressList([' + rawAddressList.map(address => (0, subchannel_address_1.subchannelAddressToString)(address)) + '])');\r\n        if (rawAddressList.length === 0) {\r\n            this.lastError = 'No addresses resolved';\r\n        }\r\n        const addressList = interleaveAddressFamilies(rawAddressList);\r\n        this.latestAddressList = addressList;\r\n        this.latestOptions = options;\r\n        this.connectToAddressList(addressList, options);\r\n    }\r\n    exitIdle() {\r\n        if (this.currentState === connectivity_state_1.ConnectivityState.IDLE &&\r\n            this.latestAddressList) {\r\n            this.connectToAddressList(this.latestAddressList, this.latestOptions);\r\n        }\r\n    }\r\n    resetBackoff() {\r\n        /* The pick first load balancer does not have a connection backoff, so this\r\n         * does nothing */\r\n    }\r\n    destroy() {\r\n        this.resetSubchannelList();\r\n        this.removeCurrentPick();\r\n    }\r\n    getTypeName() {\r\n        return TYPE_NAME;\r\n    }\r\n}\r\nexports.PickFirstLoadBalancer = PickFirstLoadBalancer;\r\nconst LEAF_CONFIG = new PickFirstLoadBalancingConfig(false);\r\n/**\r\n * This class handles the leaf load balancing operations for a single endpoint.\r\n * It is a thin wrapper around a PickFirstLoadBalancer with a different API\r\n * that more closely reflects how it will be used as a leaf balancer.\r\n */\r\nclass LeafLoadBalancer {\r\n    constructor(endpoint, channelControlHelper, options) {\r\n        this.endpoint = endpoint;\r\n        this.options = options;\r\n        this.latestState = connectivity_state_1.ConnectivityState.IDLE;\r\n        const childChannelControlHelper = (0, load_balancer_1.createChildChannelControlHelper)(channelControlHelper, {\r\n            updateState: (connectivityState, picker, errorMessage) => {\r\n                this.latestState = connectivityState;\r\n                this.latestPicker = picker;\r\n                channelControlHelper.updateState(connectivityState, picker, errorMessage);\r\n            },\r\n        });\r\n        this.pickFirstBalancer = new PickFirstLoadBalancer(childChannelControlHelper);\r\n        this.latestPicker = new picker_1.QueuePicker(this.pickFirstBalancer);\r\n    }\r\n    startConnecting() {\r\n        this.pickFirstBalancer.updateAddressList([this.endpoint], LEAF_CONFIG, Object.assign(Object.assign({}, this.options), { [REPORT_HEALTH_STATUS_OPTION_NAME]: true }));\r\n    }\r\n    /**\r\n     * Update the endpoint associated with this LeafLoadBalancer to a new\r\n     * endpoint. Does not trigger connection establishment if a connection\r\n     * attempt is not already in progress.\r\n     * @param newEndpoint\r\n     */\r\n    updateEndpoint(newEndpoint, newOptions) {\r\n        this.options = newOptions;\r\n        this.endpoint = newEndpoint;\r\n        if (this.latestState !== connectivity_state_1.ConnectivityState.IDLE) {\r\n            this.startConnecting();\r\n        }\r\n    }\r\n    getConnectivityState() {\r\n        return this.latestState;\r\n    }\r\n    getPicker() {\r\n        return this.latestPicker;\r\n    }\r\n    getEndpoint() {\r\n        return this.endpoint;\r\n    }\r\n    exitIdle() {\r\n        this.pickFirstBalancer.exitIdle();\r\n    }\r\n    destroy() {\r\n        this.pickFirstBalancer.destroy();\r\n    }\r\n}\r\nexports.LeafLoadBalancer = LeafLoadBalancer;\r\nfunction setup() {\r\n    (0, load_balancer_1.registerLoadBalancerType)(TYPE_NAME, PickFirstLoadBalancer, PickFirstLoadBalancingConfig);\r\n    (0, load_balancer_1.registerDefaultLoadBalancerType)(TYPE_NAME);\r\n}\r\n//# sourceMappingURL=load-balancer-pick-first.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/load-balancer-pick-first.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/load-balancer-round-robin.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/load-balancer-round-robin.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.RoundRobinLoadBalancer = void 0;\r\nexports.setup = setup;\r\nconst load_balancer_1 = __webpack_require__(/*! ./load-balancer */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/load-balancer.js\");\r\nconst connectivity_state_1 = __webpack_require__(/*! ./connectivity-state */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/connectivity-state.js\");\r\nconst picker_1 = __webpack_require__(/*! ./picker */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/picker.js\");\r\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nconst subchannel_address_1 = __webpack_require__(/*! ./subchannel-address */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/subchannel-address.js\");\r\nconst load_balancer_pick_first_1 = __webpack_require__(/*! ./load-balancer-pick-first */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/load-balancer-pick-first.js\");\r\nconst TRACER_NAME = 'round_robin';\r\nfunction trace(text) {\r\n    logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);\r\n}\r\nconst TYPE_NAME = 'round_robin';\r\nclass RoundRobinLoadBalancingConfig {\r\n    getLoadBalancerName() {\r\n        return TYPE_NAME;\r\n    }\r\n    constructor() { }\r\n    toJsonObject() {\r\n        return {\r\n            [TYPE_NAME]: {},\r\n        };\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    static createFromJson(obj) {\r\n        return new RoundRobinLoadBalancingConfig();\r\n    }\r\n}\r\nclass RoundRobinPicker {\r\n    constructor(children, nextIndex = 0) {\r\n        this.children = children;\r\n        this.nextIndex = nextIndex;\r\n    }\r\n    pick(pickArgs) {\r\n        const childPicker = this.children[this.nextIndex].picker;\r\n        this.nextIndex = (this.nextIndex + 1) % this.children.length;\r\n        return childPicker.pick(pickArgs);\r\n    }\r\n    /**\r\n     * Check what the next subchannel returned would be. Used by the load\r\n     * balancer implementation to preserve this part of the picker state if\r\n     * possible when a subchannel connects or disconnects.\r\n     */\r\n    peekNextEndpoint() {\r\n        return this.children[this.nextIndex].endpoint;\r\n    }\r\n}\r\nclass RoundRobinLoadBalancer {\r\n    constructor(channelControlHelper) {\r\n        this.channelControlHelper = channelControlHelper;\r\n        this.children = [];\r\n        this.currentState = connectivity_state_1.ConnectivityState.IDLE;\r\n        this.currentReadyPicker = null;\r\n        this.updatesPaused = false;\r\n        this.lastError = null;\r\n        this.childChannelControlHelper = (0, load_balancer_1.createChildChannelControlHelper)(channelControlHelper, {\r\n            updateState: (connectivityState, picker, errorMessage) => {\r\n                /* Ensure that name resolution is requested again after active\r\n                 * connections are dropped. This is more aggressive than necessary to\r\n                 * accomplish that, so we are counting on resolvers to have\r\n                 * reasonable rate limits. */\r\n                if (this.currentState === connectivity_state_1.ConnectivityState.READY && connectivityState !== connectivity_state_1.ConnectivityState.READY) {\r\n                    this.channelControlHelper.requestReresolution();\r\n                }\r\n                if (errorMessage) {\r\n                    this.lastError = errorMessage;\r\n                }\r\n                this.calculateAndUpdateState();\r\n            },\r\n        });\r\n    }\r\n    countChildrenWithState(state) {\r\n        return this.children.filter(child => child.getConnectivityState() === state)\r\n            .length;\r\n    }\r\n    calculateAndUpdateState() {\r\n        if (this.updatesPaused) {\r\n            return;\r\n        }\r\n        if (this.countChildrenWithState(connectivity_state_1.ConnectivityState.READY) > 0) {\r\n            const readyChildren = this.children.filter(child => child.getConnectivityState() === connectivity_state_1.ConnectivityState.READY);\r\n            let index = 0;\r\n            if (this.currentReadyPicker !== null) {\r\n                const nextPickedEndpoint = this.currentReadyPicker.peekNextEndpoint();\r\n                index = readyChildren.findIndex(child => (0, subchannel_address_1.endpointEqual)(child.getEndpoint(), nextPickedEndpoint));\r\n                if (index < 0) {\r\n                    index = 0;\r\n                }\r\n            }\r\n            this.updateState(connectivity_state_1.ConnectivityState.READY, new RoundRobinPicker(readyChildren.map(child => ({\r\n                endpoint: child.getEndpoint(),\r\n                picker: child.getPicker(),\r\n            })), index), null);\r\n        }\r\n        else if (this.countChildrenWithState(connectivity_state_1.ConnectivityState.CONNECTING) > 0) {\r\n            this.updateState(connectivity_state_1.ConnectivityState.CONNECTING, new picker_1.QueuePicker(this), null);\r\n        }\r\n        else if (this.countChildrenWithState(connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) > 0) {\r\n            const errorMessage = `round_robin: No connection established. Last error: ${this.lastError}`;\r\n            this.updateState(connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE, new picker_1.UnavailablePicker({\r\n                details: errorMessage,\r\n            }), errorMessage);\r\n        }\r\n        else {\r\n            this.updateState(connectivity_state_1.ConnectivityState.IDLE, new picker_1.QueuePicker(this), null);\r\n        }\r\n        /* round_robin should keep all children connected, this is how we do that.\r\n         * We can't do this more efficiently in the individual child's updateState\r\n         * callback because that doesn't have a reference to which child the state\r\n         * change is associated with. */\r\n        for (const child of this.children) {\r\n            if (child.getConnectivityState() === connectivity_state_1.ConnectivityState.IDLE) {\r\n                child.exitIdle();\r\n            }\r\n        }\r\n    }\r\n    updateState(newState, picker, errorMessage) {\r\n        trace(connectivity_state_1.ConnectivityState[this.currentState] +\r\n            ' -> ' +\r\n            connectivity_state_1.ConnectivityState[newState]);\r\n        if (newState === connectivity_state_1.ConnectivityState.READY) {\r\n            this.currentReadyPicker = picker;\r\n        }\r\n        else {\r\n            this.currentReadyPicker = null;\r\n        }\r\n        this.currentState = newState;\r\n        this.channelControlHelper.updateState(newState, picker, errorMessage);\r\n    }\r\n    resetSubchannelList() {\r\n        for (const child of this.children) {\r\n            child.destroy();\r\n        }\r\n    }\r\n    updateAddressList(endpointList, lbConfig, options) {\r\n        this.resetSubchannelList();\r\n        trace('Connect to endpoint list ' + endpointList.map(subchannel_address_1.endpointToString));\r\n        this.updatesPaused = true;\r\n        this.children = endpointList.map(endpoint => new load_balancer_pick_first_1.LeafLoadBalancer(endpoint, this.childChannelControlHelper, options));\r\n        for (const child of this.children) {\r\n            child.startConnecting();\r\n        }\r\n        this.updatesPaused = false;\r\n        this.calculateAndUpdateState();\r\n    }\r\n    exitIdle() {\r\n        /* The round_robin LB policy is only in the IDLE state if it has no\r\n         * addresses to try to connect to and it has no picked subchannel.\r\n         * In that case, there is no meaningful action that can be taken here. */\r\n    }\r\n    resetBackoff() {\r\n        // This LB policy has no backoff to reset\r\n    }\r\n    destroy() {\r\n        this.resetSubchannelList();\r\n    }\r\n    getTypeName() {\r\n        return TYPE_NAME;\r\n    }\r\n}\r\nexports.RoundRobinLoadBalancer = RoundRobinLoadBalancer;\r\nfunction setup() {\r\n    (0, load_balancer_1.registerLoadBalancerType)(TYPE_NAME, RoundRobinLoadBalancer, RoundRobinLoadBalancingConfig);\r\n}\r\n//# sourceMappingURL=load-balancer-round-robin.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/load-balancer-round-robin.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/load-balancer.js":
/*!***************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/load-balancer.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.createChildChannelControlHelper = createChildChannelControlHelper;\r\nexports.registerLoadBalancerType = registerLoadBalancerType;\r\nexports.registerDefaultLoadBalancerType = registerDefaultLoadBalancerType;\r\nexports.createLoadBalancer = createLoadBalancer;\r\nexports.isLoadBalancerNameRegistered = isLoadBalancerNameRegistered;\r\nexports.parseLoadBalancingConfig = parseLoadBalancingConfig;\r\nexports.getDefaultConfig = getDefaultConfig;\r\nexports.selectLbConfigFromList = selectLbConfigFromList;\r\nconst logging_1 = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\n/**\r\n * Create a child ChannelControlHelper that overrides some methods of the\r\n * parent while letting others pass through to the parent unmodified. This\r\n * allows other code to create these children without needing to know about\r\n * all of the methods to be passed through.\r\n * @param parent\r\n * @param overrides\r\n */\r\nfunction createChildChannelControlHelper(parent, overrides) {\r\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\r\n    return {\r\n        createSubchannel: (_b = (_a = overrides.createSubchannel) === null || _a === void 0 ? void 0 : _a.bind(overrides)) !== null && _b !== void 0 ? _b : parent.createSubchannel.bind(parent),\r\n        updateState: (_d = (_c = overrides.updateState) === null || _c === void 0 ? void 0 : _c.bind(overrides)) !== null && _d !== void 0 ? _d : parent.updateState.bind(parent),\r\n        requestReresolution: (_f = (_e = overrides.requestReresolution) === null || _e === void 0 ? void 0 : _e.bind(overrides)) !== null && _f !== void 0 ? _f : parent.requestReresolution.bind(parent),\r\n        addChannelzChild: (_h = (_g = overrides.addChannelzChild) === null || _g === void 0 ? void 0 : _g.bind(overrides)) !== null && _h !== void 0 ? _h : parent.addChannelzChild.bind(parent),\r\n        removeChannelzChild: (_k = (_j = overrides.removeChannelzChild) === null || _j === void 0 ? void 0 : _j.bind(overrides)) !== null && _k !== void 0 ? _k : parent.removeChannelzChild.bind(parent),\r\n    };\r\n}\r\nconst registeredLoadBalancerTypes = {};\r\nlet defaultLoadBalancerType = null;\r\nfunction registerLoadBalancerType(typeName, loadBalancerType, loadBalancingConfigType) {\r\n    registeredLoadBalancerTypes[typeName] = {\r\n        LoadBalancer: loadBalancerType,\r\n        LoadBalancingConfig: loadBalancingConfigType,\r\n    };\r\n}\r\nfunction registerDefaultLoadBalancerType(typeName) {\r\n    defaultLoadBalancerType = typeName;\r\n}\r\nfunction createLoadBalancer(config, channelControlHelper) {\r\n    const typeName = config.getLoadBalancerName();\r\n    if (typeName in registeredLoadBalancerTypes) {\r\n        return new registeredLoadBalancerTypes[typeName].LoadBalancer(channelControlHelper);\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\nfunction isLoadBalancerNameRegistered(typeName) {\r\n    return typeName in registeredLoadBalancerTypes;\r\n}\r\nfunction parseLoadBalancingConfig(rawConfig) {\r\n    const keys = Object.keys(rawConfig);\r\n    if (keys.length !== 1) {\r\n        throw new Error('Provided load balancing config has multiple conflicting entries');\r\n    }\r\n    const typeName = keys[0];\r\n    if (typeName in registeredLoadBalancerTypes) {\r\n        try {\r\n            return registeredLoadBalancerTypes[typeName].LoadBalancingConfig.createFromJson(rawConfig[typeName]);\r\n        }\r\n        catch (e) {\r\n            throw new Error(`${typeName}: ${e.message}`);\r\n        }\r\n    }\r\n    else {\r\n        throw new Error(`Unrecognized load balancing config name ${typeName}`);\r\n    }\r\n}\r\nfunction getDefaultConfig() {\r\n    if (!defaultLoadBalancerType) {\r\n        throw new Error('No default load balancer type registered');\r\n    }\r\n    return new registeredLoadBalancerTypes[defaultLoadBalancerType].LoadBalancingConfig();\r\n}\r\nfunction selectLbConfigFromList(configs, fallbackTodefault = false) {\r\n    for (const config of configs) {\r\n        try {\r\n            return parseLoadBalancingConfig(config);\r\n        }\r\n        catch (e) {\r\n            (0, logging_1.log)(constants_1.LogVerbosity.DEBUG, 'Config parsing failed with error', e.message);\r\n            continue;\r\n        }\r\n    }\r\n    if (fallbackTodefault) {\r\n        if (defaultLoadBalancerType) {\r\n            return new registeredLoadBalancerTypes[defaultLoadBalancerType].LoadBalancingConfig();\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\n//# sourceMappingURL=load-balancer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/load-balancer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/load-balancing-call.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/load-balancing-call.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2022 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.LoadBalancingCall = void 0;\r\nconst connectivity_state_1 = __webpack_require__(/*! ./connectivity-state */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/connectivity-state.js\");\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nconst deadline_1 = __webpack_require__(/*! ./deadline */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/deadline.js\");\r\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/metadata.js\");\r\nconst picker_1 = __webpack_require__(/*! ./picker */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/picker.js\");\r\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\r\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\r\nconst control_plane_status_1 = __webpack_require__(/*! ./control-plane-status */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/control-plane-status.js\");\r\nconst http2 = __webpack_require__(/*! http2 */ \"http2\");\r\nconst TRACER_NAME = 'load_balancing_call';\r\nclass LoadBalancingCall {\r\n    constructor(channel, callConfig, methodName, host, credentials, deadline, callNumber) {\r\n        var _a, _b;\r\n        this.channel = channel;\r\n        this.callConfig = callConfig;\r\n        this.methodName = methodName;\r\n        this.host = host;\r\n        this.credentials = credentials;\r\n        this.deadline = deadline;\r\n        this.callNumber = callNumber;\r\n        this.child = null;\r\n        this.readPending = false;\r\n        this.pendingMessage = null;\r\n        this.pendingHalfClose = false;\r\n        this.ended = false;\r\n        this.metadata = null;\r\n        this.listener = null;\r\n        this.onCallEnded = null;\r\n        this.childStartTime = null;\r\n        const splitPath = this.methodName.split('/');\r\n        let serviceName = '';\r\n        /* The standard path format is \"/{serviceName}/{methodName}\", so if we split\r\n         * by '/', the first item should be empty and the second should be the\r\n         * service name */\r\n        if (splitPath.length >= 2) {\r\n            serviceName = splitPath[1];\r\n        }\r\n        const hostname = (_b = (_a = (0, uri_parser_1.splitHostPort)(this.host)) === null || _a === void 0 ? void 0 : _a.host) !== null && _b !== void 0 ? _b : 'localhost';\r\n        /* Currently, call credentials are only allowed on HTTPS connections, so we\r\n         * can assume that the scheme is \"https\" */\r\n        this.serviceUrl = `https://${hostname}/${serviceName}`;\r\n        this.startTime = new Date();\r\n    }\r\n    getDeadlineInfo() {\r\n        var _a, _b;\r\n        const deadlineInfo = [];\r\n        if (this.childStartTime) {\r\n            if (this.childStartTime > this.startTime) {\r\n                if ((_a = this.metadata) === null || _a === void 0 ? void 0 : _a.getOptions().waitForReady) {\r\n                    deadlineInfo.push('wait_for_ready');\r\n                }\r\n                deadlineInfo.push(`LB pick: ${(0, deadline_1.formatDateDifference)(this.startTime, this.childStartTime)}`);\r\n            }\r\n            deadlineInfo.push(...this.child.getDeadlineInfo());\r\n            return deadlineInfo;\r\n        }\r\n        else {\r\n            if ((_b = this.metadata) === null || _b === void 0 ? void 0 : _b.getOptions().waitForReady) {\r\n                deadlineInfo.push('wait_for_ready');\r\n            }\r\n            deadlineInfo.push('Waiting for LB pick');\r\n        }\r\n        return deadlineInfo;\r\n    }\r\n    trace(text) {\r\n        logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, '[' + this.callNumber + '] ' + text);\r\n    }\r\n    outputStatus(status, progress) {\r\n        var _a, _b;\r\n        if (!this.ended) {\r\n            this.ended = true;\r\n            this.trace('ended with status: code=' +\r\n                status.code +\r\n                ' details=\"' +\r\n                status.details +\r\n                '\" start time=' +\r\n                this.startTime.toISOString());\r\n            const finalStatus = Object.assign(Object.assign({}, status), { progress });\r\n            (_a = this.listener) === null || _a === void 0 ? void 0 : _a.onReceiveStatus(finalStatus);\r\n            (_b = this.onCallEnded) === null || _b === void 0 ? void 0 : _b.call(this, finalStatus.code);\r\n        }\r\n    }\r\n    doPick() {\r\n        var _a, _b;\r\n        if (this.ended) {\r\n            return;\r\n        }\r\n        if (!this.metadata) {\r\n            throw new Error('doPick called before start');\r\n        }\r\n        this.trace('Pick called');\r\n        const finalMetadata = this.metadata.clone();\r\n        const pickResult = this.channel.doPick(finalMetadata, this.callConfig.pickInformation);\r\n        const subchannelString = pickResult.subchannel\r\n            ? '(' +\r\n                pickResult.subchannel.getChannelzRef().id +\r\n                ') ' +\r\n                pickResult.subchannel.getAddress()\r\n            : '' + pickResult.subchannel;\r\n        this.trace('Pick result: ' +\r\n            picker_1.PickResultType[pickResult.pickResultType] +\r\n            ' subchannel: ' +\r\n            subchannelString +\r\n            ' status: ' +\r\n            ((_a = pickResult.status) === null || _a === void 0 ? void 0 : _a.code) +\r\n            ' ' +\r\n            ((_b = pickResult.status) === null || _b === void 0 ? void 0 : _b.details));\r\n        switch (pickResult.pickResultType) {\r\n            case picker_1.PickResultType.COMPLETE:\r\n                const combinedCallCredentials = this.credentials.compose(pickResult.subchannel.getCallCredentials());\r\n                combinedCallCredentials\r\n                    .generateMetadata({ method_name: this.methodName, service_url: this.serviceUrl })\r\n                    .then(credsMetadata => {\r\n                    var _a;\r\n                    /* If this call was cancelled (e.g. by the deadline) before\r\n                     * metadata generation finished, we shouldn't do anything with\r\n                     * it. */\r\n                    if (this.ended) {\r\n                        this.trace('Credentials metadata generation finished after call ended');\r\n                        return;\r\n                    }\r\n                    finalMetadata.merge(credsMetadata);\r\n                    if (finalMetadata.get('authorization').length > 1) {\r\n                        this.outputStatus({\r\n                            code: constants_1.Status.INTERNAL,\r\n                            details: '\"authorization\" metadata cannot have multiple values',\r\n                            metadata: new metadata_1.Metadata(),\r\n                        }, 'PROCESSED');\r\n                    }\r\n                    if (pickResult.subchannel.getConnectivityState() !==\r\n                        connectivity_state_1.ConnectivityState.READY) {\r\n                        this.trace('Picked subchannel ' +\r\n                            subchannelString +\r\n                            ' has state ' +\r\n                            connectivity_state_1.ConnectivityState[pickResult.subchannel.getConnectivityState()] +\r\n                            ' after getting credentials metadata. Retrying pick');\r\n                        this.doPick();\r\n                        return;\r\n                    }\r\n                    if (this.deadline !== Infinity) {\r\n                        finalMetadata.set('grpc-timeout', (0, deadline_1.getDeadlineTimeoutString)(this.deadline));\r\n                    }\r\n                    try {\r\n                        this.child = pickResult\r\n                            .subchannel.getRealSubchannel()\r\n                            .createCall(finalMetadata, this.host, this.methodName, {\r\n                            onReceiveMetadata: metadata => {\r\n                                this.trace('Received metadata');\r\n                                this.listener.onReceiveMetadata(metadata);\r\n                            },\r\n                            onReceiveMessage: message => {\r\n                                this.trace('Received message');\r\n                                this.listener.onReceiveMessage(message);\r\n                            },\r\n                            onReceiveStatus: status => {\r\n                                this.trace('Received status');\r\n                                if (status.rstCode ===\r\n                                    http2.constants.NGHTTP2_REFUSED_STREAM) {\r\n                                    this.outputStatus(status, 'REFUSED');\r\n                                }\r\n                                else {\r\n                                    this.outputStatus(status, 'PROCESSED');\r\n                                }\r\n                            },\r\n                        });\r\n                        this.childStartTime = new Date();\r\n                    }\r\n                    catch (error) {\r\n                        this.trace('Failed to start call on picked subchannel ' +\r\n                            subchannelString +\r\n                            ' with error ' +\r\n                            error.message);\r\n                        this.outputStatus({\r\n                            code: constants_1.Status.INTERNAL,\r\n                            details: 'Failed to start HTTP/2 stream with error ' +\r\n                                error.message,\r\n                            metadata: new metadata_1.Metadata(),\r\n                        }, 'NOT_STARTED');\r\n                        return;\r\n                    }\r\n                    (_a = pickResult.onCallStarted) === null || _a === void 0 ? void 0 : _a.call(pickResult);\r\n                    this.onCallEnded = pickResult.onCallEnded;\r\n                    this.trace('Created child call [' + this.child.getCallNumber() + ']');\r\n                    if (this.readPending) {\r\n                        this.child.startRead();\r\n                    }\r\n                    if (this.pendingMessage) {\r\n                        this.child.sendMessageWithContext(this.pendingMessage.context, this.pendingMessage.message);\r\n                    }\r\n                    if (this.pendingHalfClose) {\r\n                        this.child.halfClose();\r\n                    }\r\n                }, (error) => {\r\n                    // We assume the error code isn't 0 (Status.OK)\r\n                    const { code, details } = (0, control_plane_status_1.restrictControlPlaneStatusCode)(typeof error.code === 'number' ? error.code : constants_1.Status.UNKNOWN, `Getting metadata from plugin failed with error: ${error.message}`);\r\n                    this.outputStatus({\r\n                        code: code,\r\n                        details: details,\r\n                        metadata: new metadata_1.Metadata(),\r\n                    }, 'PROCESSED');\r\n                });\r\n                break;\r\n            case picker_1.PickResultType.DROP:\r\n                const { code, details } = (0, control_plane_status_1.restrictControlPlaneStatusCode)(pickResult.status.code, pickResult.status.details);\r\n                setImmediate(() => {\r\n                    this.outputStatus({ code, details, metadata: pickResult.status.metadata }, 'DROP');\r\n                });\r\n                break;\r\n            case picker_1.PickResultType.TRANSIENT_FAILURE:\r\n                if (this.metadata.getOptions().waitForReady) {\r\n                    this.channel.queueCallForPick(this);\r\n                }\r\n                else {\r\n                    const { code, details } = (0, control_plane_status_1.restrictControlPlaneStatusCode)(pickResult.status.code, pickResult.status.details);\r\n                    setImmediate(() => {\r\n                        this.outputStatus({ code, details, metadata: pickResult.status.metadata }, 'PROCESSED');\r\n                    });\r\n                }\r\n                break;\r\n            case picker_1.PickResultType.QUEUE:\r\n                this.channel.queueCallForPick(this);\r\n        }\r\n    }\r\n    cancelWithStatus(status, details) {\r\n        var _a;\r\n        this.trace('cancelWithStatus code: ' + status + ' details: \"' + details + '\"');\r\n        (_a = this.child) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(status, details);\r\n        this.outputStatus({ code: status, details: details, metadata: new metadata_1.Metadata() }, 'PROCESSED');\r\n    }\r\n    getPeer() {\r\n        var _a, _b;\r\n        return (_b = (_a = this.child) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : this.channel.getTarget();\r\n    }\r\n    start(metadata, listener) {\r\n        this.trace('start called');\r\n        this.listener = listener;\r\n        this.metadata = metadata;\r\n        this.doPick();\r\n    }\r\n    sendMessageWithContext(context, message) {\r\n        this.trace('write() called with message of length ' + message.length);\r\n        if (this.child) {\r\n            this.child.sendMessageWithContext(context, message);\r\n        }\r\n        else {\r\n            this.pendingMessage = { context, message };\r\n        }\r\n    }\r\n    startRead() {\r\n        this.trace('startRead called');\r\n        if (this.child) {\r\n            this.child.startRead();\r\n        }\r\n        else {\r\n            this.readPending = true;\r\n        }\r\n    }\r\n    halfClose() {\r\n        this.trace('halfClose called');\r\n        if (this.child) {\r\n            this.child.halfClose();\r\n        }\r\n        else {\r\n            this.pendingHalfClose = true;\r\n        }\r\n    }\r\n    setCredentials(credentials) {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    getCallNumber() {\r\n        return this.callNumber;\r\n    }\r\n}\r\nexports.LoadBalancingCall = LoadBalancingCall;\r\n//# sourceMappingURL=load-balancing-call.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/load-balancing-call.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/logging.js":
/*!*********************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/logging.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nvar _a, _b, _c, _d;\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.log = exports.setLoggerVerbosity = exports.setLogger = exports.getLogger = void 0;\r\nexports.trace = trace;\r\nexports.isTracerEnabled = isTracerEnabled;\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nconst process_1 = __webpack_require__(/*! process */ \"process\");\r\nconst clientVersion = (__webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/@grpc/grpc-js/package.json\").version);\r\nconst DEFAULT_LOGGER = {\r\n    error: (message, ...optionalParams) => {\r\n        console.error('E ' + message, ...optionalParams);\r\n    },\r\n    info: (message, ...optionalParams) => {\r\n        console.error('I ' + message, ...optionalParams);\r\n    },\r\n    debug: (message, ...optionalParams) => {\r\n        console.error('D ' + message, ...optionalParams);\r\n    },\r\n};\r\nlet _logger = DEFAULT_LOGGER;\r\nlet _logVerbosity = constants_1.LogVerbosity.ERROR;\r\nconst verbosityString = (_b = (_a = process.env.GRPC_NODE_VERBOSITY) !== null && _a !== void 0 ? _a : process.env.GRPC_VERBOSITY) !== null && _b !== void 0 ? _b : '';\r\nswitch (verbosityString.toUpperCase()) {\r\n    case 'DEBUG':\r\n        _logVerbosity = constants_1.LogVerbosity.DEBUG;\r\n        break;\r\n    case 'INFO':\r\n        _logVerbosity = constants_1.LogVerbosity.INFO;\r\n        break;\r\n    case 'ERROR':\r\n        _logVerbosity = constants_1.LogVerbosity.ERROR;\r\n        break;\r\n    case 'NONE':\r\n        _logVerbosity = constants_1.LogVerbosity.NONE;\r\n        break;\r\n    default:\r\n    // Ignore any other values\r\n}\r\nconst getLogger = () => {\r\n    return _logger;\r\n};\r\nexports.getLogger = getLogger;\r\nconst setLogger = (logger) => {\r\n    _logger = logger;\r\n};\r\nexports.setLogger = setLogger;\r\nconst setLoggerVerbosity = (verbosity) => {\r\n    _logVerbosity = verbosity;\r\n};\r\nexports.setLoggerVerbosity = setLoggerVerbosity;\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconst log = (severity, ...args) => {\r\n    let logFunction;\r\n    if (severity >= _logVerbosity) {\r\n        switch (severity) {\r\n            case constants_1.LogVerbosity.DEBUG:\r\n                logFunction = _logger.debug;\r\n                break;\r\n            case constants_1.LogVerbosity.INFO:\r\n                logFunction = _logger.info;\r\n                break;\r\n            case constants_1.LogVerbosity.ERROR:\r\n                logFunction = _logger.error;\r\n                break;\r\n        }\r\n        /* Fall back to _logger.error when other methods are not available for\r\n         * compatiblity with older behavior that always logged to _logger.error */\r\n        if (!logFunction) {\r\n            logFunction = _logger.error;\r\n        }\r\n        if (logFunction) {\r\n            logFunction.bind(_logger)(...args);\r\n        }\r\n    }\r\n};\r\nexports.log = log;\r\nconst tracersString = (_d = (_c = process.env.GRPC_NODE_TRACE) !== null && _c !== void 0 ? _c : process.env.GRPC_TRACE) !== null && _d !== void 0 ? _d : '';\r\nconst enabledTracers = new Set();\r\nconst disabledTracers = new Set();\r\nfor (const tracerName of tracersString.split(',')) {\r\n    if (tracerName.startsWith('-')) {\r\n        disabledTracers.add(tracerName.substring(1));\r\n    }\r\n    else {\r\n        enabledTracers.add(tracerName);\r\n    }\r\n}\r\nconst allEnabled = enabledTracers.has('all');\r\nfunction trace(severity, tracer, text) {\r\n    if (isTracerEnabled(tracer)) {\r\n        (0, exports.log)(severity, new Date().toISOString() +\r\n            ' | v' +\r\n            clientVersion +\r\n            ' ' +\r\n            process_1.pid +\r\n            ' | ' +\r\n            tracer +\r\n            ' | ' +\r\n            text);\r\n    }\r\n}\r\nfunction isTracerEnabled(tracer) {\r\n    return (!disabledTracers.has(tracer) && (allEnabled || enabledTracers.has(tracer)));\r\n}\r\n//# sourceMappingURL=logging.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvbG9nZ2luZy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsV0FBVyxHQUFHLDBCQUEwQixHQUFHLGlCQUFpQixHQUFHLGlCQUFpQjtBQUNoRixhQUFhO0FBQ2IsdUJBQXVCO0FBQ3ZCLG9CQUFvQixtQkFBTyxDQUFDLDhFQUFhO0FBQ3pDLGtCQUFrQixtQkFBTyxDQUFDLHdCQUFTO0FBQ25DLHNCQUFzQiwwR0FBcUM7QUFDM0Q7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2RhbmlzaC1idWRkeS8uL25vZGVfbW9kdWxlcy9AZ3JwYy9ncnBjLWpzL2J1aWxkL3NyYy9sb2dnaW5nLmpzPzY2ZjciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8qXHJcbiAqIENvcHlyaWdodCAyMDE5IGdSUEMgYXV0aG9ycy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqXHJcbiAqL1xyXG52YXIgX2EsIF9iLCBfYywgX2Q7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5sb2cgPSBleHBvcnRzLnNldExvZ2dlclZlcmJvc2l0eSA9IGV4cG9ydHMuc2V0TG9nZ2VyID0gZXhwb3J0cy5nZXRMb2dnZXIgPSB2b2lkIDA7XHJcbmV4cG9ydHMudHJhY2UgPSB0cmFjZTtcclxuZXhwb3J0cy5pc1RyYWNlckVuYWJsZWQgPSBpc1RyYWNlckVuYWJsZWQ7XHJcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4vY29uc3RhbnRzXCIpO1xyXG5jb25zdCBwcm9jZXNzXzEgPSByZXF1aXJlKFwicHJvY2Vzc1wiKTtcclxuY29uc3QgY2xpZW50VmVyc2lvbiA9IHJlcXVpcmUoJy4uLy4uL3BhY2thZ2UuanNvbicpLnZlcnNpb247XHJcbmNvbnN0IERFRkFVTFRfTE9HR0VSID0ge1xyXG4gICAgZXJyb3I6IChtZXNzYWdlLCAuLi5vcHRpb25hbFBhcmFtcykgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0UgJyArIG1lc3NhZ2UsIC4uLm9wdGlvbmFsUGFyYW1zKTtcclxuICAgIH0sXHJcbiAgICBpbmZvOiAobWVzc2FnZSwgLi4ub3B0aW9uYWxQYXJhbXMpID0+IHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdJICcgKyBtZXNzYWdlLCAuLi5vcHRpb25hbFBhcmFtcyk7XHJcbiAgICB9LFxyXG4gICAgZGVidWc6IChtZXNzYWdlLCAuLi5vcHRpb25hbFBhcmFtcykgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0QgJyArIG1lc3NhZ2UsIC4uLm9wdGlvbmFsUGFyYW1zKTtcclxuICAgIH0sXHJcbn07XHJcbmxldCBfbG9nZ2VyID0gREVGQVVMVF9MT0dHRVI7XHJcbmxldCBfbG9nVmVyYm9zaXR5ID0gY29uc3RhbnRzXzEuTG9nVmVyYm9zaXR5LkVSUk9SO1xyXG5jb25zdCB2ZXJib3NpdHlTdHJpbmcgPSAoX2IgPSAoX2EgPSBwcm9jZXNzLmVudi5HUlBDX05PREVfVkVSQk9TSVRZKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBwcm9jZXNzLmVudi5HUlBDX1ZFUkJPU0lUWSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogJyc7XHJcbnN3aXRjaCAodmVyYm9zaXR5U3RyaW5nLnRvVXBwZXJDYXNlKCkpIHtcclxuICAgIGNhc2UgJ0RFQlVHJzpcclxuICAgICAgICBfbG9nVmVyYm9zaXR5ID0gY29uc3RhbnRzXzEuTG9nVmVyYm9zaXR5LkRFQlVHO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAnSU5GTyc6XHJcbiAgICAgICAgX2xvZ1ZlcmJvc2l0eSA9IGNvbnN0YW50c18xLkxvZ1ZlcmJvc2l0eS5JTkZPO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAnRVJST1InOlxyXG4gICAgICAgIF9sb2dWZXJib3NpdHkgPSBjb25zdGFudHNfMS5Mb2dWZXJib3NpdHkuRVJST1I7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICBjYXNlICdOT05FJzpcclxuICAgICAgICBfbG9nVmVyYm9zaXR5ID0gY29uc3RhbnRzXzEuTG9nVmVyYm9zaXR5Lk5PTkU7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgLy8gSWdub3JlIGFueSBvdGhlciB2YWx1ZXNcclxufVxyXG5jb25zdCBnZXRMb2dnZXIgPSAoKSA9PiB7XHJcbiAgICByZXR1cm4gX2xvZ2dlcjtcclxufTtcclxuZXhwb3J0cy5nZXRMb2dnZXIgPSBnZXRMb2dnZXI7XHJcbmNvbnN0IHNldExvZ2dlciA9IChsb2dnZXIpID0+IHtcclxuICAgIF9sb2dnZXIgPSBsb2dnZXI7XHJcbn07XHJcbmV4cG9ydHMuc2V0TG9nZ2VyID0gc2V0TG9nZ2VyO1xyXG5jb25zdCBzZXRMb2dnZXJWZXJib3NpdHkgPSAodmVyYm9zaXR5KSA9PiB7XHJcbiAgICBfbG9nVmVyYm9zaXR5ID0gdmVyYm9zaXR5O1xyXG59O1xyXG5leHBvcnRzLnNldExvZ2dlclZlcmJvc2l0eSA9IHNldExvZ2dlclZlcmJvc2l0eTtcclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuY29uc3QgbG9nID0gKHNldmVyaXR5LCAuLi5hcmdzKSA9PiB7XHJcbiAgICBsZXQgbG9nRnVuY3Rpb247XHJcbiAgICBpZiAoc2V2ZXJpdHkgPj0gX2xvZ1ZlcmJvc2l0eSkge1xyXG4gICAgICAgIHN3aXRjaCAoc2V2ZXJpdHkpIHtcclxuICAgICAgICAgICAgY2FzZSBjb25zdGFudHNfMS5Mb2dWZXJib3NpdHkuREVCVUc6XHJcbiAgICAgICAgICAgICAgICBsb2dGdW5jdGlvbiA9IF9sb2dnZXIuZGVidWc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBjb25zdGFudHNfMS5Mb2dWZXJib3NpdHkuSU5GTzpcclxuICAgICAgICAgICAgICAgIGxvZ0Z1bmN0aW9uID0gX2xvZ2dlci5pbmZvO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgY29uc3RhbnRzXzEuTG9nVmVyYm9zaXR5LkVSUk9SOlxyXG4gICAgICAgICAgICAgICAgbG9nRnVuY3Rpb24gPSBfbG9nZ2VyLmVycm9yO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qIEZhbGwgYmFjayB0byBfbG9nZ2VyLmVycm9yIHdoZW4gb3RoZXIgbWV0aG9kcyBhcmUgbm90IGF2YWlsYWJsZSBmb3JcclxuICAgICAgICAgKiBjb21wYXRpYmxpdHkgd2l0aCBvbGRlciBiZWhhdmlvciB0aGF0IGFsd2F5cyBsb2dnZWQgdG8gX2xvZ2dlci5lcnJvciAqL1xyXG4gICAgICAgIGlmICghbG9nRnVuY3Rpb24pIHtcclxuICAgICAgICAgICAgbG9nRnVuY3Rpb24gPSBfbG9nZ2VyLmVycm9yO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobG9nRnVuY3Rpb24pIHtcclxuICAgICAgICAgICAgbG9nRnVuY3Rpb24uYmluZChfbG9nZ2VyKSguLi5hcmdzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07XHJcbmV4cG9ydHMubG9nID0gbG9nO1xyXG5jb25zdCB0cmFjZXJzU3RyaW5nID0gKF9kID0gKF9jID0gcHJvY2Vzcy5lbnYuR1JQQ19OT0RFX1RSQUNFKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiBwcm9jZXNzLmVudi5HUlBDX1RSQUNFKSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiAnJztcclxuY29uc3QgZW5hYmxlZFRyYWNlcnMgPSBuZXcgU2V0KCk7XHJcbmNvbnN0IGRpc2FibGVkVHJhY2VycyA9IG5ldyBTZXQoKTtcclxuZm9yIChjb25zdCB0cmFjZXJOYW1lIG9mIHRyYWNlcnNTdHJpbmcuc3BsaXQoJywnKSkge1xyXG4gICAgaWYgKHRyYWNlck5hbWUuc3RhcnRzV2l0aCgnLScpKSB7XHJcbiAgICAgICAgZGlzYWJsZWRUcmFjZXJzLmFkZCh0cmFjZXJOYW1lLnN1YnN0cmluZygxKSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBlbmFibGVkVHJhY2Vycy5hZGQodHJhY2VyTmFtZSk7XHJcbiAgICB9XHJcbn1cclxuY29uc3QgYWxsRW5hYmxlZCA9IGVuYWJsZWRUcmFjZXJzLmhhcygnYWxsJyk7XHJcbmZ1bmN0aW9uIHRyYWNlKHNldmVyaXR5LCB0cmFjZXIsIHRleHQpIHtcclxuICAgIGlmIChpc1RyYWNlckVuYWJsZWQodHJhY2VyKSkge1xyXG4gICAgICAgICgwLCBleHBvcnRzLmxvZykoc2V2ZXJpdHksIG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSArXHJcbiAgICAgICAgICAgICcgfCB2JyArXHJcbiAgICAgICAgICAgIGNsaWVudFZlcnNpb24gK1xyXG4gICAgICAgICAgICAnICcgK1xyXG4gICAgICAgICAgICBwcm9jZXNzXzEucGlkICtcclxuICAgICAgICAgICAgJyB8ICcgK1xyXG4gICAgICAgICAgICB0cmFjZXIgK1xyXG4gICAgICAgICAgICAnIHwgJyArXHJcbiAgICAgICAgICAgIHRleHQpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGlzVHJhY2VyRW5hYmxlZCh0cmFjZXIpIHtcclxuICAgIHJldHVybiAoIWRpc2FibGVkVHJhY2Vycy5oYXModHJhY2VyKSAmJiAoYWxsRW5hYmxlZCB8fCBlbmFibGVkVHJhY2Vycy5oYXModHJhY2VyKSkpO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvZ2dpbmcuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/logging.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/make-client.js":
/*!*************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/make-client.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.makeClientConstructor = makeClientConstructor;\r\nexports.loadPackageDefinition = loadPackageDefinition;\r\nconst client_1 = __webpack_require__(/*! ./client */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/client.js\");\r\n/**\r\n * Map with short names for each of the requester maker functions. Used in\r\n * makeClientConstructor\r\n * @private\r\n */\r\nconst requesterFuncs = {\r\n    unary: client_1.Client.prototype.makeUnaryRequest,\r\n    server_stream: client_1.Client.prototype.makeServerStreamRequest,\r\n    client_stream: client_1.Client.prototype.makeClientStreamRequest,\r\n    bidi: client_1.Client.prototype.makeBidiStreamRequest,\r\n};\r\n/**\r\n * Returns true, if given key is included in the blacklisted\r\n * keys.\r\n * @param key key for check, string.\r\n */\r\nfunction isPrototypePolluted(key) {\r\n    return ['__proto__', 'prototype', 'constructor'].includes(key);\r\n}\r\n/**\r\n * Creates a constructor for a client with the given methods, as specified in\r\n * the methods argument. The resulting class will have an instance method for\r\n * each method in the service, which is a partial application of one of the\r\n * [Client]{@link grpc.Client} request methods, depending on `requestSerialize`\r\n * and `responseSerialize`, with the `method`, `serialize`, and `deserialize`\r\n * arguments predefined.\r\n * @param methods An object mapping method names to\r\n *     method attributes\r\n * @param serviceName The fully qualified name of the service\r\n * @param classOptions An options object.\r\n * @return New client constructor, which is a subclass of\r\n *     {@link grpc.Client}, and has the same arguments as that constructor.\r\n */\r\nfunction makeClientConstructor(methods, serviceName, classOptions) {\r\n    if (!classOptions) {\r\n        classOptions = {};\r\n    }\r\n    class ServiceClientImpl extends client_1.Client {\r\n    }\r\n    Object.keys(methods).forEach(name => {\r\n        if (isPrototypePolluted(name)) {\r\n            return;\r\n        }\r\n        const attrs = methods[name];\r\n        let methodType;\r\n        // TODO(murgatroid99): Verify that we don't need this anymore\r\n        if (typeof name === 'string' && name.charAt(0) === '$') {\r\n            throw new Error('Method names cannot start with $');\r\n        }\r\n        if (attrs.requestStream) {\r\n            if (attrs.responseStream) {\r\n                methodType = 'bidi';\r\n            }\r\n            else {\r\n                methodType = 'client_stream';\r\n            }\r\n        }\r\n        else {\r\n            if (attrs.responseStream) {\r\n                methodType = 'server_stream';\r\n            }\r\n            else {\r\n                methodType = 'unary';\r\n            }\r\n        }\r\n        const serialize = attrs.requestSerialize;\r\n        const deserialize = attrs.responseDeserialize;\r\n        const methodFunc = partial(requesterFuncs[methodType], attrs.path, serialize, deserialize);\r\n        ServiceClientImpl.prototype[name] = methodFunc;\r\n        // Associate all provided attributes with the method\r\n        Object.assign(ServiceClientImpl.prototype[name], attrs);\r\n        if (attrs.originalName && !isPrototypePolluted(attrs.originalName)) {\r\n            ServiceClientImpl.prototype[attrs.originalName] =\r\n                ServiceClientImpl.prototype[name];\r\n        }\r\n    });\r\n    ServiceClientImpl.service = methods;\r\n    ServiceClientImpl.serviceName = serviceName;\r\n    return ServiceClientImpl;\r\n}\r\nfunction partial(fn, path, serialize, deserialize) {\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    return function (...args) {\r\n        return fn.call(this, path, serialize, deserialize, ...args);\r\n    };\r\n}\r\nfunction isProtobufTypeDefinition(obj) {\r\n    return 'format' in obj;\r\n}\r\n/**\r\n * Load a gRPC package definition as a gRPC object hierarchy.\r\n * @param packageDef The package definition object.\r\n * @return The resulting gRPC object.\r\n */\r\nfunction loadPackageDefinition(packageDef) {\r\n    const result = {};\r\n    for (const serviceFqn in packageDef) {\r\n        if (Object.prototype.hasOwnProperty.call(packageDef, serviceFqn)) {\r\n            const service = packageDef[serviceFqn];\r\n            const nameComponents = serviceFqn.split('.');\r\n            if (nameComponents.some((comp) => isPrototypePolluted(comp))) {\r\n                continue;\r\n            }\r\n            const serviceName = nameComponents[nameComponents.length - 1];\r\n            let current = result;\r\n            for (const packageName of nameComponents.slice(0, -1)) {\r\n                if (!current[packageName]) {\r\n                    current[packageName] = {};\r\n                }\r\n                current = current[packageName];\r\n            }\r\n            if (isProtobufTypeDefinition(service)) {\r\n                current[serviceName] = service;\r\n            }\r\n            else {\r\n                current[serviceName] = makeClientConstructor(service, serviceName, {});\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}\r\n//# sourceMappingURL=make-client.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/make-client.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/metadata.js":
/*!**********************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/metadata.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Metadata = void 0;\r\nconst logging_1 = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nconst error_1 = __webpack_require__(/*! ./error */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/error.js\");\r\nconst LEGAL_KEY_REGEX = /^[0-9a-z_.-]+$/;\r\nconst LEGAL_NON_BINARY_VALUE_REGEX = /^[ -~]*$/;\r\nfunction isLegalKey(key) {\r\n    return LEGAL_KEY_REGEX.test(key);\r\n}\r\nfunction isLegalNonBinaryValue(value) {\r\n    return LEGAL_NON_BINARY_VALUE_REGEX.test(value);\r\n}\r\nfunction isBinaryKey(key) {\r\n    return key.endsWith('-bin');\r\n}\r\nfunction isCustomMetadata(key) {\r\n    return !key.startsWith('grpc-');\r\n}\r\nfunction normalizeKey(key) {\r\n    return key.toLowerCase();\r\n}\r\nfunction validate(key, value) {\r\n    if (!isLegalKey(key)) {\r\n        throw new Error('Metadata key \"' + key + '\" contains illegal characters');\r\n    }\r\n    if (value !== null && value !== undefined) {\r\n        if (isBinaryKey(key)) {\r\n            if (!Buffer.isBuffer(value)) {\r\n                throw new Error(\"keys that end with '-bin' must have Buffer values\");\r\n            }\r\n        }\r\n        else {\r\n            if (Buffer.isBuffer(value)) {\r\n                throw new Error(\"keys that don't end with '-bin' must have String values\");\r\n            }\r\n            if (!isLegalNonBinaryValue(value)) {\r\n                throw new Error('Metadata string value \"' + value + '\" contains illegal characters');\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * A class for storing metadata. Keys are normalized to lowercase ASCII.\r\n */\r\nclass Metadata {\r\n    constructor(options = {}) {\r\n        this.internalRepr = new Map();\r\n        this.options = options;\r\n    }\r\n    /**\r\n     * Sets the given value for the given key by replacing any other values\r\n     * associated with that key. Normalizes the key.\r\n     * @param key The key to whose value should be set.\r\n     * @param value The value to set. Must be a buffer if and only\r\n     *   if the normalized key ends with '-bin'.\r\n     */\r\n    set(key, value) {\r\n        key = normalizeKey(key);\r\n        validate(key, value);\r\n        this.internalRepr.set(key, [value]);\r\n    }\r\n    /**\r\n     * Adds the given value for the given key by appending to a list of previous\r\n     * values associated with that key. Normalizes the key.\r\n     * @param key The key for which a new value should be appended.\r\n     * @param value The value to add. Must be a buffer if and only\r\n     *   if the normalized key ends with '-bin'.\r\n     */\r\n    add(key, value) {\r\n        key = normalizeKey(key);\r\n        validate(key, value);\r\n        const existingValue = this.internalRepr.get(key);\r\n        if (existingValue === undefined) {\r\n            this.internalRepr.set(key, [value]);\r\n        }\r\n        else {\r\n            existingValue.push(value);\r\n        }\r\n    }\r\n    /**\r\n     * Removes the given key and any associated values. Normalizes the key.\r\n     * @param key The key whose values should be removed.\r\n     */\r\n    remove(key) {\r\n        key = normalizeKey(key);\r\n        // validate(key);\r\n        this.internalRepr.delete(key);\r\n    }\r\n    /**\r\n     * Gets a list of all values associated with the key. Normalizes the key.\r\n     * @param key The key whose value should be retrieved.\r\n     * @return A list of values associated with the given key.\r\n     */\r\n    get(key) {\r\n        key = normalizeKey(key);\r\n        // validate(key);\r\n        return this.internalRepr.get(key) || [];\r\n    }\r\n    /**\r\n     * Gets a plain object mapping each key to the first value associated with it.\r\n     * This reflects the most common way that people will want to see metadata.\r\n     * @return A key/value mapping of the metadata.\r\n     */\r\n    getMap() {\r\n        const result = {};\r\n        for (const [key, values] of this.internalRepr) {\r\n            if (values.length > 0) {\r\n                const v = values[0];\r\n                result[key] = Buffer.isBuffer(v) ? Buffer.from(v) : v;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * Clones the metadata object.\r\n     * @return The newly cloned object.\r\n     */\r\n    clone() {\r\n        const newMetadata = new Metadata(this.options);\r\n        const newInternalRepr = newMetadata.internalRepr;\r\n        for (const [key, value] of this.internalRepr) {\r\n            const clonedValue = value.map(v => {\r\n                if (Buffer.isBuffer(v)) {\r\n                    return Buffer.from(v);\r\n                }\r\n                else {\r\n                    return v;\r\n                }\r\n            });\r\n            newInternalRepr.set(key, clonedValue);\r\n        }\r\n        return newMetadata;\r\n    }\r\n    /**\r\n     * Merges all key-value pairs from a given Metadata object into this one.\r\n     * If both this object and the given object have values in the same key,\r\n     * values from the other Metadata object will be appended to this object's\r\n     * values.\r\n     * @param other A Metadata object.\r\n     */\r\n    merge(other) {\r\n        for (const [key, values] of other.internalRepr) {\r\n            const mergedValue = (this.internalRepr.get(key) || []).concat(values);\r\n            this.internalRepr.set(key, mergedValue);\r\n        }\r\n    }\r\n    setOptions(options) {\r\n        this.options = options;\r\n    }\r\n    getOptions() {\r\n        return this.options;\r\n    }\r\n    /**\r\n     * Creates an OutgoingHttpHeaders object that can be used with the http2 API.\r\n     */\r\n    toHttp2Headers() {\r\n        // NOTE: Node <8.9 formats http2 headers incorrectly.\r\n        const result = {};\r\n        for (const [key, values] of this.internalRepr) {\r\n            // We assume that the user's interaction with this object is limited to\r\n            // through its public API (i.e. keys and values are already validated).\r\n            result[key] = values.map(bufToString);\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * This modifies the behavior of JSON.stringify to show an object\r\n     * representation of the metadata map.\r\n     */\r\n    toJSON() {\r\n        const result = {};\r\n        for (const [key, values] of this.internalRepr) {\r\n            result[key] = values;\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * Returns a new Metadata object based fields in a given IncomingHttpHeaders\r\n     * object.\r\n     * @param headers An IncomingHttpHeaders object.\r\n     */\r\n    static fromHttp2Headers(headers) {\r\n        const result = new Metadata();\r\n        for (const key of Object.keys(headers)) {\r\n            // Reserved headers (beginning with `:`) are not valid keys.\r\n            if (key.charAt(0) === ':') {\r\n                continue;\r\n            }\r\n            const values = headers[key];\r\n            try {\r\n                if (isBinaryKey(key)) {\r\n                    if (Array.isArray(values)) {\r\n                        values.forEach(value => {\r\n                            result.add(key, Buffer.from(value, 'base64'));\r\n                        });\r\n                    }\r\n                    else if (values !== undefined) {\r\n                        if (isCustomMetadata(key)) {\r\n                            values.split(',').forEach(v => {\r\n                                result.add(key, Buffer.from(v.trim(), 'base64'));\r\n                            });\r\n                        }\r\n                        else {\r\n                            result.add(key, Buffer.from(values, 'base64'));\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    if (Array.isArray(values)) {\r\n                        values.forEach(value => {\r\n                            result.add(key, value);\r\n                        });\r\n                    }\r\n                    else if (values !== undefined) {\r\n                        result.add(key, values);\r\n                    }\r\n                }\r\n            }\r\n            catch (error) {\r\n                const message = `Failed to add metadata entry ${key}: ${values}. ${(0, error_1.getErrorMessage)(error)}. For more information see https://github.com/grpc/grpc-node/issues/1173`;\r\n                (0, logging_1.log)(constants_1.LogVerbosity.ERROR, message);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}\r\nexports.Metadata = Metadata;\r\nconst bufToString = (val) => {\r\n    return Buffer.isBuffer(val) ? val.toString('base64') : val;\r\n};\r\n//# sourceMappingURL=metadata.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvbWV0YWRhdGEuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQkFBZ0I7QUFDaEIsa0JBQWtCLG1CQUFPLENBQUMsMEVBQVc7QUFDckMsb0JBQW9CLG1CQUFPLENBQUMsOEVBQWE7QUFDekMsZ0JBQWdCLG1CQUFPLENBQUMsc0VBQVM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnRUFBZ0UsSUFBSSxJQUFJLE9BQU8sSUFBSSxvQ0FBb0M7QUFDdkg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFuaXNoLWJ1ZGR5Ly4vbm9kZV9tb2R1bGVzL0BncnBjL2dycGMtanMvYnVpbGQvc3JjL21ldGFkYXRhLmpzPzQwODciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8qXHJcbiAqIENvcHlyaWdodCAyMDE5IGdSUEMgYXV0aG9ycy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqXHJcbiAqL1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuTWV0YWRhdGEgPSB2b2lkIDA7XHJcbmNvbnN0IGxvZ2dpbmdfMSA9IHJlcXVpcmUoXCIuL2xvZ2dpbmdcIik7XHJcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4vY29uc3RhbnRzXCIpO1xyXG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4vZXJyb3JcIik7XHJcbmNvbnN0IExFR0FMX0tFWV9SRUdFWCA9IC9eWzAtOWEtel8uLV0rJC87XHJcbmNvbnN0IExFR0FMX05PTl9CSU5BUllfVkFMVUVfUkVHRVggPSAvXlsgLX5dKiQvO1xyXG5mdW5jdGlvbiBpc0xlZ2FsS2V5KGtleSkge1xyXG4gICAgcmV0dXJuIExFR0FMX0tFWV9SRUdFWC50ZXN0KGtleSk7XHJcbn1cclxuZnVuY3Rpb24gaXNMZWdhbE5vbkJpbmFyeVZhbHVlKHZhbHVlKSB7XHJcbiAgICByZXR1cm4gTEVHQUxfTk9OX0JJTkFSWV9WQUxVRV9SRUdFWC50ZXN0KHZhbHVlKTtcclxufVxyXG5mdW5jdGlvbiBpc0JpbmFyeUtleShrZXkpIHtcclxuICAgIHJldHVybiBrZXkuZW5kc1dpdGgoJy1iaW4nKTtcclxufVxyXG5mdW5jdGlvbiBpc0N1c3RvbU1ldGFkYXRhKGtleSkge1xyXG4gICAgcmV0dXJuICFrZXkuc3RhcnRzV2l0aCgnZ3JwYy0nKTtcclxufVxyXG5mdW5jdGlvbiBub3JtYWxpemVLZXkoa2V5KSB7XHJcbiAgICByZXR1cm4ga2V5LnRvTG93ZXJDYXNlKCk7XHJcbn1cclxuZnVuY3Rpb24gdmFsaWRhdGUoa2V5LCB2YWx1ZSkge1xyXG4gICAgaWYgKCFpc0xlZ2FsS2V5KGtleSkpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01ldGFkYXRhIGtleSBcIicgKyBrZXkgKyAnXCIgY29udGFpbnMgaWxsZWdhbCBjaGFyYWN0ZXJzJyk7XHJcbiAgICB9XHJcbiAgICBpZiAodmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGlmIChpc0JpbmFyeUtleShrZXkpKSB7XHJcbiAgICAgICAgICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwia2V5cyB0aGF0IGVuZCB3aXRoICctYmluJyBtdXN0IGhhdmUgQnVmZmVyIHZhbHVlc1wiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKEJ1ZmZlci5pc0J1ZmZlcih2YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImtleXMgdGhhdCBkb24ndCBlbmQgd2l0aCAnLWJpbicgbXVzdCBoYXZlIFN0cmluZyB2YWx1ZXNcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCFpc0xlZ2FsTm9uQmluYXJ5VmFsdWUodmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01ldGFkYXRhIHN0cmluZyB2YWx1ZSBcIicgKyB2YWx1ZSArICdcIiBjb250YWlucyBpbGxlZ2FsIGNoYXJhY3RlcnMnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4vKipcclxuICogQSBjbGFzcyBmb3Igc3RvcmluZyBtZXRhZGF0YS4gS2V5cyBhcmUgbm9ybWFsaXplZCB0byBsb3dlcmNhc2UgQVNDSUkuXHJcbiAqL1xyXG5jbGFzcyBNZXRhZGF0YSB7XHJcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pIHtcclxuICAgICAgICB0aGlzLmludGVybmFsUmVwciA9IG5ldyBNYXAoKTtcclxuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIHRoZSBnaXZlbiB2YWx1ZSBmb3IgdGhlIGdpdmVuIGtleSBieSByZXBsYWNpbmcgYW55IG90aGVyIHZhbHVlc1xyXG4gICAgICogYXNzb2NpYXRlZCB3aXRoIHRoYXQga2V5LiBOb3JtYWxpemVzIHRoZSBrZXkuXHJcbiAgICAgKiBAcGFyYW0ga2V5IFRoZSBrZXkgdG8gd2hvc2UgdmFsdWUgc2hvdWxkIGJlIHNldC5cclxuICAgICAqIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LiBNdXN0IGJlIGEgYnVmZmVyIGlmIGFuZCBvbmx5XHJcbiAgICAgKiAgIGlmIHRoZSBub3JtYWxpemVkIGtleSBlbmRzIHdpdGggJy1iaW4nLlxyXG4gICAgICovXHJcbiAgICBzZXQoa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgIGtleSA9IG5vcm1hbGl6ZUtleShrZXkpO1xyXG4gICAgICAgIHZhbGlkYXRlKGtleSwgdmFsdWUpO1xyXG4gICAgICAgIHRoaXMuaW50ZXJuYWxSZXByLnNldChrZXksIFt2YWx1ZV0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIHRoZSBnaXZlbiB2YWx1ZSBmb3IgdGhlIGdpdmVuIGtleSBieSBhcHBlbmRpbmcgdG8gYSBsaXN0IG9mIHByZXZpb3VzXHJcbiAgICAgKiB2YWx1ZXMgYXNzb2NpYXRlZCB3aXRoIHRoYXQga2V5LiBOb3JtYWxpemVzIHRoZSBrZXkuXHJcbiAgICAgKiBAcGFyYW0ga2V5IFRoZSBrZXkgZm9yIHdoaWNoIGEgbmV3IHZhbHVlIHNob3VsZCBiZSBhcHBlbmRlZC5cclxuICAgICAqIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgdG8gYWRkLiBNdXN0IGJlIGEgYnVmZmVyIGlmIGFuZCBvbmx5XHJcbiAgICAgKiAgIGlmIHRoZSBub3JtYWxpemVkIGtleSBlbmRzIHdpdGggJy1iaW4nLlxyXG4gICAgICovXHJcbiAgICBhZGQoa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgIGtleSA9IG5vcm1hbGl6ZUtleShrZXkpO1xyXG4gICAgICAgIHZhbGlkYXRlKGtleSwgdmFsdWUpO1xyXG4gICAgICAgIGNvbnN0IGV4aXN0aW5nVmFsdWUgPSB0aGlzLmludGVybmFsUmVwci5nZXQoa2V5KTtcclxuICAgICAgICBpZiAoZXhpc3RpbmdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW50ZXJuYWxSZXByLnNldChrZXksIFt2YWx1ZV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZXhpc3RpbmdWYWx1ZS5wdXNoKHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZXMgdGhlIGdpdmVuIGtleSBhbmQgYW55IGFzc29jaWF0ZWQgdmFsdWVzLiBOb3JtYWxpemVzIHRoZSBrZXkuXHJcbiAgICAgKiBAcGFyYW0ga2V5IFRoZSBrZXkgd2hvc2UgdmFsdWVzIHNob3VsZCBiZSByZW1vdmVkLlxyXG4gICAgICovXHJcbiAgICByZW1vdmUoa2V5KSB7XHJcbiAgICAgICAga2V5ID0gbm9ybWFsaXplS2V5KGtleSk7XHJcbiAgICAgICAgLy8gdmFsaWRhdGUoa2V5KTtcclxuICAgICAgICB0aGlzLmludGVybmFsUmVwci5kZWxldGUoa2V5KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBhIGxpc3Qgb2YgYWxsIHZhbHVlcyBhc3NvY2lhdGVkIHdpdGggdGhlIGtleS4gTm9ybWFsaXplcyB0aGUga2V5LlxyXG4gICAgICogQHBhcmFtIGtleSBUaGUga2V5IHdob3NlIHZhbHVlIHNob3VsZCBiZSByZXRyaWV2ZWQuXHJcbiAgICAgKiBAcmV0dXJuIEEgbGlzdCBvZiB2YWx1ZXMgYXNzb2NpYXRlZCB3aXRoIHRoZSBnaXZlbiBrZXkuXHJcbiAgICAgKi9cclxuICAgIGdldChrZXkpIHtcclxuICAgICAgICBrZXkgPSBub3JtYWxpemVLZXkoa2V5KTtcclxuICAgICAgICAvLyB2YWxpZGF0ZShrZXkpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmludGVybmFsUmVwci5nZXQoa2V5KSB8fCBbXTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBhIHBsYWluIG9iamVjdCBtYXBwaW5nIGVhY2gga2V5IHRvIHRoZSBmaXJzdCB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggaXQuXHJcbiAgICAgKiBUaGlzIHJlZmxlY3RzIHRoZSBtb3N0IGNvbW1vbiB3YXkgdGhhdCBwZW9wbGUgd2lsbCB3YW50IHRvIHNlZSBtZXRhZGF0YS5cclxuICAgICAqIEByZXR1cm4gQSBrZXkvdmFsdWUgbWFwcGluZyBvZiB0aGUgbWV0YWRhdGEuXHJcbiAgICAgKi9cclxuICAgIGdldE1hcCgpIHtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSB7fTtcclxuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlc10gb2YgdGhpcy5pbnRlcm5hbFJlcHIpIHtcclxuICAgICAgICAgICAgaWYgKHZhbHVlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB2ID0gdmFsdWVzWzBdO1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0W2tleV0gPSBCdWZmZXIuaXNCdWZmZXIodikgPyBCdWZmZXIuZnJvbSh2KSA6IHY7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ2xvbmVzIHRoZSBtZXRhZGF0YSBvYmplY3QuXHJcbiAgICAgKiBAcmV0dXJuIFRoZSBuZXdseSBjbG9uZWQgb2JqZWN0LlxyXG4gICAgICovXHJcbiAgICBjbG9uZSgpIHtcclxuICAgICAgICBjb25zdCBuZXdNZXRhZGF0YSA9IG5ldyBNZXRhZGF0YSh0aGlzLm9wdGlvbnMpO1xyXG4gICAgICAgIGNvbnN0IG5ld0ludGVybmFsUmVwciA9IG5ld01ldGFkYXRhLmludGVybmFsUmVwcjtcclxuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiB0aGlzLmludGVybmFsUmVwcikge1xyXG4gICAgICAgICAgICBjb25zdCBjbG9uZWRWYWx1ZSA9IHZhbHVlLm1hcCh2ID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChCdWZmZXIuaXNCdWZmZXIodikpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gQnVmZmVyLmZyb20odik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIG5ld0ludGVybmFsUmVwci5zZXQoa2V5LCBjbG9uZWRWYWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXdNZXRhZGF0YTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogTWVyZ2VzIGFsbCBrZXktdmFsdWUgcGFpcnMgZnJvbSBhIGdpdmVuIE1ldGFkYXRhIG9iamVjdCBpbnRvIHRoaXMgb25lLlxyXG4gICAgICogSWYgYm90aCB0aGlzIG9iamVjdCBhbmQgdGhlIGdpdmVuIG9iamVjdCBoYXZlIHZhbHVlcyBpbiB0aGUgc2FtZSBrZXksXHJcbiAgICAgKiB2YWx1ZXMgZnJvbSB0aGUgb3RoZXIgTWV0YWRhdGEgb2JqZWN0IHdpbGwgYmUgYXBwZW5kZWQgdG8gdGhpcyBvYmplY3Qnc1xyXG4gICAgICogdmFsdWVzLlxyXG4gICAgICogQHBhcmFtIG90aGVyIEEgTWV0YWRhdGEgb2JqZWN0LlxyXG4gICAgICovXHJcbiAgICBtZXJnZShvdGhlcikge1xyXG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVzXSBvZiBvdGhlci5pbnRlcm5hbFJlcHIpIHtcclxuICAgICAgICAgICAgY29uc3QgbWVyZ2VkVmFsdWUgPSAodGhpcy5pbnRlcm5hbFJlcHIuZ2V0KGtleSkgfHwgW10pLmNvbmNhdCh2YWx1ZXMpO1xyXG4gICAgICAgICAgICB0aGlzLmludGVybmFsUmVwci5zZXQoa2V5LCBtZXJnZWRWYWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc2V0T3B0aW9ucyhvcHRpb25zKSB7XHJcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcclxuICAgIH1cclxuICAgIGdldE9wdGlvbnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhbiBPdXRnb2luZ0h0dHBIZWFkZXJzIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHdpdGggdGhlIGh0dHAyIEFQSS5cclxuICAgICAqL1xyXG4gICAgdG9IdHRwMkhlYWRlcnMoKSB7XHJcbiAgICAgICAgLy8gTk9URTogTm9kZSA8OC45IGZvcm1hdHMgaHR0cDIgaGVhZGVycyBpbmNvcnJlY3RseS5cclxuICAgICAgICBjb25zdCByZXN1bHQgPSB7fTtcclxuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlc10gb2YgdGhpcy5pbnRlcm5hbFJlcHIpIHtcclxuICAgICAgICAgICAgLy8gV2UgYXNzdW1lIHRoYXQgdGhlIHVzZXIncyBpbnRlcmFjdGlvbiB3aXRoIHRoaXMgb2JqZWN0IGlzIGxpbWl0ZWQgdG9cclxuICAgICAgICAgICAgLy8gdGhyb3VnaCBpdHMgcHVibGljIEFQSSAoaS5lLiBrZXlzIGFuZCB2YWx1ZXMgYXJlIGFscmVhZHkgdmFsaWRhdGVkKS5cclxuICAgICAgICAgICAgcmVzdWx0W2tleV0gPSB2YWx1ZXMubWFwKGJ1ZlRvU3RyaW5nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVGhpcyBtb2RpZmllcyB0aGUgYmVoYXZpb3Igb2YgSlNPTi5zdHJpbmdpZnkgdG8gc2hvdyBhbiBvYmplY3RcclxuICAgICAqIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBtZXRhZGF0YSBtYXAuXHJcbiAgICAgKi9cclxuICAgIHRvSlNPTigpIHtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSB7fTtcclxuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlc10gb2YgdGhpcy5pbnRlcm5hbFJlcHIpIHtcclxuICAgICAgICAgICAgcmVzdWx0W2tleV0gPSB2YWx1ZXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYSBuZXcgTWV0YWRhdGEgb2JqZWN0IGJhc2VkIGZpZWxkcyBpbiBhIGdpdmVuIEluY29taW5nSHR0cEhlYWRlcnNcclxuICAgICAqIG9iamVjdC5cclxuICAgICAqIEBwYXJhbSBoZWFkZXJzIEFuIEluY29taW5nSHR0cEhlYWRlcnMgb2JqZWN0LlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgZnJvbUh0dHAySGVhZGVycyhoZWFkZXJzKSB7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IE1ldGFkYXRhKCk7XHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoaGVhZGVycykpIHtcclxuICAgICAgICAgICAgLy8gUmVzZXJ2ZWQgaGVhZGVycyAoYmVnaW5uaW5nIHdpdGggYDpgKSBhcmUgbm90IHZhbGlkIGtleXMuXHJcbiAgICAgICAgICAgIGlmIChrZXkuY2hhckF0KDApID09PSAnOicpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlcyA9IGhlYWRlcnNba2V5XTtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGlmIChpc0JpbmFyeUtleShrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWVzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXMuZm9yRWFjaCh2YWx1ZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQuYWRkKGtleSwgQnVmZmVyLmZyb20odmFsdWUsICdiYXNlNjQnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh2YWx1ZXMgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNDdXN0b21NZXRhZGF0YShrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXMuc3BsaXQoJywnKS5mb3JFYWNoKHYgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5hZGQoa2V5LCBCdWZmZXIuZnJvbSh2LnRyaW0oKSwgJ2Jhc2U2NCcpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmFkZChrZXksIEJ1ZmZlci5mcm9tKHZhbHVlcywgJ2Jhc2U2NCcpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlcykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzLmZvckVhY2godmFsdWUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmFkZChrZXksIHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHZhbHVlcyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5hZGQoa2V5LCB2YWx1ZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBgRmFpbGVkIHRvIGFkZCBtZXRhZGF0YSBlbnRyeSAke2tleX06ICR7dmFsdWVzfS4gJHsoMCwgZXJyb3JfMS5nZXRFcnJvck1lc3NhZ2UpKGVycm9yKX0uIEZvciBtb3JlIGluZm9ybWF0aW9uIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZ3JwYy9ncnBjLW5vZGUvaXNzdWVzLzExNzNgO1xyXG4gICAgICAgICAgICAgICAgKDAsIGxvZ2dpbmdfMS5sb2cpKGNvbnN0YW50c18xLkxvZ1ZlcmJvc2l0eS5FUlJPUiwgbWVzc2FnZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLk1ldGFkYXRhID0gTWV0YWRhdGE7XHJcbmNvbnN0IGJ1ZlRvU3RyaW5nID0gKHZhbCkgPT4ge1xyXG4gICAgcmV0dXJuIEJ1ZmZlci5pc0J1ZmZlcih2YWwpID8gdmFsLnRvU3RyaW5nKCdiYXNlNjQnKSA6IHZhbDtcclxufTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWV0YWRhdGEuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/metadata.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/picker.js":
/*!********************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/picker.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.QueuePicker = exports.UnavailablePicker = exports.PickResultType = void 0;\r\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/metadata.js\");\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nvar PickResultType;\r\n(function (PickResultType) {\r\n    PickResultType[PickResultType[\"COMPLETE\"] = 0] = \"COMPLETE\";\r\n    PickResultType[PickResultType[\"QUEUE\"] = 1] = \"QUEUE\";\r\n    PickResultType[PickResultType[\"TRANSIENT_FAILURE\"] = 2] = \"TRANSIENT_FAILURE\";\r\n    PickResultType[PickResultType[\"DROP\"] = 3] = \"DROP\";\r\n})(PickResultType || (exports.PickResultType = PickResultType = {}));\r\n/**\r\n * A standard picker representing a load balancer in the TRANSIENT_FAILURE\r\n * state. Always responds to every pick request with an UNAVAILABLE status.\r\n */\r\nclass UnavailablePicker {\r\n    constructor(status) {\r\n        this.status = Object.assign({ code: constants_1.Status.UNAVAILABLE, details: 'No connection established', metadata: new metadata_1.Metadata() }, status);\r\n    }\r\n    pick(pickArgs) {\r\n        return {\r\n            pickResultType: PickResultType.TRANSIENT_FAILURE,\r\n            subchannel: null,\r\n            status: this.status,\r\n            onCallStarted: null,\r\n            onCallEnded: null,\r\n        };\r\n    }\r\n}\r\nexports.UnavailablePicker = UnavailablePicker;\r\n/**\r\n * A standard picker representing a load balancer in the IDLE or CONNECTING\r\n * state. Always responds to every pick request with a QUEUE pick result\r\n * indicating that the pick should be tried again with the next `Picker`. Also\r\n * reports back to the load balancer that a connection should be established\r\n * once any pick is attempted.\r\n * If the childPicker is provided, delegate to it instead of returning the\r\n * hardcoded QUEUE pick result, but still calls exitIdle.\r\n */\r\nclass QueuePicker {\r\n    // Constructed with a load balancer. Calls exitIdle on it the first time pick is called\r\n    constructor(loadBalancer, childPicker) {\r\n        this.loadBalancer = loadBalancer;\r\n        this.childPicker = childPicker;\r\n        this.calledExitIdle = false;\r\n    }\r\n    pick(pickArgs) {\r\n        if (!this.calledExitIdle) {\r\n            process.nextTick(() => {\r\n                this.loadBalancer.exitIdle();\r\n            });\r\n            this.calledExitIdle = true;\r\n        }\r\n        if (this.childPicker) {\r\n            return this.childPicker.pick(pickArgs);\r\n        }\r\n        else {\r\n            return {\r\n                pickResultType: PickResultType.QUEUE,\r\n                subchannel: null,\r\n                status: null,\r\n                onCallStarted: null,\r\n                onCallEnded: null,\r\n            };\r\n        }\r\n    }\r\n}\r\nexports.QueuePicker = QueuePicker;\r\n//# sourceMappingURL=picker.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvcGlja2VyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsbUJBQW1CLEdBQUcseUJBQXlCLEdBQUcsc0JBQXNCO0FBQ3hFLG1CQUFtQixtQkFBTyxDQUFDLDRFQUFZO0FBQ3ZDLG9CQUFvQixtQkFBTyxDQUFDLDhFQUFhO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMscUJBQXFCLHNCQUFzQixzQkFBc0I7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLGlIQUFpSDtBQUN2SjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYW5pc2gtYnVkZHkvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvcGlja2VyLmpzPzg2NTAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8qXHJcbiAqIENvcHlyaWdodCAyMDE5IGdSUEMgYXV0aG9ycy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqXHJcbiAqL1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuUXVldWVQaWNrZXIgPSBleHBvcnRzLlVuYXZhaWxhYmxlUGlja2VyID0gZXhwb3J0cy5QaWNrUmVzdWx0VHlwZSA9IHZvaWQgMDtcclxuY29uc3QgbWV0YWRhdGFfMSA9IHJlcXVpcmUoXCIuL21ldGFkYXRhXCIpO1xyXG5jb25zdCBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKTtcclxudmFyIFBpY2tSZXN1bHRUeXBlO1xyXG4oZnVuY3Rpb24gKFBpY2tSZXN1bHRUeXBlKSB7XHJcbiAgICBQaWNrUmVzdWx0VHlwZVtQaWNrUmVzdWx0VHlwZVtcIkNPTVBMRVRFXCJdID0gMF0gPSBcIkNPTVBMRVRFXCI7XHJcbiAgICBQaWNrUmVzdWx0VHlwZVtQaWNrUmVzdWx0VHlwZVtcIlFVRVVFXCJdID0gMV0gPSBcIlFVRVVFXCI7XHJcbiAgICBQaWNrUmVzdWx0VHlwZVtQaWNrUmVzdWx0VHlwZVtcIlRSQU5TSUVOVF9GQUlMVVJFXCJdID0gMl0gPSBcIlRSQU5TSUVOVF9GQUlMVVJFXCI7XHJcbiAgICBQaWNrUmVzdWx0VHlwZVtQaWNrUmVzdWx0VHlwZVtcIkRST1BcIl0gPSAzXSA9IFwiRFJPUFwiO1xyXG59KShQaWNrUmVzdWx0VHlwZSB8fCAoZXhwb3J0cy5QaWNrUmVzdWx0VHlwZSA9IFBpY2tSZXN1bHRUeXBlID0ge30pKTtcclxuLyoqXHJcbiAqIEEgc3RhbmRhcmQgcGlja2VyIHJlcHJlc2VudGluZyBhIGxvYWQgYmFsYW5jZXIgaW4gdGhlIFRSQU5TSUVOVF9GQUlMVVJFXHJcbiAqIHN0YXRlLiBBbHdheXMgcmVzcG9uZHMgdG8gZXZlcnkgcGljayByZXF1ZXN0IHdpdGggYW4gVU5BVkFJTEFCTEUgc3RhdHVzLlxyXG4gKi9cclxuY2xhc3MgVW5hdmFpbGFibGVQaWNrZXIge1xyXG4gICAgY29uc3RydWN0b3Ioc3RhdHVzKSB7XHJcbiAgICAgICAgdGhpcy5zdGF0dXMgPSBPYmplY3QuYXNzaWduKHsgY29kZTogY29uc3RhbnRzXzEuU3RhdHVzLlVOQVZBSUxBQkxFLCBkZXRhaWxzOiAnTm8gY29ubmVjdGlvbiBlc3RhYmxpc2hlZCcsIG1ldGFkYXRhOiBuZXcgbWV0YWRhdGFfMS5NZXRhZGF0YSgpIH0sIHN0YXR1cyk7XHJcbiAgICB9XHJcbiAgICBwaWNrKHBpY2tBcmdzKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcGlja1Jlc3VsdFR5cGU6IFBpY2tSZXN1bHRUeXBlLlRSQU5TSUVOVF9GQUlMVVJFLFxyXG4gICAgICAgICAgICBzdWJjaGFubmVsOiBudWxsLFxyXG4gICAgICAgICAgICBzdGF0dXM6IHRoaXMuc3RhdHVzLFxyXG4gICAgICAgICAgICBvbkNhbGxTdGFydGVkOiBudWxsLFxyXG4gICAgICAgICAgICBvbkNhbGxFbmRlZDogbnVsbCxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuVW5hdmFpbGFibGVQaWNrZXIgPSBVbmF2YWlsYWJsZVBpY2tlcjtcclxuLyoqXHJcbiAqIEEgc3RhbmRhcmQgcGlja2VyIHJlcHJlc2VudGluZyBhIGxvYWQgYmFsYW5jZXIgaW4gdGhlIElETEUgb3IgQ09OTkVDVElOR1xyXG4gKiBzdGF0ZS4gQWx3YXlzIHJlc3BvbmRzIHRvIGV2ZXJ5IHBpY2sgcmVxdWVzdCB3aXRoIGEgUVVFVUUgcGljayByZXN1bHRcclxuICogaW5kaWNhdGluZyB0aGF0IHRoZSBwaWNrIHNob3VsZCBiZSB0cmllZCBhZ2FpbiB3aXRoIHRoZSBuZXh0IGBQaWNrZXJgLiBBbHNvXHJcbiAqIHJlcG9ydHMgYmFjayB0byB0aGUgbG9hZCBiYWxhbmNlciB0aGF0IGEgY29ubmVjdGlvbiBzaG91bGQgYmUgZXN0YWJsaXNoZWRcclxuICogb25jZSBhbnkgcGljayBpcyBhdHRlbXB0ZWQuXHJcbiAqIElmIHRoZSBjaGlsZFBpY2tlciBpcyBwcm92aWRlZCwgZGVsZWdhdGUgdG8gaXQgaW5zdGVhZCBvZiByZXR1cm5pbmcgdGhlXHJcbiAqIGhhcmRjb2RlZCBRVUVVRSBwaWNrIHJlc3VsdCwgYnV0IHN0aWxsIGNhbGxzIGV4aXRJZGxlLlxyXG4gKi9cclxuY2xhc3MgUXVldWVQaWNrZXIge1xyXG4gICAgLy8gQ29uc3RydWN0ZWQgd2l0aCBhIGxvYWQgYmFsYW5jZXIuIENhbGxzIGV4aXRJZGxlIG9uIGl0IHRoZSBmaXJzdCB0aW1lIHBpY2sgaXMgY2FsbGVkXHJcbiAgICBjb25zdHJ1Y3Rvcihsb2FkQmFsYW5jZXIsIGNoaWxkUGlja2VyKSB7XHJcbiAgICAgICAgdGhpcy5sb2FkQmFsYW5jZXIgPSBsb2FkQmFsYW5jZXI7XHJcbiAgICAgICAgdGhpcy5jaGlsZFBpY2tlciA9IGNoaWxkUGlja2VyO1xyXG4gICAgICAgIHRoaXMuY2FsbGVkRXhpdElkbGUgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIHBpY2socGlja0FyZ3MpIHtcclxuICAgICAgICBpZiAoIXRoaXMuY2FsbGVkRXhpdElkbGUpIHtcclxuICAgICAgICAgICAgcHJvY2Vzcy5uZXh0VGljaygoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvYWRCYWxhbmNlci5leGl0SWRsZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy5jYWxsZWRFeGl0SWRsZSA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmNoaWxkUGlja2VyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNoaWxkUGlja2VyLnBpY2socGlja0FyZ3MpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHBpY2tSZXN1bHRUeXBlOiBQaWNrUmVzdWx0VHlwZS5RVUVVRSxcclxuICAgICAgICAgICAgICAgIHN1YmNoYW5uZWw6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBzdGF0dXM6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBvbkNhbGxTdGFydGVkOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgb25DYWxsRW5kZWQ6IG51bGwsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuUXVldWVQaWNrZXIgPSBRdWV1ZVBpY2tlcjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGlja2VyLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/picker.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/resolver-dns.js":
/*!**************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/resolver-dns.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.DEFAULT_PORT = void 0;\r\nexports.setup = setup;\r\nconst resolver_1 = __webpack_require__(/*! ./resolver */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/resolver.js\");\r\nconst dns_1 = __webpack_require__(/*! dns */ \"dns\");\r\nconst service_config_1 = __webpack_require__(/*! ./service-config */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/service-config.js\");\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/metadata.js\");\r\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\r\nconst constants_2 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\r\nconst net_1 = __webpack_require__(/*! net */ \"net\");\r\nconst backoff_timeout_1 = __webpack_require__(/*! ./backoff-timeout */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/backoff-timeout.js\");\r\nconst environment_1 = __webpack_require__(/*! ./environment */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/environment.js\");\r\nconst TRACER_NAME = 'dns_resolver';\r\nfunction trace(text) {\r\n    logging.trace(constants_2.LogVerbosity.DEBUG, TRACER_NAME, text);\r\n}\r\n/**\r\n * The default TCP port to connect to if not explicitly specified in the target.\r\n */\r\nexports.DEFAULT_PORT = 443;\r\nconst DEFAULT_MIN_TIME_BETWEEN_RESOLUTIONS_MS = 30000;\r\n/**\r\n * Resolver implementation that handles DNS names and IP addresses.\r\n */\r\nclass DnsResolver {\r\n    constructor(target, listener, channelOptions) {\r\n        var _a, _b, _c;\r\n        this.target = target;\r\n        this.listener = listener;\r\n        this.pendingLookupPromise = null;\r\n        this.pendingTxtPromise = null;\r\n        this.latestLookupResult = null;\r\n        this.latestServiceConfig = null;\r\n        this.latestServiceConfigError = null;\r\n        this.continueResolving = false;\r\n        this.isNextResolutionTimerRunning = false;\r\n        this.isServiceConfigEnabled = true;\r\n        this.returnedIpResult = false;\r\n        this.alternativeResolver = new dns_1.promises.Resolver();\r\n        trace('Resolver constructed for target ' + (0, uri_parser_1.uriToString)(target));\r\n        if (target.authority) {\r\n            this.alternativeResolver.setServers([target.authority]);\r\n        }\r\n        const hostPort = (0, uri_parser_1.splitHostPort)(target.path);\r\n        if (hostPort === null) {\r\n            this.ipResult = null;\r\n            this.dnsHostname = null;\r\n            this.port = null;\r\n        }\r\n        else {\r\n            if ((0, net_1.isIPv4)(hostPort.host) || (0, net_1.isIPv6)(hostPort.host)) {\r\n                this.ipResult = [\r\n                    {\r\n                        addresses: [\r\n                            {\r\n                                host: hostPort.host,\r\n                                port: (_a = hostPort.port) !== null && _a !== void 0 ? _a : exports.DEFAULT_PORT,\r\n                            },\r\n                        ],\r\n                    },\r\n                ];\r\n                this.dnsHostname = null;\r\n                this.port = null;\r\n            }\r\n            else {\r\n                this.ipResult = null;\r\n                this.dnsHostname = hostPort.host;\r\n                this.port = (_b = hostPort.port) !== null && _b !== void 0 ? _b : exports.DEFAULT_PORT;\r\n            }\r\n        }\r\n        this.percentage = Math.random() * 100;\r\n        if (channelOptions['grpc.service_config_disable_resolution'] === 1) {\r\n            this.isServiceConfigEnabled = false;\r\n        }\r\n        this.defaultResolutionError = {\r\n            code: constants_1.Status.UNAVAILABLE,\r\n            details: `Name resolution failed for target ${(0, uri_parser_1.uriToString)(this.target)}`,\r\n            metadata: new metadata_1.Metadata(),\r\n        };\r\n        const backoffOptions = {\r\n            initialDelay: channelOptions['grpc.initial_reconnect_backoff_ms'],\r\n            maxDelay: channelOptions['grpc.max_reconnect_backoff_ms'],\r\n        };\r\n        this.backoff = new backoff_timeout_1.BackoffTimeout(() => {\r\n            if (this.continueResolving) {\r\n                this.startResolutionWithBackoff();\r\n            }\r\n        }, backoffOptions);\r\n        this.backoff.unref();\r\n        this.minTimeBetweenResolutionsMs =\r\n            (_c = channelOptions['grpc.dns_min_time_between_resolutions_ms']) !== null && _c !== void 0 ? _c : DEFAULT_MIN_TIME_BETWEEN_RESOLUTIONS_MS;\r\n        this.nextResolutionTimer = setTimeout(() => { }, 0);\r\n        clearTimeout(this.nextResolutionTimer);\r\n    }\r\n    /**\r\n     * If the target is an IP address, just provide that address as a result.\r\n     * Otherwise, initiate A, AAAA, and TXT lookups\r\n     */\r\n    startResolution() {\r\n        if (this.ipResult !== null) {\r\n            if (!this.returnedIpResult) {\r\n                trace('Returning IP address for target ' + (0, uri_parser_1.uriToString)(this.target));\r\n                setImmediate(() => {\r\n                    this.listener.onSuccessfulResolution(this.ipResult, null, null, null, {});\r\n                });\r\n                this.returnedIpResult = true;\r\n            }\r\n            this.backoff.stop();\r\n            this.backoff.reset();\r\n            this.stopNextResolutionTimer();\r\n            return;\r\n        }\r\n        if (this.dnsHostname === null) {\r\n            trace('Failed to parse DNS address ' + (0, uri_parser_1.uriToString)(this.target));\r\n            setImmediate(() => {\r\n                this.listener.onError({\r\n                    code: constants_1.Status.UNAVAILABLE,\r\n                    details: `Failed to parse DNS address ${(0, uri_parser_1.uriToString)(this.target)}`,\r\n                    metadata: new metadata_1.Metadata(),\r\n                });\r\n            });\r\n            this.stopNextResolutionTimer();\r\n        }\r\n        else {\r\n            if (this.pendingLookupPromise !== null) {\r\n                return;\r\n            }\r\n            trace('Looking up DNS hostname ' + this.dnsHostname);\r\n            /* We clear out latestLookupResult here to ensure that it contains the\r\n             * latest result since the last time we started resolving. That way, the\r\n             * TXT resolution handler can use it, but only if it finishes second. We\r\n             * don't clear out any previous service config results because it's\r\n             * better to use a service config that's slightly out of date than to\r\n             * revert to an effectively blank one. */\r\n            this.latestLookupResult = null;\r\n            const hostname = this.dnsHostname;\r\n            this.pendingLookupPromise = this.lookup(hostname);\r\n            this.pendingLookupPromise.then(addressList => {\r\n                if (this.pendingLookupPromise === null) {\r\n                    return;\r\n                }\r\n                this.pendingLookupPromise = null;\r\n                this.backoff.reset();\r\n                this.backoff.stop();\r\n                this.latestLookupResult = addressList.map(address => ({\r\n                    addresses: [address],\r\n                }));\r\n                const allAddressesString = '[' +\r\n                    addressList.map(addr => addr.host + ':' + addr.port).join(',') +\r\n                    ']';\r\n                trace('Resolved addresses for target ' +\r\n                    (0, uri_parser_1.uriToString)(this.target) +\r\n                    ': ' +\r\n                    allAddressesString);\r\n                if (this.latestLookupResult.length === 0) {\r\n                    this.listener.onError(this.defaultResolutionError);\r\n                    return;\r\n                }\r\n                /* If the TXT lookup has not yet finished, both of the last two\r\n                 * arguments will be null, which is the equivalent of getting an\r\n                 * empty TXT response. When the TXT lookup does finish, its handler\r\n                 * can update the service config by using the same address list */\r\n                this.listener.onSuccessfulResolution(this.latestLookupResult, this.latestServiceConfig, this.latestServiceConfigError, null, {});\r\n            }, err => {\r\n                if (this.pendingLookupPromise === null) {\r\n                    return;\r\n                }\r\n                trace('Resolution error for target ' +\r\n                    (0, uri_parser_1.uriToString)(this.target) +\r\n                    ': ' +\r\n                    err.message);\r\n                this.pendingLookupPromise = null;\r\n                this.stopNextResolutionTimer();\r\n                this.listener.onError(this.defaultResolutionError);\r\n            });\r\n            /* If there already is a still-pending TXT resolution, we can just use\r\n             * that result when it comes in */\r\n            if (this.isServiceConfigEnabled && this.pendingTxtPromise === null) {\r\n                /* We handle the TXT query promise differently than the others because\r\n                 * the name resolution attempt as a whole is a success even if the TXT\r\n                 * lookup fails */\r\n                this.pendingTxtPromise = this.resolveTxt(hostname);\r\n                this.pendingTxtPromise.then(txtRecord => {\r\n                    if (this.pendingTxtPromise === null) {\r\n                        return;\r\n                    }\r\n                    this.pendingTxtPromise = null;\r\n                    try {\r\n                        this.latestServiceConfig = (0, service_config_1.extractAndSelectServiceConfig)(txtRecord, this.percentage);\r\n                    }\r\n                    catch (err) {\r\n                        this.latestServiceConfigError = {\r\n                            code: constants_1.Status.UNAVAILABLE,\r\n                            details: `Parsing service config failed with error ${err.message}`,\r\n                            metadata: new metadata_1.Metadata(),\r\n                        };\r\n                    }\r\n                    if (this.latestLookupResult !== null) {\r\n                        /* We rely here on the assumption that calling this function with\r\n                         * identical parameters will be essentialy idempotent, and calling\r\n                         * it with the same address list and a different service config\r\n                         * should result in a fast and seamless switchover. */\r\n                        this.listener.onSuccessfulResolution(this.latestLookupResult, this.latestServiceConfig, this.latestServiceConfigError, null, {});\r\n                    }\r\n                }, err => {\r\n                    /* If TXT lookup fails we should do nothing, which means that we\r\n                     * continue to use the result of the most recent successful lookup,\r\n                     * or the default null config object if there has never been a\r\n                     * successful lookup. We do not set the latestServiceConfigError\r\n                     * here because that is specifically used for response validation\r\n                     * errors. We still need to handle this error so that it does not\r\n                     * bubble up as an unhandled promise rejection. */\r\n                });\r\n            }\r\n        }\r\n    }\r\n    async lookup(hostname) {\r\n        if (environment_1.GRPC_NODE_USE_ALTERNATIVE_RESOLVER) {\r\n            trace('Using alternative DNS resolver.');\r\n            const records = await Promise.allSettled([\r\n                this.alternativeResolver.resolve4(hostname),\r\n                this.alternativeResolver.resolve6(hostname),\r\n            ]);\r\n            if (records.every(result => result.status === 'rejected')) {\r\n                throw new Error(records[0].reason);\r\n            }\r\n            return records\r\n                .reduce((acc, result) => {\r\n                return result.status === 'fulfilled'\r\n                    ? [...acc, ...result.value]\r\n                    : acc;\r\n            }, [])\r\n                .map(addr => ({\r\n                host: addr,\r\n                port: +this.port,\r\n            }));\r\n        }\r\n        /* We lookup both address families here and then split them up later\r\n         * because when looking up a single family, dns.lookup outputs an error\r\n         * if the name exists but there are no records for that family, and that\r\n         * error is indistinguishable from other kinds of errors */\r\n        const addressList = await dns_1.promises.lookup(hostname, { all: true });\r\n        return addressList.map(addr => ({ host: addr.address, port: +this.port }));\r\n    }\r\n    async resolveTxt(hostname) {\r\n        if (environment_1.GRPC_NODE_USE_ALTERNATIVE_RESOLVER) {\r\n            trace('Using alternative DNS resolver.');\r\n            return this.alternativeResolver.resolveTxt(hostname);\r\n        }\r\n        return dns_1.promises.resolveTxt(hostname);\r\n    }\r\n    startNextResolutionTimer() {\r\n        var _a, _b;\r\n        clearTimeout(this.nextResolutionTimer);\r\n        this.nextResolutionTimer = setTimeout(() => {\r\n            this.stopNextResolutionTimer();\r\n            if (this.continueResolving) {\r\n                this.startResolutionWithBackoff();\r\n            }\r\n        }, this.minTimeBetweenResolutionsMs);\r\n        (_b = (_a = this.nextResolutionTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\r\n        this.isNextResolutionTimerRunning = true;\r\n    }\r\n    stopNextResolutionTimer() {\r\n        clearTimeout(this.nextResolutionTimer);\r\n        this.isNextResolutionTimerRunning = false;\r\n    }\r\n    startResolutionWithBackoff() {\r\n        if (this.pendingLookupPromise === null) {\r\n            this.continueResolving = false;\r\n            this.backoff.runOnce();\r\n            this.startNextResolutionTimer();\r\n            this.startResolution();\r\n        }\r\n    }\r\n    updateResolution() {\r\n        /* If there is a pending lookup, just let it finish. Otherwise, if the\r\n         * nextResolutionTimer or backoff timer is running, set the\r\n         * continueResolving flag to resolve when whichever of those timers\r\n         * fires. Otherwise, start resolving immediately. */\r\n        if (this.pendingLookupPromise === null) {\r\n            if (this.isNextResolutionTimerRunning || this.backoff.isRunning()) {\r\n                if (this.isNextResolutionTimerRunning) {\r\n                    trace('resolution update delayed by \"min time between resolutions\" rate limit');\r\n                }\r\n                else {\r\n                    trace('resolution update delayed by backoff timer until ' +\r\n                        this.backoff.getEndTime().toISOString());\r\n                }\r\n                this.continueResolving = true;\r\n            }\r\n            else {\r\n                this.startResolutionWithBackoff();\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Reset the resolver to the same state it had when it was created. In-flight\r\n     * DNS requests cannot be cancelled, but they are discarded and their results\r\n     * will be ignored.\r\n     */\r\n    destroy() {\r\n        this.continueResolving = false;\r\n        this.backoff.reset();\r\n        this.backoff.stop();\r\n        this.stopNextResolutionTimer();\r\n        this.pendingLookupPromise = null;\r\n        this.pendingTxtPromise = null;\r\n        this.latestLookupResult = null;\r\n        this.latestServiceConfig = null;\r\n        this.latestServiceConfigError = null;\r\n        this.returnedIpResult = false;\r\n    }\r\n    /**\r\n     * Get the default authority for the given target. For IP targets, that is\r\n     * the IP address. For DNS targets, it is the hostname.\r\n     * @param target\r\n     */\r\n    static getDefaultAuthority(target) {\r\n        return target.path;\r\n    }\r\n}\r\n/**\r\n * Set up the DNS resolver class by registering it as the handler for the\r\n * \"dns:\" prefix and as the default resolver.\r\n */\r\nfunction setup() {\r\n    (0, resolver_1.registerResolver)('dns', DnsResolver);\r\n    (0, resolver_1.registerDefaultScheme)('dns');\r\n}\r\n//# sourceMappingURL=resolver-dns.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/resolver-dns.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/resolver-ip.js":
/*!*************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/resolver-ip.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2021 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.setup = setup;\r\nconst net_1 = __webpack_require__(/*! net */ \"net\");\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/metadata.js\");\r\nconst resolver_1 = __webpack_require__(/*! ./resolver */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/resolver.js\");\r\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\r\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\r\nconst TRACER_NAME = 'ip_resolver';\r\nfunction trace(text) {\r\n    logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);\r\n}\r\nconst IPV4_SCHEME = 'ipv4';\r\nconst IPV6_SCHEME = 'ipv6';\r\n/**\r\n * The default TCP port to connect to if not explicitly specified in the target.\r\n */\r\nconst DEFAULT_PORT = 443;\r\nclass IpResolver {\r\n    constructor(target, listener, channelOptions) {\r\n        var _a;\r\n        this.listener = listener;\r\n        this.endpoints = [];\r\n        this.error = null;\r\n        this.hasReturnedResult = false;\r\n        trace('Resolver constructed for target ' + (0, uri_parser_1.uriToString)(target));\r\n        const addresses = [];\r\n        if (!(target.scheme === IPV4_SCHEME || target.scheme === IPV6_SCHEME)) {\r\n            this.error = {\r\n                code: constants_1.Status.UNAVAILABLE,\r\n                details: `Unrecognized scheme ${target.scheme} in IP resolver`,\r\n                metadata: new metadata_1.Metadata(),\r\n            };\r\n            return;\r\n        }\r\n        const pathList = target.path.split(',');\r\n        for (const path of pathList) {\r\n            const hostPort = (0, uri_parser_1.splitHostPort)(path);\r\n            if (hostPort === null) {\r\n                this.error = {\r\n                    code: constants_1.Status.UNAVAILABLE,\r\n                    details: `Failed to parse ${target.scheme} address ${path}`,\r\n                    metadata: new metadata_1.Metadata(),\r\n                };\r\n                return;\r\n            }\r\n            if ((target.scheme === IPV4_SCHEME && !(0, net_1.isIPv4)(hostPort.host)) ||\r\n                (target.scheme === IPV6_SCHEME && !(0, net_1.isIPv6)(hostPort.host))) {\r\n                this.error = {\r\n                    code: constants_1.Status.UNAVAILABLE,\r\n                    details: `Failed to parse ${target.scheme} address ${path}`,\r\n                    metadata: new metadata_1.Metadata(),\r\n                };\r\n                return;\r\n            }\r\n            addresses.push({\r\n                host: hostPort.host,\r\n                port: (_a = hostPort.port) !== null && _a !== void 0 ? _a : DEFAULT_PORT,\r\n            });\r\n        }\r\n        this.endpoints = addresses.map(address => ({ addresses: [address] }));\r\n        trace('Parsed ' + target.scheme + ' address list ' + addresses);\r\n    }\r\n    updateResolution() {\r\n        if (!this.hasReturnedResult) {\r\n            this.hasReturnedResult = true;\r\n            process.nextTick(() => {\r\n                if (this.error) {\r\n                    this.listener.onError(this.error);\r\n                }\r\n                else {\r\n                    this.listener.onSuccessfulResolution(this.endpoints, null, null, null, {});\r\n                }\r\n            });\r\n        }\r\n    }\r\n    destroy() {\r\n        this.hasReturnedResult = false;\r\n    }\r\n    static getDefaultAuthority(target) {\r\n        return target.path.split(',')[0];\r\n    }\r\n}\r\nfunction setup() {\r\n    (0, resolver_1.registerResolver)(IPV4_SCHEME, IpResolver);\r\n    (0, resolver_1.registerResolver)(IPV6_SCHEME, IpResolver);\r\n}\r\n//# sourceMappingURL=resolver-ip.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvcmVzb2x2ZXItaXAuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYTtBQUNiLGNBQWMsbUJBQU8sQ0FBQyxnQkFBSztBQUMzQixvQkFBb0IsbUJBQU8sQ0FBQyw4RUFBYTtBQUN6QyxtQkFBbUIsbUJBQU8sQ0FBQyw0RUFBWTtBQUN2QyxtQkFBbUIsbUJBQU8sQ0FBQyw0RUFBWTtBQUN2QyxxQkFBcUIsbUJBQU8sQ0FBQyxnRkFBYztBQUMzQyxnQkFBZ0IsbUJBQU8sQ0FBQywwRUFBVztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRCxlQUFlO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELGVBQWUsVUFBVSxLQUFLO0FBQzlFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsZUFBZSxVQUFVLEtBQUs7QUFDOUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxxREFBcUQsc0JBQXNCO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkZBQTZGO0FBQzdGO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYW5pc2gtYnVkZHkvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvcmVzb2x2ZXItaXAuanM/NzdiZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuLypcclxuICogQ29weXJpZ2h0IDIwMjEgZ1JQQyBhdXRob3JzLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5zZXR1cCA9IHNldHVwO1xyXG5jb25zdCBuZXRfMSA9IHJlcXVpcmUoXCJuZXRcIik7XHJcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4vY29uc3RhbnRzXCIpO1xyXG5jb25zdCBtZXRhZGF0YV8xID0gcmVxdWlyZShcIi4vbWV0YWRhdGFcIik7XHJcbmNvbnN0IHJlc29sdmVyXzEgPSByZXF1aXJlKFwiLi9yZXNvbHZlclwiKTtcclxuY29uc3QgdXJpX3BhcnNlcl8xID0gcmVxdWlyZShcIi4vdXJpLXBhcnNlclwiKTtcclxuY29uc3QgbG9nZ2luZyA9IHJlcXVpcmUoXCIuL2xvZ2dpbmdcIik7XHJcbmNvbnN0IFRSQUNFUl9OQU1FID0gJ2lwX3Jlc29sdmVyJztcclxuZnVuY3Rpb24gdHJhY2UodGV4dCkge1xyXG4gICAgbG9nZ2luZy50cmFjZShjb25zdGFudHNfMS5Mb2dWZXJib3NpdHkuREVCVUcsIFRSQUNFUl9OQU1FLCB0ZXh0KTtcclxufVxyXG5jb25zdCBJUFY0X1NDSEVNRSA9ICdpcHY0JztcclxuY29uc3QgSVBWNl9TQ0hFTUUgPSAnaXB2Nic7XHJcbi8qKlxyXG4gKiBUaGUgZGVmYXVsdCBUQ1AgcG9ydCB0byBjb25uZWN0IHRvIGlmIG5vdCBleHBsaWNpdGx5IHNwZWNpZmllZCBpbiB0aGUgdGFyZ2V0LlxyXG4gKi9cclxuY29uc3QgREVGQVVMVF9QT1JUID0gNDQzO1xyXG5jbGFzcyBJcFJlc29sdmVyIHtcclxuICAgIGNvbnN0cnVjdG9yKHRhcmdldCwgbGlzdGVuZXIsIGNoYW5uZWxPcHRpb25zKSB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIHRoaXMubGlzdGVuZXIgPSBsaXN0ZW5lcjtcclxuICAgICAgICB0aGlzLmVuZHBvaW50cyA9IFtdO1xyXG4gICAgICAgIHRoaXMuZXJyb3IgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuaGFzUmV0dXJuZWRSZXN1bHQgPSBmYWxzZTtcclxuICAgICAgICB0cmFjZSgnUmVzb2x2ZXIgY29uc3RydWN0ZWQgZm9yIHRhcmdldCAnICsgKDAsIHVyaV9wYXJzZXJfMS51cmlUb1N0cmluZykodGFyZ2V0KSk7XHJcbiAgICAgICAgY29uc3QgYWRkcmVzc2VzID0gW107XHJcbiAgICAgICAgaWYgKCEodGFyZ2V0LnNjaGVtZSA9PT0gSVBWNF9TQ0hFTUUgfHwgdGFyZ2V0LnNjaGVtZSA9PT0gSVBWNl9TQ0hFTUUpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZXJyb3IgPSB7XHJcbiAgICAgICAgICAgICAgICBjb2RlOiBjb25zdGFudHNfMS5TdGF0dXMuVU5BVkFJTEFCTEUsXHJcbiAgICAgICAgICAgICAgICBkZXRhaWxzOiBgVW5yZWNvZ25pemVkIHNjaGVtZSAke3RhcmdldC5zY2hlbWV9IGluIElQIHJlc29sdmVyYCxcclxuICAgICAgICAgICAgICAgIG1ldGFkYXRhOiBuZXcgbWV0YWRhdGFfMS5NZXRhZGF0YSgpLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHBhdGhMaXN0ID0gdGFyZ2V0LnBhdGguc3BsaXQoJywnKTtcclxuICAgICAgICBmb3IgKGNvbnN0IHBhdGggb2YgcGF0aExpc3QpIHtcclxuICAgICAgICAgICAgY29uc3QgaG9zdFBvcnQgPSAoMCwgdXJpX3BhcnNlcl8xLnNwbGl0SG9zdFBvcnQpKHBhdGgpO1xyXG4gICAgICAgICAgICBpZiAoaG9zdFBvcnQgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29kZTogY29uc3RhbnRzXzEuU3RhdHVzLlVOQVZBSUxBQkxFLFxyXG4gICAgICAgICAgICAgICAgICAgIGRldGFpbHM6IGBGYWlsZWQgdG8gcGFyc2UgJHt0YXJnZXQuc2NoZW1lfSBhZGRyZXNzICR7cGF0aH1gLFxyXG4gICAgICAgICAgICAgICAgICAgIG1ldGFkYXRhOiBuZXcgbWV0YWRhdGFfMS5NZXRhZGF0YSgpLFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoKHRhcmdldC5zY2hlbWUgPT09IElQVjRfU0NIRU1FICYmICEoMCwgbmV0XzEuaXNJUHY0KShob3N0UG9ydC5ob3N0KSkgfHxcclxuICAgICAgICAgICAgICAgICh0YXJnZXQuc2NoZW1lID09PSBJUFY2X1NDSEVNRSAmJiAhKDAsIG5ldF8xLmlzSVB2NikoaG9zdFBvcnQuaG9zdCkpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9yID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvZGU6IGNvbnN0YW50c18xLlN0YXR1cy5VTkFWQUlMQUJMRSxcclxuICAgICAgICAgICAgICAgICAgICBkZXRhaWxzOiBgRmFpbGVkIHRvIHBhcnNlICR7dGFyZ2V0LnNjaGVtZX0gYWRkcmVzcyAke3BhdGh9YCxcclxuICAgICAgICAgICAgICAgICAgICBtZXRhZGF0YTogbmV3IG1ldGFkYXRhXzEuTWV0YWRhdGEoKSxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYWRkcmVzc2VzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgaG9zdDogaG9zdFBvcnQuaG9zdCxcclxuICAgICAgICAgICAgICAgIHBvcnQ6IChfYSA9IGhvc3RQb3J0LnBvcnQpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IERFRkFVTFRfUE9SVCxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZW5kcG9pbnRzID0gYWRkcmVzc2VzLm1hcChhZGRyZXNzID0+ICh7IGFkZHJlc3NlczogW2FkZHJlc3NdIH0pKTtcclxuICAgICAgICB0cmFjZSgnUGFyc2VkICcgKyB0YXJnZXQuc2NoZW1lICsgJyBhZGRyZXNzIGxpc3QgJyArIGFkZHJlc3Nlcyk7XHJcbiAgICB9XHJcbiAgICB1cGRhdGVSZXNvbHV0aW9uKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5oYXNSZXR1cm5lZFJlc3VsdCkge1xyXG4gICAgICAgICAgICB0aGlzLmhhc1JldHVybmVkUmVzdWx0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgcHJvY2Vzcy5uZXh0VGljaygoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5lcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuZXIub25FcnJvcih0aGlzLmVycm9yKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuZXIub25TdWNjZXNzZnVsUmVzb2x1dGlvbih0aGlzLmVuZHBvaW50cywgbnVsbCwgbnVsbCwgbnVsbCwge30pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBkZXN0cm95KCkge1xyXG4gICAgICAgIHRoaXMuaGFzUmV0dXJuZWRSZXN1bHQgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBnZXREZWZhdWx0QXV0aG9yaXR5KHRhcmdldCkge1xyXG4gICAgICAgIHJldHVybiB0YXJnZXQucGF0aC5zcGxpdCgnLCcpWzBdO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHNldHVwKCkge1xyXG4gICAgKDAsIHJlc29sdmVyXzEucmVnaXN0ZXJSZXNvbHZlcikoSVBWNF9TQ0hFTUUsIElwUmVzb2x2ZXIpO1xyXG4gICAgKDAsIHJlc29sdmVyXzEucmVnaXN0ZXJSZXNvbHZlcikoSVBWNl9TQ0hFTUUsIElwUmVzb2x2ZXIpO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlc29sdmVyLWlwLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/resolver-ip.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/resolver-uds.js":
/*!**************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/resolver-uds.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.setup = setup;\r\nconst resolver_1 = __webpack_require__(/*! ./resolver */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/resolver.js\");\r\nclass UdsResolver {\r\n    constructor(target, listener, channelOptions) {\r\n        this.listener = listener;\r\n        this.hasReturnedResult = false;\r\n        this.endpoints = [];\r\n        let path;\r\n        if (target.authority === '') {\r\n            path = '/' + target.path;\r\n        }\r\n        else {\r\n            path = target.path;\r\n        }\r\n        this.endpoints = [{ addresses: [{ path }] }];\r\n    }\r\n    updateResolution() {\r\n        if (!this.hasReturnedResult) {\r\n            this.hasReturnedResult = true;\r\n            process.nextTick(this.listener.onSuccessfulResolution, this.endpoints, null, null, null, {});\r\n        }\r\n    }\r\n    destroy() {\r\n        this.hasReturnedResult = false;\r\n    }\r\n    static getDefaultAuthority(target) {\r\n        return 'localhost';\r\n    }\r\n}\r\nfunction setup() {\r\n    (0, resolver_1.registerResolver)('unix', UdsResolver);\r\n}\r\n//# sourceMappingURL=resolver-uds.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvcmVzb2x2ZXItdWRzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWE7QUFDYixtQkFBbUIsbUJBQU8sQ0FBQyw0RUFBWTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsY0FBYyxNQUFNLEdBQUc7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1R0FBdUc7QUFDdkc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYW5pc2gtYnVkZHkvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvcmVzb2x2ZXItdWRzLmpzPzZjNTciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8qXHJcbiAqIENvcHlyaWdodCAyMDE5IGdSUEMgYXV0aG9ycy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuc2V0dXAgPSBzZXR1cDtcclxuY29uc3QgcmVzb2x2ZXJfMSA9IHJlcXVpcmUoXCIuL3Jlc29sdmVyXCIpO1xyXG5jbGFzcyBVZHNSZXNvbHZlciB7XHJcbiAgICBjb25zdHJ1Y3Rvcih0YXJnZXQsIGxpc3RlbmVyLCBjaGFubmVsT3B0aW9ucykge1xyXG4gICAgICAgIHRoaXMubGlzdGVuZXIgPSBsaXN0ZW5lcjtcclxuICAgICAgICB0aGlzLmhhc1JldHVybmVkUmVzdWx0ID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5lbmRwb2ludHMgPSBbXTtcclxuICAgICAgICBsZXQgcGF0aDtcclxuICAgICAgICBpZiAodGFyZ2V0LmF1dGhvcml0eSA9PT0gJycpIHtcclxuICAgICAgICAgICAgcGF0aCA9ICcvJyArIHRhcmdldC5wYXRoO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcGF0aCA9IHRhcmdldC5wYXRoO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmVuZHBvaW50cyA9IFt7IGFkZHJlc3NlczogW3sgcGF0aCB9XSB9XTtcclxuICAgIH1cclxuICAgIHVwZGF0ZVJlc29sdXRpb24oKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmhhc1JldHVybmVkUmVzdWx0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGFzUmV0dXJuZWRSZXN1bHQgPSB0cnVlO1xyXG4gICAgICAgICAgICBwcm9jZXNzLm5leHRUaWNrKHRoaXMubGlzdGVuZXIub25TdWNjZXNzZnVsUmVzb2x1dGlvbiwgdGhpcy5lbmRwb2ludHMsIG51bGwsIG51bGwsIG51bGwsIHt9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBkZXN0cm95KCkge1xyXG4gICAgICAgIHRoaXMuaGFzUmV0dXJuZWRSZXN1bHQgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBnZXREZWZhdWx0QXV0aG9yaXR5KHRhcmdldCkge1xyXG4gICAgICAgIHJldHVybiAnbG9jYWxob3N0JztcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBzZXR1cCgpIHtcclxuICAgICgwLCByZXNvbHZlcl8xLnJlZ2lzdGVyUmVzb2x2ZXIpKCd1bml4JywgVWRzUmVzb2x2ZXIpO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlc29sdmVyLXVkcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/resolver-uds.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/resolver.js":
/*!**********************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/resolver.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.registerResolver = registerResolver;\r\nexports.registerDefaultScheme = registerDefaultScheme;\r\nexports.createResolver = createResolver;\r\nexports.getDefaultAuthority = getDefaultAuthority;\r\nexports.mapUriDefaultScheme = mapUriDefaultScheme;\r\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\r\nconst registeredResolvers = {};\r\nlet defaultScheme = null;\r\n/**\r\n * Register a resolver class to handle target names prefixed with the `prefix`\r\n * string. This prefix should correspond to a URI scheme name listed in the\r\n * [gRPC Name Resolution document](https://github.com/grpc/grpc/blob/master/doc/naming.md)\r\n * @param prefix\r\n * @param resolverClass\r\n */\r\nfunction registerResolver(scheme, resolverClass) {\r\n    registeredResolvers[scheme] = resolverClass;\r\n}\r\n/**\r\n * Register a default resolver to handle target names that do not start with\r\n * any registered prefix.\r\n * @param resolverClass\r\n */\r\nfunction registerDefaultScheme(scheme) {\r\n    defaultScheme = scheme;\r\n}\r\n/**\r\n * Create a name resolver for the specified target, if possible. Throws an\r\n * error if no such name resolver can be created.\r\n * @param target\r\n * @param listener\r\n */\r\nfunction createResolver(target, listener, options) {\r\n    if (target.scheme !== undefined && target.scheme in registeredResolvers) {\r\n        return new registeredResolvers[target.scheme](target, listener, options);\r\n    }\r\n    else {\r\n        throw new Error(`No resolver could be created for target ${(0, uri_parser_1.uriToString)(target)}`);\r\n    }\r\n}\r\n/**\r\n * Get the default authority for the specified target, if possible. Throws an\r\n * error if no registered name resolver can parse that target string.\r\n * @param target\r\n */\r\nfunction getDefaultAuthority(target) {\r\n    if (target.scheme !== undefined && target.scheme in registeredResolvers) {\r\n        return registeredResolvers[target.scheme].getDefaultAuthority(target);\r\n    }\r\n    else {\r\n        throw new Error(`Invalid target ${(0, uri_parser_1.uriToString)(target)}`);\r\n    }\r\n}\r\nfunction mapUriDefaultScheme(target) {\r\n    if (target.scheme === undefined || !(target.scheme in registeredResolvers)) {\r\n        if (defaultScheme !== null) {\r\n            return {\r\n                scheme: defaultScheme,\r\n                authority: undefined,\r\n                path: (0, uri_parser_1.uriToString)(target),\r\n            };\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    return target;\r\n}\r\n//# sourceMappingURL=resolver.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvcmVzb2x2ZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx3QkFBd0I7QUFDeEIsNkJBQTZCO0FBQzdCLHNCQUFzQjtBQUN0QiwyQkFBMkI7QUFDM0IsMkJBQTJCO0FBQzNCLHFCQUFxQixtQkFBTyxDQUFDLGdGQUFjO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUVBQW1FLHNDQUFzQztBQUN6RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsc0NBQXNDO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2RhbmlzaC1idWRkeS8uL25vZGVfbW9kdWxlcy9AZ3JwYy9ncnBjLWpzL2J1aWxkL3NyYy9yZXNvbHZlci5qcz9kNjlkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG4vKlxyXG4gKiBDb3B5cmlnaHQgMjAxOSBnUlBDIGF1dGhvcnMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKlxyXG4gKi9cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnJlZ2lzdGVyUmVzb2x2ZXIgPSByZWdpc3RlclJlc29sdmVyO1xyXG5leHBvcnRzLnJlZ2lzdGVyRGVmYXVsdFNjaGVtZSA9IHJlZ2lzdGVyRGVmYXVsdFNjaGVtZTtcclxuZXhwb3J0cy5jcmVhdGVSZXNvbHZlciA9IGNyZWF0ZVJlc29sdmVyO1xyXG5leHBvcnRzLmdldERlZmF1bHRBdXRob3JpdHkgPSBnZXREZWZhdWx0QXV0aG9yaXR5O1xyXG5leHBvcnRzLm1hcFVyaURlZmF1bHRTY2hlbWUgPSBtYXBVcmlEZWZhdWx0U2NoZW1lO1xyXG5jb25zdCB1cmlfcGFyc2VyXzEgPSByZXF1aXJlKFwiLi91cmktcGFyc2VyXCIpO1xyXG5jb25zdCByZWdpc3RlcmVkUmVzb2x2ZXJzID0ge307XHJcbmxldCBkZWZhdWx0U2NoZW1lID0gbnVsbDtcclxuLyoqXHJcbiAqIFJlZ2lzdGVyIGEgcmVzb2x2ZXIgY2xhc3MgdG8gaGFuZGxlIHRhcmdldCBuYW1lcyBwcmVmaXhlZCB3aXRoIHRoZSBgcHJlZml4YFxyXG4gKiBzdHJpbmcuIFRoaXMgcHJlZml4IHNob3VsZCBjb3JyZXNwb25kIHRvIGEgVVJJIHNjaGVtZSBuYW1lIGxpc3RlZCBpbiB0aGVcclxuICogW2dSUEMgTmFtZSBSZXNvbHV0aW9uIGRvY3VtZW50XShodHRwczovL2dpdGh1Yi5jb20vZ3JwYy9ncnBjL2Jsb2IvbWFzdGVyL2RvYy9uYW1pbmcubWQpXHJcbiAqIEBwYXJhbSBwcmVmaXhcclxuICogQHBhcmFtIHJlc29sdmVyQ2xhc3NcclxuICovXHJcbmZ1bmN0aW9uIHJlZ2lzdGVyUmVzb2x2ZXIoc2NoZW1lLCByZXNvbHZlckNsYXNzKSB7XHJcbiAgICByZWdpc3RlcmVkUmVzb2x2ZXJzW3NjaGVtZV0gPSByZXNvbHZlckNsYXNzO1xyXG59XHJcbi8qKlxyXG4gKiBSZWdpc3RlciBhIGRlZmF1bHQgcmVzb2x2ZXIgdG8gaGFuZGxlIHRhcmdldCBuYW1lcyB0aGF0IGRvIG5vdCBzdGFydCB3aXRoXHJcbiAqIGFueSByZWdpc3RlcmVkIHByZWZpeC5cclxuICogQHBhcmFtIHJlc29sdmVyQ2xhc3NcclxuICovXHJcbmZ1bmN0aW9uIHJlZ2lzdGVyRGVmYXVsdFNjaGVtZShzY2hlbWUpIHtcclxuICAgIGRlZmF1bHRTY2hlbWUgPSBzY2hlbWU7XHJcbn1cclxuLyoqXHJcbiAqIENyZWF0ZSBhIG5hbWUgcmVzb2x2ZXIgZm9yIHRoZSBzcGVjaWZpZWQgdGFyZ2V0LCBpZiBwb3NzaWJsZS4gVGhyb3dzIGFuXHJcbiAqIGVycm9yIGlmIG5vIHN1Y2ggbmFtZSByZXNvbHZlciBjYW4gYmUgY3JlYXRlZC5cclxuICogQHBhcmFtIHRhcmdldFxyXG4gKiBAcGFyYW0gbGlzdGVuZXJcclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZVJlc29sdmVyKHRhcmdldCwgbGlzdGVuZXIsIG9wdGlvbnMpIHtcclxuICAgIGlmICh0YXJnZXQuc2NoZW1lICE9PSB1bmRlZmluZWQgJiYgdGFyZ2V0LnNjaGVtZSBpbiByZWdpc3RlcmVkUmVzb2x2ZXJzKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyByZWdpc3RlcmVkUmVzb2x2ZXJzW3RhcmdldC5zY2hlbWVdKHRhcmdldCwgbGlzdGVuZXIsIG9wdGlvbnMpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyByZXNvbHZlciBjb3VsZCBiZSBjcmVhdGVkIGZvciB0YXJnZXQgJHsoMCwgdXJpX3BhcnNlcl8xLnVyaVRvU3RyaW5nKSh0YXJnZXQpfWApO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBHZXQgdGhlIGRlZmF1bHQgYXV0aG9yaXR5IGZvciB0aGUgc3BlY2lmaWVkIHRhcmdldCwgaWYgcG9zc2libGUuIFRocm93cyBhblxyXG4gKiBlcnJvciBpZiBubyByZWdpc3RlcmVkIG5hbWUgcmVzb2x2ZXIgY2FuIHBhcnNlIHRoYXQgdGFyZ2V0IHN0cmluZy5cclxuICogQHBhcmFtIHRhcmdldFxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0RGVmYXVsdEF1dGhvcml0eSh0YXJnZXQpIHtcclxuICAgIGlmICh0YXJnZXQuc2NoZW1lICE9PSB1bmRlZmluZWQgJiYgdGFyZ2V0LnNjaGVtZSBpbiByZWdpc3RlcmVkUmVzb2x2ZXJzKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlZ2lzdGVyZWRSZXNvbHZlcnNbdGFyZ2V0LnNjaGVtZV0uZ2V0RGVmYXVsdEF1dGhvcml0eSh0YXJnZXQpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHRhcmdldCAkeygwLCB1cmlfcGFyc2VyXzEudXJpVG9TdHJpbmcpKHRhcmdldCl9YCk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gbWFwVXJpRGVmYXVsdFNjaGVtZSh0YXJnZXQpIHtcclxuICAgIGlmICh0YXJnZXQuc2NoZW1lID09PSB1bmRlZmluZWQgfHwgISh0YXJnZXQuc2NoZW1lIGluIHJlZ2lzdGVyZWRSZXNvbHZlcnMpKSB7XHJcbiAgICAgICAgaWYgKGRlZmF1bHRTY2hlbWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHNjaGVtZTogZGVmYXVsdFNjaGVtZSxcclxuICAgICAgICAgICAgICAgIGF1dGhvcml0eTogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICAgICAgcGF0aDogKDAsIHVyaV9wYXJzZXJfMS51cmlUb1N0cmluZykodGFyZ2V0KSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0YXJnZXQ7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVzb2x2ZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/resolver.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/resolving-call.js":
/*!****************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/resolving-call.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2022 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ResolvingCall = void 0;\r\nconst call_credentials_1 = __webpack_require__(/*! ./call-credentials */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/call-credentials.js\");\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nconst deadline_1 = __webpack_require__(/*! ./deadline */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/deadline.js\");\r\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/metadata.js\");\r\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\r\nconst control_plane_status_1 = __webpack_require__(/*! ./control-plane-status */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/control-plane-status.js\");\r\nconst TRACER_NAME = 'resolving_call';\r\nclass ResolvingCall {\r\n    constructor(channel, method, options, filterStackFactory, callNumber) {\r\n        this.channel = channel;\r\n        this.method = method;\r\n        this.filterStackFactory = filterStackFactory;\r\n        this.callNumber = callNumber;\r\n        this.child = null;\r\n        this.readPending = false;\r\n        this.pendingMessage = null;\r\n        this.pendingHalfClose = false;\r\n        this.ended = false;\r\n        this.readFilterPending = false;\r\n        this.writeFilterPending = false;\r\n        this.pendingChildStatus = null;\r\n        this.metadata = null;\r\n        this.listener = null;\r\n        this.statusWatchers = [];\r\n        this.deadlineTimer = setTimeout(() => { }, 0);\r\n        this.filterStack = null;\r\n        this.deadlineStartTime = null;\r\n        this.configReceivedTime = null;\r\n        this.childStartTime = null;\r\n        /**\r\n         * Credentials configured for this specific call. Does not include\r\n         * call credentials associated with the channel credentials used to create\r\n         * the channel.\r\n         */\r\n        this.credentials = call_credentials_1.CallCredentials.createEmpty();\r\n        this.deadline = options.deadline;\r\n        this.host = options.host;\r\n        if (options.parentCall) {\r\n            if (options.flags & constants_1.Propagate.CANCELLATION) {\r\n                options.parentCall.on('cancelled', () => {\r\n                    this.cancelWithStatus(constants_1.Status.CANCELLED, 'Cancelled by parent call');\r\n                });\r\n            }\r\n            if (options.flags & constants_1.Propagate.DEADLINE) {\r\n                this.trace('Propagating deadline from parent: ' +\r\n                    options.parentCall.getDeadline());\r\n                this.deadline = (0, deadline_1.minDeadline)(this.deadline, options.parentCall.getDeadline());\r\n            }\r\n        }\r\n        this.trace('Created');\r\n        this.runDeadlineTimer();\r\n    }\r\n    trace(text) {\r\n        logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, '[' + this.callNumber + '] ' + text);\r\n    }\r\n    runDeadlineTimer() {\r\n        clearTimeout(this.deadlineTimer);\r\n        this.deadlineStartTime = new Date();\r\n        this.trace('Deadline: ' + (0, deadline_1.deadlineToString)(this.deadline));\r\n        const timeout = (0, deadline_1.getRelativeTimeout)(this.deadline);\r\n        if (timeout !== Infinity) {\r\n            this.trace('Deadline will be reached in ' + timeout + 'ms');\r\n            const handleDeadline = () => {\r\n                if (!this.deadlineStartTime) {\r\n                    this.cancelWithStatus(constants_1.Status.DEADLINE_EXCEEDED, 'Deadline exceeded');\r\n                    return;\r\n                }\r\n                const deadlineInfo = [];\r\n                const deadlineEndTime = new Date();\r\n                deadlineInfo.push(`Deadline exceeded after ${(0, deadline_1.formatDateDifference)(this.deadlineStartTime, deadlineEndTime)}`);\r\n                if (this.configReceivedTime) {\r\n                    if (this.configReceivedTime > this.deadlineStartTime) {\r\n                        deadlineInfo.push(`name resolution: ${(0, deadline_1.formatDateDifference)(this.deadlineStartTime, this.configReceivedTime)}`);\r\n                    }\r\n                    if (this.childStartTime) {\r\n                        if (this.childStartTime > this.configReceivedTime) {\r\n                            deadlineInfo.push(`metadata filters: ${(0, deadline_1.formatDateDifference)(this.configReceivedTime, this.childStartTime)}`);\r\n                        }\r\n                    }\r\n                    else {\r\n                        deadlineInfo.push('waiting for metadata filters');\r\n                    }\r\n                }\r\n                else {\r\n                    deadlineInfo.push('waiting for name resolution');\r\n                }\r\n                if (this.child) {\r\n                    deadlineInfo.push(...this.child.getDeadlineInfo());\r\n                }\r\n                this.cancelWithStatus(constants_1.Status.DEADLINE_EXCEEDED, deadlineInfo.join(','));\r\n            };\r\n            if (timeout <= 0) {\r\n                process.nextTick(handleDeadline);\r\n            }\r\n            else {\r\n                this.deadlineTimer = setTimeout(handleDeadline, timeout);\r\n            }\r\n        }\r\n    }\r\n    outputStatus(status) {\r\n        if (!this.ended) {\r\n            this.ended = true;\r\n            if (!this.filterStack) {\r\n                this.filterStack = this.filterStackFactory.createFilter();\r\n            }\r\n            clearTimeout(this.deadlineTimer);\r\n            const filteredStatus = this.filterStack.receiveTrailers(status);\r\n            this.trace('ended with status: code=' +\r\n                filteredStatus.code +\r\n                ' details=\"' +\r\n                filteredStatus.details +\r\n                '\"');\r\n            this.statusWatchers.forEach(watcher => watcher(filteredStatus));\r\n            process.nextTick(() => {\r\n                var _a;\r\n                (_a = this.listener) === null || _a === void 0 ? void 0 : _a.onReceiveStatus(filteredStatus);\r\n            });\r\n        }\r\n    }\r\n    sendMessageOnChild(context, message) {\r\n        if (!this.child) {\r\n            throw new Error('sendMessageonChild called with child not populated');\r\n        }\r\n        const child = this.child;\r\n        this.writeFilterPending = true;\r\n        this.filterStack.sendMessage(Promise.resolve({ message: message, flags: context.flags })).then(filteredMessage => {\r\n            this.writeFilterPending = false;\r\n            child.sendMessageWithContext(context, filteredMessage.message);\r\n            if (this.pendingHalfClose) {\r\n                child.halfClose();\r\n            }\r\n        }, (status) => {\r\n            this.cancelWithStatus(status.code, status.details);\r\n        });\r\n    }\r\n    getConfig() {\r\n        if (this.ended) {\r\n            return;\r\n        }\r\n        if (!this.metadata || !this.listener) {\r\n            throw new Error('getConfig called before start');\r\n        }\r\n        const configResult = this.channel.getConfig(this.method, this.metadata);\r\n        if (configResult.type === 'NONE') {\r\n            this.channel.queueCallForConfig(this);\r\n            return;\r\n        }\r\n        else if (configResult.type === 'ERROR') {\r\n            if (this.metadata.getOptions().waitForReady) {\r\n                this.channel.queueCallForConfig(this);\r\n            }\r\n            else {\r\n                this.outputStatus(configResult.error);\r\n            }\r\n            return;\r\n        }\r\n        // configResult.type === 'SUCCESS'\r\n        this.configReceivedTime = new Date();\r\n        const config = configResult.config;\r\n        if (config.status !== constants_1.Status.OK) {\r\n            const { code, details } = (0, control_plane_status_1.restrictControlPlaneStatusCode)(config.status, 'Failed to route call to method ' + this.method);\r\n            this.outputStatus({\r\n                code: code,\r\n                details: details,\r\n                metadata: new metadata_1.Metadata(),\r\n            });\r\n            return;\r\n        }\r\n        if (config.methodConfig.timeout) {\r\n            const configDeadline = new Date();\r\n            configDeadline.setSeconds(configDeadline.getSeconds() + config.methodConfig.timeout.seconds);\r\n            configDeadline.setMilliseconds(configDeadline.getMilliseconds() +\r\n                config.methodConfig.timeout.nanos / 1000000);\r\n            this.deadline = (0, deadline_1.minDeadline)(this.deadline, configDeadline);\r\n            this.runDeadlineTimer();\r\n        }\r\n        this.filterStackFactory.push(config.dynamicFilterFactories);\r\n        this.filterStack = this.filterStackFactory.createFilter();\r\n        this.filterStack.sendMetadata(Promise.resolve(this.metadata)).then(filteredMetadata => {\r\n            this.child = this.channel.createRetryingCall(config, this.method, this.host, this.credentials, this.deadline);\r\n            this.trace('Created child [' + this.child.getCallNumber() + ']');\r\n            this.childStartTime = new Date();\r\n            this.child.start(filteredMetadata, {\r\n                onReceiveMetadata: metadata => {\r\n                    this.trace('Received metadata');\r\n                    this.listener.onReceiveMetadata(this.filterStack.receiveMetadata(metadata));\r\n                },\r\n                onReceiveMessage: message => {\r\n                    this.trace('Received message');\r\n                    this.readFilterPending = true;\r\n                    this.filterStack.receiveMessage(message).then(filteredMesssage => {\r\n                        this.trace('Finished filtering received message');\r\n                        this.readFilterPending = false;\r\n                        this.listener.onReceiveMessage(filteredMesssage);\r\n                        if (this.pendingChildStatus) {\r\n                            this.outputStatus(this.pendingChildStatus);\r\n                        }\r\n                    }, (status) => {\r\n                        this.cancelWithStatus(status.code, status.details);\r\n                    });\r\n                },\r\n                onReceiveStatus: status => {\r\n                    this.trace('Received status');\r\n                    if (this.readFilterPending) {\r\n                        this.pendingChildStatus = status;\r\n                    }\r\n                    else {\r\n                        this.outputStatus(status);\r\n                    }\r\n                },\r\n            });\r\n            if (this.readPending) {\r\n                this.child.startRead();\r\n            }\r\n            if (this.pendingMessage) {\r\n                this.sendMessageOnChild(this.pendingMessage.context, this.pendingMessage.message);\r\n            }\r\n            else if (this.pendingHalfClose) {\r\n                this.child.halfClose();\r\n            }\r\n        }, (status) => {\r\n            this.outputStatus(status);\r\n        });\r\n    }\r\n    reportResolverError(status) {\r\n        var _a;\r\n        if ((_a = this.metadata) === null || _a === void 0 ? void 0 : _a.getOptions().waitForReady) {\r\n            this.channel.queueCallForConfig(this);\r\n        }\r\n        else {\r\n            this.outputStatus(status);\r\n        }\r\n    }\r\n    cancelWithStatus(status, details) {\r\n        var _a;\r\n        this.trace('cancelWithStatus code: ' + status + ' details: \"' + details + '\"');\r\n        (_a = this.child) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(status, details);\r\n        this.outputStatus({\r\n            code: status,\r\n            details: details,\r\n            metadata: new metadata_1.Metadata(),\r\n        });\r\n    }\r\n    getPeer() {\r\n        var _a, _b;\r\n        return (_b = (_a = this.child) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : this.channel.getTarget();\r\n    }\r\n    start(metadata, listener) {\r\n        this.trace('start called');\r\n        this.metadata = metadata.clone();\r\n        this.listener = listener;\r\n        this.getConfig();\r\n    }\r\n    sendMessageWithContext(context, message) {\r\n        this.trace('write() called with message of length ' + message.length);\r\n        if (this.child) {\r\n            this.sendMessageOnChild(context, message);\r\n        }\r\n        else {\r\n            this.pendingMessage = { context, message };\r\n        }\r\n    }\r\n    startRead() {\r\n        this.trace('startRead called');\r\n        if (this.child) {\r\n            this.child.startRead();\r\n        }\r\n        else {\r\n            this.readPending = true;\r\n        }\r\n    }\r\n    halfClose() {\r\n        this.trace('halfClose called');\r\n        if (this.child && !this.writeFilterPending) {\r\n            this.child.halfClose();\r\n        }\r\n        else {\r\n            this.pendingHalfClose = true;\r\n        }\r\n    }\r\n    setCredentials(credentials) {\r\n        this.credentials = credentials;\r\n    }\r\n    addStatusWatcher(watcher) {\r\n        this.statusWatchers.push(watcher);\r\n    }\r\n    getCallNumber() {\r\n        return this.callNumber;\r\n    }\r\n}\r\nexports.ResolvingCall = ResolvingCall;\r\n//# sourceMappingURL=resolving-call.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/resolving-call.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/resolving-load-balancer.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/resolving-load-balancer.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ResolvingLoadBalancer = void 0;\r\nconst load_balancer_1 = __webpack_require__(/*! ./load-balancer */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/load-balancer.js\");\r\nconst service_config_1 = __webpack_require__(/*! ./service-config */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/service-config.js\");\r\nconst connectivity_state_1 = __webpack_require__(/*! ./connectivity-state */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/connectivity-state.js\");\r\nconst resolver_1 = __webpack_require__(/*! ./resolver */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/resolver.js\");\r\nconst picker_1 = __webpack_require__(/*! ./picker */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/picker.js\");\r\nconst backoff_timeout_1 = __webpack_require__(/*! ./backoff-timeout */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/backoff-timeout.js\");\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/metadata.js\");\r\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\r\nconst constants_2 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\r\nconst load_balancer_child_handler_1 = __webpack_require__(/*! ./load-balancer-child-handler */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/load-balancer-child-handler.js\");\r\nconst TRACER_NAME = 'resolving_load_balancer';\r\nfunction trace(text) {\r\n    logging.trace(constants_2.LogVerbosity.DEBUG, TRACER_NAME, text);\r\n}\r\n/**\r\n * Name match levels in order from most to least specific. This is the order in\r\n * which searches will be performed.\r\n */\r\nconst NAME_MATCH_LEVEL_ORDER = [\r\n    'SERVICE_AND_METHOD',\r\n    'SERVICE',\r\n    'EMPTY',\r\n];\r\nfunction hasMatchingName(service, method, methodConfig, matchLevel) {\r\n    for (const name of methodConfig.name) {\r\n        switch (matchLevel) {\r\n            case 'EMPTY':\r\n                if (!name.service && !name.method) {\r\n                    return true;\r\n                }\r\n                break;\r\n            case 'SERVICE':\r\n                if (name.service === service && !name.method) {\r\n                    return true;\r\n                }\r\n                break;\r\n            case 'SERVICE_AND_METHOD':\r\n                if (name.service === service && name.method === method) {\r\n                    return true;\r\n                }\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction findMatchingConfig(service, method, methodConfigs, matchLevel) {\r\n    for (const config of methodConfigs) {\r\n        if (hasMatchingName(service, method, config, matchLevel)) {\r\n            return config;\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction getDefaultConfigSelector(serviceConfig) {\r\n    return {\r\n        invoke(methodName, metadata) {\r\n            var _a, _b;\r\n            const splitName = methodName.split('/').filter(x => x.length > 0);\r\n            const service = (_a = splitName[0]) !== null && _a !== void 0 ? _a : '';\r\n            const method = (_b = splitName[1]) !== null && _b !== void 0 ? _b : '';\r\n            if (serviceConfig && serviceConfig.methodConfig) {\r\n                /* Check for the following in order, and return the first method\r\n                * config that matches:\r\n                * 1. A name that exactly matches the service and method\r\n                * 2. A name with no method set that matches the service\r\n                * 3. An empty name\r\n                */\r\n                for (const matchLevel of NAME_MATCH_LEVEL_ORDER) {\r\n                    const matchingConfig = findMatchingConfig(service, method, serviceConfig.methodConfig, matchLevel);\r\n                    if (matchingConfig) {\r\n                        return {\r\n                            methodConfig: matchingConfig,\r\n                            pickInformation: {},\r\n                            status: constants_1.Status.OK,\r\n                            dynamicFilterFactories: [],\r\n                        };\r\n                    }\r\n                }\r\n            }\r\n            return {\r\n                methodConfig: { name: [] },\r\n                pickInformation: {},\r\n                status: constants_1.Status.OK,\r\n                dynamicFilterFactories: [],\r\n            };\r\n        },\r\n        unref() { }\r\n    };\r\n}\r\nclass ResolvingLoadBalancer {\r\n    /**\r\n     * Wrapper class that behaves like a `LoadBalancer` and also handles name\r\n     * resolution internally.\r\n     * @param target The address of the backend to connect to.\r\n     * @param channelControlHelper `ChannelControlHelper` instance provided by\r\n     *     this load balancer's owner.\r\n     * @param defaultServiceConfig The default service configuration to be used\r\n     *     if none is provided by the name resolver. A `null` value indicates\r\n     *     that the default behavior should be the default unconfigured behavior.\r\n     *     In practice, that means using the \"pick first\" load balancer\r\n     *     implmentation\r\n     */\r\n    constructor(target, channelControlHelper, channelOptions, onSuccessfulResolution, onFailedResolution) {\r\n        this.target = target;\r\n        this.channelControlHelper = channelControlHelper;\r\n        this.channelOptions = channelOptions;\r\n        this.onSuccessfulResolution = onSuccessfulResolution;\r\n        this.onFailedResolution = onFailedResolution;\r\n        this.latestChildState = connectivity_state_1.ConnectivityState.IDLE;\r\n        this.latestChildPicker = new picker_1.QueuePicker(this);\r\n        this.latestChildErrorMessage = null;\r\n        /**\r\n         * This resolving load balancer's current connectivity state.\r\n         */\r\n        this.currentState = connectivity_state_1.ConnectivityState.IDLE;\r\n        /**\r\n         * The service config object from the last successful resolution, if\r\n         * available. A value of null indicates that we have not yet received a valid\r\n         * service config from the resolver.\r\n         */\r\n        this.previousServiceConfig = null;\r\n        /**\r\n         * Indicates whether we should attempt to resolve again after the backoff\r\n         * timer runs out.\r\n         */\r\n        this.continueResolving = false;\r\n        if (channelOptions['grpc.service_config']) {\r\n            this.defaultServiceConfig = (0, service_config_1.validateServiceConfig)(JSON.parse(channelOptions['grpc.service_config']));\r\n        }\r\n        else {\r\n            this.defaultServiceConfig = {\r\n                loadBalancingConfig: [],\r\n                methodConfig: [],\r\n            };\r\n        }\r\n        this.updateState(connectivity_state_1.ConnectivityState.IDLE, new picker_1.QueuePicker(this), null);\r\n        this.childLoadBalancer = new load_balancer_child_handler_1.ChildLoadBalancerHandler({\r\n            createSubchannel: channelControlHelper.createSubchannel.bind(channelControlHelper),\r\n            requestReresolution: () => {\r\n                /* If the backoffTimeout is running, we're still backing off from\r\n                 * making resolve requests, so we shouldn't make another one here.\r\n                 * In that case, the backoff timer callback will call\r\n                 * updateResolution */\r\n                if (this.backoffTimeout.isRunning()) {\r\n                    trace('requestReresolution delayed by backoff timer until ' +\r\n                        this.backoffTimeout.getEndTime().toISOString());\r\n                    this.continueResolving = true;\r\n                }\r\n                else {\r\n                    this.updateResolution();\r\n                }\r\n            },\r\n            updateState: (newState, picker, errorMessage) => {\r\n                this.latestChildState = newState;\r\n                this.latestChildPicker = picker;\r\n                this.latestChildErrorMessage = errorMessage;\r\n                this.updateState(newState, picker, errorMessage);\r\n            },\r\n            addChannelzChild: channelControlHelper.addChannelzChild.bind(channelControlHelper),\r\n            removeChannelzChild: channelControlHelper.removeChannelzChild.bind(channelControlHelper),\r\n        });\r\n        this.innerResolver = (0, resolver_1.createResolver)(target, {\r\n            onSuccessfulResolution: (endpointList, serviceConfig, serviceConfigError, configSelector, attributes) => {\r\n                var _a;\r\n                this.backoffTimeout.stop();\r\n                this.backoffTimeout.reset();\r\n                let workingServiceConfig = null;\r\n                /* This first group of conditionals implements the algorithm described\r\n                 * in https://github.com/grpc/proposal/blob/master/A21-service-config-error-handling.md\r\n                 * in the section called \"Behavior on receiving a new gRPC Config\".\r\n                 */\r\n                if (serviceConfig === null) {\r\n                    // Step 4 and 5\r\n                    if (serviceConfigError === null) {\r\n                        // Step 5\r\n                        this.previousServiceConfig = null;\r\n                        workingServiceConfig = this.defaultServiceConfig;\r\n                    }\r\n                    else {\r\n                        // Step 4\r\n                        if (this.previousServiceConfig === null) {\r\n                            // Step 4.ii\r\n                            this.handleResolutionFailure(serviceConfigError);\r\n                        }\r\n                        else {\r\n                            // Step 4.i\r\n                            workingServiceConfig = this.previousServiceConfig;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    // Step 3\r\n                    workingServiceConfig = serviceConfig;\r\n                    this.previousServiceConfig = serviceConfig;\r\n                }\r\n                const workingConfigList = (_a = workingServiceConfig === null || workingServiceConfig === void 0 ? void 0 : workingServiceConfig.loadBalancingConfig) !== null && _a !== void 0 ? _a : [];\r\n                const loadBalancingConfig = (0, load_balancer_1.selectLbConfigFromList)(workingConfigList, true);\r\n                if (loadBalancingConfig === null) {\r\n                    // There were load balancing configs but none are supported. This counts as a resolution failure\r\n                    this.handleResolutionFailure({\r\n                        code: constants_1.Status.UNAVAILABLE,\r\n                        details: 'All load balancer options in service config are not compatible',\r\n                        metadata: new metadata_1.Metadata(),\r\n                    });\r\n                    configSelector === null || configSelector === void 0 ? void 0 : configSelector.unref();\r\n                    return;\r\n                }\r\n                this.childLoadBalancer.updateAddressList(endpointList, loadBalancingConfig, Object.assign(Object.assign({}, this.channelOptions), attributes));\r\n                const finalServiceConfig = workingServiceConfig !== null && workingServiceConfig !== void 0 ? workingServiceConfig : this.defaultServiceConfig;\r\n                this.onSuccessfulResolution(finalServiceConfig, configSelector !== null && configSelector !== void 0 ? configSelector : getDefaultConfigSelector(finalServiceConfig));\r\n            },\r\n            onError: (error) => {\r\n                this.handleResolutionFailure(error);\r\n            },\r\n        }, channelOptions);\r\n        const backoffOptions = {\r\n            initialDelay: channelOptions['grpc.initial_reconnect_backoff_ms'],\r\n            maxDelay: channelOptions['grpc.max_reconnect_backoff_ms'],\r\n        };\r\n        this.backoffTimeout = new backoff_timeout_1.BackoffTimeout(() => {\r\n            if (this.continueResolving) {\r\n                this.updateResolution();\r\n                this.continueResolving = false;\r\n            }\r\n            else {\r\n                this.updateState(this.latestChildState, this.latestChildPicker, this.latestChildErrorMessage);\r\n            }\r\n        }, backoffOptions);\r\n        this.backoffTimeout.unref();\r\n    }\r\n    updateResolution() {\r\n        this.innerResolver.updateResolution();\r\n        if (this.currentState === connectivity_state_1.ConnectivityState.IDLE) {\r\n            /* this.latestChildPicker is initialized as new QueuePicker(this), which\r\n             * is an appropriate value here if the child LB policy is unset.\r\n             * Otherwise, we want to delegate to the child here, in case that\r\n             * triggers something. */\r\n            this.updateState(connectivity_state_1.ConnectivityState.CONNECTING, this.latestChildPicker, this.latestChildErrorMessage);\r\n        }\r\n        this.backoffTimeout.runOnce();\r\n    }\r\n    updateState(connectivityState, picker, errorMessage) {\r\n        trace((0, uri_parser_1.uriToString)(this.target) +\r\n            ' ' +\r\n            connectivity_state_1.ConnectivityState[this.currentState] +\r\n            ' -> ' +\r\n            connectivity_state_1.ConnectivityState[connectivityState]);\r\n        // Ensure that this.exitIdle() is called by the picker\r\n        if (connectivityState === connectivity_state_1.ConnectivityState.IDLE) {\r\n            picker = new picker_1.QueuePicker(this, picker);\r\n        }\r\n        this.currentState = connectivityState;\r\n        this.channelControlHelper.updateState(connectivityState, picker, errorMessage);\r\n    }\r\n    handleResolutionFailure(error) {\r\n        if (this.latestChildState === connectivity_state_1.ConnectivityState.IDLE) {\r\n            this.updateState(connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE, new picker_1.UnavailablePicker(error), error.details);\r\n            this.onFailedResolution(error);\r\n        }\r\n    }\r\n    exitIdle() {\r\n        if (this.currentState === connectivity_state_1.ConnectivityState.IDLE ||\r\n            this.currentState === connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) {\r\n            if (this.backoffTimeout.isRunning()) {\r\n                this.continueResolving = true;\r\n            }\r\n            else {\r\n                this.updateResolution();\r\n            }\r\n        }\r\n        this.childLoadBalancer.exitIdle();\r\n    }\r\n    updateAddressList(endpointList, lbConfig) {\r\n        throw new Error('updateAddressList not supported on ResolvingLoadBalancer');\r\n    }\r\n    resetBackoff() {\r\n        this.backoffTimeout.reset();\r\n        this.childLoadBalancer.resetBackoff();\r\n    }\r\n    destroy() {\r\n        this.childLoadBalancer.destroy();\r\n        this.innerResolver.destroy();\r\n        this.backoffTimeout.reset();\r\n        this.backoffTimeout.stop();\r\n        this.latestChildState = connectivity_state_1.ConnectivityState.IDLE;\r\n        this.latestChildPicker = new picker_1.QueuePicker(this);\r\n        this.currentState = connectivity_state_1.ConnectivityState.IDLE;\r\n        this.previousServiceConfig = null;\r\n        this.continueResolving = false;\r\n    }\r\n    getTypeName() {\r\n        return 'resolving_load_balancer';\r\n    }\r\n}\r\nexports.ResolvingLoadBalancer = ResolvingLoadBalancer;\r\n//# sourceMappingURL=resolving-load-balancer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/resolving-load-balancer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/retrying-call.js":
/*!***************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/retrying-call.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2022 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.RetryingCall = exports.MessageBufferTracker = exports.RetryThrottler = void 0;\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nconst deadline_1 = __webpack_require__(/*! ./deadline */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/deadline.js\");\r\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/metadata.js\");\r\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\r\nconst TRACER_NAME = 'retrying_call';\r\nclass RetryThrottler {\r\n    constructor(maxTokens, tokenRatio, previousRetryThrottler) {\r\n        this.maxTokens = maxTokens;\r\n        this.tokenRatio = tokenRatio;\r\n        if (previousRetryThrottler) {\r\n            /* When carrying over tokens from a previous config, rescale them to the\r\n             * new max value */\r\n            this.tokens =\r\n                previousRetryThrottler.tokens *\r\n                    (maxTokens / previousRetryThrottler.maxTokens);\r\n        }\r\n        else {\r\n            this.tokens = maxTokens;\r\n        }\r\n    }\r\n    addCallSucceeded() {\r\n        this.tokens = Math.min(this.tokens + this.tokenRatio, this.maxTokens);\r\n    }\r\n    addCallFailed() {\r\n        this.tokens = Math.max(this.tokens - 1, 0);\r\n    }\r\n    canRetryCall() {\r\n        return this.tokens > (this.maxTokens / 2);\r\n    }\r\n}\r\nexports.RetryThrottler = RetryThrottler;\r\nclass MessageBufferTracker {\r\n    constructor(totalLimit, limitPerCall) {\r\n        this.totalLimit = totalLimit;\r\n        this.limitPerCall = limitPerCall;\r\n        this.totalAllocated = 0;\r\n        this.allocatedPerCall = new Map();\r\n    }\r\n    allocate(size, callId) {\r\n        var _a;\r\n        const currentPerCall = (_a = this.allocatedPerCall.get(callId)) !== null && _a !== void 0 ? _a : 0;\r\n        if (this.limitPerCall - currentPerCall < size ||\r\n            this.totalLimit - this.totalAllocated < size) {\r\n            return false;\r\n        }\r\n        this.allocatedPerCall.set(callId, currentPerCall + size);\r\n        this.totalAllocated += size;\r\n        return true;\r\n    }\r\n    free(size, callId) {\r\n        var _a;\r\n        if (this.totalAllocated < size) {\r\n            throw new Error(`Invalid buffer allocation state: call ${callId} freed ${size} > total allocated ${this.totalAllocated}`);\r\n        }\r\n        this.totalAllocated -= size;\r\n        const currentPerCall = (_a = this.allocatedPerCall.get(callId)) !== null && _a !== void 0 ? _a : 0;\r\n        if (currentPerCall < size) {\r\n            throw new Error(`Invalid buffer allocation state: call ${callId} freed ${size} > allocated for call ${currentPerCall}`);\r\n        }\r\n        this.allocatedPerCall.set(callId, currentPerCall - size);\r\n    }\r\n    freeAll(callId) {\r\n        var _a;\r\n        const currentPerCall = (_a = this.allocatedPerCall.get(callId)) !== null && _a !== void 0 ? _a : 0;\r\n        if (this.totalAllocated < currentPerCall) {\r\n            throw new Error(`Invalid buffer allocation state: call ${callId} allocated ${currentPerCall} > total allocated ${this.totalAllocated}`);\r\n        }\r\n        this.totalAllocated -= currentPerCall;\r\n        this.allocatedPerCall.delete(callId);\r\n    }\r\n}\r\nexports.MessageBufferTracker = MessageBufferTracker;\r\nconst PREVIONS_RPC_ATTEMPTS_METADATA_KEY = 'grpc-previous-rpc-attempts';\r\nconst DEFAULT_MAX_ATTEMPTS_LIMIT = 5;\r\nclass RetryingCall {\r\n    constructor(channel, callConfig, methodName, host, credentials, deadline, callNumber, bufferTracker, retryThrottler) {\r\n        var _a;\r\n        this.channel = channel;\r\n        this.callConfig = callConfig;\r\n        this.methodName = methodName;\r\n        this.host = host;\r\n        this.credentials = credentials;\r\n        this.deadline = deadline;\r\n        this.callNumber = callNumber;\r\n        this.bufferTracker = bufferTracker;\r\n        this.retryThrottler = retryThrottler;\r\n        this.listener = null;\r\n        this.initialMetadata = null;\r\n        this.underlyingCalls = [];\r\n        this.writeBuffer = [];\r\n        /**\r\n         * The offset of message indices in the writeBuffer. For example, if\r\n         * writeBufferOffset is 10, message 10 is in writeBuffer[0] and message 15\r\n         * is in writeBuffer[5].\r\n         */\r\n        this.writeBufferOffset = 0;\r\n        /**\r\n         * Tracks whether a read has been started, so that we know whether to start\r\n         * reads on new child calls. This only matters for the first read, because\r\n         * once a message comes in the child call becomes committed and there will\r\n         * be no new child calls.\r\n         */\r\n        this.readStarted = false;\r\n        this.transparentRetryUsed = false;\r\n        /**\r\n         * Number of attempts so far\r\n         */\r\n        this.attempts = 0;\r\n        this.hedgingTimer = null;\r\n        this.committedCallIndex = null;\r\n        this.initialRetryBackoffSec = 0;\r\n        this.nextRetryBackoffSec = 0;\r\n        const maxAttemptsLimit = (_a = channel.getOptions()['grpc-node.retry_max_attempts_limit']) !== null && _a !== void 0 ? _a : DEFAULT_MAX_ATTEMPTS_LIMIT;\r\n        if (channel.getOptions()['grpc.enable_retries'] === 0) {\r\n            this.state = 'NO_RETRY';\r\n            this.maxAttempts = 1;\r\n        }\r\n        else if (callConfig.methodConfig.retryPolicy) {\r\n            this.state = 'RETRY';\r\n            const retryPolicy = callConfig.methodConfig.retryPolicy;\r\n            this.nextRetryBackoffSec = this.initialRetryBackoffSec = Number(retryPolicy.initialBackoff.substring(0, retryPolicy.initialBackoff.length - 1));\r\n            this.maxAttempts = Math.min(retryPolicy.maxAttempts, maxAttemptsLimit);\r\n        }\r\n        else if (callConfig.methodConfig.hedgingPolicy) {\r\n            this.state = 'HEDGING';\r\n            this.maxAttempts = Math.min(callConfig.methodConfig.hedgingPolicy.maxAttempts, maxAttemptsLimit);\r\n        }\r\n        else {\r\n            this.state = 'TRANSPARENT_ONLY';\r\n            this.maxAttempts = 1;\r\n        }\r\n        this.startTime = new Date();\r\n    }\r\n    getDeadlineInfo() {\r\n        if (this.underlyingCalls.length === 0) {\r\n            return [];\r\n        }\r\n        const deadlineInfo = [];\r\n        const latestCall = this.underlyingCalls[this.underlyingCalls.length - 1];\r\n        if (this.underlyingCalls.length > 1) {\r\n            deadlineInfo.push(`previous attempts: ${this.underlyingCalls.length - 1}`);\r\n        }\r\n        if (latestCall.startTime > this.startTime) {\r\n            deadlineInfo.push(`time to current attempt start: ${(0, deadline_1.formatDateDifference)(this.startTime, latestCall.startTime)}`);\r\n        }\r\n        deadlineInfo.push(...latestCall.call.getDeadlineInfo());\r\n        return deadlineInfo;\r\n    }\r\n    getCallNumber() {\r\n        return this.callNumber;\r\n    }\r\n    trace(text) {\r\n        logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, '[' + this.callNumber + '] ' + text);\r\n    }\r\n    reportStatus(statusObject) {\r\n        this.trace('ended with status: code=' +\r\n            statusObject.code +\r\n            ' details=\"' +\r\n            statusObject.details +\r\n            '\" start time=' +\r\n            this.startTime.toISOString());\r\n        this.bufferTracker.freeAll(this.callNumber);\r\n        this.writeBufferOffset = this.writeBufferOffset + this.writeBuffer.length;\r\n        this.writeBuffer = [];\r\n        process.nextTick(() => {\r\n            var _a;\r\n            // Explicitly construct status object to remove progress field\r\n            (_a = this.listener) === null || _a === void 0 ? void 0 : _a.onReceiveStatus({\r\n                code: statusObject.code,\r\n                details: statusObject.details,\r\n                metadata: statusObject.metadata,\r\n            });\r\n        });\r\n    }\r\n    cancelWithStatus(status, details) {\r\n        this.trace('cancelWithStatus code: ' + status + ' details: \"' + details + '\"');\r\n        this.reportStatus({ code: status, details, metadata: new metadata_1.Metadata() });\r\n        for (const { call } of this.underlyingCalls) {\r\n            call.cancelWithStatus(status, details);\r\n        }\r\n    }\r\n    getPeer() {\r\n        if (this.committedCallIndex !== null) {\r\n            return this.underlyingCalls[this.committedCallIndex].call.getPeer();\r\n        }\r\n        else {\r\n            return 'unknown';\r\n        }\r\n    }\r\n    getBufferEntry(messageIndex) {\r\n        var _a;\r\n        return ((_a = this.writeBuffer[messageIndex - this.writeBufferOffset]) !== null && _a !== void 0 ? _a : {\r\n            entryType: 'FREED',\r\n            allocated: false,\r\n        });\r\n    }\r\n    getNextBufferIndex() {\r\n        return this.writeBufferOffset + this.writeBuffer.length;\r\n    }\r\n    clearSentMessages() {\r\n        if (this.state !== 'COMMITTED') {\r\n            return;\r\n        }\r\n        let earliestNeededMessageIndex;\r\n        if (this.underlyingCalls[this.committedCallIndex].state === 'COMPLETED') {\r\n            /* If the committed call is completed, clear all messages, even if some\r\n             * have not been sent. */\r\n            earliestNeededMessageIndex = this.getNextBufferIndex();\r\n        }\r\n        else {\r\n            earliestNeededMessageIndex =\r\n                this.underlyingCalls[this.committedCallIndex].nextMessageToSend;\r\n        }\r\n        for (let messageIndex = this.writeBufferOffset; messageIndex < earliestNeededMessageIndex; messageIndex++) {\r\n            const bufferEntry = this.getBufferEntry(messageIndex);\r\n            if (bufferEntry.allocated) {\r\n                this.bufferTracker.free(bufferEntry.message.message.length, this.callNumber);\r\n            }\r\n        }\r\n        this.writeBuffer = this.writeBuffer.slice(earliestNeededMessageIndex - this.writeBufferOffset);\r\n        this.writeBufferOffset = earliestNeededMessageIndex;\r\n    }\r\n    commitCall(index) {\r\n        var _a, _b;\r\n        if (this.state === 'COMMITTED') {\r\n            return;\r\n        }\r\n        this.trace('Committing call [' +\r\n            this.underlyingCalls[index].call.getCallNumber() +\r\n            '] at index ' +\r\n            index);\r\n        this.state = 'COMMITTED';\r\n        (_b = (_a = this.callConfig).onCommitted) === null || _b === void 0 ? void 0 : _b.call(_a);\r\n        this.committedCallIndex = index;\r\n        for (let i = 0; i < this.underlyingCalls.length; i++) {\r\n            if (i === index) {\r\n                continue;\r\n            }\r\n            if (this.underlyingCalls[i].state === 'COMPLETED') {\r\n                continue;\r\n            }\r\n            this.underlyingCalls[i].state = 'COMPLETED';\r\n            this.underlyingCalls[i].call.cancelWithStatus(constants_1.Status.CANCELLED, 'Discarded in favor of other hedged attempt');\r\n        }\r\n        this.clearSentMessages();\r\n    }\r\n    commitCallWithMostMessages() {\r\n        if (this.state === 'COMMITTED') {\r\n            return;\r\n        }\r\n        let mostMessages = -1;\r\n        let callWithMostMessages = -1;\r\n        for (const [index, childCall] of this.underlyingCalls.entries()) {\r\n            if (childCall.state === 'ACTIVE' &&\r\n                childCall.nextMessageToSend > mostMessages) {\r\n                mostMessages = childCall.nextMessageToSend;\r\n                callWithMostMessages = index;\r\n            }\r\n        }\r\n        if (callWithMostMessages === -1) {\r\n            /* There are no active calls, disable retries to force the next call that\r\n             * is started to be committed. */\r\n            this.state = 'TRANSPARENT_ONLY';\r\n        }\r\n        else {\r\n            this.commitCall(callWithMostMessages);\r\n        }\r\n    }\r\n    isStatusCodeInList(list, code) {\r\n        return list.some(value => {\r\n            var _a;\r\n            return value === code ||\r\n                value.toString().toLowerCase() === ((_a = constants_1.Status[code]) === null || _a === void 0 ? void 0 : _a.toLowerCase());\r\n        });\r\n    }\r\n    getNextRetryBackoffMs() {\r\n        var _a;\r\n        const retryPolicy = (_a = this.callConfig) === null || _a === void 0 ? void 0 : _a.methodConfig.retryPolicy;\r\n        if (!retryPolicy) {\r\n            return 0;\r\n        }\r\n        const nextBackoffMs = Math.random() * this.nextRetryBackoffSec * 1000;\r\n        const maxBackoffSec = Number(retryPolicy.maxBackoff.substring(0, retryPolicy.maxBackoff.length - 1));\r\n        this.nextRetryBackoffSec = Math.min(this.nextRetryBackoffSec * retryPolicy.backoffMultiplier, maxBackoffSec);\r\n        return nextBackoffMs;\r\n    }\r\n    maybeRetryCall(pushback, callback) {\r\n        if (this.state !== 'RETRY') {\r\n            callback(false);\r\n            return;\r\n        }\r\n        if (this.attempts >= this.maxAttempts) {\r\n            callback(false);\r\n            return;\r\n        }\r\n        let retryDelayMs;\r\n        if (pushback === null) {\r\n            retryDelayMs = this.getNextRetryBackoffMs();\r\n        }\r\n        else if (pushback < 0) {\r\n            this.state = 'TRANSPARENT_ONLY';\r\n            callback(false);\r\n            return;\r\n        }\r\n        else {\r\n            retryDelayMs = pushback;\r\n            this.nextRetryBackoffSec = this.initialRetryBackoffSec;\r\n        }\r\n        setTimeout(() => {\r\n            var _a, _b;\r\n            if (this.state !== 'RETRY') {\r\n                callback(false);\r\n                return;\r\n            }\r\n            if ((_b = (_a = this.retryThrottler) === null || _a === void 0 ? void 0 : _a.canRetryCall()) !== null && _b !== void 0 ? _b : true) {\r\n                callback(true);\r\n                this.attempts += 1;\r\n                this.startNewAttempt();\r\n            }\r\n            else {\r\n                this.trace('Retry attempt denied by throttling policy');\r\n                callback(false);\r\n            }\r\n        }, retryDelayMs);\r\n    }\r\n    countActiveCalls() {\r\n        let count = 0;\r\n        for (const call of this.underlyingCalls) {\r\n            if ((call === null || call === void 0 ? void 0 : call.state) === 'ACTIVE') {\r\n                count += 1;\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n    handleProcessedStatus(status, callIndex, pushback) {\r\n        var _a, _b, _c;\r\n        switch (this.state) {\r\n            case 'COMMITTED':\r\n            case 'NO_RETRY':\r\n            case 'TRANSPARENT_ONLY':\r\n                this.commitCall(callIndex);\r\n                this.reportStatus(status);\r\n                break;\r\n            case 'HEDGING':\r\n                if (this.isStatusCodeInList((_a = this.callConfig.methodConfig.hedgingPolicy.nonFatalStatusCodes) !== null && _a !== void 0 ? _a : [], status.code)) {\r\n                    (_b = this.retryThrottler) === null || _b === void 0 ? void 0 : _b.addCallFailed();\r\n                    let delayMs;\r\n                    if (pushback === null) {\r\n                        delayMs = 0;\r\n                    }\r\n                    else if (pushback < 0) {\r\n                        this.state = 'TRANSPARENT_ONLY';\r\n                        this.commitCall(callIndex);\r\n                        this.reportStatus(status);\r\n                        return;\r\n                    }\r\n                    else {\r\n                        delayMs = pushback;\r\n                    }\r\n                    setTimeout(() => {\r\n                        this.maybeStartHedgingAttempt();\r\n                        // If after trying to start a call there are no active calls, this was the last one\r\n                        if (this.countActiveCalls() === 0) {\r\n                            this.commitCall(callIndex);\r\n                            this.reportStatus(status);\r\n                        }\r\n                    }, delayMs);\r\n                }\r\n                else {\r\n                    this.commitCall(callIndex);\r\n                    this.reportStatus(status);\r\n                }\r\n                break;\r\n            case 'RETRY':\r\n                if (this.isStatusCodeInList(this.callConfig.methodConfig.retryPolicy.retryableStatusCodes, status.code)) {\r\n                    (_c = this.retryThrottler) === null || _c === void 0 ? void 0 : _c.addCallFailed();\r\n                    this.maybeRetryCall(pushback, retried => {\r\n                        if (!retried) {\r\n                            this.commitCall(callIndex);\r\n                            this.reportStatus(status);\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    this.commitCall(callIndex);\r\n                    this.reportStatus(status);\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    getPushback(metadata) {\r\n        const mdValue = metadata.get('grpc-retry-pushback-ms');\r\n        if (mdValue.length === 0) {\r\n            return null;\r\n        }\r\n        try {\r\n            return parseInt(mdValue[0]);\r\n        }\r\n        catch (e) {\r\n            return -1;\r\n        }\r\n    }\r\n    handleChildStatus(status, callIndex) {\r\n        var _a;\r\n        if (this.underlyingCalls[callIndex].state === 'COMPLETED') {\r\n            return;\r\n        }\r\n        this.trace('state=' +\r\n            this.state +\r\n            ' handling status with progress ' +\r\n            status.progress +\r\n            ' from child [' +\r\n            this.underlyingCalls[callIndex].call.getCallNumber() +\r\n            '] in state ' +\r\n            this.underlyingCalls[callIndex].state);\r\n        this.underlyingCalls[callIndex].state = 'COMPLETED';\r\n        if (status.code === constants_1.Status.OK) {\r\n            (_a = this.retryThrottler) === null || _a === void 0 ? void 0 : _a.addCallSucceeded();\r\n            this.commitCall(callIndex);\r\n            this.reportStatus(status);\r\n            return;\r\n        }\r\n        if (this.state === 'NO_RETRY') {\r\n            this.commitCall(callIndex);\r\n            this.reportStatus(status);\r\n            return;\r\n        }\r\n        if (this.state === 'COMMITTED') {\r\n            this.reportStatus(status);\r\n            return;\r\n        }\r\n        const pushback = this.getPushback(status.metadata);\r\n        switch (status.progress) {\r\n            case 'NOT_STARTED':\r\n                // RPC never leaves the client, always safe to retry\r\n                this.startNewAttempt();\r\n                break;\r\n            case 'REFUSED':\r\n                // RPC reaches the server library, but not the server application logic\r\n                if (this.transparentRetryUsed) {\r\n                    this.handleProcessedStatus(status, callIndex, pushback);\r\n                }\r\n                else {\r\n                    this.transparentRetryUsed = true;\r\n                    this.startNewAttempt();\r\n                }\r\n                break;\r\n            case 'DROP':\r\n                this.commitCall(callIndex);\r\n                this.reportStatus(status);\r\n                break;\r\n            case 'PROCESSED':\r\n                this.handleProcessedStatus(status, callIndex, pushback);\r\n                break;\r\n        }\r\n    }\r\n    maybeStartHedgingAttempt() {\r\n        if (this.state !== 'HEDGING') {\r\n            return;\r\n        }\r\n        if (!this.callConfig.methodConfig.hedgingPolicy) {\r\n            return;\r\n        }\r\n        if (this.attempts >= this.maxAttempts) {\r\n            return;\r\n        }\r\n        this.attempts += 1;\r\n        this.startNewAttempt();\r\n        this.maybeStartHedgingTimer();\r\n    }\r\n    maybeStartHedgingTimer() {\r\n        var _a, _b, _c;\r\n        if (this.hedgingTimer) {\r\n            clearTimeout(this.hedgingTimer);\r\n        }\r\n        if (this.state !== 'HEDGING') {\r\n            return;\r\n        }\r\n        if (!this.callConfig.methodConfig.hedgingPolicy) {\r\n            return;\r\n        }\r\n        const hedgingPolicy = this.callConfig.methodConfig.hedgingPolicy;\r\n        if (this.attempts >= this.maxAttempts) {\r\n            return;\r\n        }\r\n        const hedgingDelayString = (_a = hedgingPolicy.hedgingDelay) !== null && _a !== void 0 ? _a : '0s';\r\n        const hedgingDelaySec = Number(hedgingDelayString.substring(0, hedgingDelayString.length - 1));\r\n        this.hedgingTimer = setTimeout(() => {\r\n            this.maybeStartHedgingAttempt();\r\n        }, hedgingDelaySec * 1000);\r\n        (_c = (_b = this.hedgingTimer).unref) === null || _c === void 0 ? void 0 : _c.call(_b);\r\n    }\r\n    startNewAttempt() {\r\n        const child = this.channel.createLoadBalancingCall(this.callConfig, this.methodName, this.host, this.credentials, this.deadline);\r\n        this.trace('Created child call [' +\r\n            child.getCallNumber() +\r\n            '] for attempt ' +\r\n            this.attempts);\r\n        const index = this.underlyingCalls.length;\r\n        this.underlyingCalls.push({\r\n            state: 'ACTIVE',\r\n            call: child,\r\n            nextMessageToSend: 0,\r\n            startTime: new Date()\r\n        });\r\n        const previousAttempts = this.attempts - 1;\r\n        const initialMetadata = this.initialMetadata.clone();\r\n        if (previousAttempts > 0) {\r\n            initialMetadata.set(PREVIONS_RPC_ATTEMPTS_METADATA_KEY, `${previousAttempts}`);\r\n        }\r\n        let receivedMetadata = false;\r\n        child.start(initialMetadata, {\r\n            onReceiveMetadata: metadata => {\r\n                this.trace('Received metadata from child [' + child.getCallNumber() + ']');\r\n                this.commitCall(index);\r\n                receivedMetadata = true;\r\n                if (previousAttempts > 0) {\r\n                    metadata.set(PREVIONS_RPC_ATTEMPTS_METADATA_KEY, `${previousAttempts}`);\r\n                }\r\n                if (this.underlyingCalls[index].state === 'ACTIVE') {\r\n                    this.listener.onReceiveMetadata(metadata);\r\n                }\r\n            },\r\n            onReceiveMessage: message => {\r\n                this.trace('Received message from child [' + child.getCallNumber() + ']');\r\n                this.commitCall(index);\r\n                if (this.underlyingCalls[index].state === 'ACTIVE') {\r\n                    this.listener.onReceiveMessage(message);\r\n                }\r\n            },\r\n            onReceiveStatus: status => {\r\n                this.trace('Received status from child [' + child.getCallNumber() + ']');\r\n                if (!receivedMetadata && previousAttempts > 0) {\r\n                    status.metadata.set(PREVIONS_RPC_ATTEMPTS_METADATA_KEY, `${previousAttempts}`);\r\n                }\r\n                this.handleChildStatus(status, index);\r\n            },\r\n        });\r\n        this.sendNextChildMessage(index);\r\n        if (this.readStarted) {\r\n            child.startRead();\r\n        }\r\n    }\r\n    start(metadata, listener) {\r\n        this.trace('start called');\r\n        this.listener = listener;\r\n        this.initialMetadata = metadata;\r\n        this.attempts += 1;\r\n        this.startNewAttempt();\r\n        this.maybeStartHedgingTimer();\r\n    }\r\n    handleChildWriteCompleted(childIndex) {\r\n        var _a, _b;\r\n        const childCall = this.underlyingCalls[childIndex];\r\n        const messageIndex = childCall.nextMessageToSend;\r\n        (_b = (_a = this.getBufferEntry(messageIndex)).callback) === null || _b === void 0 ? void 0 : _b.call(_a);\r\n        this.clearSentMessages();\r\n        childCall.nextMessageToSend += 1;\r\n        this.sendNextChildMessage(childIndex);\r\n    }\r\n    sendNextChildMessage(childIndex) {\r\n        const childCall = this.underlyingCalls[childIndex];\r\n        if (childCall.state === 'COMPLETED') {\r\n            return;\r\n        }\r\n        if (this.getBufferEntry(childCall.nextMessageToSend)) {\r\n            const bufferEntry = this.getBufferEntry(childCall.nextMessageToSend);\r\n            switch (bufferEntry.entryType) {\r\n                case 'MESSAGE':\r\n                    childCall.call.sendMessageWithContext({\r\n                        callback: error => {\r\n                            // Ignore error\r\n                            this.handleChildWriteCompleted(childIndex);\r\n                        },\r\n                    }, bufferEntry.message.message);\r\n                    break;\r\n                case 'HALF_CLOSE':\r\n                    childCall.nextMessageToSend += 1;\r\n                    childCall.call.halfClose();\r\n                    break;\r\n                case 'FREED':\r\n                    // Should not be possible\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n    sendMessageWithContext(context, message) {\r\n        var _a;\r\n        this.trace('write() called with message of length ' + message.length);\r\n        const writeObj = {\r\n            message,\r\n            flags: context.flags,\r\n        };\r\n        const messageIndex = this.getNextBufferIndex();\r\n        const bufferEntry = {\r\n            entryType: 'MESSAGE',\r\n            message: writeObj,\r\n            allocated: this.bufferTracker.allocate(message.length, this.callNumber),\r\n        };\r\n        this.writeBuffer.push(bufferEntry);\r\n        if (bufferEntry.allocated) {\r\n            (_a = context.callback) === null || _a === void 0 ? void 0 : _a.call(context);\r\n            for (const [callIndex, call] of this.underlyingCalls.entries()) {\r\n                if (call.state === 'ACTIVE' &&\r\n                    call.nextMessageToSend === messageIndex) {\r\n                    call.call.sendMessageWithContext({\r\n                        callback: error => {\r\n                            // Ignore error\r\n                            this.handleChildWriteCompleted(callIndex);\r\n                        },\r\n                    }, message);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this.commitCallWithMostMessages();\r\n            // commitCallWithMostMessages can fail if we are between ping attempts\r\n            if (this.committedCallIndex === null) {\r\n                return;\r\n            }\r\n            const call = this.underlyingCalls[this.committedCallIndex];\r\n            bufferEntry.callback = context.callback;\r\n            if (call.state === 'ACTIVE' && call.nextMessageToSend === messageIndex) {\r\n                call.call.sendMessageWithContext({\r\n                    callback: error => {\r\n                        // Ignore error\r\n                        this.handleChildWriteCompleted(this.committedCallIndex);\r\n                    },\r\n                }, message);\r\n            }\r\n        }\r\n    }\r\n    startRead() {\r\n        this.trace('startRead called');\r\n        this.readStarted = true;\r\n        for (const underlyingCall of this.underlyingCalls) {\r\n            if ((underlyingCall === null || underlyingCall === void 0 ? void 0 : underlyingCall.state) === 'ACTIVE') {\r\n                underlyingCall.call.startRead();\r\n            }\r\n        }\r\n    }\r\n    halfClose() {\r\n        this.trace('halfClose called');\r\n        const halfCloseIndex = this.getNextBufferIndex();\r\n        this.writeBuffer.push({\r\n            entryType: 'HALF_CLOSE',\r\n            allocated: false,\r\n        });\r\n        for (const call of this.underlyingCalls) {\r\n            if ((call === null || call === void 0 ? void 0 : call.state) === 'ACTIVE' &&\r\n                call.nextMessageToSend === halfCloseIndex) {\r\n                call.nextMessageToSend += 1;\r\n                call.call.halfClose();\r\n            }\r\n        }\r\n    }\r\n    setCredentials(newCredentials) {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    getMethod() {\r\n        return this.methodName;\r\n    }\r\n    getHost() {\r\n        return this.host;\r\n    }\r\n}\r\nexports.RetryingCall = RetryingCall;\r\n//# sourceMappingURL=retrying-call.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/retrying-call.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/server-call.js":
/*!*************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/server-call.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ServerDuplexStreamImpl = exports.ServerWritableStreamImpl = exports.ServerReadableStreamImpl = exports.ServerUnaryCallImpl = void 0;\r\nexports.serverErrorToStatus = serverErrorToStatus;\r\nconst events_1 = __webpack_require__(/*! events */ \"events\");\r\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/metadata.js\");\r\nfunction serverErrorToStatus(error, overrideTrailers) {\r\n    var _a;\r\n    const status = {\r\n        code: constants_1.Status.UNKNOWN,\r\n        details: 'message' in error ? error.message : 'Unknown Error',\r\n        metadata: (_a = overrideTrailers !== null && overrideTrailers !== void 0 ? overrideTrailers : error.metadata) !== null && _a !== void 0 ? _a : null,\r\n    };\r\n    if ('code' in error &&\r\n        typeof error.code === 'number' &&\r\n        Number.isInteger(error.code)) {\r\n        status.code = error.code;\r\n        if ('details' in error && typeof error.details === 'string') {\r\n            status.details = error.details;\r\n        }\r\n    }\r\n    return status;\r\n}\r\nclass ServerUnaryCallImpl extends events_1.EventEmitter {\r\n    constructor(path, call, metadata, request) {\r\n        super();\r\n        this.path = path;\r\n        this.call = call;\r\n        this.metadata = metadata;\r\n        this.request = request;\r\n        this.cancelled = false;\r\n    }\r\n    getPeer() {\r\n        return this.call.getPeer();\r\n    }\r\n    sendMetadata(responseMetadata) {\r\n        this.call.sendMetadata(responseMetadata);\r\n    }\r\n    getDeadline() {\r\n        return this.call.getDeadline();\r\n    }\r\n    getPath() {\r\n        return this.path;\r\n    }\r\n    getHost() {\r\n        return this.call.getHost();\r\n    }\r\n}\r\nexports.ServerUnaryCallImpl = ServerUnaryCallImpl;\r\nclass ServerReadableStreamImpl extends stream_1.Readable {\r\n    constructor(path, call, metadata) {\r\n        super({ objectMode: true });\r\n        this.path = path;\r\n        this.call = call;\r\n        this.metadata = metadata;\r\n        this.cancelled = false;\r\n    }\r\n    _read(size) {\r\n        this.call.startRead();\r\n    }\r\n    getPeer() {\r\n        return this.call.getPeer();\r\n    }\r\n    sendMetadata(responseMetadata) {\r\n        this.call.sendMetadata(responseMetadata);\r\n    }\r\n    getDeadline() {\r\n        return this.call.getDeadline();\r\n    }\r\n    getPath() {\r\n        return this.path;\r\n    }\r\n    getHost() {\r\n        return this.call.getHost();\r\n    }\r\n}\r\nexports.ServerReadableStreamImpl = ServerReadableStreamImpl;\r\nclass ServerWritableStreamImpl extends stream_1.Writable {\r\n    constructor(path, call, metadata, request) {\r\n        super({ objectMode: true });\r\n        this.path = path;\r\n        this.call = call;\r\n        this.metadata = metadata;\r\n        this.request = request;\r\n        this.pendingStatus = {\r\n            code: constants_1.Status.OK,\r\n            details: 'OK',\r\n        };\r\n        this.cancelled = false;\r\n        this.trailingMetadata = new metadata_1.Metadata();\r\n        this.on('error', err => {\r\n            this.pendingStatus = serverErrorToStatus(err);\r\n            this.end();\r\n        });\r\n    }\r\n    getPeer() {\r\n        return this.call.getPeer();\r\n    }\r\n    sendMetadata(responseMetadata) {\r\n        this.call.sendMetadata(responseMetadata);\r\n    }\r\n    getDeadline() {\r\n        return this.call.getDeadline();\r\n    }\r\n    getPath() {\r\n        return this.path;\r\n    }\r\n    getHost() {\r\n        return this.call.getHost();\r\n    }\r\n    _write(chunk, encoding, \r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    callback) {\r\n        this.call.sendMessage(chunk, callback);\r\n    }\r\n    _final(callback) {\r\n        var _a;\r\n        callback(null);\r\n        this.call.sendStatus(Object.assign(Object.assign({}, this.pendingStatus), { metadata: (_a = this.pendingStatus.metadata) !== null && _a !== void 0 ? _a : this.trailingMetadata }));\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    end(metadata) {\r\n        if (metadata) {\r\n            this.trailingMetadata = metadata;\r\n        }\r\n        return super.end();\r\n    }\r\n}\r\nexports.ServerWritableStreamImpl = ServerWritableStreamImpl;\r\nclass ServerDuplexStreamImpl extends stream_1.Duplex {\r\n    constructor(path, call, metadata) {\r\n        super({ objectMode: true });\r\n        this.path = path;\r\n        this.call = call;\r\n        this.metadata = metadata;\r\n        this.pendingStatus = {\r\n            code: constants_1.Status.OK,\r\n            details: 'OK',\r\n        };\r\n        this.cancelled = false;\r\n        this.trailingMetadata = new metadata_1.Metadata();\r\n        this.on('error', err => {\r\n            this.pendingStatus = serverErrorToStatus(err);\r\n            this.end();\r\n        });\r\n    }\r\n    getPeer() {\r\n        return this.call.getPeer();\r\n    }\r\n    sendMetadata(responseMetadata) {\r\n        this.call.sendMetadata(responseMetadata);\r\n    }\r\n    getDeadline() {\r\n        return this.call.getDeadline();\r\n    }\r\n    getPath() {\r\n        return this.path;\r\n    }\r\n    getHost() {\r\n        return this.call.getHost();\r\n    }\r\n    _read(size) {\r\n        this.call.startRead();\r\n    }\r\n    _write(chunk, encoding, \r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    callback) {\r\n        this.call.sendMessage(chunk, callback);\r\n    }\r\n    _final(callback) {\r\n        var _a;\r\n        callback(null);\r\n        this.call.sendStatus(Object.assign(Object.assign({}, this.pendingStatus), { metadata: (_a = this.pendingStatus.metadata) !== null && _a !== void 0 ? _a : this.trailingMetadata }));\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    end(metadata) {\r\n        if (metadata) {\r\n            this.trailingMetadata = metadata;\r\n        }\r\n        return super.end();\r\n    }\r\n}\r\nexports.ServerDuplexStreamImpl = ServerDuplexStreamImpl;\r\n//# sourceMappingURL=server-call.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/server-call.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/server-credentials.js":
/*!********************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/server-credentials.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ServerCredentials = void 0;\r\nexports.createCertificateProviderServerCredentials = createCertificateProviderServerCredentials;\r\nexports.createServerCredentialsWithInterceptors = createServerCredentialsWithInterceptors;\r\nconst tls_helpers_1 = __webpack_require__(/*! ./tls-helpers */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/tls-helpers.js\");\r\nclass ServerCredentials {\r\n    constructor(serverConstructorOptions, contextOptions) {\r\n        this.serverConstructorOptions = serverConstructorOptions;\r\n        this.watchers = new Set();\r\n        this.latestContextOptions = null;\r\n        this.latestContextOptions = contextOptions !== null && contextOptions !== void 0 ? contextOptions : null;\r\n    }\r\n    _addWatcher(watcher) {\r\n        this.watchers.add(watcher);\r\n    }\r\n    _removeWatcher(watcher) {\r\n        this.watchers.delete(watcher);\r\n    }\r\n    getWatcherCount() {\r\n        return this.watchers.size;\r\n    }\r\n    updateSecureContextOptions(options) {\r\n        this.latestContextOptions = options;\r\n        for (const watcher of this.watchers) {\r\n            watcher(this.latestContextOptions);\r\n        }\r\n    }\r\n    _isSecure() {\r\n        return this.serverConstructorOptions !== null;\r\n    }\r\n    _getSecureContextOptions() {\r\n        return this.latestContextOptions;\r\n    }\r\n    _getConstructorOptions() {\r\n        return this.serverConstructorOptions;\r\n    }\r\n    _getInterceptors() {\r\n        return [];\r\n    }\r\n    static createInsecure() {\r\n        return new InsecureServerCredentials();\r\n    }\r\n    static createSsl(rootCerts, keyCertPairs, checkClientCertificate = false) {\r\n        var _a;\r\n        if (rootCerts !== null && !Buffer.isBuffer(rootCerts)) {\r\n            throw new TypeError('rootCerts must be null or a Buffer');\r\n        }\r\n        if (!Array.isArray(keyCertPairs)) {\r\n            throw new TypeError('keyCertPairs must be an array');\r\n        }\r\n        if (typeof checkClientCertificate !== 'boolean') {\r\n            throw new TypeError('checkClientCertificate must be a boolean');\r\n        }\r\n        const cert = [];\r\n        const key = [];\r\n        for (let i = 0; i < keyCertPairs.length; i++) {\r\n            const pair = keyCertPairs[i];\r\n            if (pair === null || typeof pair !== 'object') {\r\n                throw new TypeError(`keyCertPair[${i}] must be an object`);\r\n            }\r\n            if (!Buffer.isBuffer(pair.private_key)) {\r\n                throw new TypeError(`keyCertPair[${i}].private_key must be a Buffer`);\r\n            }\r\n            if (!Buffer.isBuffer(pair.cert_chain)) {\r\n                throw new TypeError(`keyCertPair[${i}].cert_chain must be a Buffer`);\r\n            }\r\n            cert.push(pair.cert_chain);\r\n            key.push(pair.private_key);\r\n        }\r\n        return new SecureServerCredentials({\r\n            requestCert: checkClientCertificate,\r\n            ciphers: tls_helpers_1.CIPHER_SUITES,\r\n        }, {\r\n            ca: (_a = rootCerts !== null && rootCerts !== void 0 ? rootCerts : (0, tls_helpers_1.getDefaultRootsData)()) !== null && _a !== void 0 ? _a : undefined,\r\n            cert,\r\n            key,\r\n        });\r\n    }\r\n}\r\nexports.ServerCredentials = ServerCredentials;\r\nclass InsecureServerCredentials extends ServerCredentials {\r\n    constructor() {\r\n        super(null);\r\n    }\r\n    _getSettings() {\r\n        return null;\r\n    }\r\n    _equals(other) {\r\n        return other instanceof InsecureServerCredentials;\r\n    }\r\n}\r\nclass SecureServerCredentials extends ServerCredentials {\r\n    constructor(constructorOptions, contextOptions) {\r\n        super(constructorOptions, contextOptions);\r\n        this.options = Object.assign(Object.assign({}, constructorOptions), contextOptions);\r\n    }\r\n    /**\r\n     * Checks equality by checking the options that are actually set by\r\n     * createSsl.\r\n     * @param other\r\n     * @returns\r\n     */\r\n    _equals(other) {\r\n        if (this === other) {\r\n            return true;\r\n        }\r\n        if (!(other instanceof SecureServerCredentials)) {\r\n            return false;\r\n        }\r\n        // options.ca equality check\r\n        if (Buffer.isBuffer(this.options.ca) && Buffer.isBuffer(other.options.ca)) {\r\n            if (!this.options.ca.equals(other.options.ca)) {\r\n                return false;\r\n            }\r\n        }\r\n        else {\r\n            if (this.options.ca !== other.options.ca) {\r\n                return false;\r\n            }\r\n        }\r\n        // options.cert equality check\r\n        if (Array.isArray(this.options.cert) && Array.isArray(other.options.cert)) {\r\n            if (this.options.cert.length !== other.options.cert.length) {\r\n                return false;\r\n            }\r\n            for (let i = 0; i < this.options.cert.length; i++) {\r\n                const thisCert = this.options.cert[i];\r\n                const otherCert = other.options.cert[i];\r\n                if (Buffer.isBuffer(thisCert) && Buffer.isBuffer(otherCert)) {\r\n                    if (!thisCert.equals(otherCert)) {\r\n                        return false;\r\n                    }\r\n                }\r\n                else {\r\n                    if (thisCert !== otherCert) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (this.options.cert !== other.options.cert) {\r\n                return false;\r\n            }\r\n        }\r\n        // options.key equality check\r\n        if (Array.isArray(this.options.key) && Array.isArray(other.options.key)) {\r\n            if (this.options.key.length !== other.options.key.length) {\r\n                return false;\r\n            }\r\n            for (let i = 0; i < this.options.key.length; i++) {\r\n                const thisKey = this.options.key[i];\r\n                const otherKey = other.options.key[i];\r\n                if (Buffer.isBuffer(thisKey) && Buffer.isBuffer(otherKey)) {\r\n                    if (!thisKey.equals(otherKey)) {\r\n                        return false;\r\n                    }\r\n                }\r\n                else {\r\n                    if (thisKey !== otherKey) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (this.options.key !== other.options.key) {\r\n                return false;\r\n            }\r\n        }\r\n        // options.requestCert equality check\r\n        if (this.options.requestCert !== other.options.requestCert) {\r\n            return false;\r\n        }\r\n        /* ciphers is derived from a value that is constant for the process, so no\r\n         * equality check is needed. */\r\n        return true;\r\n    }\r\n}\r\nclass CertificateProviderServerCredentials extends ServerCredentials {\r\n    constructor(identityCertificateProvider, caCertificateProvider, requireClientCertificate) {\r\n        super({\r\n            requestCert: caCertificateProvider !== null,\r\n            rejectUnauthorized: requireClientCertificate,\r\n            ciphers: tls_helpers_1.CIPHER_SUITES\r\n        });\r\n        this.identityCertificateProvider = identityCertificateProvider;\r\n        this.caCertificateProvider = caCertificateProvider;\r\n        this.requireClientCertificate = requireClientCertificate;\r\n        this.latestCaUpdate = null;\r\n        this.latestIdentityUpdate = null;\r\n        this.caCertificateUpdateListener = this.handleCaCertificateUpdate.bind(this);\r\n        this.identityCertificateUpdateListener = this.handleIdentityCertitificateUpdate.bind(this);\r\n    }\r\n    _addWatcher(watcher) {\r\n        var _a;\r\n        if (this.getWatcherCount() === 0) {\r\n            (_a = this.caCertificateProvider) === null || _a === void 0 ? void 0 : _a.addCaCertificateListener(this.caCertificateUpdateListener);\r\n            this.identityCertificateProvider.addIdentityCertificateListener(this.identityCertificateUpdateListener);\r\n        }\r\n        super._addWatcher(watcher);\r\n    }\r\n    _removeWatcher(watcher) {\r\n        var _a;\r\n        super._removeWatcher(watcher);\r\n        if (this.getWatcherCount() === 0) {\r\n            (_a = this.caCertificateProvider) === null || _a === void 0 ? void 0 : _a.removeCaCertificateListener(this.caCertificateUpdateListener);\r\n            this.identityCertificateProvider.removeIdentityCertificateListener(this.identityCertificateUpdateListener);\r\n        }\r\n    }\r\n    _equals(other) {\r\n        if (this === other) {\r\n            return true;\r\n        }\r\n        if (!(other instanceof CertificateProviderServerCredentials)) {\r\n            return false;\r\n        }\r\n        return (this.caCertificateProvider === other.caCertificateProvider &&\r\n            this.identityCertificateProvider === other.identityCertificateProvider &&\r\n            this.requireClientCertificate === other.requireClientCertificate);\r\n    }\r\n    calculateSecureContextOptions() {\r\n        var _a;\r\n        if (this.latestIdentityUpdate === null) {\r\n            return null;\r\n        }\r\n        if (this.caCertificateProvider !== null && this.latestCaUpdate === null) {\r\n            return null;\r\n        }\r\n        return {\r\n            ca: (_a = this.latestCaUpdate) === null || _a === void 0 ? void 0 : _a.caCertificate,\r\n            cert: [this.latestIdentityUpdate.certificate],\r\n            key: [this.latestIdentityUpdate.privateKey],\r\n        };\r\n    }\r\n    finalizeUpdate() {\r\n        const secureContextOptions = this.calculateSecureContextOptions();\r\n        this.updateSecureContextOptions(secureContextOptions);\r\n    }\r\n    handleCaCertificateUpdate(update) {\r\n        this.latestCaUpdate = update;\r\n        this.finalizeUpdate();\r\n    }\r\n    handleIdentityCertitificateUpdate(update) {\r\n        this.latestIdentityUpdate = update;\r\n        this.finalizeUpdate();\r\n    }\r\n}\r\nfunction createCertificateProviderServerCredentials(caCertificateProvider, identityCertificateProvider, requireClientCertificate) {\r\n    return new CertificateProviderServerCredentials(caCertificateProvider, identityCertificateProvider, requireClientCertificate);\r\n}\r\nclass InterceptorServerCredentials extends ServerCredentials {\r\n    constructor(childCredentials, interceptors) {\r\n        super({});\r\n        this.childCredentials = childCredentials;\r\n        this.interceptors = interceptors;\r\n    }\r\n    _isSecure() {\r\n        return this.childCredentials._isSecure();\r\n    }\r\n    _equals(other) {\r\n        if (!(other instanceof InterceptorServerCredentials)) {\r\n            return false;\r\n        }\r\n        if (!(this.childCredentials._equals(other.childCredentials))) {\r\n            return false;\r\n        }\r\n        if (this.interceptors.length !== other.interceptors.length) {\r\n            return false;\r\n        }\r\n        for (let i = 0; i < this.interceptors.length; i++) {\r\n            if (this.interceptors[i] !== other.interceptors[i]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    _getInterceptors() {\r\n        return this.interceptors;\r\n    }\r\n    _addWatcher(watcher) {\r\n        this.childCredentials._addWatcher(watcher);\r\n    }\r\n    _removeWatcher(watcher) {\r\n        this.childCredentials._removeWatcher(watcher);\r\n    }\r\n    _getConstructorOptions() {\r\n        return this.childCredentials._getConstructorOptions();\r\n    }\r\n    _getSecureContextOptions() {\r\n        return this.childCredentials._getSecureContextOptions();\r\n    }\r\n}\r\nfunction createServerCredentialsWithInterceptors(credentials, interceptors) {\r\n    return new InterceptorServerCredentials(credentials, interceptors);\r\n}\r\n//# sourceMappingURL=server-credentials.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/server-credentials.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/server-interceptors.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/server-interceptors.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2024 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.BaseServerInterceptingCall = exports.ServerInterceptingCall = exports.ResponderBuilder = exports.ServerListenerBuilder = void 0;\r\nexports.isInterceptingServerListener = isInterceptingServerListener;\r\nexports.getServerInterceptingCall = getServerInterceptingCall;\r\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/metadata.js\");\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nconst http2 = __webpack_require__(/*! http2 */ \"http2\");\r\nconst error_1 = __webpack_require__(/*! ./error */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/error.js\");\r\nconst zlib = __webpack_require__(/*! zlib */ \"zlib\");\r\nconst stream_decoder_1 = __webpack_require__(/*! ./stream-decoder */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/stream-decoder.js\");\r\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\r\nconst TRACER_NAME = 'server_call';\r\nfunction trace(text) {\r\n    logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);\r\n}\r\nclass ServerListenerBuilder {\r\n    constructor() {\r\n        this.metadata = undefined;\r\n        this.message = undefined;\r\n        this.halfClose = undefined;\r\n        this.cancel = undefined;\r\n    }\r\n    withOnReceiveMetadata(onReceiveMetadata) {\r\n        this.metadata = onReceiveMetadata;\r\n        return this;\r\n    }\r\n    withOnReceiveMessage(onReceiveMessage) {\r\n        this.message = onReceiveMessage;\r\n        return this;\r\n    }\r\n    withOnReceiveHalfClose(onReceiveHalfClose) {\r\n        this.halfClose = onReceiveHalfClose;\r\n        return this;\r\n    }\r\n    withOnCancel(onCancel) {\r\n        this.cancel = onCancel;\r\n        return this;\r\n    }\r\n    build() {\r\n        return {\r\n            onReceiveMetadata: this.metadata,\r\n            onReceiveMessage: this.message,\r\n            onReceiveHalfClose: this.halfClose,\r\n            onCancel: this.cancel,\r\n        };\r\n    }\r\n}\r\nexports.ServerListenerBuilder = ServerListenerBuilder;\r\nfunction isInterceptingServerListener(listener) {\r\n    return (listener.onReceiveMetadata !== undefined &&\r\n        listener.onReceiveMetadata.length === 1);\r\n}\r\nclass InterceptingServerListenerImpl {\r\n    constructor(listener, nextListener) {\r\n        this.listener = listener;\r\n        this.nextListener = nextListener;\r\n        /**\r\n         * Once the call is cancelled, ignore all other events.\r\n         */\r\n        this.cancelled = false;\r\n        this.processingMetadata = false;\r\n        this.hasPendingMessage = false;\r\n        this.pendingMessage = null;\r\n        this.processingMessage = false;\r\n        this.hasPendingHalfClose = false;\r\n    }\r\n    processPendingMessage() {\r\n        if (this.hasPendingMessage) {\r\n            this.nextListener.onReceiveMessage(this.pendingMessage);\r\n            this.pendingMessage = null;\r\n            this.hasPendingMessage = false;\r\n        }\r\n    }\r\n    processPendingHalfClose() {\r\n        if (this.hasPendingHalfClose) {\r\n            this.nextListener.onReceiveHalfClose();\r\n            this.hasPendingHalfClose = false;\r\n        }\r\n    }\r\n    onReceiveMetadata(metadata) {\r\n        if (this.cancelled) {\r\n            return;\r\n        }\r\n        this.processingMetadata = true;\r\n        this.listener.onReceiveMetadata(metadata, interceptedMetadata => {\r\n            this.processingMetadata = false;\r\n            if (this.cancelled) {\r\n                return;\r\n            }\r\n            this.nextListener.onReceiveMetadata(interceptedMetadata);\r\n            this.processPendingMessage();\r\n            this.processPendingHalfClose();\r\n        });\r\n    }\r\n    onReceiveMessage(message) {\r\n        if (this.cancelled) {\r\n            return;\r\n        }\r\n        this.processingMessage = true;\r\n        this.listener.onReceiveMessage(message, msg => {\r\n            this.processingMessage = false;\r\n            if (this.cancelled) {\r\n                return;\r\n            }\r\n            if (this.processingMetadata) {\r\n                this.pendingMessage = msg;\r\n                this.hasPendingMessage = true;\r\n            }\r\n            else {\r\n                this.nextListener.onReceiveMessage(msg);\r\n                this.processPendingHalfClose();\r\n            }\r\n        });\r\n    }\r\n    onReceiveHalfClose() {\r\n        if (this.cancelled) {\r\n            return;\r\n        }\r\n        this.listener.onReceiveHalfClose(() => {\r\n            if (this.cancelled) {\r\n                return;\r\n            }\r\n            if (this.processingMetadata || this.processingMessage) {\r\n                this.hasPendingHalfClose = true;\r\n            }\r\n            else {\r\n                this.nextListener.onReceiveHalfClose();\r\n            }\r\n        });\r\n    }\r\n    onCancel() {\r\n        this.cancelled = true;\r\n        this.listener.onCancel();\r\n        this.nextListener.onCancel();\r\n    }\r\n}\r\nclass ResponderBuilder {\r\n    constructor() {\r\n        this.start = undefined;\r\n        this.metadata = undefined;\r\n        this.message = undefined;\r\n        this.status = undefined;\r\n    }\r\n    withStart(start) {\r\n        this.start = start;\r\n        return this;\r\n    }\r\n    withSendMetadata(sendMetadata) {\r\n        this.metadata = sendMetadata;\r\n        return this;\r\n    }\r\n    withSendMessage(sendMessage) {\r\n        this.message = sendMessage;\r\n        return this;\r\n    }\r\n    withSendStatus(sendStatus) {\r\n        this.status = sendStatus;\r\n        return this;\r\n    }\r\n    build() {\r\n        return {\r\n            start: this.start,\r\n            sendMetadata: this.metadata,\r\n            sendMessage: this.message,\r\n            sendStatus: this.status,\r\n        };\r\n    }\r\n}\r\nexports.ResponderBuilder = ResponderBuilder;\r\nconst defaultServerListener = {\r\n    onReceiveMetadata: (metadata, next) => {\r\n        next(metadata);\r\n    },\r\n    onReceiveMessage: (message, next) => {\r\n        next(message);\r\n    },\r\n    onReceiveHalfClose: next => {\r\n        next();\r\n    },\r\n    onCancel: () => { },\r\n};\r\nconst defaultResponder = {\r\n    start: next => {\r\n        next();\r\n    },\r\n    sendMetadata: (metadata, next) => {\r\n        next(metadata);\r\n    },\r\n    sendMessage: (message, next) => {\r\n        next(message);\r\n    },\r\n    sendStatus: (status, next) => {\r\n        next(status);\r\n    },\r\n};\r\nclass ServerInterceptingCall {\r\n    constructor(nextCall, responder) {\r\n        var _a, _b, _c, _d;\r\n        this.nextCall = nextCall;\r\n        this.processingMetadata = false;\r\n        this.sentMetadata = false;\r\n        this.processingMessage = false;\r\n        this.pendingMessage = null;\r\n        this.pendingMessageCallback = null;\r\n        this.pendingStatus = null;\r\n        this.responder = {\r\n            start: (_a = responder === null || responder === void 0 ? void 0 : responder.start) !== null && _a !== void 0 ? _a : defaultResponder.start,\r\n            sendMetadata: (_b = responder === null || responder === void 0 ? void 0 : responder.sendMetadata) !== null && _b !== void 0 ? _b : defaultResponder.sendMetadata,\r\n            sendMessage: (_c = responder === null || responder === void 0 ? void 0 : responder.sendMessage) !== null && _c !== void 0 ? _c : defaultResponder.sendMessage,\r\n            sendStatus: (_d = responder === null || responder === void 0 ? void 0 : responder.sendStatus) !== null && _d !== void 0 ? _d : defaultResponder.sendStatus,\r\n        };\r\n    }\r\n    processPendingMessage() {\r\n        if (this.pendingMessageCallback) {\r\n            this.nextCall.sendMessage(this.pendingMessage, this.pendingMessageCallback);\r\n            this.pendingMessage = null;\r\n            this.pendingMessageCallback = null;\r\n        }\r\n    }\r\n    processPendingStatus() {\r\n        if (this.pendingStatus) {\r\n            this.nextCall.sendStatus(this.pendingStatus);\r\n            this.pendingStatus = null;\r\n        }\r\n    }\r\n    start(listener) {\r\n        this.responder.start(interceptedListener => {\r\n            var _a, _b, _c, _d;\r\n            const fullInterceptedListener = {\r\n                onReceiveMetadata: (_a = interceptedListener === null || interceptedListener === void 0 ? void 0 : interceptedListener.onReceiveMetadata) !== null && _a !== void 0 ? _a : defaultServerListener.onReceiveMetadata,\r\n                onReceiveMessage: (_b = interceptedListener === null || interceptedListener === void 0 ? void 0 : interceptedListener.onReceiveMessage) !== null && _b !== void 0 ? _b : defaultServerListener.onReceiveMessage,\r\n                onReceiveHalfClose: (_c = interceptedListener === null || interceptedListener === void 0 ? void 0 : interceptedListener.onReceiveHalfClose) !== null && _c !== void 0 ? _c : defaultServerListener.onReceiveHalfClose,\r\n                onCancel: (_d = interceptedListener === null || interceptedListener === void 0 ? void 0 : interceptedListener.onCancel) !== null && _d !== void 0 ? _d : defaultServerListener.onCancel,\r\n            };\r\n            const finalInterceptingListener = new InterceptingServerListenerImpl(fullInterceptedListener, listener);\r\n            this.nextCall.start(finalInterceptingListener);\r\n        });\r\n    }\r\n    sendMetadata(metadata) {\r\n        this.processingMetadata = true;\r\n        this.sentMetadata = true;\r\n        this.responder.sendMetadata(metadata, interceptedMetadata => {\r\n            this.processingMetadata = false;\r\n            this.nextCall.sendMetadata(interceptedMetadata);\r\n            this.processPendingMessage();\r\n            this.processPendingStatus();\r\n        });\r\n    }\r\n    sendMessage(message, callback) {\r\n        this.processingMessage = true;\r\n        if (!this.sentMetadata) {\r\n            this.sendMetadata(new metadata_1.Metadata());\r\n        }\r\n        this.responder.sendMessage(message, interceptedMessage => {\r\n            this.processingMessage = false;\r\n            if (this.processingMetadata) {\r\n                this.pendingMessage = interceptedMessage;\r\n                this.pendingMessageCallback = callback;\r\n            }\r\n            else {\r\n                this.nextCall.sendMessage(interceptedMessage, callback);\r\n            }\r\n        });\r\n    }\r\n    sendStatus(status) {\r\n        this.responder.sendStatus(status, interceptedStatus => {\r\n            if (this.processingMetadata || this.processingMessage) {\r\n                this.pendingStatus = interceptedStatus;\r\n            }\r\n            else {\r\n                this.nextCall.sendStatus(interceptedStatus);\r\n            }\r\n        });\r\n    }\r\n    startRead() {\r\n        this.nextCall.startRead();\r\n    }\r\n    getPeer() {\r\n        return this.nextCall.getPeer();\r\n    }\r\n    getDeadline() {\r\n        return this.nextCall.getDeadline();\r\n    }\r\n    getHost() {\r\n        return this.nextCall.getHost();\r\n    }\r\n}\r\nexports.ServerInterceptingCall = ServerInterceptingCall;\r\nconst GRPC_ACCEPT_ENCODING_HEADER = 'grpc-accept-encoding';\r\nconst GRPC_ENCODING_HEADER = 'grpc-encoding';\r\nconst GRPC_MESSAGE_HEADER = 'grpc-message';\r\nconst GRPC_STATUS_HEADER = 'grpc-status';\r\nconst GRPC_TIMEOUT_HEADER = 'grpc-timeout';\r\nconst DEADLINE_REGEX = /(\\d{1,8})\\s*([HMSmun])/;\r\nconst deadlineUnitsToMs = {\r\n    H: 3600000,\r\n    M: 60000,\r\n    S: 1000,\r\n    m: 1,\r\n    u: 0.001,\r\n    n: 0.000001,\r\n};\r\nconst defaultCompressionHeaders = {\r\n    // TODO(cjihrig): Remove these encoding headers from the default response\r\n    // once compression is integrated.\r\n    [GRPC_ACCEPT_ENCODING_HEADER]: 'identity,deflate,gzip',\r\n    [GRPC_ENCODING_HEADER]: 'identity',\r\n};\r\nconst defaultResponseHeaders = {\r\n    [http2.constants.HTTP2_HEADER_STATUS]: http2.constants.HTTP_STATUS_OK,\r\n    [http2.constants.HTTP2_HEADER_CONTENT_TYPE]: 'application/grpc+proto',\r\n};\r\nconst defaultResponseOptions = {\r\n    waitForTrailers: true,\r\n};\r\nclass BaseServerInterceptingCall {\r\n    constructor(stream, headers, callEventTracker, handler, options) {\r\n        var _a;\r\n        this.stream = stream;\r\n        this.callEventTracker = callEventTracker;\r\n        this.handler = handler;\r\n        this.listener = null;\r\n        this.deadlineTimer = null;\r\n        this.deadline = Infinity;\r\n        this.maxSendMessageSize = constants_1.DEFAULT_MAX_SEND_MESSAGE_LENGTH;\r\n        this.maxReceiveMessageSize = constants_1.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH;\r\n        this.cancelled = false;\r\n        this.metadataSent = false;\r\n        this.wantTrailers = false;\r\n        this.cancelNotified = false;\r\n        this.incomingEncoding = 'identity';\r\n        this.readQueue = [];\r\n        this.isReadPending = false;\r\n        this.receivedHalfClose = false;\r\n        this.streamEnded = false;\r\n        this.stream.once('error', (err) => {\r\n            /* We need an error handler to avoid uncaught error event exceptions, but\r\n             * there is nothing we can reasonably do here. Any error event should\r\n             * have a corresponding close event, which handles emitting the cancelled\r\n             * event. And the stream is now in a bad state, so we can't reasonably\r\n             * expect to be able to send an error over it. */\r\n        });\r\n        this.stream.once('close', () => {\r\n            var _a;\r\n            trace('Request to method ' +\r\n                ((_a = this.handler) === null || _a === void 0 ? void 0 : _a.path) +\r\n                ' stream closed with rstCode ' +\r\n                this.stream.rstCode);\r\n            if (this.callEventTracker && !this.streamEnded) {\r\n                this.streamEnded = true;\r\n                this.callEventTracker.onStreamEnd(false);\r\n                this.callEventTracker.onCallEnd({\r\n                    code: constants_1.Status.CANCELLED,\r\n                    details: 'Stream closed before sending status',\r\n                    metadata: null,\r\n                });\r\n            }\r\n            this.notifyOnCancel();\r\n        });\r\n        this.stream.on('data', (data) => {\r\n            this.handleDataFrame(data);\r\n        });\r\n        this.stream.pause();\r\n        this.stream.on('end', () => {\r\n            this.handleEndEvent();\r\n        });\r\n        if ('grpc.max_send_message_length' in options) {\r\n            this.maxSendMessageSize = options['grpc.max_send_message_length'];\r\n        }\r\n        if ('grpc.max_receive_message_length' in options) {\r\n            this.maxReceiveMessageSize = options['grpc.max_receive_message_length'];\r\n        }\r\n        this.host = (_a = headers[':authority']) !== null && _a !== void 0 ? _a : headers.host;\r\n        this.decoder = new stream_decoder_1.StreamDecoder(this.maxReceiveMessageSize);\r\n        const metadata = metadata_1.Metadata.fromHttp2Headers(headers);\r\n        if (logging.isTracerEnabled(TRACER_NAME)) {\r\n            trace('Request to ' +\r\n                this.handler.path +\r\n                ' received headers ' +\r\n                JSON.stringify(metadata.toJSON()));\r\n        }\r\n        const timeoutHeader = metadata.get(GRPC_TIMEOUT_HEADER);\r\n        if (timeoutHeader.length > 0) {\r\n            this.handleTimeoutHeader(timeoutHeader[0]);\r\n        }\r\n        const encodingHeader = metadata.get(GRPC_ENCODING_HEADER);\r\n        if (encodingHeader.length > 0) {\r\n            this.incomingEncoding = encodingHeader[0];\r\n        }\r\n        // Remove several headers that should not be propagated to the application\r\n        metadata.remove(GRPC_TIMEOUT_HEADER);\r\n        metadata.remove(GRPC_ENCODING_HEADER);\r\n        metadata.remove(GRPC_ACCEPT_ENCODING_HEADER);\r\n        metadata.remove(http2.constants.HTTP2_HEADER_ACCEPT_ENCODING);\r\n        metadata.remove(http2.constants.HTTP2_HEADER_TE);\r\n        metadata.remove(http2.constants.HTTP2_HEADER_CONTENT_TYPE);\r\n        this.metadata = metadata;\r\n    }\r\n    handleTimeoutHeader(timeoutHeader) {\r\n        const match = timeoutHeader.toString().match(DEADLINE_REGEX);\r\n        if (match === null) {\r\n            const status = {\r\n                code: constants_1.Status.INTERNAL,\r\n                details: `Invalid ${GRPC_TIMEOUT_HEADER} value \"${timeoutHeader}\"`,\r\n                metadata: null,\r\n            };\r\n            // Wait for the constructor to complete before sending the error.\r\n            process.nextTick(() => {\r\n                this.sendStatus(status);\r\n            });\r\n            return;\r\n        }\r\n        const timeout = (+match[1] * deadlineUnitsToMs[match[2]]) | 0;\r\n        const now = new Date();\r\n        this.deadline = now.setMilliseconds(now.getMilliseconds() + timeout);\r\n        this.deadlineTimer = setTimeout(() => {\r\n            const status = {\r\n                code: constants_1.Status.DEADLINE_EXCEEDED,\r\n                details: 'Deadline exceeded',\r\n                metadata: null,\r\n            };\r\n            this.sendStatus(status);\r\n        }, timeout);\r\n    }\r\n    checkCancelled() {\r\n        /* In some cases the stream can become destroyed before the close event\r\n         * fires. That creates a race condition that this check works around */\r\n        if (!this.cancelled && (this.stream.destroyed || this.stream.closed)) {\r\n            this.notifyOnCancel();\r\n            this.cancelled = true;\r\n        }\r\n        return this.cancelled;\r\n    }\r\n    notifyOnCancel() {\r\n        if (this.cancelNotified) {\r\n            return;\r\n        }\r\n        this.cancelNotified = true;\r\n        this.cancelled = true;\r\n        process.nextTick(() => {\r\n            var _a;\r\n            (_a = this.listener) === null || _a === void 0 ? void 0 : _a.onCancel();\r\n        });\r\n        if (this.deadlineTimer) {\r\n            clearTimeout(this.deadlineTimer);\r\n        }\r\n        // Flush incoming data frames\r\n        this.stream.resume();\r\n    }\r\n    /**\r\n     * A server handler can start sending messages without explicitly sending\r\n     * metadata. In that case, we need to send headers before sending any\r\n     * messages. This function does that if necessary.\r\n     */\r\n    maybeSendMetadata() {\r\n        if (!this.metadataSent) {\r\n            this.sendMetadata(new metadata_1.Metadata());\r\n        }\r\n    }\r\n    /**\r\n     * Serialize a message to a length-delimited byte string.\r\n     * @param value\r\n     * @returns\r\n     */\r\n    serializeMessage(value) {\r\n        const messageBuffer = this.handler.serialize(value);\r\n        const byteLength = messageBuffer.byteLength;\r\n        const output = Buffer.allocUnsafe(byteLength + 5);\r\n        /* Note: response compression is currently not supported, so this\r\n         * compressed bit is always 0. */\r\n        output.writeUInt8(0, 0);\r\n        output.writeUInt32BE(byteLength, 1);\r\n        messageBuffer.copy(output, 5);\r\n        return output;\r\n    }\r\n    decompressMessage(message, encoding) {\r\n        const messageContents = message.subarray(5);\r\n        if (encoding === 'identity') {\r\n            return messageContents;\r\n        }\r\n        else if (encoding === 'deflate' || encoding === 'gzip') {\r\n            let decompresser;\r\n            if (encoding === 'deflate') {\r\n                decompresser = zlib.createInflate();\r\n            }\r\n            else {\r\n                decompresser = zlib.createGunzip();\r\n            }\r\n            return new Promise((resolve, reject) => {\r\n                let totalLength = 0;\r\n                const messageParts = [];\r\n                decompresser.on('data', (chunk) => {\r\n                    messageParts.push(chunk);\r\n                    totalLength += chunk.byteLength;\r\n                    if (this.maxReceiveMessageSize !== -1 && totalLength > this.maxReceiveMessageSize) {\r\n                        decompresser.destroy();\r\n                        reject({\r\n                            code: constants_1.Status.RESOURCE_EXHAUSTED,\r\n                            details: `Received message that decompresses to a size larger than ${this.maxReceiveMessageSize}`\r\n                        });\r\n                    }\r\n                });\r\n                decompresser.on('end', () => {\r\n                    resolve(Buffer.concat(messageParts));\r\n                });\r\n                decompresser.write(messageContents);\r\n                decompresser.end();\r\n            });\r\n        }\r\n        else {\r\n            return Promise.reject({\r\n                code: constants_1.Status.UNIMPLEMENTED,\r\n                details: `Received message compressed with unsupported encoding \"${encoding}\"`,\r\n            });\r\n        }\r\n    }\r\n    async decompressAndMaybePush(queueEntry) {\r\n        if (queueEntry.type !== 'COMPRESSED') {\r\n            throw new Error(`Invalid queue entry type: ${queueEntry.type}`);\r\n        }\r\n        const compressed = queueEntry.compressedMessage.readUInt8(0) === 1;\r\n        const compressedMessageEncoding = compressed\r\n            ? this.incomingEncoding\r\n            : 'identity';\r\n        let decompressedMessage;\r\n        try {\r\n            decompressedMessage = await this.decompressMessage(queueEntry.compressedMessage, compressedMessageEncoding);\r\n        }\r\n        catch (err) {\r\n            this.sendStatus(err);\r\n            return;\r\n        }\r\n        try {\r\n            queueEntry.parsedMessage = this.handler.deserialize(decompressedMessage);\r\n        }\r\n        catch (err) {\r\n            this.sendStatus({\r\n                code: constants_1.Status.INTERNAL,\r\n                details: `Error deserializing request: ${err.message}`,\r\n            });\r\n            return;\r\n        }\r\n        queueEntry.type = 'READABLE';\r\n        this.maybePushNextMessage();\r\n    }\r\n    maybePushNextMessage() {\r\n        if (this.listener &&\r\n            this.isReadPending &&\r\n            this.readQueue.length > 0 &&\r\n            this.readQueue[0].type !== 'COMPRESSED') {\r\n            this.isReadPending = false;\r\n            const nextQueueEntry = this.readQueue.shift();\r\n            if (nextQueueEntry.type === 'READABLE') {\r\n                this.listener.onReceiveMessage(nextQueueEntry.parsedMessage);\r\n            }\r\n            else {\r\n                // nextQueueEntry.type === 'HALF_CLOSE'\r\n                this.listener.onReceiveHalfClose();\r\n            }\r\n        }\r\n    }\r\n    handleDataFrame(data) {\r\n        var _a;\r\n        if (this.checkCancelled()) {\r\n            return;\r\n        }\r\n        trace('Request to ' +\r\n            this.handler.path +\r\n            ' received data frame of size ' +\r\n            data.length);\r\n        let rawMessages;\r\n        try {\r\n            rawMessages = this.decoder.write(data);\r\n        }\r\n        catch (e) {\r\n            this.sendStatus({ code: constants_1.Status.RESOURCE_EXHAUSTED, details: e.message });\r\n            return;\r\n        }\r\n        for (const messageBytes of rawMessages) {\r\n            this.stream.pause();\r\n            const queueEntry = {\r\n                type: 'COMPRESSED',\r\n                compressedMessage: messageBytes,\r\n                parsedMessage: null,\r\n            };\r\n            this.readQueue.push(queueEntry);\r\n            this.decompressAndMaybePush(queueEntry);\r\n            (_a = this.callEventTracker) === null || _a === void 0 ? void 0 : _a.addMessageReceived();\r\n        }\r\n    }\r\n    handleEndEvent() {\r\n        this.readQueue.push({\r\n            type: 'HALF_CLOSE',\r\n            compressedMessage: null,\r\n            parsedMessage: null,\r\n        });\r\n        this.receivedHalfClose = true;\r\n        this.maybePushNextMessage();\r\n    }\r\n    start(listener) {\r\n        trace('Request to ' + this.handler.path + ' start called');\r\n        if (this.checkCancelled()) {\r\n            return;\r\n        }\r\n        this.listener = listener;\r\n        listener.onReceiveMetadata(this.metadata);\r\n    }\r\n    sendMetadata(metadata) {\r\n        if (this.checkCancelled()) {\r\n            return;\r\n        }\r\n        if (this.metadataSent) {\r\n            return;\r\n        }\r\n        this.metadataSent = true;\r\n        const custom = metadata ? metadata.toHttp2Headers() : null;\r\n        const headers = Object.assign(Object.assign(Object.assign({}, defaultResponseHeaders), defaultCompressionHeaders), custom);\r\n        this.stream.respond(headers, defaultResponseOptions);\r\n    }\r\n    sendMessage(message, callback) {\r\n        if (this.checkCancelled()) {\r\n            return;\r\n        }\r\n        let response;\r\n        try {\r\n            response = this.serializeMessage(message);\r\n        }\r\n        catch (e) {\r\n            this.sendStatus({\r\n                code: constants_1.Status.INTERNAL,\r\n                details: `Error serializing response: ${(0, error_1.getErrorMessage)(e)}`,\r\n                metadata: null,\r\n            });\r\n            return;\r\n        }\r\n        if (this.maxSendMessageSize !== -1 &&\r\n            response.length - 5 > this.maxSendMessageSize) {\r\n            this.sendStatus({\r\n                code: constants_1.Status.RESOURCE_EXHAUSTED,\r\n                details: `Sent message larger than max (${response.length} vs. ${this.maxSendMessageSize})`,\r\n                metadata: null,\r\n            });\r\n            return;\r\n        }\r\n        this.maybeSendMetadata();\r\n        trace('Request to ' +\r\n            this.handler.path +\r\n            ' sent data frame of size ' +\r\n            response.length);\r\n        this.stream.write(response, error => {\r\n            var _a;\r\n            if (error) {\r\n                this.sendStatus({\r\n                    code: constants_1.Status.INTERNAL,\r\n                    details: `Error writing message: ${(0, error_1.getErrorMessage)(error)}`,\r\n                    metadata: null,\r\n                });\r\n                return;\r\n            }\r\n            (_a = this.callEventTracker) === null || _a === void 0 ? void 0 : _a.addMessageSent();\r\n            callback();\r\n        });\r\n    }\r\n    sendStatus(status) {\r\n        var _a, _b;\r\n        if (this.checkCancelled()) {\r\n            return;\r\n        }\r\n        trace('Request to method ' +\r\n            ((_a = this.handler) === null || _a === void 0 ? void 0 : _a.path) +\r\n            ' ended with status code: ' +\r\n            constants_1.Status[status.code] +\r\n            ' details: ' +\r\n            status.details);\r\n        if (this.metadataSent) {\r\n            if (!this.wantTrailers) {\r\n                this.wantTrailers = true;\r\n                this.stream.once('wantTrailers', () => {\r\n                    var _a;\r\n                    if (this.callEventTracker && !this.streamEnded) {\r\n                        this.streamEnded = true;\r\n                        this.callEventTracker.onStreamEnd(true);\r\n                        this.callEventTracker.onCallEnd(status);\r\n                    }\r\n                    const trailersToSend = Object.assign({ [GRPC_STATUS_HEADER]: status.code, [GRPC_MESSAGE_HEADER]: encodeURI(status.details) }, (_a = status.metadata) === null || _a === void 0 ? void 0 : _a.toHttp2Headers());\r\n                    this.stream.sendTrailers(trailersToSend);\r\n                    this.notifyOnCancel();\r\n                });\r\n                this.stream.end();\r\n            }\r\n            else {\r\n                this.notifyOnCancel();\r\n            }\r\n        }\r\n        else {\r\n            if (this.callEventTracker && !this.streamEnded) {\r\n                this.streamEnded = true;\r\n                this.callEventTracker.onStreamEnd(true);\r\n                this.callEventTracker.onCallEnd(status);\r\n            }\r\n            // Trailers-only response\r\n            const trailersToSend = Object.assign(Object.assign({ [GRPC_STATUS_HEADER]: status.code, [GRPC_MESSAGE_HEADER]: encodeURI(status.details) }, defaultResponseHeaders), (_b = status.metadata) === null || _b === void 0 ? void 0 : _b.toHttp2Headers());\r\n            this.stream.respond(trailersToSend, { endStream: true });\r\n            this.notifyOnCancel();\r\n        }\r\n    }\r\n    startRead() {\r\n        trace('Request to ' + this.handler.path + ' startRead called');\r\n        if (this.checkCancelled()) {\r\n            return;\r\n        }\r\n        this.isReadPending = true;\r\n        if (this.readQueue.length === 0) {\r\n            if (!this.receivedHalfClose) {\r\n                this.stream.resume();\r\n            }\r\n        }\r\n        else {\r\n            this.maybePushNextMessage();\r\n        }\r\n    }\r\n    getPeer() {\r\n        var _a;\r\n        const socket = (_a = this.stream.session) === null || _a === void 0 ? void 0 : _a.socket;\r\n        if (socket === null || socket === void 0 ? void 0 : socket.remoteAddress) {\r\n            if (socket.remotePort) {\r\n                return `${socket.remoteAddress}:${socket.remotePort}`;\r\n            }\r\n            else {\r\n                return socket.remoteAddress;\r\n            }\r\n        }\r\n        else {\r\n            return 'unknown';\r\n        }\r\n    }\r\n    getDeadline() {\r\n        return this.deadline;\r\n    }\r\n    getHost() {\r\n        return this.host;\r\n    }\r\n}\r\nexports.BaseServerInterceptingCall = BaseServerInterceptingCall;\r\nfunction getServerInterceptingCall(interceptors, stream, headers, callEventTracker, handler, options) {\r\n    const methodDefinition = {\r\n        path: handler.path,\r\n        requestStream: handler.type === 'clientStream' || handler.type === 'bidi',\r\n        responseStream: handler.type === 'serverStream' || handler.type === 'bidi',\r\n        requestDeserialize: handler.deserialize,\r\n        responseSerialize: handler.serialize,\r\n    };\r\n    const baseCall = new BaseServerInterceptingCall(stream, headers, callEventTracker, handler, options);\r\n    return interceptors.reduce((call, interceptor) => {\r\n        return interceptor(methodDefinition, call);\r\n    }, baseCall);\r\n}\r\n//# sourceMappingURL=server-interceptors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/server-interceptors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/server.js":
/*!********************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/server.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nvar __runInitializers = (this && this.__runInitializers) || function (thisArg, initializers, value) {\r\n    var useValue = arguments.length > 2;\r\n    for (var i = 0; i < initializers.length; i++) {\r\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\r\n    }\r\n    return useValue ? value : void 0;\r\n};\r\nvar __esDecorate = (this && this.__esDecorate) || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\r\n    function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\r\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\r\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\r\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\r\n    var _, done = false;\r\n    for (var i = decorators.length - 1; i >= 0; i--) {\r\n        var context = {};\r\n        for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\r\n        for (var p in contextIn.access) context.access[p] = contextIn.access[p];\r\n        context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\r\n        var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\r\n        if (kind === \"accessor\") {\r\n            if (result === void 0) continue;\r\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\r\n            if (_ = accept(result.get)) descriptor.get = _;\r\n            if (_ = accept(result.set)) descriptor.set = _;\r\n            if (_ = accept(result.init)) initializers.unshift(_);\r\n        }\r\n        else if (_ = accept(result)) {\r\n            if (kind === \"field\") initializers.unshift(_);\r\n            else descriptor[key] = _;\r\n        }\r\n    }\r\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\r\n    done = true;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Server = void 0;\r\nconst http2 = __webpack_require__(/*! http2 */ \"http2\");\r\nconst util = __webpack_require__(/*! util */ \"util\");\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nconst server_call_1 = __webpack_require__(/*! ./server-call */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/server-call.js\");\r\nconst server_credentials_1 = __webpack_require__(/*! ./server-credentials */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/server-credentials.js\");\r\nconst resolver_1 = __webpack_require__(/*! ./resolver */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/resolver.js\");\r\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\r\nconst subchannel_address_1 = __webpack_require__(/*! ./subchannel-address */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/subchannel-address.js\");\r\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\r\nconst channelz_1 = __webpack_require__(/*! ./channelz */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/channelz.js\");\r\nconst server_interceptors_1 = __webpack_require__(/*! ./server-interceptors */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/server-interceptors.js\");\r\nconst UNLIMITED_CONNECTION_AGE_MS = ~(1 << 31);\r\nconst KEEPALIVE_MAX_TIME_MS = ~(1 << 31);\r\nconst KEEPALIVE_TIMEOUT_MS = 20000;\r\nconst MAX_CONNECTION_IDLE_MS = ~(1 << 31);\r\nconst { HTTP2_HEADER_PATH } = http2.constants;\r\nconst TRACER_NAME = 'server';\r\nconst kMaxAge = Buffer.from('max_age');\r\nfunction serverCallTrace(text) {\r\n    logging.trace(constants_1.LogVerbosity.DEBUG, 'server_call', text);\r\n}\r\nfunction noop() { }\r\n/**\r\n * Decorator to wrap a class method with util.deprecate\r\n * @param message The message to output if the deprecated method is called\r\n * @returns\r\n */\r\nfunction deprecate(message) {\r\n    return function (target, context) {\r\n        return util.deprecate(target, message);\r\n    };\r\n}\r\nfunction getUnimplementedStatusResponse(methodName) {\r\n    return {\r\n        code: constants_1.Status.UNIMPLEMENTED,\r\n        details: `The server does not implement the method ${methodName}`,\r\n    };\r\n}\r\nfunction getDefaultHandler(handlerType, methodName) {\r\n    const unimplementedStatusResponse = getUnimplementedStatusResponse(methodName);\r\n    switch (handlerType) {\r\n        case 'unary':\r\n            return (call, callback) => {\r\n                callback(unimplementedStatusResponse, null);\r\n            };\r\n        case 'clientStream':\r\n            return (call, callback) => {\r\n                callback(unimplementedStatusResponse, null);\r\n            };\r\n        case 'serverStream':\r\n            return (call) => {\r\n                call.emit('error', unimplementedStatusResponse);\r\n            };\r\n        case 'bidi':\r\n            return (call) => {\r\n                call.emit('error', unimplementedStatusResponse);\r\n            };\r\n        default:\r\n            throw new Error(`Invalid handlerType ${handlerType}`);\r\n    }\r\n}\r\nlet Server = (() => {\r\n    var _a;\r\n    let _instanceExtraInitializers = [];\r\n    let _start_decorators;\r\n    return _a = class Server {\r\n            constructor(options) {\r\n                var _b, _c, _d, _e, _f, _g;\r\n                this.boundPorts = (__runInitializers(this, _instanceExtraInitializers), new Map());\r\n                this.http2Servers = new Map();\r\n                this.sessionIdleTimeouts = new Map();\r\n                this.handlers = new Map();\r\n                this.sessions = new Map();\r\n                /**\r\n                 * This field only exists to ensure that the start method throws an error if\r\n                 * it is called twice, as it did previously.\r\n                 */\r\n                this.started = false;\r\n                this.shutdown = false;\r\n                this.serverAddressString = 'null';\r\n                // Channelz Info\r\n                this.channelzEnabled = true;\r\n                this.options = options !== null && options !== void 0 ? options : {};\r\n                if (this.options['grpc.enable_channelz'] === 0) {\r\n                    this.channelzEnabled = false;\r\n                    this.channelzTrace = new channelz_1.ChannelzTraceStub();\r\n                    this.callTracker = new channelz_1.ChannelzCallTrackerStub();\r\n                    this.listenerChildrenTracker = new channelz_1.ChannelzChildrenTrackerStub();\r\n                    this.sessionChildrenTracker = new channelz_1.ChannelzChildrenTrackerStub();\r\n                }\r\n                else {\r\n                    this.channelzTrace = new channelz_1.ChannelzTrace();\r\n                    this.callTracker = new channelz_1.ChannelzCallTracker();\r\n                    this.listenerChildrenTracker = new channelz_1.ChannelzChildrenTracker();\r\n                    this.sessionChildrenTracker = new channelz_1.ChannelzChildrenTracker();\r\n                }\r\n                this.channelzRef = (0, channelz_1.registerChannelzServer)('server', () => this.getChannelzInfo(), this.channelzEnabled);\r\n                this.channelzTrace.addTrace('CT_INFO', 'Server created');\r\n                this.maxConnectionAgeMs =\r\n                    (_b = this.options['grpc.max_connection_age_ms']) !== null && _b !== void 0 ? _b : UNLIMITED_CONNECTION_AGE_MS;\r\n                this.maxConnectionAgeGraceMs =\r\n                    (_c = this.options['grpc.max_connection_age_grace_ms']) !== null && _c !== void 0 ? _c : UNLIMITED_CONNECTION_AGE_MS;\r\n                this.keepaliveTimeMs =\r\n                    (_d = this.options['grpc.keepalive_time_ms']) !== null && _d !== void 0 ? _d : KEEPALIVE_MAX_TIME_MS;\r\n                this.keepaliveTimeoutMs =\r\n                    (_e = this.options['grpc.keepalive_timeout_ms']) !== null && _e !== void 0 ? _e : KEEPALIVE_TIMEOUT_MS;\r\n                this.sessionIdleTimeout =\r\n                    (_f = this.options['grpc.max_connection_idle_ms']) !== null && _f !== void 0 ? _f : MAX_CONNECTION_IDLE_MS;\r\n                this.commonServerOptions = {\r\n                    maxSendHeaderBlockLength: Number.MAX_SAFE_INTEGER,\r\n                };\r\n                if ('grpc-node.max_session_memory' in this.options) {\r\n                    this.commonServerOptions.maxSessionMemory =\r\n                        this.options['grpc-node.max_session_memory'];\r\n                }\r\n                else {\r\n                    /* By default, set a very large max session memory limit, to effectively\r\n                     * disable enforcement of the limit. Some testing indicates that Node's\r\n                     * behavior degrades badly when this limit is reached, so we solve that\r\n                     * by disabling the check entirely. */\r\n                    this.commonServerOptions.maxSessionMemory = Number.MAX_SAFE_INTEGER;\r\n                }\r\n                if ('grpc.max_concurrent_streams' in this.options) {\r\n                    this.commonServerOptions.settings = {\r\n                        maxConcurrentStreams: this.options['grpc.max_concurrent_streams'],\r\n                    };\r\n                }\r\n                this.interceptors = (_g = this.options.interceptors) !== null && _g !== void 0 ? _g : [];\r\n                this.trace('Server constructed');\r\n            }\r\n            getChannelzInfo() {\r\n                return {\r\n                    trace: this.channelzTrace,\r\n                    callTracker: this.callTracker,\r\n                    listenerChildren: this.listenerChildrenTracker.getChildLists(),\r\n                    sessionChildren: this.sessionChildrenTracker.getChildLists(),\r\n                };\r\n            }\r\n            getChannelzSessionInfo(session) {\r\n                var _b, _c, _d;\r\n                const sessionInfo = this.sessions.get(session);\r\n                const sessionSocket = session.socket;\r\n                const remoteAddress = sessionSocket.remoteAddress\r\n                    ? (0, subchannel_address_1.stringToSubchannelAddress)(sessionSocket.remoteAddress, sessionSocket.remotePort)\r\n                    : null;\r\n                const localAddress = sessionSocket.localAddress\r\n                    ? (0, subchannel_address_1.stringToSubchannelAddress)(sessionSocket.localAddress, sessionSocket.localPort)\r\n                    : null;\r\n                let tlsInfo;\r\n                if (session.encrypted) {\r\n                    const tlsSocket = sessionSocket;\r\n                    const cipherInfo = tlsSocket.getCipher();\r\n                    const certificate = tlsSocket.getCertificate();\r\n                    const peerCertificate = tlsSocket.getPeerCertificate();\r\n                    tlsInfo = {\r\n                        cipherSuiteStandardName: (_b = cipherInfo.standardName) !== null && _b !== void 0 ? _b : null,\r\n                        cipherSuiteOtherName: cipherInfo.standardName ? null : cipherInfo.name,\r\n                        localCertificate: certificate && 'raw' in certificate ? certificate.raw : null,\r\n                        remoteCertificate: peerCertificate && 'raw' in peerCertificate\r\n                            ? peerCertificate.raw\r\n                            : null,\r\n                    };\r\n                }\r\n                else {\r\n                    tlsInfo = null;\r\n                }\r\n                const socketInfo = {\r\n                    remoteAddress: remoteAddress,\r\n                    localAddress: localAddress,\r\n                    security: tlsInfo,\r\n                    remoteName: null,\r\n                    streamsStarted: sessionInfo.streamTracker.callsStarted,\r\n                    streamsSucceeded: sessionInfo.streamTracker.callsSucceeded,\r\n                    streamsFailed: sessionInfo.streamTracker.callsFailed,\r\n                    messagesSent: sessionInfo.messagesSent,\r\n                    messagesReceived: sessionInfo.messagesReceived,\r\n                    keepAlivesSent: sessionInfo.keepAlivesSent,\r\n                    lastLocalStreamCreatedTimestamp: null,\r\n                    lastRemoteStreamCreatedTimestamp: sessionInfo.streamTracker.lastCallStartedTimestamp,\r\n                    lastMessageSentTimestamp: sessionInfo.lastMessageSentTimestamp,\r\n                    lastMessageReceivedTimestamp: sessionInfo.lastMessageReceivedTimestamp,\r\n                    localFlowControlWindow: (_c = session.state.localWindowSize) !== null && _c !== void 0 ? _c : null,\r\n                    remoteFlowControlWindow: (_d = session.state.remoteWindowSize) !== null && _d !== void 0 ? _d : null,\r\n                };\r\n                return socketInfo;\r\n            }\r\n            trace(text) {\r\n                logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, '(' + this.channelzRef.id + ') ' + text);\r\n            }\r\n            keepaliveTrace(text) {\r\n                logging.trace(constants_1.LogVerbosity.DEBUG, 'keepalive', '(' + this.channelzRef.id + ') ' + text);\r\n            }\r\n            addProtoService() {\r\n                throw new Error('Not implemented. Use addService() instead');\r\n            }\r\n            addService(service, implementation) {\r\n                if (service === null ||\r\n                    typeof service !== 'object' ||\r\n                    implementation === null ||\r\n                    typeof implementation !== 'object') {\r\n                    throw new Error('addService() requires two objects as arguments');\r\n                }\r\n                const serviceKeys = Object.keys(service);\r\n                if (serviceKeys.length === 0) {\r\n                    throw new Error('Cannot add an empty service to a server');\r\n                }\r\n                serviceKeys.forEach(name => {\r\n                    const attrs = service[name];\r\n                    let methodType;\r\n                    if (attrs.requestStream) {\r\n                        if (attrs.responseStream) {\r\n                            methodType = 'bidi';\r\n                        }\r\n                        else {\r\n                            methodType = 'clientStream';\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (attrs.responseStream) {\r\n                            methodType = 'serverStream';\r\n                        }\r\n                        else {\r\n                            methodType = 'unary';\r\n                        }\r\n                    }\r\n                    let implFn = implementation[name];\r\n                    let impl;\r\n                    if (implFn === undefined && typeof attrs.originalName === 'string') {\r\n                        implFn = implementation[attrs.originalName];\r\n                    }\r\n                    if (implFn !== undefined) {\r\n                        impl = implFn.bind(implementation);\r\n                    }\r\n                    else {\r\n                        impl = getDefaultHandler(methodType, name);\r\n                    }\r\n                    const success = this.register(attrs.path, impl, attrs.responseSerialize, attrs.requestDeserialize, methodType);\r\n                    if (success === false) {\r\n                        throw new Error(`Method handler for ${attrs.path} already provided.`);\r\n                    }\r\n                });\r\n            }\r\n            removeService(service) {\r\n                if (service === null || typeof service !== 'object') {\r\n                    throw new Error('removeService() requires object as argument');\r\n                }\r\n                const serviceKeys = Object.keys(service);\r\n                serviceKeys.forEach(name => {\r\n                    const attrs = service[name];\r\n                    this.unregister(attrs.path);\r\n                });\r\n            }\r\n            bind(port, creds) {\r\n                throw new Error('Not implemented. Use bindAsync() instead');\r\n            }\r\n            /**\r\n             * This API is experimental, so API stability is not guaranteed across minor versions.\r\n             * @param boundAddress\r\n             * @returns\r\n             */\r\n            experimentalRegisterListenerToChannelz(boundAddress) {\r\n                return (0, channelz_1.registerChannelzSocket)((0, subchannel_address_1.subchannelAddressToString)(boundAddress), () => {\r\n                    return {\r\n                        localAddress: boundAddress,\r\n                        remoteAddress: null,\r\n                        security: null,\r\n                        remoteName: null,\r\n                        streamsStarted: 0,\r\n                        streamsSucceeded: 0,\r\n                        streamsFailed: 0,\r\n                        messagesSent: 0,\r\n                        messagesReceived: 0,\r\n                        keepAlivesSent: 0,\r\n                        lastLocalStreamCreatedTimestamp: null,\r\n                        lastRemoteStreamCreatedTimestamp: null,\r\n                        lastMessageSentTimestamp: null,\r\n                        lastMessageReceivedTimestamp: null,\r\n                        localFlowControlWindow: null,\r\n                        remoteFlowControlWindow: null,\r\n                    };\r\n                }, this.channelzEnabled);\r\n            }\r\n            experimentalUnregisterListenerFromChannelz(channelzRef) {\r\n                (0, channelz_1.unregisterChannelzRef)(channelzRef);\r\n            }\r\n            createHttp2Server(credentials) {\r\n                let http2Server;\r\n                if (credentials._isSecure()) {\r\n                    const constructorOptions = credentials._getConstructorOptions();\r\n                    const contextOptions = credentials._getSecureContextOptions();\r\n                    const secureServerOptions = Object.assign(Object.assign(Object.assign(Object.assign({}, this.commonServerOptions), constructorOptions), contextOptions), { enableTrace: this.options['grpc-node.tls_enable_trace'] === 1 });\r\n                    let areCredentialsValid = contextOptions !== null;\r\n                    this.trace('Initial credentials valid: ' + areCredentialsValid);\r\n                    http2Server = http2.createSecureServer(secureServerOptions);\r\n                    http2Server.prependListener('connection', (socket) => {\r\n                        if (!areCredentialsValid) {\r\n                            this.trace('Dropped connection from ' + JSON.stringify(socket.address()) + ' due to unloaded credentials');\r\n                            socket.destroy();\r\n                        }\r\n                    });\r\n                    http2Server.on('secureConnection', (socket) => {\r\n                        /* These errors need to be handled by the user of Http2SecureServer,\r\n                         * according to https://github.com/nodejs/node/issues/35824 */\r\n                        socket.on('error', (e) => {\r\n                            this.trace('An incoming TLS connection closed with error: ' + e.message);\r\n                        });\r\n                    });\r\n                    const credsWatcher = options => {\r\n                        if (options) {\r\n                            const secureServer = http2Server;\r\n                            try {\r\n                                secureServer.setSecureContext(options);\r\n                            }\r\n                            catch (e) {\r\n                                logging.log(constants_1.LogVerbosity.ERROR, 'Failed to set secure context with error ' + e.message);\r\n                                options = null;\r\n                            }\r\n                        }\r\n                        areCredentialsValid = options !== null;\r\n                        this.trace('Post-update credentials valid: ' + areCredentialsValid);\r\n                    };\r\n                    credentials._addWatcher(credsWatcher);\r\n                    http2Server.on('close', () => {\r\n                        credentials._removeWatcher(credsWatcher);\r\n                    });\r\n                }\r\n                else {\r\n                    http2Server = http2.createServer(this.commonServerOptions);\r\n                }\r\n                http2Server.setTimeout(0, noop);\r\n                this._setupHandlers(http2Server, credentials._getInterceptors());\r\n                return http2Server;\r\n            }\r\n            bindOneAddress(address, boundPortObject) {\r\n                this.trace('Attempting to bind ' + (0, subchannel_address_1.subchannelAddressToString)(address));\r\n                const http2Server = this.createHttp2Server(boundPortObject.credentials);\r\n                return new Promise((resolve, reject) => {\r\n                    const onError = (err) => {\r\n                        this.trace('Failed to bind ' +\r\n                            (0, subchannel_address_1.subchannelAddressToString)(address) +\r\n                            ' with error ' +\r\n                            err.message);\r\n                        resolve({\r\n                            port: 'port' in address ? address.port : 1,\r\n                            error: err.message,\r\n                        });\r\n                    };\r\n                    http2Server.once('error', onError);\r\n                    http2Server.listen(address, () => {\r\n                        const boundAddress = http2Server.address();\r\n                        let boundSubchannelAddress;\r\n                        if (typeof boundAddress === 'string') {\r\n                            boundSubchannelAddress = {\r\n                                path: boundAddress,\r\n                            };\r\n                        }\r\n                        else {\r\n                            boundSubchannelAddress = {\r\n                                host: boundAddress.address,\r\n                                port: boundAddress.port,\r\n                            };\r\n                        }\r\n                        const channelzRef = this.experimentalRegisterListenerToChannelz(boundSubchannelAddress);\r\n                        this.listenerChildrenTracker.refChild(channelzRef);\r\n                        this.http2Servers.set(http2Server, {\r\n                            channelzRef: channelzRef,\r\n                            sessions: new Set(),\r\n                            ownsChannelzRef: true\r\n                        });\r\n                        boundPortObject.listeningServers.add(http2Server);\r\n                        this.trace('Successfully bound ' +\r\n                            (0, subchannel_address_1.subchannelAddressToString)(boundSubchannelAddress));\r\n                        resolve({\r\n                            port: 'port' in boundSubchannelAddress ? boundSubchannelAddress.port : 1,\r\n                        });\r\n                        http2Server.removeListener('error', onError);\r\n                    });\r\n                });\r\n            }\r\n            async bindManyPorts(addressList, boundPortObject) {\r\n                if (addressList.length === 0) {\r\n                    return {\r\n                        count: 0,\r\n                        port: 0,\r\n                        errors: [],\r\n                    };\r\n                }\r\n                if ((0, subchannel_address_1.isTcpSubchannelAddress)(addressList[0]) && addressList[0].port === 0) {\r\n                    /* If binding to port 0, first try to bind the first address, then bind\r\n                     * the rest of the address list to the specific port that it binds. */\r\n                    const firstAddressResult = await this.bindOneAddress(addressList[0], boundPortObject);\r\n                    if (firstAddressResult.error) {\r\n                        /* If the first address fails to bind, try the same operation starting\r\n                         * from the second item in the list. */\r\n                        const restAddressResult = await this.bindManyPorts(addressList.slice(1), boundPortObject);\r\n                        return Object.assign(Object.assign({}, restAddressResult), { errors: [firstAddressResult.error, ...restAddressResult.errors] });\r\n                    }\r\n                    else {\r\n                        const restAddresses = addressList\r\n                            .slice(1)\r\n                            .map(address => (0, subchannel_address_1.isTcpSubchannelAddress)(address)\r\n                            ? { host: address.host, port: firstAddressResult.port }\r\n                            : address);\r\n                        const restAddressResult = await Promise.all(restAddresses.map(address => this.bindOneAddress(address, boundPortObject)));\r\n                        const allResults = [firstAddressResult, ...restAddressResult];\r\n                        return {\r\n                            count: allResults.filter(result => result.error === undefined).length,\r\n                            port: firstAddressResult.port,\r\n                            errors: allResults\r\n                                .filter(result => result.error)\r\n                                .map(result => result.error),\r\n                        };\r\n                    }\r\n                }\r\n                else {\r\n                    const allResults = await Promise.all(addressList.map(address => this.bindOneAddress(address, boundPortObject)));\r\n                    return {\r\n                        count: allResults.filter(result => result.error === undefined).length,\r\n                        port: allResults[0].port,\r\n                        errors: allResults\r\n                            .filter(result => result.error)\r\n                            .map(result => result.error),\r\n                    };\r\n                }\r\n            }\r\n            async bindAddressList(addressList, boundPortObject) {\r\n                const bindResult = await this.bindManyPorts(addressList, boundPortObject);\r\n                if (bindResult.count > 0) {\r\n                    if (bindResult.count < addressList.length) {\r\n                        logging.log(constants_1.LogVerbosity.INFO, `WARNING Only ${bindResult.count} addresses added out of total ${addressList.length} resolved`);\r\n                    }\r\n                    return bindResult.port;\r\n                }\r\n                else {\r\n                    const errorString = `No address added out of total ${addressList.length} resolved`;\r\n                    logging.log(constants_1.LogVerbosity.ERROR, errorString);\r\n                    throw new Error(`${errorString} errors: [${bindResult.errors.join(',')}]`);\r\n                }\r\n            }\r\n            resolvePort(port) {\r\n                return new Promise((resolve, reject) => {\r\n                    const resolverListener = {\r\n                        onSuccessfulResolution: (endpointList, serviceConfig, serviceConfigError) => {\r\n                            // We only want one resolution result. Discard all future results\r\n                            resolverListener.onSuccessfulResolution = () => { };\r\n                            const addressList = [].concat(...endpointList.map(endpoint => endpoint.addresses));\r\n                            if (addressList.length === 0) {\r\n                                reject(new Error(`No addresses resolved for port ${port}`));\r\n                                return;\r\n                            }\r\n                            resolve(addressList);\r\n                        },\r\n                        onError: error => {\r\n                            reject(new Error(error.details));\r\n                        },\r\n                    };\r\n                    const resolver = (0, resolver_1.createResolver)(port, resolverListener, this.options);\r\n                    resolver.updateResolution();\r\n                });\r\n            }\r\n            async bindPort(port, boundPortObject) {\r\n                const addressList = await this.resolvePort(port);\r\n                if (boundPortObject.cancelled) {\r\n                    this.completeUnbind(boundPortObject);\r\n                    throw new Error('bindAsync operation cancelled by unbind call');\r\n                }\r\n                const portNumber = await this.bindAddressList(addressList, boundPortObject);\r\n                if (boundPortObject.cancelled) {\r\n                    this.completeUnbind(boundPortObject);\r\n                    throw new Error('bindAsync operation cancelled by unbind call');\r\n                }\r\n                return portNumber;\r\n            }\r\n            normalizePort(port) {\r\n                const initialPortUri = (0, uri_parser_1.parseUri)(port);\r\n                if (initialPortUri === null) {\r\n                    throw new Error(`Could not parse port \"${port}\"`);\r\n                }\r\n                const portUri = (0, resolver_1.mapUriDefaultScheme)(initialPortUri);\r\n                if (portUri === null) {\r\n                    throw new Error(`Could not get a default scheme for port \"${port}\"`);\r\n                }\r\n                return portUri;\r\n            }\r\n            bindAsync(port, creds, callback) {\r\n                if (this.shutdown) {\r\n                    throw new Error('bindAsync called after shutdown');\r\n                }\r\n                if (typeof port !== 'string') {\r\n                    throw new TypeError('port must be a string');\r\n                }\r\n                if (creds === null || !(creds instanceof server_credentials_1.ServerCredentials)) {\r\n                    throw new TypeError('creds must be a ServerCredentials object');\r\n                }\r\n                if (typeof callback !== 'function') {\r\n                    throw new TypeError('callback must be a function');\r\n                }\r\n                this.trace('bindAsync port=' + port);\r\n                const portUri = this.normalizePort(port);\r\n                const deferredCallback = (error, port) => {\r\n                    process.nextTick(() => callback(error, port));\r\n                };\r\n                /* First, if this port is already bound or that bind operation is in\r\n                 * progress, use that result. */\r\n                let boundPortObject = this.boundPorts.get((0, uri_parser_1.uriToString)(portUri));\r\n                if (boundPortObject) {\r\n                    if (!creds._equals(boundPortObject.credentials)) {\r\n                        deferredCallback(new Error(`${port} already bound with incompatible credentials`), 0);\r\n                        return;\r\n                    }\r\n                    /* If that operation has previously been cancelled by an unbind call,\r\n                     * uncancel it. */\r\n                    boundPortObject.cancelled = false;\r\n                    if (boundPortObject.completionPromise) {\r\n                        boundPortObject.completionPromise.then(portNum => callback(null, portNum), error => callback(error, 0));\r\n                    }\r\n                    else {\r\n                        deferredCallback(null, boundPortObject.portNumber);\r\n                    }\r\n                    return;\r\n                }\r\n                boundPortObject = {\r\n                    mapKey: (0, uri_parser_1.uriToString)(portUri),\r\n                    originalUri: portUri,\r\n                    completionPromise: null,\r\n                    cancelled: false,\r\n                    portNumber: 0,\r\n                    credentials: creds,\r\n                    listeningServers: new Set(),\r\n                };\r\n                const splitPort = (0, uri_parser_1.splitHostPort)(portUri.path);\r\n                const completionPromise = this.bindPort(portUri, boundPortObject);\r\n                boundPortObject.completionPromise = completionPromise;\r\n                /* If the port number is 0, defer populating the map entry until after the\r\n                 * bind operation completes and we have a specific port number. Otherwise,\r\n                 * populate it immediately. */\r\n                if ((splitPort === null || splitPort === void 0 ? void 0 : splitPort.port) === 0) {\r\n                    completionPromise.then(portNum => {\r\n                        const finalUri = {\r\n                            scheme: portUri.scheme,\r\n                            authority: portUri.authority,\r\n                            path: (0, uri_parser_1.combineHostPort)({ host: splitPort.host, port: portNum }),\r\n                        };\r\n                        boundPortObject.mapKey = (0, uri_parser_1.uriToString)(finalUri);\r\n                        boundPortObject.completionPromise = null;\r\n                        boundPortObject.portNumber = portNum;\r\n                        this.boundPorts.set(boundPortObject.mapKey, boundPortObject);\r\n                        callback(null, portNum);\r\n                    }, error => {\r\n                        callback(error, 0);\r\n                    });\r\n                }\r\n                else {\r\n                    this.boundPorts.set(boundPortObject.mapKey, boundPortObject);\r\n                    completionPromise.then(portNum => {\r\n                        boundPortObject.completionPromise = null;\r\n                        boundPortObject.portNumber = portNum;\r\n                        callback(null, portNum);\r\n                    }, error => {\r\n                        callback(error, 0);\r\n                    });\r\n                }\r\n            }\r\n            registerInjectorToChannelz() {\r\n                return (0, channelz_1.registerChannelzSocket)('injector', () => {\r\n                    return {\r\n                        localAddress: null,\r\n                        remoteAddress: null,\r\n                        security: null,\r\n                        remoteName: null,\r\n                        streamsStarted: 0,\r\n                        streamsSucceeded: 0,\r\n                        streamsFailed: 0,\r\n                        messagesSent: 0,\r\n                        messagesReceived: 0,\r\n                        keepAlivesSent: 0,\r\n                        lastLocalStreamCreatedTimestamp: null,\r\n                        lastRemoteStreamCreatedTimestamp: null,\r\n                        lastMessageSentTimestamp: null,\r\n                        lastMessageReceivedTimestamp: null,\r\n                        localFlowControlWindow: null,\r\n                        remoteFlowControlWindow: null,\r\n                    };\r\n                }, this.channelzEnabled);\r\n            }\r\n            /**\r\n             * This API is experimental, so API stability is not guaranteed across minor versions.\r\n             * @param credentials\r\n             * @param channelzRef\r\n             * @returns\r\n             */\r\n            experimentalCreateConnectionInjectorWithChannelzRef(credentials, channelzRef, ownsChannelzRef = false) {\r\n                if (credentials === null || !(credentials instanceof server_credentials_1.ServerCredentials)) {\r\n                    throw new TypeError('creds must be a ServerCredentials object');\r\n                }\r\n                if (this.channelzEnabled) {\r\n                    this.listenerChildrenTracker.refChild(channelzRef);\r\n                }\r\n                const server = this.createHttp2Server(credentials);\r\n                const sessionsSet = new Set();\r\n                this.http2Servers.set(server, {\r\n                    channelzRef: channelzRef,\r\n                    sessions: sessionsSet,\r\n                    ownsChannelzRef\r\n                });\r\n                return {\r\n                    injectConnection: (connection) => {\r\n                        server.emit('connection', connection);\r\n                    },\r\n                    drain: (graceTimeMs) => {\r\n                        var _b, _c;\r\n                        for (const session of sessionsSet) {\r\n                            this.closeSession(session);\r\n                        }\r\n                        (_c = (_b = setTimeout(() => {\r\n                            for (const session of sessionsSet) {\r\n                                session.destroy(http2.constants.NGHTTP2_CANCEL);\r\n                            }\r\n                        }, graceTimeMs)).unref) === null || _c === void 0 ? void 0 : _c.call(_b);\r\n                    },\r\n                    destroy: () => {\r\n                        this.closeServer(server);\r\n                        for (const session of sessionsSet) {\r\n                            this.closeSession(session);\r\n                        }\r\n                    }\r\n                };\r\n            }\r\n            createConnectionInjector(credentials) {\r\n                if (credentials === null || !(credentials instanceof server_credentials_1.ServerCredentials)) {\r\n                    throw new TypeError('creds must be a ServerCredentials object');\r\n                }\r\n                const channelzRef = this.registerInjectorToChannelz();\r\n                return this.experimentalCreateConnectionInjectorWithChannelzRef(credentials, channelzRef, true);\r\n            }\r\n            closeServer(server, callback) {\r\n                this.trace('Closing server with address ' + JSON.stringify(server.address()));\r\n                const serverInfo = this.http2Servers.get(server);\r\n                server.close(() => {\r\n                    if (serverInfo && serverInfo.ownsChannelzRef) {\r\n                        this.listenerChildrenTracker.unrefChild(serverInfo.channelzRef);\r\n                        (0, channelz_1.unregisterChannelzRef)(serverInfo.channelzRef);\r\n                    }\r\n                    this.http2Servers.delete(server);\r\n                    callback === null || callback === void 0 ? void 0 : callback();\r\n                });\r\n            }\r\n            closeSession(session, callback) {\r\n                var _b;\r\n                this.trace('Closing session initiated by ' + ((_b = session.socket) === null || _b === void 0 ? void 0 : _b.remoteAddress));\r\n                const sessionInfo = this.sessions.get(session);\r\n                const closeCallback = () => {\r\n                    if (sessionInfo) {\r\n                        this.sessionChildrenTracker.unrefChild(sessionInfo.ref);\r\n                        (0, channelz_1.unregisterChannelzRef)(sessionInfo.ref);\r\n                    }\r\n                    callback === null || callback === void 0 ? void 0 : callback();\r\n                };\r\n                if (session.closed) {\r\n                    queueMicrotask(closeCallback);\r\n                }\r\n                else {\r\n                    session.close(closeCallback);\r\n                }\r\n            }\r\n            completeUnbind(boundPortObject) {\r\n                for (const server of boundPortObject.listeningServers) {\r\n                    const serverInfo = this.http2Servers.get(server);\r\n                    this.closeServer(server, () => {\r\n                        boundPortObject.listeningServers.delete(server);\r\n                    });\r\n                    if (serverInfo) {\r\n                        for (const session of serverInfo.sessions) {\r\n                            this.closeSession(session);\r\n                        }\r\n                    }\r\n                }\r\n                this.boundPorts.delete(boundPortObject.mapKey);\r\n            }\r\n            /**\r\n             * Unbind a previously bound port, or cancel an in-progress bindAsync\r\n             * operation. If port 0 was bound, only the actual bound port can be\r\n             * unbound. For example, if bindAsync was called with \"localhost:0\" and the\r\n             * bound port result was 54321, it can be unbound as \"localhost:54321\".\r\n             * @param port\r\n             */\r\n            unbind(port) {\r\n                this.trace('unbind port=' + port);\r\n                const portUri = this.normalizePort(port);\r\n                const splitPort = (0, uri_parser_1.splitHostPort)(portUri.path);\r\n                if ((splitPort === null || splitPort === void 0 ? void 0 : splitPort.port) === 0) {\r\n                    throw new Error('Cannot unbind port 0');\r\n                }\r\n                const boundPortObject = this.boundPorts.get((0, uri_parser_1.uriToString)(portUri));\r\n                if (boundPortObject) {\r\n                    this.trace('unbinding ' +\r\n                        boundPortObject.mapKey +\r\n                        ' originally bound as ' +\r\n                        (0, uri_parser_1.uriToString)(boundPortObject.originalUri));\r\n                    /* If the bind operation is pending, the cancelled flag will trigger\r\n                     * the unbind operation later. */\r\n                    if (boundPortObject.completionPromise) {\r\n                        boundPortObject.cancelled = true;\r\n                    }\r\n                    else {\r\n                        this.completeUnbind(boundPortObject);\r\n                    }\r\n                }\r\n            }\r\n            /**\r\n             * Gracefully close all connections associated with a previously bound port.\r\n             * After the grace time, forcefully close all remaining open connections.\r\n             *\r\n             * If port 0 was bound, only the actual bound port can be\r\n             * drained. For example, if bindAsync was called with \"localhost:0\" and the\r\n             * bound port result was 54321, it can be drained as \"localhost:54321\".\r\n             * @param port\r\n             * @param graceTimeMs\r\n             * @returns\r\n             */\r\n            drain(port, graceTimeMs) {\r\n                var _b, _c;\r\n                this.trace('drain port=' + port + ' graceTimeMs=' + graceTimeMs);\r\n                const portUri = this.normalizePort(port);\r\n                const splitPort = (0, uri_parser_1.splitHostPort)(portUri.path);\r\n                if ((splitPort === null || splitPort === void 0 ? void 0 : splitPort.port) === 0) {\r\n                    throw new Error('Cannot drain port 0');\r\n                }\r\n                const boundPortObject = this.boundPorts.get((0, uri_parser_1.uriToString)(portUri));\r\n                if (!boundPortObject) {\r\n                    return;\r\n                }\r\n                const allSessions = new Set();\r\n                for (const http2Server of boundPortObject.listeningServers) {\r\n                    const serverEntry = this.http2Servers.get(http2Server);\r\n                    if (serverEntry) {\r\n                        for (const session of serverEntry.sessions) {\r\n                            allSessions.add(session);\r\n                            this.closeSession(session, () => {\r\n                                allSessions.delete(session);\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n                /* After the grace time ends, send another goaway to all remaining sessions\r\n                 * with the CANCEL code. */\r\n                (_c = (_b = setTimeout(() => {\r\n                    for (const session of allSessions) {\r\n                        session.destroy(http2.constants.NGHTTP2_CANCEL);\r\n                    }\r\n                }, graceTimeMs)).unref) === null || _c === void 0 ? void 0 : _c.call(_b);\r\n            }\r\n            forceShutdown() {\r\n                for (const boundPortObject of this.boundPorts.values()) {\r\n                    boundPortObject.cancelled = true;\r\n                }\r\n                this.boundPorts.clear();\r\n                // Close the server if it is still running.\r\n                for (const server of this.http2Servers.keys()) {\r\n                    this.closeServer(server);\r\n                }\r\n                // Always destroy any available sessions. It's possible that one or more\r\n                // tryShutdown() calls are in progress. Don't wait on them to finish.\r\n                this.sessions.forEach((channelzInfo, session) => {\r\n                    this.closeSession(session);\r\n                    // Cast NGHTTP2_CANCEL to any because TypeScript doesn't seem to\r\n                    // recognize destroy(code) as a valid signature.\r\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                    session.destroy(http2.constants.NGHTTP2_CANCEL);\r\n                });\r\n                this.sessions.clear();\r\n                (0, channelz_1.unregisterChannelzRef)(this.channelzRef);\r\n                this.shutdown = true;\r\n            }\r\n            register(name, handler, serialize, deserialize, type) {\r\n                if (this.handlers.has(name)) {\r\n                    return false;\r\n                }\r\n                this.handlers.set(name, {\r\n                    func: handler,\r\n                    serialize,\r\n                    deserialize,\r\n                    type,\r\n                    path: name,\r\n                });\r\n                return true;\r\n            }\r\n            unregister(name) {\r\n                return this.handlers.delete(name);\r\n            }\r\n            /**\r\n             * @deprecated No longer needed as of version 1.10.x\r\n             */\r\n            start() {\r\n                if (this.http2Servers.size === 0 ||\r\n                    [...this.http2Servers.keys()].every(server => !server.listening)) {\r\n                    throw new Error('server must be bound in order to start');\r\n                }\r\n                if (this.started === true) {\r\n                    throw new Error('server is already started');\r\n                }\r\n                this.started = true;\r\n            }\r\n            tryShutdown(callback) {\r\n                var _b;\r\n                const wrappedCallback = (error) => {\r\n                    (0, channelz_1.unregisterChannelzRef)(this.channelzRef);\r\n                    callback(error);\r\n                };\r\n                let pendingChecks = 0;\r\n                function maybeCallback() {\r\n                    pendingChecks--;\r\n                    if (pendingChecks === 0) {\r\n                        wrappedCallback();\r\n                    }\r\n                }\r\n                this.shutdown = true;\r\n                for (const [serverKey, server] of this.http2Servers.entries()) {\r\n                    pendingChecks++;\r\n                    const serverString = server.channelzRef.name;\r\n                    this.trace('Waiting for server ' + serverString + ' to close');\r\n                    this.closeServer(serverKey, () => {\r\n                        this.trace('Server ' + serverString + ' finished closing');\r\n                        maybeCallback();\r\n                    });\r\n                    for (const session of server.sessions.keys()) {\r\n                        pendingChecks++;\r\n                        const sessionString = (_b = session.socket) === null || _b === void 0 ? void 0 : _b.remoteAddress;\r\n                        this.trace('Waiting for session ' + sessionString + ' to close');\r\n                        this.closeSession(session, () => {\r\n                            this.trace('Session ' + sessionString + ' finished closing');\r\n                            maybeCallback();\r\n                        });\r\n                    }\r\n                }\r\n                if (pendingChecks === 0) {\r\n                    wrappedCallback();\r\n                }\r\n            }\r\n            addHttp2Port() {\r\n                throw new Error('Not yet implemented');\r\n            }\r\n            /**\r\n             * Get the channelz reference object for this server. The returned value is\r\n             * garbage if channelz is disabled for this server.\r\n             * @returns\r\n             */\r\n            getChannelzRef() {\r\n                return this.channelzRef;\r\n            }\r\n            _verifyContentType(stream, headers) {\r\n                const contentType = headers[http2.constants.HTTP2_HEADER_CONTENT_TYPE];\r\n                if (typeof contentType !== 'string' ||\r\n                    !contentType.startsWith('application/grpc')) {\r\n                    stream.respond({\r\n                        [http2.constants.HTTP2_HEADER_STATUS]: http2.constants.HTTP_STATUS_UNSUPPORTED_MEDIA_TYPE,\r\n                    }, { endStream: true });\r\n                    return false;\r\n                }\r\n                return true;\r\n            }\r\n            _retrieveHandler(path) {\r\n                serverCallTrace('Received call to method ' +\r\n                    path +\r\n                    ' at address ' +\r\n                    this.serverAddressString);\r\n                const handler = this.handlers.get(path);\r\n                if (handler === undefined) {\r\n                    serverCallTrace('No handler registered for method ' +\r\n                        path +\r\n                        '. Sending UNIMPLEMENTED status.');\r\n                    return null;\r\n                }\r\n                return handler;\r\n            }\r\n            _respondWithError(err, stream, channelzSessionInfo = null) {\r\n                var _b, _c;\r\n                const trailersToSend = Object.assign({ 'grpc-status': (_b = err.code) !== null && _b !== void 0 ? _b : constants_1.Status.INTERNAL, 'grpc-message': err.details, [http2.constants.HTTP2_HEADER_STATUS]: http2.constants.HTTP_STATUS_OK, [http2.constants.HTTP2_HEADER_CONTENT_TYPE]: 'application/grpc+proto' }, (_c = err.metadata) === null || _c === void 0 ? void 0 : _c.toHttp2Headers());\r\n                stream.respond(trailersToSend, { endStream: true });\r\n                this.callTracker.addCallFailed();\r\n                channelzSessionInfo === null || channelzSessionInfo === void 0 ? void 0 : channelzSessionInfo.streamTracker.addCallFailed();\r\n            }\r\n            _channelzHandler(extraInterceptors, stream, headers) {\r\n                // for handling idle timeout\r\n                this.onStreamOpened(stream);\r\n                const channelzSessionInfo = this.sessions.get(stream.session);\r\n                this.callTracker.addCallStarted();\r\n                channelzSessionInfo === null || channelzSessionInfo === void 0 ? void 0 : channelzSessionInfo.streamTracker.addCallStarted();\r\n                if (!this._verifyContentType(stream, headers)) {\r\n                    this.callTracker.addCallFailed();\r\n                    channelzSessionInfo === null || channelzSessionInfo === void 0 ? void 0 : channelzSessionInfo.streamTracker.addCallFailed();\r\n                    return;\r\n                }\r\n                const path = headers[HTTP2_HEADER_PATH];\r\n                const handler = this._retrieveHandler(path);\r\n                if (!handler) {\r\n                    this._respondWithError(getUnimplementedStatusResponse(path), stream, channelzSessionInfo);\r\n                    return;\r\n                }\r\n                const callEventTracker = {\r\n                    addMessageSent: () => {\r\n                        if (channelzSessionInfo) {\r\n                            channelzSessionInfo.messagesSent += 1;\r\n                            channelzSessionInfo.lastMessageSentTimestamp = new Date();\r\n                        }\r\n                    },\r\n                    addMessageReceived: () => {\r\n                        if (channelzSessionInfo) {\r\n                            channelzSessionInfo.messagesReceived += 1;\r\n                            channelzSessionInfo.lastMessageReceivedTimestamp = new Date();\r\n                        }\r\n                    },\r\n                    onCallEnd: status => {\r\n                        if (status.code === constants_1.Status.OK) {\r\n                            this.callTracker.addCallSucceeded();\r\n                        }\r\n                        else {\r\n                            this.callTracker.addCallFailed();\r\n                        }\r\n                    },\r\n                    onStreamEnd: success => {\r\n                        if (channelzSessionInfo) {\r\n                            if (success) {\r\n                                channelzSessionInfo.streamTracker.addCallSucceeded();\r\n                            }\r\n                            else {\r\n                                channelzSessionInfo.streamTracker.addCallFailed();\r\n                            }\r\n                        }\r\n                    },\r\n                };\r\n                const call = (0, server_interceptors_1.getServerInterceptingCall)([...extraInterceptors, ...this.interceptors], stream, headers, callEventTracker, handler, this.options);\r\n                if (!this._runHandlerForCall(call, handler)) {\r\n                    this.callTracker.addCallFailed();\r\n                    channelzSessionInfo === null || channelzSessionInfo === void 0 ? void 0 : channelzSessionInfo.streamTracker.addCallFailed();\r\n                    call.sendStatus({\r\n                        code: constants_1.Status.INTERNAL,\r\n                        details: `Unknown handler type: ${handler.type}`,\r\n                    });\r\n                }\r\n            }\r\n            _streamHandler(extraInterceptors, stream, headers) {\r\n                // for handling idle timeout\r\n                this.onStreamOpened(stream);\r\n                if (this._verifyContentType(stream, headers) !== true) {\r\n                    return;\r\n                }\r\n                const path = headers[HTTP2_HEADER_PATH];\r\n                const handler = this._retrieveHandler(path);\r\n                if (!handler) {\r\n                    this._respondWithError(getUnimplementedStatusResponse(path), stream, null);\r\n                    return;\r\n                }\r\n                const call = (0, server_interceptors_1.getServerInterceptingCall)([...extraInterceptors, ...this.interceptors], stream, headers, null, handler, this.options);\r\n                if (!this._runHandlerForCall(call, handler)) {\r\n                    call.sendStatus({\r\n                        code: constants_1.Status.INTERNAL,\r\n                        details: `Unknown handler type: ${handler.type}`,\r\n                    });\r\n                }\r\n            }\r\n            _runHandlerForCall(call, handler) {\r\n                const { type } = handler;\r\n                if (type === 'unary') {\r\n                    handleUnary(call, handler);\r\n                }\r\n                else if (type === 'clientStream') {\r\n                    handleClientStreaming(call, handler);\r\n                }\r\n                else if (type === 'serverStream') {\r\n                    handleServerStreaming(call, handler);\r\n                }\r\n                else if (type === 'bidi') {\r\n                    handleBidiStreaming(call, handler);\r\n                }\r\n                else {\r\n                    return false;\r\n                }\r\n                return true;\r\n            }\r\n            _setupHandlers(http2Server, extraInterceptors) {\r\n                if (http2Server === null) {\r\n                    return;\r\n                }\r\n                const serverAddress = http2Server.address();\r\n                let serverAddressString = 'null';\r\n                if (serverAddress) {\r\n                    if (typeof serverAddress === 'string') {\r\n                        serverAddressString = serverAddress;\r\n                    }\r\n                    else {\r\n                        serverAddressString = serverAddress.address + ':' + serverAddress.port;\r\n                    }\r\n                }\r\n                this.serverAddressString = serverAddressString;\r\n                const handler = this.channelzEnabled\r\n                    ? this._channelzHandler\r\n                    : this._streamHandler;\r\n                const sessionHandler = this.channelzEnabled\r\n                    ? this._channelzSessionHandler(http2Server)\r\n                    : this._sessionHandler(http2Server);\r\n                http2Server.on('stream', handler.bind(this, extraInterceptors));\r\n                http2Server.on('session', sessionHandler);\r\n            }\r\n            _sessionHandler(http2Server) {\r\n                return (session) => {\r\n                    var _b, _c;\r\n                    (_b = this.http2Servers.get(http2Server)) === null || _b === void 0 ? void 0 : _b.sessions.add(session);\r\n                    let connectionAgeTimer = null;\r\n                    let connectionAgeGraceTimer = null;\r\n                    let keepaliveTimer = null;\r\n                    let sessionClosedByServer = false;\r\n                    const idleTimeoutObj = this.enableIdleTimeout(session);\r\n                    if (this.maxConnectionAgeMs !== UNLIMITED_CONNECTION_AGE_MS) {\r\n                        // Apply a random jitter within a +/-10% range\r\n                        const jitterMagnitude = this.maxConnectionAgeMs / 10;\r\n                        const jitter = Math.random() * jitterMagnitude * 2 - jitterMagnitude;\r\n                        connectionAgeTimer = setTimeout(() => {\r\n                            var _b, _c;\r\n                            sessionClosedByServer = true;\r\n                            this.trace('Connection dropped by max connection age: ' +\r\n                                ((_b = session.socket) === null || _b === void 0 ? void 0 : _b.remoteAddress));\r\n                            try {\r\n                                session.goaway(http2.constants.NGHTTP2_NO_ERROR, ~(1 << 31), kMaxAge);\r\n                            }\r\n                            catch (e) {\r\n                                // The goaway can't be sent because the session is already closed\r\n                                session.destroy();\r\n                                return;\r\n                            }\r\n                            session.close();\r\n                            /* Allow a grace period after sending the GOAWAY before forcibly\r\n                             * closing the connection. */\r\n                            if (this.maxConnectionAgeGraceMs !== UNLIMITED_CONNECTION_AGE_MS) {\r\n                                connectionAgeGraceTimer = setTimeout(() => {\r\n                                    session.destroy();\r\n                                }, this.maxConnectionAgeGraceMs);\r\n                                (_c = connectionAgeGraceTimer.unref) === null || _c === void 0 ? void 0 : _c.call(connectionAgeGraceTimer);\r\n                            }\r\n                        }, this.maxConnectionAgeMs + jitter);\r\n                        (_c = connectionAgeTimer.unref) === null || _c === void 0 ? void 0 : _c.call(connectionAgeTimer);\r\n                    }\r\n                    const clearKeepaliveTimeout = () => {\r\n                        if (keepaliveTimer) {\r\n                            clearTimeout(keepaliveTimer);\r\n                            keepaliveTimer = null;\r\n                        }\r\n                    };\r\n                    const canSendPing = () => {\r\n                        return (!session.destroyed &&\r\n                            this.keepaliveTimeMs < KEEPALIVE_MAX_TIME_MS &&\r\n                            this.keepaliveTimeMs > 0);\r\n                    };\r\n                    /* eslint-disable-next-line prefer-const */\r\n                    let sendPing; // hoisted for use in maybeStartKeepalivePingTimer\r\n                    const maybeStartKeepalivePingTimer = () => {\r\n                        var _b;\r\n                        if (!canSendPing()) {\r\n                            return;\r\n                        }\r\n                        this.keepaliveTrace('Starting keepalive timer for ' + this.keepaliveTimeMs + 'ms');\r\n                        keepaliveTimer = setTimeout(() => {\r\n                            clearKeepaliveTimeout();\r\n                            sendPing();\r\n                        }, this.keepaliveTimeMs);\r\n                        (_b = keepaliveTimer.unref) === null || _b === void 0 ? void 0 : _b.call(keepaliveTimer);\r\n                    };\r\n                    sendPing = () => {\r\n                        var _b;\r\n                        if (!canSendPing()) {\r\n                            return;\r\n                        }\r\n                        this.keepaliveTrace('Sending ping with timeout ' + this.keepaliveTimeoutMs + 'ms');\r\n                        let pingSendError = '';\r\n                        try {\r\n                            const pingSentSuccessfully = session.ping((err, duration, payload) => {\r\n                                clearKeepaliveTimeout();\r\n                                if (err) {\r\n                                    this.keepaliveTrace('Ping failed with error: ' + err.message);\r\n                                    sessionClosedByServer = true;\r\n                                    session.close();\r\n                                }\r\n                                else {\r\n                                    this.keepaliveTrace('Received ping response');\r\n                                    maybeStartKeepalivePingTimer();\r\n                                }\r\n                            });\r\n                            if (!pingSentSuccessfully) {\r\n                                pingSendError = 'Ping returned false';\r\n                            }\r\n                        }\r\n                        catch (e) {\r\n                            // grpc/grpc-node#2139\r\n                            pingSendError =\r\n                                (e instanceof Error ? e.message : '') || 'Unknown error';\r\n                        }\r\n                        if (pingSendError) {\r\n                            this.keepaliveTrace('Ping send failed: ' + pingSendError);\r\n                            this.trace('Connection dropped due to ping send error: ' + pingSendError);\r\n                            sessionClosedByServer = true;\r\n                            session.close();\r\n                            return;\r\n                        }\r\n                        keepaliveTimer = setTimeout(() => {\r\n                            clearKeepaliveTimeout();\r\n                            this.keepaliveTrace('Ping timeout passed without response');\r\n                            this.trace('Connection dropped by keepalive timeout');\r\n                            sessionClosedByServer = true;\r\n                            session.close();\r\n                        }, this.keepaliveTimeoutMs);\r\n                        (_b = keepaliveTimer.unref) === null || _b === void 0 ? void 0 : _b.call(keepaliveTimer);\r\n                    };\r\n                    maybeStartKeepalivePingTimer();\r\n                    session.on('close', () => {\r\n                        var _b, _c;\r\n                        if (!sessionClosedByServer) {\r\n                            this.trace(`Connection dropped by client ${(_b = session.socket) === null || _b === void 0 ? void 0 : _b.remoteAddress}`);\r\n                        }\r\n                        if (connectionAgeTimer) {\r\n                            clearTimeout(connectionAgeTimer);\r\n                        }\r\n                        if (connectionAgeGraceTimer) {\r\n                            clearTimeout(connectionAgeGraceTimer);\r\n                        }\r\n                        clearKeepaliveTimeout();\r\n                        if (idleTimeoutObj !== null) {\r\n                            clearTimeout(idleTimeoutObj.timeout);\r\n                            this.sessionIdleTimeouts.delete(session);\r\n                        }\r\n                        (_c = this.http2Servers.get(http2Server)) === null || _c === void 0 ? void 0 : _c.sessions.delete(session);\r\n                    });\r\n                };\r\n            }\r\n            _channelzSessionHandler(http2Server) {\r\n                return (session) => {\r\n                    var _b, _c, _d, _e;\r\n                    const channelzRef = (0, channelz_1.registerChannelzSocket)((_c = (_b = session.socket) === null || _b === void 0 ? void 0 : _b.remoteAddress) !== null && _c !== void 0 ? _c : 'unknown', this.getChannelzSessionInfo.bind(this, session), this.channelzEnabled);\r\n                    const channelzSessionInfo = {\r\n                        ref: channelzRef,\r\n                        streamTracker: new channelz_1.ChannelzCallTracker(),\r\n                        messagesSent: 0,\r\n                        messagesReceived: 0,\r\n                        keepAlivesSent: 0,\r\n                        lastMessageSentTimestamp: null,\r\n                        lastMessageReceivedTimestamp: null,\r\n                    };\r\n                    (_d = this.http2Servers.get(http2Server)) === null || _d === void 0 ? void 0 : _d.sessions.add(session);\r\n                    this.sessions.set(session, channelzSessionInfo);\r\n                    const clientAddress = `${session.socket.remoteAddress}:${session.socket.remotePort}`;\r\n                    this.channelzTrace.addTrace('CT_INFO', 'Connection established by client ' + clientAddress);\r\n                    this.trace('Connection established by client ' + clientAddress);\r\n                    this.sessionChildrenTracker.refChild(channelzRef);\r\n                    let connectionAgeTimer = null;\r\n                    let connectionAgeGraceTimer = null;\r\n                    let keepaliveTimeout = null;\r\n                    let sessionClosedByServer = false;\r\n                    const idleTimeoutObj = this.enableIdleTimeout(session);\r\n                    if (this.maxConnectionAgeMs !== UNLIMITED_CONNECTION_AGE_MS) {\r\n                        // Apply a random jitter within a +/-10% range\r\n                        const jitterMagnitude = this.maxConnectionAgeMs / 10;\r\n                        const jitter = Math.random() * jitterMagnitude * 2 - jitterMagnitude;\r\n                        connectionAgeTimer = setTimeout(() => {\r\n                            var _b;\r\n                            sessionClosedByServer = true;\r\n                            this.channelzTrace.addTrace('CT_INFO', 'Connection dropped by max connection age from ' + clientAddress);\r\n                            try {\r\n                                session.goaway(http2.constants.NGHTTP2_NO_ERROR, ~(1 << 31), kMaxAge);\r\n                            }\r\n                            catch (e) {\r\n                                // The goaway can't be sent because the session is already closed\r\n                                session.destroy();\r\n                                return;\r\n                            }\r\n                            session.close();\r\n                            /* Allow a grace period after sending the GOAWAY before forcibly\r\n                             * closing the connection. */\r\n                            if (this.maxConnectionAgeGraceMs !== UNLIMITED_CONNECTION_AGE_MS) {\r\n                                connectionAgeGraceTimer = setTimeout(() => {\r\n                                    session.destroy();\r\n                                }, this.maxConnectionAgeGraceMs);\r\n                                (_b = connectionAgeGraceTimer.unref) === null || _b === void 0 ? void 0 : _b.call(connectionAgeGraceTimer);\r\n                            }\r\n                        }, this.maxConnectionAgeMs + jitter);\r\n                        (_e = connectionAgeTimer.unref) === null || _e === void 0 ? void 0 : _e.call(connectionAgeTimer);\r\n                    }\r\n                    const clearKeepaliveTimeout = () => {\r\n                        if (keepaliveTimeout) {\r\n                            clearTimeout(keepaliveTimeout);\r\n                            keepaliveTimeout = null;\r\n                        }\r\n                    };\r\n                    const canSendPing = () => {\r\n                        return (!session.destroyed &&\r\n                            this.keepaliveTimeMs < KEEPALIVE_MAX_TIME_MS &&\r\n                            this.keepaliveTimeMs > 0);\r\n                    };\r\n                    /* eslint-disable-next-line prefer-const */\r\n                    let sendPing; // hoisted for use in maybeStartKeepalivePingTimer\r\n                    const maybeStartKeepalivePingTimer = () => {\r\n                        var _b;\r\n                        if (!canSendPing()) {\r\n                            return;\r\n                        }\r\n                        this.keepaliveTrace('Starting keepalive timer for ' + this.keepaliveTimeMs + 'ms');\r\n                        keepaliveTimeout = setTimeout(() => {\r\n                            clearKeepaliveTimeout();\r\n                            sendPing();\r\n                        }, this.keepaliveTimeMs);\r\n                        (_b = keepaliveTimeout.unref) === null || _b === void 0 ? void 0 : _b.call(keepaliveTimeout);\r\n                    };\r\n                    sendPing = () => {\r\n                        var _b;\r\n                        if (!canSendPing()) {\r\n                            return;\r\n                        }\r\n                        this.keepaliveTrace('Sending ping with timeout ' + this.keepaliveTimeoutMs + 'ms');\r\n                        let pingSendError = '';\r\n                        try {\r\n                            const pingSentSuccessfully = session.ping((err, duration, payload) => {\r\n                                clearKeepaliveTimeout();\r\n                                if (err) {\r\n                                    this.keepaliveTrace('Ping failed with error: ' + err.message);\r\n                                    this.channelzTrace.addTrace('CT_INFO', 'Connection dropped due to error of a ping frame ' +\r\n                                        err.message +\r\n                                        ' return in ' +\r\n                                        duration);\r\n                                    sessionClosedByServer = true;\r\n                                    session.close();\r\n                                }\r\n                                else {\r\n                                    this.keepaliveTrace('Received ping response');\r\n                                    maybeStartKeepalivePingTimer();\r\n                                }\r\n                            });\r\n                            if (!pingSentSuccessfully) {\r\n                                pingSendError = 'Ping returned false';\r\n                            }\r\n                        }\r\n                        catch (e) {\r\n                            // grpc/grpc-node#2139\r\n                            pingSendError =\r\n                                (e instanceof Error ? e.message : '') || 'Unknown error';\r\n                        }\r\n                        if (pingSendError) {\r\n                            this.keepaliveTrace('Ping send failed: ' + pingSendError);\r\n                            this.channelzTrace.addTrace('CT_INFO', 'Connection dropped due to ping send error: ' + pingSendError);\r\n                            sessionClosedByServer = true;\r\n                            session.close();\r\n                            return;\r\n                        }\r\n                        channelzSessionInfo.keepAlivesSent += 1;\r\n                        keepaliveTimeout = setTimeout(() => {\r\n                            clearKeepaliveTimeout();\r\n                            this.keepaliveTrace('Ping timeout passed without response');\r\n                            this.channelzTrace.addTrace('CT_INFO', 'Connection dropped by keepalive timeout from ' + clientAddress);\r\n                            sessionClosedByServer = true;\r\n                            session.close();\r\n                        }, this.keepaliveTimeoutMs);\r\n                        (_b = keepaliveTimeout.unref) === null || _b === void 0 ? void 0 : _b.call(keepaliveTimeout);\r\n                    };\r\n                    maybeStartKeepalivePingTimer();\r\n                    session.on('close', () => {\r\n                        var _b;\r\n                        if (!sessionClosedByServer) {\r\n                            this.channelzTrace.addTrace('CT_INFO', 'Connection dropped by client ' + clientAddress);\r\n                        }\r\n                        this.sessionChildrenTracker.unrefChild(channelzRef);\r\n                        (0, channelz_1.unregisterChannelzRef)(channelzRef);\r\n                        if (connectionAgeTimer) {\r\n                            clearTimeout(connectionAgeTimer);\r\n                        }\r\n                        if (connectionAgeGraceTimer) {\r\n                            clearTimeout(connectionAgeGraceTimer);\r\n                        }\r\n                        clearKeepaliveTimeout();\r\n                        if (idleTimeoutObj !== null) {\r\n                            clearTimeout(idleTimeoutObj.timeout);\r\n                            this.sessionIdleTimeouts.delete(session);\r\n                        }\r\n                        (_b = this.http2Servers.get(http2Server)) === null || _b === void 0 ? void 0 : _b.sessions.delete(session);\r\n                        this.sessions.delete(session);\r\n                    });\r\n                };\r\n            }\r\n            enableIdleTimeout(session) {\r\n                var _b, _c;\r\n                if (this.sessionIdleTimeout >= MAX_CONNECTION_IDLE_MS) {\r\n                    return null;\r\n                }\r\n                const idleTimeoutObj = {\r\n                    activeStreams: 0,\r\n                    lastIdle: Date.now(),\r\n                    onClose: this.onStreamClose.bind(this, session),\r\n                    timeout: setTimeout(this.onIdleTimeout, this.sessionIdleTimeout, this, session),\r\n                };\r\n                (_c = (_b = idleTimeoutObj.timeout).unref) === null || _c === void 0 ? void 0 : _c.call(_b);\r\n                this.sessionIdleTimeouts.set(session, idleTimeoutObj);\r\n                const { socket } = session;\r\n                this.trace('Enable idle timeout for ' +\r\n                    socket.remoteAddress +\r\n                    ':' +\r\n                    socket.remotePort);\r\n                return idleTimeoutObj;\r\n            }\r\n            onIdleTimeout(ctx, session) {\r\n                const { socket } = session;\r\n                const sessionInfo = ctx.sessionIdleTimeouts.get(session);\r\n                // if it is called while we have activeStreams - timer will not be rescheduled\r\n                // until last active stream is closed, then it will call .refresh() on the timer\r\n                // important part is to not clearTimeout(timer) or it becomes unusable\r\n                // for future refreshes\r\n                if (sessionInfo !== undefined &&\r\n                    sessionInfo.activeStreams === 0) {\r\n                    if (Date.now() - sessionInfo.lastIdle >= ctx.sessionIdleTimeout) {\r\n                        ctx.trace('Session idle timeout triggered for ' +\r\n                            (socket === null || socket === void 0 ? void 0 : socket.remoteAddress) +\r\n                            ':' +\r\n                            (socket === null || socket === void 0 ? void 0 : socket.remotePort) +\r\n                            ' last idle at ' +\r\n                            sessionInfo.lastIdle);\r\n                        ctx.closeSession(session);\r\n                    }\r\n                    else {\r\n                        sessionInfo.timeout.refresh();\r\n                    }\r\n                }\r\n            }\r\n            onStreamOpened(stream) {\r\n                const session = stream.session;\r\n                const idleTimeoutObj = this.sessionIdleTimeouts.get(session);\r\n                if (idleTimeoutObj) {\r\n                    idleTimeoutObj.activeStreams += 1;\r\n                    stream.once('close', idleTimeoutObj.onClose);\r\n                }\r\n            }\r\n            onStreamClose(session) {\r\n                var _b, _c;\r\n                const idleTimeoutObj = this.sessionIdleTimeouts.get(session);\r\n                if (idleTimeoutObj) {\r\n                    idleTimeoutObj.activeStreams -= 1;\r\n                    if (idleTimeoutObj.activeStreams === 0) {\r\n                        idleTimeoutObj.lastIdle = Date.now();\r\n                        idleTimeoutObj.timeout.refresh();\r\n                        this.trace('Session onStreamClose' +\r\n                            ((_b = session.socket) === null || _b === void 0 ? void 0 : _b.remoteAddress) +\r\n                            ':' +\r\n                            ((_c = session.socket) === null || _c === void 0 ? void 0 : _c.remotePort) +\r\n                            ' at ' +\r\n                            idleTimeoutObj.lastIdle);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        (() => {\r\n            const _metadata = typeof Symbol === \"function\" && Symbol.metadata ? Object.create(null) : void 0;\r\n            _start_decorators = [deprecate('Calling start() is no longer necessary. It can be safely omitted.')];\r\n            __esDecorate(_a, null, _start_decorators, { kind: \"method\", name: \"start\", static: false, private: false, access: { has: obj => \"start\" in obj, get: obj => obj.start }, metadata: _metadata }, null, _instanceExtraInitializers);\r\n            if (_metadata) Object.defineProperty(_a, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });\r\n        })(),\r\n        _a;\r\n})();\r\nexports.Server = Server;\r\nasync function handleUnary(call, handler) {\r\n    let stream;\r\n    function respond(err, value, trailer, flags) {\r\n        if (err) {\r\n            call.sendStatus((0, server_call_1.serverErrorToStatus)(err, trailer));\r\n            return;\r\n        }\r\n        call.sendMessage(value, () => {\r\n            call.sendStatus({\r\n                code: constants_1.Status.OK,\r\n                details: 'OK',\r\n                metadata: trailer !== null && trailer !== void 0 ? trailer : null,\r\n            });\r\n        });\r\n    }\r\n    let requestMetadata;\r\n    let requestMessage = null;\r\n    call.start({\r\n        onReceiveMetadata(metadata) {\r\n            requestMetadata = metadata;\r\n            call.startRead();\r\n        },\r\n        onReceiveMessage(message) {\r\n            if (requestMessage) {\r\n                call.sendStatus({\r\n                    code: constants_1.Status.UNIMPLEMENTED,\r\n                    details: `Received a second request message for server streaming method ${handler.path}`,\r\n                    metadata: null,\r\n                });\r\n                return;\r\n            }\r\n            requestMessage = message;\r\n            call.startRead();\r\n        },\r\n        onReceiveHalfClose() {\r\n            if (!requestMessage) {\r\n                call.sendStatus({\r\n                    code: constants_1.Status.UNIMPLEMENTED,\r\n                    details: `Received no request message for server streaming method ${handler.path}`,\r\n                    metadata: null,\r\n                });\r\n                return;\r\n            }\r\n            stream = new server_call_1.ServerWritableStreamImpl(handler.path, call, requestMetadata, requestMessage);\r\n            try {\r\n                handler.func(stream, respond);\r\n            }\r\n            catch (err) {\r\n                call.sendStatus({\r\n                    code: constants_1.Status.UNKNOWN,\r\n                    details: `Server method handler threw error ${err.message}`,\r\n                    metadata: null,\r\n                });\r\n            }\r\n        },\r\n        onCancel() {\r\n            if (stream) {\r\n                stream.cancelled = true;\r\n                stream.emit('cancelled', 'cancelled');\r\n            }\r\n        },\r\n    });\r\n}\r\nfunction handleClientStreaming(call, handler) {\r\n    let stream;\r\n    function respond(err, value, trailer, flags) {\r\n        if (err) {\r\n            call.sendStatus((0, server_call_1.serverErrorToStatus)(err, trailer));\r\n            return;\r\n        }\r\n        call.sendMessage(value, () => {\r\n            call.sendStatus({\r\n                code: constants_1.Status.OK,\r\n                details: 'OK',\r\n                metadata: trailer !== null && trailer !== void 0 ? trailer : null,\r\n            });\r\n        });\r\n    }\r\n    call.start({\r\n        onReceiveMetadata(metadata) {\r\n            stream = new server_call_1.ServerDuplexStreamImpl(handler.path, call, metadata);\r\n            try {\r\n                handler.func(stream, respond);\r\n            }\r\n            catch (err) {\r\n                call.sendStatus({\r\n                    code: constants_1.Status.UNKNOWN,\r\n                    details: `Server method handler threw error ${err.message}`,\r\n                    metadata: null,\r\n                });\r\n            }\r\n        },\r\n        onReceiveMessage(message) {\r\n            stream.push(message);\r\n        },\r\n        onReceiveHalfClose() {\r\n            stream.push(null);\r\n        },\r\n        onCancel() {\r\n            if (stream) {\r\n                stream.cancelled = true;\r\n                stream.emit('cancelled', 'cancelled');\r\n                stream.destroy();\r\n            }\r\n        },\r\n    });\r\n}\r\nfunction handleServerStreaming(call, handler) {\r\n    let stream;\r\n    let requestMetadata;\r\n    let requestMessage = null;\r\n    call.start({\r\n        onReceiveMetadata(metadata) {\r\n            requestMetadata = metadata;\r\n            call.startRead();\r\n        },\r\n        onReceiveMessage(message) {\r\n            if (requestMessage) {\r\n                call.sendStatus({\r\n                    code: constants_1.Status.UNIMPLEMENTED,\r\n                    details: `Received a second request message for server streaming method ${handler.path}`,\r\n                    metadata: null,\r\n                });\r\n                return;\r\n            }\r\n            requestMessage = message;\r\n            call.startRead();\r\n        },\r\n        onReceiveHalfClose() {\r\n            if (!requestMessage) {\r\n                call.sendStatus({\r\n                    code: constants_1.Status.UNIMPLEMENTED,\r\n                    details: `Received no request message for server streaming method ${handler.path}`,\r\n                    metadata: null,\r\n                });\r\n                return;\r\n            }\r\n            stream = new server_call_1.ServerWritableStreamImpl(handler.path, call, requestMetadata, requestMessage);\r\n            try {\r\n                handler.func(stream);\r\n            }\r\n            catch (err) {\r\n                call.sendStatus({\r\n                    code: constants_1.Status.UNKNOWN,\r\n                    details: `Server method handler threw error ${err.message}`,\r\n                    metadata: null,\r\n                });\r\n            }\r\n        },\r\n        onCancel() {\r\n            if (stream) {\r\n                stream.cancelled = true;\r\n                stream.emit('cancelled', 'cancelled');\r\n                stream.destroy();\r\n            }\r\n        },\r\n    });\r\n}\r\nfunction handleBidiStreaming(call, handler) {\r\n    let stream;\r\n    call.start({\r\n        onReceiveMetadata(metadata) {\r\n            stream = new server_call_1.ServerDuplexStreamImpl(handler.path, call, metadata);\r\n            try {\r\n                handler.func(stream);\r\n            }\r\n            catch (err) {\r\n                call.sendStatus({\r\n                    code: constants_1.Status.UNKNOWN,\r\n                    details: `Server method handler threw error ${err.message}`,\r\n                    metadata: null,\r\n                });\r\n            }\r\n        },\r\n        onReceiveMessage(message) {\r\n            stream.push(message);\r\n        },\r\n        onReceiveHalfClose() {\r\n            stream.push(null);\r\n        },\r\n        onCancel() {\r\n            if (stream) {\r\n                stream.cancelled = true;\r\n                stream.emit('cancelled', 'cancelled');\r\n                stream.destroy();\r\n            }\r\n        },\r\n    });\r\n}\r\n//# sourceMappingURL=server.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/server.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/service-config.js":
/*!****************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/service-config.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.validateRetryThrottling = validateRetryThrottling;\r\nexports.validateServiceConfig = validateServiceConfig;\r\nexports.extractAndSelectServiceConfig = extractAndSelectServiceConfig;\r\n/* This file implements gRFC A2 and the service config spec:\r\n * https://github.com/grpc/proposal/blob/master/A2-service-configs-in-dns.md\r\n * https://github.com/grpc/grpc/blob/master/doc/service_config.md. Each\r\n * function here takes an object with unknown structure and returns its\r\n * specific object type if the input has the right structure, and throws an\r\n * error otherwise. */\r\n/* The any type is purposely used here. All functions validate their input at\r\n * runtime */\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\nconst os = __webpack_require__(/*! os */ \"os\");\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\n/**\r\n * Recognizes a number with up to 9 digits after the decimal point, followed by\r\n * an \"s\", representing a number of seconds.\r\n */\r\nconst DURATION_REGEX = /^\\d+(\\.\\d{1,9})?s$/;\r\n/**\r\n * Client language name used for determining whether this client matches a\r\n * `ServiceConfigCanaryConfig`'s `clientLanguage` list.\r\n */\r\nconst CLIENT_LANGUAGE_STRING = 'node';\r\nfunction validateName(obj) {\r\n    // In this context, and unset field and '' are considered the same\r\n    if ('service' in obj && obj.service !== '') {\r\n        if (typeof obj.service !== 'string') {\r\n            throw new Error(`Invalid method config name: invalid service: expected type string, got ${typeof obj.service}`);\r\n        }\r\n        if ('method' in obj && obj.method !== '') {\r\n            if (typeof obj.method !== 'string') {\r\n                throw new Error(`Invalid method config name: invalid method: expected type string, got ${typeof obj.service}`);\r\n            }\r\n            return {\r\n                service: obj.service,\r\n                method: obj.method,\r\n            };\r\n        }\r\n        else {\r\n            return {\r\n                service: obj.service,\r\n            };\r\n        }\r\n    }\r\n    else {\r\n        if ('method' in obj && obj.method !== undefined) {\r\n            throw new Error(`Invalid method config name: method set with empty or unset service`);\r\n        }\r\n        return {};\r\n    }\r\n}\r\nfunction validateRetryPolicy(obj) {\r\n    if (!('maxAttempts' in obj) ||\r\n        !Number.isInteger(obj.maxAttempts) ||\r\n        obj.maxAttempts < 2) {\r\n        throw new Error('Invalid method config retry policy: maxAttempts must be an integer at least 2');\r\n    }\r\n    if (!('initialBackoff' in obj) ||\r\n        typeof obj.initialBackoff !== 'string' ||\r\n        !DURATION_REGEX.test(obj.initialBackoff)) {\r\n        throw new Error('Invalid method config retry policy: initialBackoff must be a string consisting of a positive integer or decimal followed by s');\r\n    }\r\n    if (!('maxBackoff' in obj) ||\r\n        typeof obj.maxBackoff !== 'string' ||\r\n        !DURATION_REGEX.test(obj.maxBackoff)) {\r\n        throw new Error('Invalid method config retry policy: maxBackoff must be a string consisting of a positive integer or decimal followed by s');\r\n    }\r\n    if (!('backoffMultiplier' in obj) ||\r\n        typeof obj.backoffMultiplier !== 'number' ||\r\n        obj.backoffMultiplier <= 0) {\r\n        throw new Error('Invalid method config retry policy: backoffMultiplier must be a number greater than 0');\r\n    }\r\n    if (!('retryableStatusCodes' in obj && Array.isArray(obj.retryableStatusCodes))) {\r\n        throw new Error('Invalid method config retry policy: retryableStatusCodes is required');\r\n    }\r\n    if (obj.retryableStatusCodes.length === 0) {\r\n        throw new Error('Invalid method config retry policy: retryableStatusCodes must be non-empty');\r\n    }\r\n    for (const value of obj.retryableStatusCodes) {\r\n        if (typeof value === 'number') {\r\n            if (!Object.values(constants_1.Status).includes(value)) {\r\n                throw new Error('Invalid method config retry policy: retryableStatusCodes value not in status code range');\r\n            }\r\n        }\r\n        else if (typeof value === 'string') {\r\n            if (!Object.values(constants_1.Status).includes(value.toUpperCase())) {\r\n                throw new Error('Invalid method config retry policy: retryableStatusCodes value not a status code name');\r\n            }\r\n        }\r\n        else {\r\n            throw new Error('Invalid method config retry policy: retryableStatusCodes value must be a string or number');\r\n        }\r\n    }\r\n    return {\r\n        maxAttempts: obj.maxAttempts,\r\n        initialBackoff: obj.initialBackoff,\r\n        maxBackoff: obj.maxBackoff,\r\n        backoffMultiplier: obj.backoffMultiplier,\r\n        retryableStatusCodes: obj.retryableStatusCodes,\r\n    };\r\n}\r\nfunction validateHedgingPolicy(obj) {\r\n    if (!('maxAttempts' in obj) ||\r\n        !Number.isInteger(obj.maxAttempts) ||\r\n        obj.maxAttempts < 2) {\r\n        throw new Error('Invalid method config hedging policy: maxAttempts must be an integer at least 2');\r\n    }\r\n    if ('hedgingDelay' in obj &&\r\n        (typeof obj.hedgingDelay !== 'string' ||\r\n            !DURATION_REGEX.test(obj.hedgingDelay))) {\r\n        throw new Error('Invalid method config hedging policy: hedgingDelay must be a string consisting of a positive integer followed by s');\r\n    }\r\n    if ('nonFatalStatusCodes' in obj && Array.isArray(obj.nonFatalStatusCodes)) {\r\n        for (const value of obj.nonFatalStatusCodes) {\r\n            if (typeof value === 'number') {\r\n                if (!Object.values(constants_1.Status).includes(value)) {\r\n                    throw new Error('Invalid method config hedging policy: nonFatalStatusCodes value not in status code range');\r\n                }\r\n            }\r\n            else if (typeof value === 'string') {\r\n                if (!Object.values(constants_1.Status).includes(value.toUpperCase())) {\r\n                    throw new Error('Invalid method config hedging policy: nonFatalStatusCodes value not a status code name');\r\n                }\r\n            }\r\n            else {\r\n                throw new Error('Invalid method config hedging policy: nonFatalStatusCodes value must be a string or number');\r\n            }\r\n        }\r\n    }\r\n    const result = {\r\n        maxAttempts: obj.maxAttempts,\r\n    };\r\n    if (obj.hedgingDelay) {\r\n        result.hedgingDelay = obj.hedgingDelay;\r\n    }\r\n    if (obj.nonFatalStatusCodes) {\r\n        result.nonFatalStatusCodes = obj.nonFatalStatusCodes;\r\n    }\r\n    return result;\r\n}\r\nfunction validateMethodConfig(obj) {\r\n    var _a;\r\n    const result = {\r\n        name: [],\r\n    };\r\n    if (!('name' in obj) || !Array.isArray(obj.name)) {\r\n        throw new Error('Invalid method config: invalid name array');\r\n    }\r\n    for (const name of obj.name) {\r\n        result.name.push(validateName(name));\r\n    }\r\n    if ('waitForReady' in obj) {\r\n        if (typeof obj.waitForReady !== 'boolean') {\r\n            throw new Error('Invalid method config: invalid waitForReady');\r\n        }\r\n        result.waitForReady = obj.waitForReady;\r\n    }\r\n    if ('timeout' in obj) {\r\n        if (typeof obj.timeout === 'object') {\r\n            if (!('seconds' in obj.timeout) ||\r\n                !(typeof obj.timeout.seconds === 'number')) {\r\n                throw new Error('Invalid method config: invalid timeout.seconds');\r\n            }\r\n            if (!('nanos' in obj.timeout) ||\r\n                !(typeof obj.timeout.nanos === 'number')) {\r\n                throw new Error('Invalid method config: invalid timeout.nanos');\r\n            }\r\n            result.timeout = obj.timeout;\r\n        }\r\n        else if (typeof obj.timeout === 'string' &&\r\n            DURATION_REGEX.test(obj.timeout)) {\r\n            const timeoutParts = obj.timeout\r\n                .substring(0, obj.timeout.length - 1)\r\n                .split('.');\r\n            result.timeout = {\r\n                seconds: timeoutParts[0] | 0,\r\n                nanos: ((_a = timeoutParts[1]) !== null && _a !== void 0 ? _a : 0) | 0,\r\n            };\r\n        }\r\n        else {\r\n            throw new Error('Invalid method config: invalid timeout');\r\n        }\r\n    }\r\n    if ('maxRequestBytes' in obj) {\r\n        if (typeof obj.maxRequestBytes !== 'number') {\r\n            throw new Error('Invalid method config: invalid maxRequestBytes');\r\n        }\r\n        result.maxRequestBytes = obj.maxRequestBytes;\r\n    }\r\n    if ('maxResponseBytes' in obj) {\r\n        if (typeof obj.maxResponseBytes !== 'number') {\r\n            throw new Error('Invalid method config: invalid maxRequestBytes');\r\n        }\r\n        result.maxResponseBytes = obj.maxResponseBytes;\r\n    }\r\n    if ('retryPolicy' in obj) {\r\n        if ('hedgingPolicy' in obj) {\r\n            throw new Error('Invalid method config: retryPolicy and hedgingPolicy cannot both be specified');\r\n        }\r\n        else {\r\n            result.retryPolicy = validateRetryPolicy(obj.retryPolicy);\r\n        }\r\n    }\r\n    else if ('hedgingPolicy' in obj) {\r\n        result.hedgingPolicy = validateHedgingPolicy(obj.hedgingPolicy);\r\n    }\r\n    return result;\r\n}\r\nfunction validateRetryThrottling(obj) {\r\n    if (!('maxTokens' in obj) ||\r\n        typeof obj.maxTokens !== 'number' ||\r\n        obj.maxTokens <= 0 ||\r\n        obj.maxTokens > 1000) {\r\n        throw new Error('Invalid retryThrottling: maxTokens must be a number in (0, 1000]');\r\n    }\r\n    if (!('tokenRatio' in obj) ||\r\n        typeof obj.tokenRatio !== 'number' ||\r\n        obj.tokenRatio <= 0) {\r\n        throw new Error('Invalid retryThrottling: tokenRatio must be a number greater than 0');\r\n    }\r\n    return {\r\n        maxTokens: +obj.maxTokens.toFixed(3),\r\n        tokenRatio: +obj.tokenRatio.toFixed(3),\r\n    };\r\n}\r\nfunction validateLoadBalancingConfig(obj) {\r\n    if (!(typeof obj === 'object' && obj !== null)) {\r\n        throw new Error(`Invalid loadBalancingConfig: unexpected type ${typeof obj}`);\r\n    }\r\n    const keys = Object.keys(obj);\r\n    if (keys.length > 1) {\r\n        throw new Error(`Invalid loadBalancingConfig: unexpected multiple keys ${keys}`);\r\n    }\r\n    if (keys.length === 0) {\r\n        throw new Error('Invalid loadBalancingConfig: load balancing policy name required');\r\n    }\r\n    return {\r\n        [keys[0]]: obj[keys[0]],\r\n    };\r\n}\r\nfunction validateServiceConfig(obj) {\r\n    const result = {\r\n        loadBalancingConfig: [],\r\n        methodConfig: [],\r\n    };\r\n    if ('loadBalancingPolicy' in obj) {\r\n        if (typeof obj.loadBalancingPolicy === 'string') {\r\n            result.loadBalancingPolicy = obj.loadBalancingPolicy;\r\n        }\r\n        else {\r\n            throw new Error('Invalid service config: invalid loadBalancingPolicy');\r\n        }\r\n    }\r\n    if ('loadBalancingConfig' in obj) {\r\n        if (Array.isArray(obj.loadBalancingConfig)) {\r\n            for (const config of obj.loadBalancingConfig) {\r\n                result.loadBalancingConfig.push(validateLoadBalancingConfig(config));\r\n            }\r\n        }\r\n        else {\r\n            throw new Error('Invalid service config: invalid loadBalancingConfig');\r\n        }\r\n    }\r\n    if ('methodConfig' in obj) {\r\n        if (Array.isArray(obj.methodConfig)) {\r\n            for (const methodConfig of obj.methodConfig) {\r\n                result.methodConfig.push(validateMethodConfig(methodConfig));\r\n            }\r\n        }\r\n    }\r\n    if ('retryThrottling' in obj) {\r\n        result.retryThrottling = validateRetryThrottling(obj.retryThrottling);\r\n    }\r\n    // Validate method name uniqueness\r\n    const seenMethodNames = [];\r\n    for (const methodConfig of result.methodConfig) {\r\n        for (const name of methodConfig.name) {\r\n            for (const seenName of seenMethodNames) {\r\n                if (name.service === seenName.service &&\r\n                    name.method === seenName.method) {\r\n                    throw new Error(`Invalid service config: duplicate name ${name.service}/${name.method}`);\r\n                }\r\n            }\r\n            seenMethodNames.push(name);\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction validateCanaryConfig(obj) {\r\n    if (!('serviceConfig' in obj)) {\r\n        throw new Error('Invalid service config choice: missing service config');\r\n    }\r\n    const result = {\r\n        serviceConfig: validateServiceConfig(obj.serviceConfig),\r\n    };\r\n    if ('clientLanguage' in obj) {\r\n        if (Array.isArray(obj.clientLanguage)) {\r\n            result.clientLanguage = [];\r\n            for (const lang of obj.clientLanguage) {\r\n                if (typeof lang === 'string') {\r\n                    result.clientLanguage.push(lang);\r\n                }\r\n                else {\r\n                    throw new Error('Invalid service config choice: invalid clientLanguage');\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            throw new Error('Invalid service config choice: invalid clientLanguage');\r\n        }\r\n    }\r\n    if ('clientHostname' in obj) {\r\n        if (Array.isArray(obj.clientHostname)) {\r\n            result.clientHostname = [];\r\n            for (const lang of obj.clientHostname) {\r\n                if (typeof lang === 'string') {\r\n                    result.clientHostname.push(lang);\r\n                }\r\n                else {\r\n                    throw new Error('Invalid service config choice: invalid clientHostname');\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            throw new Error('Invalid service config choice: invalid clientHostname');\r\n        }\r\n    }\r\n    if ('percentage' in obj) {\r\n        if (typeof obj.percentage === 'number' &&\r\n            0 <= obj.percentage &&\r\n            obj.percentage <= 100) {\r\n            result.percentage = obj.percentage;\r\n        }\r\n        else {\r\n            throw new Error('Invalid service config choice: invalid percentage');\r\n        }\r\n    }\r\n    // Validate that no unexpected fields are present\r\n    const allowedFields = [\r\n        'clientLanguage',\r\n        'percentage',\r\n        'clientHostname',\r\n        'serviceConfig',\r\n    ];\r\n    for (const field in obj) {\r\n        if (!allowedFields.includes(field)) {\r\n            throw new Error(`Invalid service config choice: unexpected field ${field}`);\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction validateAndSelectCanaryConfig(obj, percentage) {\r\n    if (!Array.isArray(obj)) {\r\n        throw new Error('Invalid service config list');\r\n    }\r\n    for (const config of obj) {\r\n        const validatedConfig = validateCanaryConfig(config);\r\n        /* For each field, we check if it is present, then only discard the\r\n         * config if the field value does not match the current client */\r\n        if (typeof validatedConfig.percentage === 'number' &&\r\n            percentage > validatedConfig.percentage) {\r\n            continue;\r\n        }\r\n        if (Array.isArray(validatedConfig.clientHostname)) {\r\n            let hostnameMatched = false;\r\n            for (const hostname of validatedConfig.clientHostname) {\r\n                if (hostname === os.hostname()) {\r\n                    hostnameMatched = true;\r\n                }\r\n            }\r\n            if (!hostnameMatched) {\r\n                continue;\r\n            }\r\n        }\r\n        if (Array.isArray(validatedConfig.clientLanguage)) {\r\n            let languageMatched = false;\r\n            for (const language of validatedConfig.clientLanguage) {\r\n                if (language === CLIENT_LANGUAGE_STRING) {\r\n                    languageMatched = true;\r\n                }\r\n            }\r\n            if (!languageMatched) {\r\n                continue;\r\n            }\r\n        }\r\n        return validatedConfig.serviceConfig;\r\n    }\r\n    throw new Error('No matching service config found');\r\n}\r\n/**\r\n * Find the \"grpc_config\" record among the TXT records, parse its value as JSON, validate its contents,\r\n * and select a service config with selection fields that all match this client. Most of these steps\r\n * can fail with an error; the caller must handle any errors thrown this way.\r\n * @param txtRecord The TXT record array that is output from a successful call to dns.resolveTxt\r\n * @param percentage A number chosen from the range [0, 100) that is used to select which config to use\r\n * @return The service configuration to use, given the percentage value, or null if the service config\r\n *     data has a valid format but none of the options match the current client.\r\n */\r\nfunction extractAndSelectServiceConfig(txtRecord, percentage) {\r\n    for (const record of txtRecord) {\r\n        if (record.length > 0 && record[0].startsWith('grpc_config=')) {\r\n            /* Treat the list of strings in this record as a single string and remove\r\n             * \"grpc_config=\" from the beginning. The rest should be a JSON string */\r\n            const recordString = record.join('').substring('grpc_config='.length);\r\n            const recordJson = JSON.parse(recordString);\r\n            return validateAndSelectCanaryConfig(recordJson, percentage);\r\n        }\r\n    }\r\n    return null;\r\n}\r\n//# sourceMappingURL=service-config.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/service-config.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/status-builder.js":
/*!****************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/status-builder.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.StatusBuilder = void 0;\r\n/**\r\n * A builder for gRPC status objects.\r\n */\r\nclass StatusBuilder {\r\n    constructor() {\r\n        this.code = null;\r\n        this.details = null;\r\n        this.metadata = null;\r\n    }\r\n    /**\r\n     * Adds a status code to the builder.\r\n     */\r\n    withCode(code) {\r\n        this.code = code;\r\n        return this;\r\n    }\r\n    /**\r\n     * Adds details to the builder.\r\n     */\r\n    withDetails(details) {\r\n        this.details = details;\r\n        return this;\r\n    }\r\n    /**\r\n     * Adds metadata to the builder.\r\n     */\r\n    withMetadata(metadata) {\r\n        this.metadata = metadata;\r\n        return this;\r\n    }\r\n    /**\r\n     * Builds the status object.\r\n     */\r\n    build() {\r\n        const status = {};\r\n        if (this.code !== null) {\r\n            status.code = this.code;\r\n        }\r\n        if (this.details !== null) {\r\n            status.details = this.details;\r\n        }\r\n        if (this.metadata !== null) {\r\n            status.metadata = this.metadata;\r\n        }\r\n        return status;\r\n    }\r\n}\r\nexports.StatusBuilder = StatusBuilder;\r\n//# sourceMappingURL=status-builder.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvc3RhdHVzLWJ1aWxkZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQiIsInNvdXJjZXMiOlsid2VicGFjazovL2RhbmlzaC1idWRkeS8uL25vZGVfbW9kdWxlcy9AZ3JwYy9ncnBjLWpzL2J1aWxkL3NyYy9zdGF0dXMtYnVpbGRlci5qcz9kZGNjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG4vKlxyXG4gKiBDb3B5cmlnaHQgMjAxOSBnUlBDIGF1dGhvcnMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKlxyXG4gKi9cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLlN0YXR1c0J1aWxkZXIgPSB2b2lkIDA7XHJcbi8qKlxyXG4gKiBBIGJ1aWxkZXIgZm9yIGdSUEMgc3RhdHVzIG9iamVjdHMuXHJcbiAqL1xyXG5jbGFzcyBTdGF0dXNCdWlsZGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuY29kZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5kZXRhaWxzID0gbnVsbDtcclxuICAgICAgICB0aGlzLm1ldGFkYXRhID0gbnVsbDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQWRkcyBhIHN0YXR1cyBjb2RlIHRvIHRoZSBidWlsZGVyLlxyXG4gICAgICovXHJcbiAgICB3aXRoQ29kZShjb2RlKSB7XHJcbiAgICAgICAgdGhpcy5jb2RlID0gY29kZTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQWRkcyBkZXRhaWxzIHRvIHRoZSBidWlsZGVyLlxyXG4gICAgICovXHJcbiAgICB3aXRoRGV0YWlscyhkZXRhaWxzKSB7XHJcbiAgICAgICAgdGhpcy5kZXRhaWxzID0gZGV0YWlscztcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQWRkcyBtZXRhZGF0YSB0byB0aGUgYnVpbGRlci5cclxuICAgICAqL1xyXG4gICAgd2l0aE1ldGFkYXRhKG1ldGFkYXRhKSB7XHJcbiAgICAgICAgdGhpcy5tZXRhZGF0YSA9IG1ldGFkYXRhO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBCdWlsZHMgdGhlIHN0YXR1cyBvYmplY3QuXHJcbiAgICAgKi9cclxuICAgIGJ1aWxkKCkge1xyXG4gICAgICAgIGNvbnN0IHN0YXR1cyA9IHt9O1xyXG4gICAgICAgIGlmICh0aGlzLmNvZGUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgc3RhdHVzLmNvZGUgPSB0aGlzLmNvZGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmRldGFpbHMgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgc3RhdHVzLmRldGFpbHMgPSB0aGlzLmRldGFpbHM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLm1ldGFkYXRhICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHN0YXR1cy5tZXRhZGF0YSA9IHRoaXMubWV0YWRhdGE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzdGF0dXM7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5TdGF0dXNCdWlsZGVyID0gU3RhdHVzQnVpbGRlcjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RhdHVzLWJ1aWxkZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/status-builder.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/stream-decoder.js":
/*!****************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/stream-decoder.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.StreamDecoder = void 0;\r\nvar ReadState;\r\n(function (ReadState) {\r\n    ReadState[ReadState[\"NO_DATA\"] = 0] = \"NO_DATA\";\r\n    ReadState[ReadState[\"READING_SIZE\"] = 1] = \"READING_SIZE\";\r\n    ReadState[ReadState[\"READING_MESSAGE\"] = 2] = \"READING_MESSAGE\";\r\n})(ReadState || (ReadState = {}));\r\nclass StreamDecoder {\r\n    constructor(maxReadMessageLength) {\r\n        this.maxReadMessageLength = maxReadMessageLength;\r\n        this.readState = ReadState.NO_DATA;\r\n        this.readCompressFlag = Buffer.alloc(1);\r\n        this.readPartialSize = Buffer.alloc(4);\r\n        this.readSizeRemaining = 4;\r\n        this.readMessageSize = 0;\r\n        this.readPartialMessage = [];\r\n        this.readMessageRemaining = 0;\r\n    }\r\n    write(data) {\r\n        let readHead = 0;\r\n        let toRead;\r\n        const result = [];\r\n        while (readHead < data.length) {\r\n            switch (this.readState) {\r\n                case ReadState.NO_DATA:\r\n                    this.readCompressFlag = data.slice(readHead, readHead + 1);\r\n                    readHead += 1;\r\n                    this.readState = ReadState.READING_SIZE;\r\n                    this.readPartialSize.fill(0);\r\n                    this.readSizeRemaining = 4;\r\n                    this.readMessageSize = 0;\r\n                    this.readMessageRemaining = 0;\r\n                    this.readPartialMessage = [];\r\n                    break;\r\n                case ReadState.READING_SIZE:\r\n                    toRead = Math.min(data.length - readHead, this.readSizeRemaining);\r\n                    data.copy(this.readPartialSize, 4 - this.readSizeRemaining, readHead, readHead + toRead);\r\n                    this.readSizeRemaining -= toRead;\r\n                    readHead += toRead;\r\n                    // readSizeRemaining >=0 here\r\n                    if (this.readSizeRemaining === 0) {\r\n                        this.readMessageSize = this.readPartialSize.readUInt32BE(0);\r\n                        if (this.maxReadMessageLength !== -1 && this.readMessageSize > this.maxReadMessageLength) {\r\n                            throw new Error(`Received message larger than max (${this.readMessageSize} vs ${this.maxReadMessageLength})`);\r\n                        }\r\n                        this.readMessageRemaining = this.readMessageSize;\r\n                        if (this.readMessageRemaining > 0) {\r\n                            this.readState = ReadState.READING_MESSAGE;\r\n                        }\r\n                        else {\r\n                            const message = Buffer.concat([this.readCompressFlag, this.readPartialSize], 5);\r\n                            this.readState = ReadState.NO_DATA;\r\n                            result.push(message);\r\n                        }\r\n                    }\r\n                    break;\r\n                case ReadState.READING_MESSAGE:\r\n                    toRead = Math.min(data.length - readHead, this.readMessageRemaining);\r\n                    this.readPartialMessage.push(data.slice(readHead, readHead + toRead));\r\n                    this.readMessageRemaining -= toRead;\r\n                    readHead += toRead;\r\n                    // readMessageRemaining >=0 here\r\n                    if (this.readMessageRemaining === 0) {\r\n                        // At this point, we have read a full message\r\n                        const framedMessageBuffers = [\r\n                            this.readCompressFlag,\r\n                            this.readPartialSize,\r\n                        ].concat(this.readPartialMessage);\r\n                        const framedMessage = Buffer.concat(framedMessageBuffers, this.readMessageSize + 5);\r\n                        this.readState = ReadState.NO_DATA;\r\n                        result.push(framedMessage);\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw new Error('Unexpected read state');\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}\r\nexports.StreamDecoder = StreamDecoder;\r\n//# sourceMappingURL=stream-decoder.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvc3RyZWFtLWRlY29kZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsOEJBQThCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlGQUFpRixzQkFBc0IsS0FBSywwQkFBMEI7QUFDdEk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFuaXNoLWJ1ZGR5Ly4vbm9kZV9tb2R1bGVzL0BncnBjL2dycGMtanMvYnVpbGQvc3JjL3N0cmVhbS1kZWNvZGVyLmpzPzU0NGMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8qXHJcbiAqIENvcHlyaWdodCAyMDE5IGdSUEMgYXV0aG9ycy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqXHJcbiAqL1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuU3RyZWFtRGVjb2RlciA9IHZvaWQgMDtcclxudmFyIFJlYWRTdGF0ZTtcclxuKGZ1bmN0aW9uIChSZWFkU3RhdGUpIHtcclxuICAgIFJlYWRTdGF0ZVtSZWFkU3RhdGVbXCJOT19EQVRBXCJdID0gMF0gPSBcIk5PX0RBVEFcIjtcclxuICAgIFJlYWRTdGF0ZVtSZWFkU3RhdGVbXCJSRUFESU5HX1NJWkVcIl0gPSAxXSA9IFwiUkVBRElOR19TSVpFXCI7XHJcbiAgICBSZWFkU3RhdGVbUmVhZFN0YXRlW1wiUkVBRElOR19NRVNTQUdFXCJdID0gMl0gPSBcIlJFQURJTkdfTUVTU0FHRVwiO1xyXG59KShSZWFkU3RhdGUgfHwgKFJlYWRTdGF0ZSA9IHt9KSk7XHJcbmNsYXNzIFN0cmVhbURlY29kZXIge1xyXG4gICAgY29uc3RydWN0b3IobWF4UmVhZE1lc3NhZ2VMZW5ndGgpIHtcclxuICAgICAgICB0aGlzLm1heFJlYWRNZXNzYWdlTGVuZ3RoID0gbWF4UmVhZE1lc3NhZ2VMZW5ndGg7XHJcbiAgICAgICAgdGhpcy5yZWFkU3RhdGUgPSBSZWFkU3RhdGUuTk9fREFUQTtcclxuICAgICAgICB0aGlzLnJlYWRDb21wcmVzc0ZsYWcgPSBCdWZmZXIuYWxsb2MoMSk7XHJcbiAgICAgICAgdGhpcy5yZWFkUGFydGlhbFNpemUgPSBCdWZmZXIuYWxsb2MoNCk7XHJcbiAgICAgICAgdGhpcy5yZWFkU2l6ZVJlbWFpbmluZyA9IDQ7XHJcbiAgICAgICAgdGhpcy5yZWFkTWVzc2FnZVNpemUgPSAwO1xyXG4gICAgICAgIHRoaXMucmVhZFBhcnRpYWxNZXNzYWdlID0gW107XHJcbiAgICAgICAgdGhpcy5yZWFkTWVzc2FnZVJlbWFpbmluZyA9IDA7XHJcbiAgICB9XHJcbiAgICB3cml0ZShkYXRhKSB7XHJcbiAgICAgICAgbGV0IHJlYWRIZWFkID0gMDtcclxuICAgICAgICBsZXQgdG9SZWFkO1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xyXG4gICAgICAgIHdoaWxlIChyZWFkSGVhZCA8IGRhdGEubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5yZWFkU3RhdGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgUmVhZFN0YXRlLk5PX0RBVEE6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWFkQ29tcHJlc3NGbGFnID0gZGF0YS5zbGljZShyZWFkSGVhZCwgcmVhZEhlYWQgKyAxKTtcclxuICAgICAgICAgICAgICAgICAgICByZWFkSGVhZCArPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVhZFN0YXRlID0gUmVhZFN0YXRlLlJFQURJTkdfU0laRTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlYWRQYXJ0aWFsU2l6ZS5maWxsKDApO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVhZFNpemVSZW1haW5pbmcgPSA0O1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVhZE1lc3NhZ2VTaXplID0gMDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlYWRNZXNzYWdlUmVtYWluaW5nID0gMDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlYWRQYXJ0aWFsTWVzc2FnZSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBSZWFkU3RhdGUuUkVBRElOR19TSVpFOlxyXG4gICAgICAgICAgICAgICAgICAgIHRvUmVhZCA9IE1hdGgubWluKGRhdGEubGVuZ3RoIC0gcmVhZEhlYWQsIHRoaXMucmVhZFNpemVSZW1haW5pbmcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuY29weSh0aGlzLnJlYWRQYXJ0aWFsU2l6ZSwgNCAtIHRoaXMucmVhZFNpemVSZW1haW5pbmcsIHJlYWRIZWFkLCByZWFkSGVhZCArIHRvUmVhZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWFkU2l6ZVJlbWFpbmluZyAtPSB0b1JlYWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVhZEhlYWQgKz0gdG9SZWFkO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlYWRTaXplUmVtYWluaW5nID49MCBoZXJlXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucmVhZFNpemVSZW1haW5pbmcgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWFkTWVzc2FnZVNpemUgPSB0aGlzLnJlYWRQYXJ0aWFsU2l6ZS5yZWFkVUludDMyQkUoMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1heFJlYWRNZXNzYWdlTGVuZ3RoICE9PSAtMSAmJiB0aGlzLnJlYWRNZXNzYWdlU2l6ZSA+IHRoaXMubWF4UmVhZE1lc3NhZ2VMZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgUmVjZWl2ZWQgbWVzc2FnZSBsYXJnZXIgdGhhbiBtYXggKCR7dGhpcy5yZWFkTWVzc2FnZVNpemV9IHZzICR7dGhpcy5tYXhSZWFkTWVzc2FnZUxlbmd0aH0pYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWFkTWVzc2FnZVJlbWFpbmluZyA9IHRoaXMucmVhZE1lc3NhZ2VTaXplO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5yZWFkTWVzc2FnZVJlbWFpbmluZyA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVhZFN0YXRlID0gUmVhZFN0YXRlLlJFQURJTkdfTUVTU0FHRTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBCdWZmZXIuY29uY2F0KFt0aGlzLnJlYWRDb21wcmVzc0ZsYWcsIHRoaXMucmVhZFBhcnRpYWxTaXplXSwgNSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlYWRTdGF0ZSA9IFJlYWRTdGF0ZS5OT19EQVRBO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gobWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFJlYWRTdGF0ZS5SRUFESU5HX01FU1NBR0U6XHJcbiAgICAgICAgICAgICAgICAgICAgdG9SZWFkID0gTWF0aC5taW4oZGF0YS5sZW5ndGggLSByZWFkSGVhZCwgdGhpcy5yZWFkTWVzc2FnZVJlbWFpbmluZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWFkUGFydGlhbE1lc3NhZ2UucHVzaChkYXRhLnNsaWNlKHJlYWRIZWFkLCByZWFkSGVhZCArIHRvUmVhZCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVhZE1lc3NhZ2VSZW1haW5pbmcgLT0gdG9SZWFkO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlYWRIZWFkICs9IHRvUmVhZDtcclxuICAgICAgICAgICAgICAgICAgICAvLyByZWFkTWVzc2FnZVJlbWFpbmluZyA+PTAgaGVyZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnJlYWRNZXNzYWdlUmVtYWluaW5nID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEF0IHRoaXMgcG9pbnQsIHdlIGhhdmUgcmVhZCBhIGZ1bGwgbWVzc2FnZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmcmFtZWRNZXNzYWdlQnVmZmVycyA9IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVhZENvbXByZXNzRmxhZyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVhZFBhcnRpYWxTaXplLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdLmNvbmNhdCh0aGlzLnJlYWRQYXJ0aWFsTWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZyYW1lZE1lc3NhZ2UgPSBCdWZmZXIuY29uY2F0KGZyYW1lZE1lc3NhZ2VCdWZmZXJzLCB0aGlzLnJlYWRNZXNzYWdlU2l6ZSArIDUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlYWRTdGF0ZSA9IFJlYWRTdGF0ZS5OT19EQVRBO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChmcmFtZWRNZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5leHBlY3RlZCByZWFkIHN0YXRlJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlN0cmVhbURlY29kZXIgPSBTdHJlYW1EZWNvZGVyO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdHJlYW0tZGVjb2Rlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/stream-decoder.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/subchannel-address.js":
/*!********************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/subchannel-address.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2021 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.EndpointMap = void 0;\r\nexports.isTcpSubchannelAddress = isTcpSubchannelAddress;\r\nexports.subchannelAddressEqual = subchannelAddressEqual;\r\nexports.subchannelAddressToString = subchannelAddressToString;\r\nexports.stringToSubchannelAddress = stringToSubchannelAddress;\r\nexports.endpointEqual = endpointEqual;\r\nexports.endpointToString = endpointToString;\r\nexports.endpointHasAddress = endpointHasAddress;\r\nconst net_1 = __webpack_require__(/*! net */ \"net\");\r\nfunction isTcpSubchannelAddress(address) {\r\n    return 'port' in address;\r\n}\r\nfunction subchannelAddressEqual(address1, address2) {\r\n    if (!address1 && !address2) {\r\n        return true;\r\n    }\r\n    if (!address1 || !address2) {\r\n        return false;\r\n    }\r\n    if (isTcpSubchannelAddress(address1)) {\r\n        return (isTcpSubchannelAddress(address2) &&\r\n            address1.host === address2.host &&\r\n            address1.port === address2.port);\r\n    }\r\n    else {\r\n        return !isTcpSubchannelAddress(address2) && address1.path === address2.path;\r\n    }\r\n}\r\nfunction subchannelAddressToString(address) {\r\n    if (isTcpSubchannelAddress(address)) {\r\n        if ((0, net_1.isIPv6)(address.host)) {\r\n            return '[' + address.host + ']:' + address.port;\r\n        }\r\n        else {\r\n            return address.host + ':' + address.port;\r\n        }\r\n    }\r\n    else {\r\n        return address.path;\r\n    }\r\n}\r\nconst DEFAULT_PORT = 443;\r\nfunction stringToSubchannelAddress(addressString, port) {\r\n    if ((0, net_1.isIP)(addressString)) {\r\n        return {\r\n            host: addressString,\r\n            port: port !== null && port !== void 0 ? port : DEFAULT_PORT,\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            path: addressString,\r\n        };\r\n    }\r\n}\r\nfunction endpointEqual(endpoint1, endpoint2) {\r\n    if (endpoint1.addresses.length !== endpoint2.addresses.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < endpoint1.addresses.length; i++) {\r\n        if (!subchannelAddressEqual(endpoint1.addresses[i], endpoint2.addresses[i])) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction endpointToString(endpoint) {\r\n    return ('[' + endpoint.addresses.map(subchannelAddressToString).join(', ') + ']');\r\n}\r\nfunction endpointHasAddress(endpoint, expectedAddress) {\r\n    for (const address of endpoint.addresses) {\r\n        if (subchannelAddressEqual(address, expectedAddress)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction endpointEqualUnordered(endpoint1, endpoint2) {\r\n    if (endpoint1.addresses.length !== endpoint2.addresses.length) {\r\n        return false;\r\n    }\r\n    for (const address1 of endpoint1.addresses) {\r\n        let matchFound = false;\r\n        for (const address2 of endpoint2.addresses) {\r\n            if (subchannelAddressEqual(address1, address2)) {\r\n                matchFound = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!matchFound) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nclass EndpointMap {\r\n    constructor() {\r\n        this.map = new Set();\r\n    }\r\n    get size() {\r\n        return this.map.size;\r\n    }\r\n    getForSubchannelAddress(address) {\r\n        for (const entry of this.map) {\r\n            if (endpointHasAddress(entry.key, address)) {\r\n                return entry.value;\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n    /**\r\n     * Delete any entries in this map with keys that are not in endpoints\r\n     * @param endpoints\r\n     */\r\n    deleteMissing(endpoints) {\r\n        const removedValues = [];\r\n        for (const entry of this.map) {\r\n            let foundEntry = false;\r\n            for (const endpoint of endpoints) {\r\n                if (endpointEqualUnordered(endpoint, entry.key)) {\r\n                    foundEntry = true;\r\n                }\r\n            }\r\n            if (!foundEntry) {\r\n                removedValues.push(entry.value);\r\n                this.map.delete(entry);\r\n            }\r\n        }\r\n        return removedValues;\r\n    }\r\n    get(endpoint) {\r\n        for (const entry of this.map) {\r\n            if (endpointEqualUnordered(endpoint, entry.key)) {\r\n                return entry.value;\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n    set(endpoint, mapEntry) {\r\n        for (const entry of this.map) {\r\n            if (endpointEqualUnordered(endpoint, entry.key)) {\r\n                entry.value = mapEntry;\r\n                return;\r\n            }\r\n        }\r\n        this.map.add({ key: endpoint, value: mapEntry });\r\n    }\r\n    delete(endpoint) {\r\n        for (const entry of this.map) {\r\n            if (endpointEqualUnordered(endpoint, entry.key)) {\r\n                this.map.delete(entry);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    has(endpoint) {\r\n        for (const entry of this.map) {\r\n            if (endpointEqualUnordered(endpoint, entry.key)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    clear() {\r\n        this.map.clear();\r\n    }\r\n    *keys() {\r\n        for (const entry of this.map) {\r\n            yield entry.key;\r\n        }\r\n    }\r\n    *values() {\r\n        for (const entry of this.map) {\r\n            yield entry.value;\r\n        }\r\n    }\r\n    *entries() {\r\n        for (const entry of this.map) {\r\n            yield [entry.key, entry.value];\r\n        }\r\n    }\r\n}\r\nexports.EndpointMap = EndpointMap;\r\n//# sourceMappingURL=subchannel-address.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/subchannel-address.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/subchannel-call.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/subchannel-call.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Http2SubchannelCall = void 0;\r\nconst http2 = __webpack_require__(/*! http2 */ \"http2\");\r\nconst os = __webpack_require__(/*! os */ \"os\");\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nconst metadata_1 = __webpack_require__(/*! ./metadata */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/metadata.js\");\r\nconst stream_decoder_1 = __webpack_require__(/*! ./stream-decoder */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/stream-decoder.js\");\r\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\r\nconst constants_2 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nconst TRACER_NAME = 'subchannel_call';\r\n/**\r\n * Should do approximately the same thing as util.getSystemErrorName but the\r\n * TypeScript types don't have that function for some reason so I just made my\r\n * own.\r\n * @param errno\r\n */\r\nfunction getSystemErrorName(errno) {\r\n    for (const [name, num] of Object.entries(os.constants.errno)) {\r\n        if (num === errno) {\r\n            return name;\r\n        }\r\n    }\r\n    return 'Unknown system error ' + errno;\r\n}\r\nfunction mapHttpStatusCode(code) {\r\n    const details = `Received HTTP status code ${code}`;\r\n    let mappedStatusCode;\r\n    switch (code) {\r\n        // TODO(murgatroid99): handle 100 and 101\r\n        case 400:\r\n            mappedStatusCode = constants_1.Status.INTERNAL;\r\n            break;\r\n        case 401:\r\n            mappedStatusCode = constants_1.Status.UNAUTHENTICATED;\r\n            break;\r\n        case 403:\r\n            mappedStatusCode = constants_1.Status.PERMISSION_DENIED;\r\n            break;\r\n        case 404:\r\n            mappedStatusCode = constants_1.Status.UNIMPLEMENTED;\r\n            break;\r\n        case 429:\r\n        case 502:\r\n        case 503:\r\n        case 504:\r\n            mappedStatusCode = constants_1.Status.UNAVAILABLE;\r\n            break;\r\n        default:\r\n            mappedStatusCode = constants_1.Status.UNKNOWN;\r\n    }\r\n    return {\r\n        code: mappedStatusCode,\r\n        details: details,\r\n        metadata: new metadata_1.Metadata()\r\n    };\r\n}\r\nclass Http2SubchannelCall {\r\n    constructor(http2Stream, callEventTracker, listener, transport, callId) {\r\n        var _a;\r\n        this.http2Stream = http2Stream;\r\n        this.callEventTracker = callEventTracker;\r\n        this.listener = listener;\r\n        this.transport = transport;\r\n        this.callId = callId;\r\n        this.isReadFilterPending = false;\r\n        this.isPushPending = false;\r\n        this.canPush = false;\r\n        /**\r\n         * Indicates that an 'end' event has come from the http2 stream, so there\r\n         * will be no more data events.\r\n         */\r\n        this.readsClosed = false;\r\n        this.statusOutput = false;\r\n        this.unpushedReadMessages = [];\r\n        // This is populated (non-null) if and only if the call has ended\r\n        this.finalStatus = null;\r\n        this.internalError = null;\r\n        this.serverEndedCall = false;\r\n        this.connectionDropped = false;\r\n        const maxReceiveMessageLength = (_a = transport.getOptions()['grpc.max_receive_message_length']) !== null && _a !== void 0 ? _a : constants_1.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH;\r\n        this.decoder = new stream_decoder_1.StreamDecoder(maxReceiveMessageLength);\r\n        http2Stream.on('response', (headers, flags) => {\r\n            let headersString = '';\r\n            for (const header of Object.keys(headers)) {\r\n                headersString += '\\t\\t' + header + ': ' + headers[header] + '\\n';\r\n            }\r\n            this.trace('Received server headers:\\n' + headersString);\r\n            this.httpStatusCode = headers[':status'];\r\n            if (flags & http2.constants.NGHTTP2_FLAG_END_STREAM) {\r\n                this.handleTrailers(headers);\r\n            }\r\n            else {\r\n                let metadata;\r\n                try {\r\n                    metadata = metadata_1.Metadata.fromHttp2Headers(headers);\r\n                }\r\n                catch (error) {\r\n                    this.endCall({\r\n                        code: constants_1.Status.UNKNOWN,\r\n                        details: error.message,\r\n                        metadata: new metadata_1.Metadata(),\r\n                    });\r\n                    return;\r\n                }\r\n                this.listener.onReceiveMetadata(metadata);\r\n            }\r\n        });\r\n        http2Stream.on('trailers', (headers) => {\r\n            this.handleTrailers(headers);\r\n        });\r\n        http2Stream.on('data', (data) => {\r\n            /* If the status has already been output, allow the http2 stream to\r\n             * drain without processing the data. */\r\n            if (this.statusOutput) {\r\n                return;\r\n            }\r\n            this.trace('receive HTTP/2 data frame of length ' + data.length);\r\n            let messages;\r\n            try {\r\n                messages = this.decoder.write(data);\r\n            }\r\n            catch (e) {\r\n                /* Some servers send HTML error pages along with HTTP status codes.\r\n                 * When the client attempts to parse this as a length-delimited\r\n                 * message, the parsed message size is greater than the default limit,\r\n                 * resulting in a message decoding error. In that situation, the HTTP\r\n                 * error code information is more useful to the user than the\r\n                 * RESOURCE_EXHAUSTED error is, so we report that instead. Normally,\r\n                 * we delay processing the HTTP status until after the stream ends, to\r\n                 * prioritize reporting the gRPC status from trailers if it is present,\r\n                 * but when there is a message parsing error we end the stream early\r\n                 * before processing trailers. */\r\n                if (this.httpStatusCode !== undefined && this.httpStatusCode !== 200) {\r\n                    const mappedStatus = mapHttpStatusCode(this.httpStatusCode);\r\n                    this.cancelWithStatus(mappedStatus.code, mappedStatus.details);\r\n                }\r\n                else {\r\n                    this.cancelWithStatus(constants_1.Status.RESOURCE_EXHAUSTED, e.message);\r\n                }\r\n                return;\r\n            }\r\n            for (const message of messages) {\r\n                this.trace('parsed message of length ' + message.length);\r\n                this.callEventTracker.addMessageReceived();\r\n                this.tryPush(message);\r\n            }\r\n        });\r\n        http2Stream.on('end', () => {\r\n            this.readsClosed = true;\r\n            this.maybeOutputStatus();\r\n        });\r\n        http2Stream.on('close', () => {\r\n            this.serverEndedCall = true;\r\n            /* Use process.next tick to ensure that this code happens after any\r\n             * \"error\" event that may be emitted at about the same time, so that\r\n             * we can bubble up the error message from that event. */\r\n            process.nextTick(() => {\r\n                var _a;\r\n                this.trace('HTTP/2 stream closed with code ' + http2Stream.rstCode);\r\n                /* If we have a final status with an OK status code, that means that\r\n                 * we have received all of the messages and we have processed the\r\n                 * trailers and the call completed successfully, so it doesn't matter\r\n                 * how the stream ends after that */\r\n                if (((_a = this.finalStatus) === null || _a === void 0 ? void 0 : _a.code) === constants_1.Status.OK) {\r\n                    return;\r\n                }\r\n                let code;\r\n                let details = '';\r\n                switch (http2Stream.rstCode) {\r\n                    case http2.constants.NGHTTP2_NO_ERROR:\r\n                        /* If we get a NO_ERROR code and we already have a status, the\r\n                         * stream completed properly and we just haven't fully processed\r\n                         * it yet */\r\n                        if (this.finalStatus !== null) {\r\n                            return;\r\n                        }\r\n                        if (this.httpStatusCode && this.httpStatusCode !== 200) {\r\n                            const mappedStatus = mapHttpStatusCode(this.httpStatusCode);\r\n                            code = mappedStatus.code;\r\n                            details = mappedStatus.details;\r\n                        }\r\n                        else {\r\n                            code = constants_1.Status.INTERNAL;\r\n                            details = `Received RST_STREAM with code ${http2Stream.rstCode} (Call ended without gRPC status)`;\r\n                        }\r\n                        break;\r\n                    case http2.constants.NGHTTP2_REFUSED_STREAM:\r\n                        code = constants_1.Status.UNAVAILABLE;\r\n                        details = 'Stream refused by server';\r\n                        break;\r\n                    case http2.constants.NGHTTP2_CANCEL:\r\n                        /* Bug reports indicate that Node synthesizes a NGHTTP2_CANCEL\r\n                         * code from connection drops. We want to prioritize reporting\r\n                         * an unavailable status when that happens. */\r\n                        if (this.connectionDropped) {\r\n                            code = constants_1.Status.UNAVAILABLE;\r\n                            details = 'Connection dropped';\r\n                        }\r\n                        else {\r\n                            code = constants_1.Status.CANCELLED;\r\n                            details = 'Call cancelled';\r\n                        }\r\n                        break;\r\n                    case http2.constants.NGHTTP2_ENHANCE_YOUR_CALM:\r\n                        code = constants_1.Status.RESOURCE_EXHAUSTED;\r\n                        details = 'Bandwidth exhausted or memory limit exceeded';\r\n                        break;\r\n                    case http2.constants.NGHTTP2_INADEQUATE_SECURITY:\r\n                        code = constants_1.Status.PERMISSION_DENIED;\r\n                        details = 'Protocol not secure enough';\r\n                        break;\r\n                    case http2.constants.NGHTTP2_INTERNAL_ERROR:\r\n                        code = constants_1.Status.INTERNAL;\r\n                        if (this.internalError === null) {\r\n                            /* This error code was previously handled in the default case, and\r\n                             * there are several instances of it online, so I wanted to\r\n                             * preserve the original error message so that people find existing\r\n                             * information in searches, but also include the more recognizable\r\n                             * \"Internal server error\" message. */\r\n                            details = `Received RST_STREAM with code ${http2Stream.rstCode} (Internal server error)`;\r\n                        }\r\n                        else {\r\n                            if (this.internalError.code === 'ECONNRESET' ||\r\n                                this.internalError.code === 'ETIMEDOUT') {\r\n                                code = constants_1.Status.UNAVAILABLE;\r\n                                details = this.internalError.message;\r\n                            }\r\n                            else {\r\n                                /* The \"Received RST_STREAM with code ...\" error is preserved\r\n                                 * here for continuity with errors reported online, but the\r\n                                 * error message at the end will probably be more relevant in\r\n                                 * most cases. */\r\n                                details = `Received RST_STREAM with code ${http2Stream.rstCode} triggered by internal client error: ${this.internalError.message}`;\r\n                            }\r\n                        }\r\n                        break;\r\n                    default:\r\n                        code = constants_1.Status.INTERNAL;\r\n                        details = `Received RST_STREAM with code ${http2Stream.rstCode}`;\r\n                }\r\n                // This is a no-op if trailers were received at all.\r\n                // This is OK, because status codes emitted here correspond to more\r\n                // catastrophic issues that prevent us from receiving trailers in the\r\n                // first place.\r\n                this.endCall({\r\n                    code,\r\n                    details,\r\n                    metadata: new metadata_1.Metadata(),\r\n                    rstCode: http2Stream.rstCode,\r\n                });\r\n            });\r\n        });\r\n        http2Stream.on('error', (err) => {\r\n            /* We need an error handler here to stop \"Uncaught Error\" exceptions\r\n             * from bubbling up. However, errors here should all correspond to\r\n             * \"close\" events, where we will handle the error more granularly */\r\n            /* Specifically looking for stream errors that were *not* constructed\r\n             * from a RST_STREAM response here:\r\n             * https://github.com/nodejs/node/blob/8b8620d580314050175983402dfddf2674e8e22a/lib/internal/http2/core.js#L2267\r\n             */\r\n            if (err.code !== 'ERR_HTTP2_STREAM_ERROR') {\r\n                this.trace('Node error event: message=' +\r\n                    err.message +\r\n                    ' code=' +\r\n                    err.code +\r\n                    ' errno=' +\r\n                    getSystemErrorName(err.errno) +\r\n                    ' syscall=' +\r\n                    err.syscall);\r\n                this.internalError = err;\r\n            }\r\n            this.callEventTracker.onStreamEnd(false);\r\n        });\r\n    }\r\n    getDeadlineInfo() {\r\n        return [`remote_addr=${this.getPeer()}`];\r\n    }\r\n    onDisconnect() {\r\n        this.connectionDropped = true;\r\n        /* Give the call an event loop cycle to finish naturally before reporting\r\n         * the disconnection as an error. */\r\n        setImmediate(() => {\r\n            this.endCall({\r\n                code: constants_1.Status.UNAVAILABLE,\r\n                details: 'Connection dropped',\r\n                metadata: new metadata_1.Metadata(),\r\n            });\r\n        });\r\n    }\r\n    outputStatus() {\r\n        /* Precondition: this.finalStatus !== null */\r\n        if (!this.statusOutput) {\r\n            this.statusOutput = true;\r\n            this.trace('ended with status: code=' +\r\n                this.finalStatus.code +\r\n                ' details=\"' +\r\n                this.finalStatus.details +\r\n                '\"');\r\n            this.callEventTracker.onCallEnd(this.finalStatus);\r\n            /* We delay the actual action of bubbling up the status to insulate the\r\n             * cleanup code in this class from any errors that may be thrown in the\r\n             * upper layers as a result of bubbling up the status. In particular,\r\n             * if the status is not OK, the \"error\" event may be emitted\r\n             * synchronously at the top level, which will result in a thrown error if\r\n             * the user does not handle that event. */\r\n            process.nextTick(() => {\r\n                this.listener.onReceiveStatus(this.finalStatus);\r\n            });\r\n            /* Leave the http2 stream in flowing state to drain incoming messages, to\r\n             * ensure that the stream closure completes. The call stream already does\r\n             * not push more messages after the status is output, so the messages go\r\n             * nowhere either way. */\r\n            this.http2Stream.resume();\r\n        }\r\n    }\r\n    trace(text) {\r\n        logging.trace(constants_2.LogVerbosity.DEBUG, TRACER_NAME, '[' + this.callId + '] ' + text);\r\n    }\r\n    /**\r\n     * On first call, emits a 'status' event with the given StatusObject.\r\n     * Subsequent calls are no-ops.\r\n     * @param status The status of the call.\r\n     */\r\n    endCall(status) {\r\n        /* If the status is OK and a new status comes in (e.g. from a\r\n         * deserialization failure), that new status takes priority */\r\n        if (this.finalStatus === null || this.finalStatus.code === constants_1.Status.OK) {\r\n            this.finalStatus = status;\r\n            this.maybeOutputStatus();\r\n        }\r\n        this.destroyHttp2Stream();\r\n    }\r\n    maybeOutputStatus() {\r\n        if (this.finalStatus !== null) {\r\n            /* The combination check of readsClosed and that the two message buffer\r\n             * arrays are empty checks that there all incoming data has been fully\r\n             * processed */\r\n            if (this.finalStatus.code !== constants_1.Status.OK ||\r\n                (this.readsClosed &&\r\n                    this.unpushedReadMessages.length === 0 &&\r\n                    !this.isReadFilterPending &&\r\n                    !this.isPushPending)) {\r\n                this.outputStatus();\r\n            }\r\n        }\r\n    }\r\n    push(message) {\r\n        this.trace('pushing to reader message of length ' +\r\n            (message instanceof Buffer ? message.length : null));\r\n        this.canPush = false;\r\n        this.isPushPending = true;\r\n        process.nextTick(() => {\r\n            this.isPushPending = false;\r\n            /* If we have already output the status any later messages should be\r\n             * ignored, and can cause out-of-order operation errors higher up in the\r\n             * stack. Checking as late as possible here to avoid any race conditions.\r\n             */\r\n            if (this.statusOutput) {\r\n                return;\r\n            }\r\n            this.listener.onReceiveMessage(message);\r\n            this.maybeOutputStatus();\r\n        });\r\n    }\r\n    tryPush(messageBytes) {\r\n        if (this.canPush) {\r\n            this.http2Stream.pause();\r\n            this.push(messageBytes);\r\n        }\r\n        else {\r\n            this.trace('unpushedReadMessages.push message of length ' + messageBytes.length);\r\n            this.unpushedReadMessages.push(messageBytes);\r\n        }\r\n    }\r\n    handleTrailers(headers) {\r\n        this.serverEndedCall = true;\r\n        this.callEventTracker.onStreamEnd(true);\r\n        let headersString = '';\r\n        for (const header of Object.keys(headers)) {\r\n            headersString += '\\t\\t' + header + ': ' + headers[header] + '\\n';\r\n        }\r\n        this.trace('Received server trailers:\\n' + headersString);\r\n        let metadata;\r\n        try {\r\n            metadata = metadata_1.Metadata.fromHttp2Headers(headers);\r\n        }\r\n        catch (e) {\r\n            metadata = new metadata_1.Metadata();\r\n        }\r\n        const metadataMap = metadata.getMap();\r\n        let status;\r\n        if (typeof metadataMap['grpc-status'] === 'string') {\r\n            const receivedStatus = Number(metadataMap['grpc-status']);\r\n            this.trace('received status code ' + receivedStatus + ' from server');\r\n            metadata.remove('grpc-status');\r\n            let details = '';\r\n            if (typeof metadataMap['grpc-message'] === 'string') {\r\n                try {\r\n                    details = decodeURI(metadataMap['grpc-message']);\r\n                }\r\n                catch (e) {\r\n                    details = metadataMap['grpc-message'];\r\n                }\r\n                metadata.remove('grpc-message');\r\n                this.trace('received status details string \"' + details + '\" from server');\r\n            }\r\n            status = {\r\n                code: receivedStatus,\r\n                details: details,\r\n                metadata: metadata\r\n            };\r\n        }\r\n        else if (this.httpStatusCode) {\r\n            status = mapHttpStatusCode(this.httpStatusCode);\r\n            status.metadata = metadata;\r\n        }\r\n        else {\r\n            status = {\r\n                code: constants_1.Status.UNKNOWN,\r\n                details: 'No status information received',\r\n                metadata: metadata\r\n            };\r\n        }\r\n        // This is a no-op if the call was already ended when handling headers.\r\n        this.endCall(status);\r\n    }\r\n    destroyHttp2Stream() {\r\n        var _a;\r\n        // The http2 stream could already have been destroyed if cancelWithStatus\r\n        // is called in response to an internal http2 error.\r\n        if (this.http2Stream.destroyed) {\r\n            return;\r\n        }\r\n        /* If the server ended the call, sending an RST_STREAM is redundant, so we\r\n         * just half close on the client side instead to finish closing the stream.\r\n         */\r\n        if (this.serverEndedCall) {\r\n            this.http2Stream.end();\r\n        }\r\n        else {\r\n            /* If the call has ended with an OK status, communicate that when closing\r\n             * the stream, partly to avoid a situation in which we detect an error\r\n             * RST_STREAM as a result after we have the status */\r\n            let code;\r\n            if (((_a = this.finalStatus) === null || _a === void 0 ? void 0 : _a.code) === constants_1.Status.OK) {\r\n                code = http2.constants.NGHTTP2_NO_ERROR;\r\n            }\r\n            else {\r\n                code = http2.constants.NGHTTP2_CANCEL;\r\n            }\r\n            this.trace('close http2 stream with code ' + code);\r\n            this.http2Stream.close(code);\r\n        }\r\n    }\r\n    cancelWithStatus(status, details) {\r\n        this.trace('cancelWithStatus code: ' + status + ' details: \"' + details + '\"');\r\n        this.endCall({ code: status, details, metadata: new metadata_1.Metadata() });\r\n    }\r\n    getStatus() {\r\n        return this.finalStatus;\r\n    }\r\n    getPeer() {\r\n        return this.transport.getPeerName();\r\n    }\r\n    getCallNumber() {\r\n        return this.callId;\r\n    }\r\n    startRead() {\r\n        /* If the stream has ended with an error, we should not emit any more\r\n         * messages and we should communicate that the stream has ended */\r\n        if (this.finalStatus !== null && this.finalStatus.code !== constants_1.Status.OK) {\r\n            this.readsClosed = true;\r\n            this.maybeOutputStatus();\r\n            return;\r\n        }\r\n        this.canPush = true;\r\n        if (this.unpushedReadMessages.length > 0) {\r\n            const nextMessage = this.unpushedReadMessages.shift();\r\n            this.push(nextMessage);\r\n            return;\r\n        }\r\n        /* Only resume reading from the http2Stream if we don't have any pending\r\n         * messages to emit */\r\n        this.http2Stream.resume();\r\n    }\r\n    sendMessageWithContext(context, message) {\r\n        this.trace('write() called with message of length ' + message.length);\r\n        const cb = (error) => {\r\n            /* nextTick here ensures that no stream action can be taken in the call\r\n             * stack of the write callback, in order to hopefully work around\r\n             * https://github.com/nodejs/node/issues/49147 */\r\n            process.nextTick(() => {\r\n                var _a;\r\n                let code = constants_1.Status.UNAVAILABLE;\r\n                if ((error === null || error === void 0 ? void 0 : error.code) ===\r\n                    'ERR_STREAM_WRITE_AFTER_END') {\r\n                    code = constants_1.Status.INTERNAL;\r\n                }\r\n                if (error) {\r\n                    this.cancelWithStatus(code, `Write error: ${error.message}`);\r\n                }\r\n                (_a = context.callback) === null || _a === void 0 ? void 0 : _a.call(context);\r\n            });\r\n        };\r\n        this.trace('sending data chunk of length ' + message.length);\r\n        this.callEventTracker.addMessageSent();\r\n        try {\r\n            this.http2Stream.write(message, cb);\r\n        }\r\n        catch (error) {\r\n            this.endCall({\r\n                code: constants_1.Status.UNAVAILABLE,\r\n                details: `Write failed with error ${error.message}`,\r\n                metadata: new metadata_1.Metadata(),\r\n            });\r\n        }\r\n    }\r\n    halfClose() {\r\n        this.trace('end() called');\r\n        this.trace('calling end() on HTTP/2 stream');\r\n        this.http2Stream.end();\r\n    }\r\n}\r\nexports.Http2SubchannelCall = Http2SubchannelCall;\r\n//# sourceMappingURL=subchannel-call.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/subchannel-call.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/subchannel-interface.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/subchannel-interface.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\n/*\r\n * Copyright 2022 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.BaseSubchannelWrapper = void 0;\r\nclass BaseSubchannelWrapper {\r\n    constructor(child) {\r\n        this.child = child;\r\n        this.healthy = true;\r\n        this.healthListeners = new Set();\r\n        child.addHealthStateWatcher(childHealthy => {\r\n            /* A change to the child health state only affects this wrapper's overall\r\n             * health state if this wrapper is reporting healthy. */\r\n            if (this.healthy) {\r\n                this.updateHealthListeners();\r\n            }\r\n        });\r\n    }\r\n    updateHealthListeners() {\r\n        for (const listener of this.healthListeners) {\r\n            listener(this.isHealthy());\r\n        }\r\n    }\r\n    getConnectivityState() {\r\n        return this.child.getConnectivityState();\r\n    }\r\n    addConnectivityStateListener(listener) {\r\n        this.child.addConnectivityStateListener(listener);\r\n    }\r\n    removeConnectivityStateListener(listener) {\r\n        this.child.removeConnectivityStateListener(listener);\r\n    }\r\n    startConnecting() {\r\n        this.child.startConnecting();\r\n    }\r\n    getAddress() {\r\n        return this.child.getAddress();\r\n    }\r\n    throttleKeepalive(newKeepaliveTime) {\r\n        this.child.throttleKeepalive(newKeepaliveTime);\r\n    }\r\n    ref() {\r\n        this.child.ref();\r\n    }\r\n    unref() {\r\n        this.child.unref();\r\n    }\r\n    getChannelzRef() {\r\n        return this.child.getChannelzRef();\r\n    }\r\n    isHealthy() {\r\n        return this.healthy && this.child.isHealthy();\r\n    }\r\n    addHealthStateWatcher(listener) {\r\n        this.healthListeners.add(listener);\r\n    }\r\n    removeHealthStateWatcher(listener) {\r\n        this.healthListeners.delete(listener);\r\n    }\r\n    setHealthy(healthy) {\r\n        if (healthy !== this.healthy) {\r\n            this.healthy = healthy;\r\n            /* A change to this wrapper's health state only affects the overall\r\n             * reported health state if the child is healthy. */\r\n            if (this.child.isHealthy()) {\r\n                this.updateHealthListeners();\r\n            }\r\n        }\r\n    }\r\n    getRealSubchannel() {\r\n        return this.child.getRealSubchannel();\r\n    }\r\n    realSubchannelEquals(other) {\r\n        return this.getRealSubchannel() === other.getRealSubchannel();\r\n    }\r\n    getCallCredentials() {\r\n        return this.child.getCallCredentials();\r\n    }\r\n}\r\nexports.BaseSubchannelWrapper = BaseSubchannelWrapper;\r\n//# sourceMappingURL=subchannel-interface.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvc3ViY2hhbm5lbC1pbnRlcmZhY2UuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFuaXNoLWJ1ZGR5Ly4vbm9kZV9tb2R1bGVzL0BncnBjL2dycGMtanMvYnVpbGQvc3JjL3N1YmNoYW5uZWwtaW50ZXJmYWNlLmpzPzBmMmUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8qXHJcbiAqIENvcHlyaWdodCAyMDIyIGdSUEMgYXV0aG9ycy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqXHJcbiAqL1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuQmFzZVN1YmNoYW5uZWxXcmFwcGVyID0gdm9pZCAwO1xyXG5jbGFzcyBCYXNlU3ViY2hhbm5lbFdyYXBwZXIge1xyXG4gICAgY29uc3RydWN0b3IoY2hpbGQpIHtcclxuICAgICAgICB0aGlzLmNoaWxkID0gY2hpbGQ7XHJcbiAgICAgICAgdGhpcy5oZWFsdGh5ID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmhlYWx0aExpc3RlbmVycyA9IG5ldyBTZXQoKTtcclxuICAgICAgICBjaGlsZC5hZGRIZWFsdGhTdGF0ZVdhdGNoZXIoY2hpbGRIZWFsdGh5ID0+IHtcclxuICAgICAgICAgICAgLyogQSBjaGFuZ2UgdG8gdGhlIGNoaWxkIGhlYWx0aCBzdGF0ZSBvbmx5IGFmZmVjdHMgdGhpcyB3cmFwcGVyJ3Mgb3ZlcmFsbFxyXG4gICAgICAgICAgICAgKiBoZWFsdGggc3RhdGUgaWYgdGhpcyB3cmFwcGVyIGlzIHJlcG9ydGluZyBoZWFsdGh5LiAqL1xyXG4gICAgICAgICAgICBpZiAodGhpcy5oZWFsdGh5KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUhlYWx0aExpc3RlbmVycygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICB1cGRhdGVIZWFsdGhMaXN0ZW5lcnMoKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBsaXN0ZW5lciBvZiB0aGlzLmhlYWx0aExpc3RlbmVycykge1xyXG4gICAgICAgICAgICBsaXN0ZW5lcih0aGlzLmlzSGVhbHRoeSgpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBnZXRDb25uZWN0aXZpdHlTdGF0ZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jaGlsZC5nZXRDb25uZWN0aXZpdHlTdGF0ZSgpO1xyXG4gICAgfVxyXG4gICAgYWRkQ29ubmVjdGl2aXR5U3RhdGVMaXN0ZW5lcihsaXN0ZW5lcikge1xyXG4gICAgICAgIHRoaXMuY2hpbGQuYWRkQ29ubmVjdGl2aXR5U3RhdGVMaXN0ZW5lcihsaXN0ZW5lcik7XHJcbiAgICB9XHJcbiAgICByZW1vdmVDb25uZWN0aXZpdHlTdGF0ZUxpc3RlbmVyKGxpc3RlbmVyKSB7XHJcbiAgICAgICAgdGhpcy5jaGlsZC5yZW1vdmVDb25uZWN0aXZpdHlTdGF0ZUxpc3RlbmVyKGxpc3RlbmVyKTtcclxuICAgIH1cclxuICAgIHN0YXJ0Q29ubmVjdGluZygpIHtcclxuICAgICAgICB0aGlzLmNoaWxkLnN0YXJ0Q29ubmVjdGluZygpO1xyXG4gICAgfVxyXG4gICAgZ2V0QWRkcmVzcygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jaGlsZC5nZXRBZGRyZXNzKCk7XHJcbiAgICB9XHJcbiAgICB0aHJvdHRsZUtlZXBhbGl2ZShuZXdLZWVwYWxpdmVUaW1lKSB7XHJcbiAgICAgICAgdGhpcy5jaGlsZC50aHJvdHRsZUtlZXBhbGl2ZShuZXdLZWVwYWxpdmVUaW1lKTtcclxuICAgIH1cclxuICAgIHJlZigpIHtcclxuICAgICAgICB0aGlzLmNoaWxkLnJlZigpO1xyXG4gICAgfVxyXG4gICAgdW5yZWYoKSB7XHJcbiAgICAgICAgdGhpcy5jaGlsZC51bnJlZigpO1xyXG4gICAgfVxyXG4gICAgZ2V0Q2hhbm5lbHpSZWYoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hpbGQuZ2V0Q2hhbm5lbHpSZWYoKTtcclxuICAgIH1cclxuICAgIGlzSGVhbHRoeSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5oZWFsdGh5ICYmIHRoaXMuY2hpbGQuaXNIZWFsdGh5KCk7XHJcbiAgICB9XHJcbiAgICBhZGRIZWFsdGhTdGF0ZVdhdGNoZXIobGlzdGVuZXIpIHtcclxuICAgICAgICB0aGlzLmhlYWx0aExpc3RlbmVycy5hZGQobGlzdGVuZXIpO1xyXG4gICAgfVxyXG4gICAgcmVtb3ZlSGVhbHRoU3RhdGVXYXRjaGVyKGxpc3RlbmVyKSB7XHJcbiAgICAgICAgdGhpcy5oZWFsdGhMaXN0ZW5lcnMuZGVsZXRlKGxpc3RlbmVyKTtcclxuICAgIH1cclxuICAgIHNldEhlYWx0aHkoaGVhbHRoeSkge1xyXG4gICAgICAgIGlmIChoZWFsdGh5ICE9PSB0aGlzLmhlYWx0aHkpIHtcclxuICAgICAgICAgICAgdGhpcy5oZWFsdGh5ID0gaGVhbHRoeTtcclxuICAgICAgICAgICAgLyogQSBjaGFuZ2UgdG8gdGhpcyB3cmFwcGVyJ3MgaGVhbHRoIHN0YXRlIG9ubHkgYWZmZWN0cyB0aGUgb3ZlcmFsbFxyXG4gICAgICAgICAgICAgKiByZXBvcnRlZCBoZWFsdGggc3RhdGUgaWYgdGhlIGNoaWxkIGlzIGhlYWx0aHkuICovXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNoaWxkLmlzSGVhbHRoeSgpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUhlYWx0aExpc3RlbmVycygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ2V0UmVhbFN1YmNoYW5uZWwoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hpbGQuZ2V0UmVhbFN1YmNoYW5uZWwoKTtcclxuICAgIH1cclxuICAgIHJlYWxTdWJjaGFubmVsRXF1YWxzKG90aGVyKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UmVhbFN1YmNoYW5uZWwoKSA9PT0gb3RoZXIuZ2V0UmVhbFN1YmNoYW5uZWwoKTtcclxuICAgIH1cclxuICAgIGdldENhbGxDcmVkZW50aWFscygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jaGlsZC5nZXRDYWxsQ3JlZGVudGlhbHMoKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkJhc2VTdWJjaGFubmVsV3JhcHBlciA9IEJhc2VTdWJjaGFubmVsV3JhcHBlcjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3ViY2hhbm5lbC1pbnRlcmZhY2UuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/subchannel-interface.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/subchannel-pool.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/subchannel-pool.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.SubchannelPool = void 0;\r\nexports.getSubchannelPool = getSubchannelPool;\r\nconst channel_options_1 = __webpack_require__(/*! ./channel-options */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/channel-options.js\");\r\nconst subchannel_1 = __webpack_require__(/*! ./subchannel */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/subchannel.js\");\r\nconst subchannel_address_1 = __webpack_require__(/*! ./subchannel-address */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/subchannel-address.js\");\r\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\r\nconst transport_1 = __webpack_require__(/*! ./transport */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/transport.js\");\r\n// 10 seconds in milliseconds. This value is arbitrary.\r\n/**\r\n * The amount of time in between checks for dropping subchannels that have no\r\n * other references\r\n */\r\nconst REF_CHECK_INTERVAL = 10000;\r\nclass SubchannelPool {\r\n    /**\r\n     * A pool of subchannels use for making connections. Subchannels with the\r\n     * exact same parameters will be reused.\r\n     */\r\n    constructor() {\r\n        this.pool = Object.create(null);\r\n        /**\r\n         * A timer of a task performing a periodic subchannel cleanup.\r\n         */\r\n        this.cleanupTimer = null;\r\n    }\r\n    /**\r\n     * Unrefs all unused subchannels and cancels the cleanup task if all\r\n     * subchannels have been unrefed.\r\n     */\r\n    unrefUnusedSubchannels() {\r\n        let allSubchannelsUnrefed = true;\r\n        /* These objects are created with Object.create(null), so they do not\r\n         * have a prototype, which means that for (... in ...) loops over them\r\n         * do not need to be filtered */\r\n        // eslint-disable-disable-next-line:forin\r\n        for (const channelTarget in this.pool) {\r\n            const subchannelObjArray = this.pool[channelTarget];\r\n            const refedSubchannels = subchannelObjArray.filter(value => !value.subchannel.unrefIfOneRef());\r\n            if (refedSubchannels.length > 0) {\r\n                allSubchannelsUnrefed = false;\r\n            }\r\n            /* For each subchannel in the pool, try to unref it if it has\r\n             * exactly one ref (which is the ref from the pool itself). If that\r\n             * does happen, remove the subchannel from the pool */\r\n            this.pool[channelTarget] = refedSubchannels;\r\n        }\r\n        /* Currently we do not delete keys with empty values. If that results\r\n         * in significant memory usage we should change it. */\r\n        // Cancel the cleanup task if all subchannels have been unrefed.\r\n        if (allSubchannelsUnrefed && this.cleanupTimer !== null) {\r\n            clearInterval(this.cleanupTimer);\r\n            this.cleanupTimer = null;\r\n        }\r\n    }\r\n    /**\r\n     * Ensures that the cleanup task is spawned.\r\n     */\r\n    ensureCleanupTask() {\r\n        var _a, _b;\r\n        if (this.cleanupTimer === null) {\r\n            this.cleanupTimer = setInterval(() => {\r\n                this.unrefUnusedSubchannels();\r\n            }, REF_CHECK_INTERVAL);\r\n            // Unref because this timer should not keep the event loop running.\r\n            // Call unref only if it exists to address electron/electron#21162\r\n            (_b = (_a = this.cleanupTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\r\n        }\r\n    }\r\n    /**\r\n     * Get a subchannel if one already exists with exactly matching parameters.\r\n     * Otherwise, create and save a subchannel with those parameters.\r\n     * @param channelTarget\r\n     * @param subchannelTarget\r\n     * @param channelArguments\r\n     * @param channelCredentials\r\n     */\r\n    getOrCreateSubchannel(channelTargetUri, subchannelTarget, channelArguments, channelCredentials) {\r\n        this.ensureCleanupTask();\r\n        const channelTarget = (0, uri_parser_1.uriToString)(channelTargetUri);\r\n        if (channelTarget in this.pool) {\r\n            const subchannelObjArray = this.pool[channelTarget];\r\n            for (const subchannelObj of subchannelObjArray) {\r\n                if ((0, subchannel_address_1.subchannelAddressEqual)(subchannelTarget, subchannelObj.subchannelAddress) &&\r\n                    (0, channel_options_1.channelOptionsEqual)(channelArguments, subchannelObj.channelArguments) &&\r\n                    channelCredentials._equals(subchannelObj.channelCredentials)) {\r\n                    return subchannelObj.subchannel;\r\n                }\r\n            }\r\n        }\r\n        // If we get here, no matching subchannel was found\r\n        const subchannel = new subchannel_1.Subchannel(channelTargetUri, subchannelTarget, channelArguments, channelCredentials, new transport_1.Http2SubchannelConnector(channelTargetUri));\r\n        if (!(channelTarget in this.pool)) {\r\n            this.pool[channelTarget] = [];\r\n        }\r\n        this.pool[channelTarget].push({\r\n            subchannelAddress: subchannelTarget,\r\n            channelArguments,\r\n            channelCredentials,\r\n            subchannel,\r\n        });\r\n        subchannel.ref();\r\n        return subchannel;\r\n    }\r\n}\r\nexports.SubchannelPool = SubchannelPool;\r\nconst globalSubchannelPool = new SubchannelPool();\r\n/**\r\n * Get either the global subchannel pool, or a new subchannel pool.\r\n * @param global\r\n */\r\nfunction getSubchannelPool(global) {\r\n    if (global) {\r\n        return globalSubchannelPool;\r\n    }\r\n    else {\r\n        return new SubchannelPool();\r\n    }\r\n}\r\n//# sourceMappingURL=subchannel-pool.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/subchannel-pool.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/subchannel.js":
/*!************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/subchannel.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Subchannel = void 0;\r\nconst connectivity_state_1 = __webpack_require__(/*! ./connectivity-state */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/connectivity-state.js\");\r\nconst backoff_timeout_1 = __webpack_require__(/*! ./backoff-timeout */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/backoff-timeout.js\");\r\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\r\nconst subchannel_address_1 = __webpack_require__(/*! ./subchannel-address */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/subchannel-address.js\");\r\nconst channelz_1 = __webpack_require__(/*! ./channelz */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/channelz.js\");\r\nconst TRACER_NAME = 'subchannel';\r\n/* setInterval and setTimeout only accept signed 32 bit integers. JS doesn't\r\n * have a constant for the max signed 32 bit integer, so this is a simple way\r\n * to calculate it */\r\nconst KEEPALIVE_MAX_TIME_MS = ~(1 << 31);\r\nclass Subchannel {\r\n    /**\r\n     * A class representing a connection to a single backend.\r\n     * @param channelTarget The target string for the channel as a whole\r\n     * @param subchannelAddress The address for the backend that this subchannel\r\n     *     will connect to\r\n     * @param options The channel options, plus any specific subchannel options\r\n     *     for this subchannel\r\n     * @param credentials The channel credentials used to establish this\r\n     *     connection\r\n     */\r\n    constructor(channelTarget, subchannelAddress, options, credentials, connector) {\r\n        var _a;\r\n        this.channelTarget = channelTarget;\r\n        this.subchannelAddress = subchannelAddress;\r\n        this.options = options;\r\n        this.connector = connector;\r\n        /**\r\n         * The subchannel's current connectivity state. Invariant: `session` === `null`\r\n         * if and only if `connectivityState` is IDLE or TRANSIENT_FAILURE.\r\n         */\r\n        this.connectivityState = connectivity_state_1.ConnectivityState.IDLE;\r\n        /**\r\n         * The underlying http2 session used to make requests.\r\n         */\r\n        this.transport = null;\r\n        /**\r\n         * Indicates that the subchannel should transition from TRANSIENT_FAILURE to\r\n         * CONNECTING instead of IDLE when the backoff timeout ends.\r\n         */\r\n        this.continueConnecting = false;\r\n        /**\r\n         * A list of listener functions that will be called whenever the connectivity\r\n         * state changes. Will be modified by `addConnectivityStateListener` and\r\n         * `removeConnectivityStateListener`\r\n         */\r\n        this.stateListeners = new Set();\r\n        /**\r\n         * Tracks channels and subchannel pools with references to this subchannel\r\n         */\r\n        this.refcount = 0;\r\n        // Channelz info\r\n        this.channelzEnabled = true;\r\n        const backoffOptions = {\r\n            initialDelay: options['grpc.initial_reconnect_backoff_ms'],\r\n            maxDelay: options['grpc.max_reconnect_backoff_ms'],\r\n        };\r\n        this.backoffTimeout = new backoff_timeout_1.BackoffTimeout(() => {\r\n            this.handleBackoffTimer();\r\n        }, backoffOptions);\r\n        this.backoffTimeout.unref();\r\n        this.subchannelAddressString = (0, subchannel_address_1.subchannelAddressToString)(subchannelAddress);\r\n        this.keepaliveTime = (_a = options['grpc.keepalive_time_ms']) !== null && _a !== void 0 ? _a : -1;\r\n        if (options['grpc.enable_channelz'] === 0) {\r\n            this.channelzEnabled = false;\r\n            this.channelzTrace = new channelz_1.ChannelzTraceStub();\r\n            this.callTracker = new channelz_1.ChannelzCallTrackerStub();\r\n            this.childrenTracker = new channelz_1.ChannelzChildrenTrackerStub();\r\n            this.streamTracker = new channelz_1.ChannelzCallTrackerStub();\r\n        }\r\n        else {\r\n            this.channelzTrace = new channelz_1.ChannelzTrace();\r\n            this.callTracker = new channelz_1.ChannelzCallTracker();\r\n            this.childrenTracker = new channelz_1.ChannelzChildrenTracker();\r\n            this.streamTracker = new channelz_1.ChannelzCallTracker();\r\n        }\r\n        this.channelzRef = (0, channelz_1.registerChannelzSubchannel)(this.subchannelAddressString, () => this.getChannelzInfo(), this.channelzEnabled);\r\n        this.channelzTrace.addTrace('CT_INFO', 'Subchannel created');\r\n        this.trace('Subchannel constructed with options ' +\r\n            JSON.stringify(options, undefined, 2));\r\n        this.secureConnector = credentials._createSecureConnector(channelTarget, options);\r\n    }\r\n    getChannelzInfo() {\r\n        return {\r\n            state: this.connectivityState,\r\n            trace: this.channelzTrace,\r\n            callTracker: this.callTracker,\r\n            children: this.childrenTracker.getChildLists(),\r\n            target: this.subchannelAddressString,\r\n        };\r\n    }\r\n    trace(text) {\r\n        logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, '(' +\r\n            this.channelzRef.id +\r\n            ') ' +\r\n            this.subchannelAddressString +\r\n            ' ' +\r\n            text);\r\n    }\r\n    refTrace(text) {\r\n        logging.trace(constants_1.LogVerbosity.DEBUG, 'subchannel_refcount', '(' +\r\n            this.channelzRef.id +\r\n            ') ' +\r\n            this.subchannelAddressString +\r\n            ' ' +\r\n            text);\r\n    }\r\n    handleBackoffTimer() {\r\n        if (this.continueConnecting) {\r\n            this.transitionToState([connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE], connectivity_state_1.ConnectivityState.CONNECTING);\r\n        }\r\n        else {\r\n            this.transitionToState([connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE], connectivity_state_1.ConnectivityState.IDLE);\r\n        }\r\n    }\r\n    /**\r\n     * Start a backoff timer with the current nextBackoff timeout\r\n     */\r\n    startBackoff() {\r\n        this.backoffTimeout.runOnce();\r\n    }\r\n    stopBackoff() {\r\n        this.backoffTimeout.stop();\r\n        this.backoffTimeout.reset();\r\n    }\r\n    startConnectingInternal() {\r\n        let options = this.options;\r\n        if (options['grpc.keepalive_time_ms']) {\r\n            const adjustedKeepaliveTime = Math.min(this.keepaliveTime, KEEPALIVE_MAX_TIME_MS);\r\n            options = Object.assign(Object.assign({}, options), { 'grpc.keepalive_time_ms': adjustedKeepaliveTime });\r\n        }\r\n        this.connector\r\n            .connect(this.subchannelAddress, this.secureConnector, options)\r\n            .then(transport => {\r\n            if (this.transitionToState([connectivity_state_1.ConnectivityState.CONNECTING], connectivity_state_1.ConnectivityState.READY)) {\r\n                this.transport = transport;\r\n                if (this.channelzEnabled) {\r\n                    this.childrenTracker.refChild(transport.getChannelzRef());\r\n                }\r\n                transport.addDisconnectListener(tooManyPings => {\r\n                    this.transitionToState([connectivity_state_1.ConnectivityState.READY], connectivity_state_1.ConnectivityState.IDLE);\r\n                    if (tooManyPings && this.keepaliveTime > 0) {\r\n                        this.keepaliveTime *= 2;\r\n                        logging.log(constants_1.LogVerbosity.ERROR, `Connection to ${(0, uri_parser_1.uriToString)(this.channelTarget)} at ${this.subchannelAddressString} rejected by server because of excess pings. Increasing ping interval to ${this.keepaliveTime} ms`);\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                /* If we can't transition from CONNECTING to READY here, we will\r\n                 * not be using this transport, so release its resources. */\r\n                transport.shutdown();\r\n            }\r\n        }, error => {\r\n            this.transitionToState([connectivity_state_1.ConnectivityState.CONNECTING], connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE, `${error}`);\r\n        });\r\n    }\r\n    /**\r\n     * Initiate a state transition from any element of oldStates to the new\r\n     * state. If the current connectivityState is not in oldStates, do nothing.\r\n     * @param oldStates The set of states to transition from\r\n     * @param newState The state to transition to\r\n     * @returns True if the state changed, false otherwise\r\n     */\r\n    transitionToState(oldStates, newState, errorMessage) {\r\n        var _a, _b;\r\n        if (oldStates.indexOf(this.connectivityState) === -1) {\r\n            return false;\r\n        }\r\n        if (errorMessage) {\r\n            this.trace(connectivity_state_1.ConnectivityState[this.connectivityState] +\r\n                ' -> ' +\r\n                connectivity_state_1.ConnectivityState[newState] +\r\n                ' with error \"' + errorMessage + '\"');\r\n        }\r\n        else {\r\n            this.trace(connectivity_state_1.ConnectivityState[this.connectivityState] +\r\n                ' -> ' +\r\n                connectivity_state_1.ConnectivityState[newState]);\r\n        }\r\n        if (this.channelzEnabled) {\r\n            this.channelzTrace.addTrace('CT_INFO', 'Connectivity state change to ' + connectivity_state_1.ConnectivityState[newState]);\r\n        }\r\n        const previousState = this.connectivityState;\r\n        this.connectivityState = newState;\r\n        switch (newState) {\r\n            case connectivity_state_1.ConnectivityState.READY:\r\n                this.stopBackoff();\r\n                break;\r\n            case connectivity_state_1.ConnectivityState.CONNECTING:\r\n                this.startBackoff();\r\n                this.startConnectingInternal();\r\n                this.continueConnecting = false;\r\n                break;\r\n            case connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE:\r\n                if (this.channelzEnabled && this.transport) {\r\n                    this.childrenTracker.unrefChild(this.transport.getChannelzRef());\r\n                }\r\n                (_a = this.transport) === null || _a === void 0 ? void 0 : _a.shutdown();\r\n                this.transport = null;\r\n                /* If the backoff timer has already ended by the time we get to the\r\n                 * TRANSIENT_FAILURE state, we want to immediately transition out of\r\n                 * TRANSIENT_FAILURE as though the backoff timer is ending right now */\r\n                if (!this.backoffTimeout.isRunning()) {\r\n                    process.nextTick(() => {\r\n                        this.handleBackoffTimer();\r\n                    });\r\n                }\r\n                break;\r\n            case connectivity_state_1.ConnectivityState.IDLE:\r\n                if (this.channelzEnabled && this.transport) {\r\n                    this.childrenTracker.unrefChild(this.transport.getChannelzRef());\r\n                }\r\n                (_b = this.transport) === null || _b === void 0 ? void 0 : _b.shutdown();\r\n                this.transport = null;\r\n                break;\r\n            default:\r\n                throw new Error(`Invalid state: unknown ConnectivityState ${newState}`);\r\n        }\r\n        for (const listener of this.stateListeners) {\r\n            listener(this, previousState, newState, this.keepaliveTime, errorMessage);\r\n        }\r\n        return true;\r\n    }\r\n    ref() {\r\n        this.refTrace('refcount ' + this.refcount + ' -> ' + (this.refcount + 1));\r\n        this.refcount += 1;\r\n    }\r\n    unref() {\r\n        this.refTrace('refcount ' + this.refcount + ' -> ' + (this.refcount - 1));\r\n        this.refcount -= 1;\r\n        if (this.refcount === 0) {\r\n            this.channelzTrace.addTrace('CT_INFO', 'Shutting down');\r\n            (0, channelz_1.unregisterChannelzRef)(this.channelzRef);\r\n            this.secureConnector.destroy();\r\n            process.nextTick(() => {\r\n                this.transitionToState([connectivity_state_1.ConnectivityState.CONNECTING, connectivity_state_1.ConnectivityState.READY], connectivity_state_1.ConnectivityState.IDLE);\r\n            });\r\n        }\r\n    }\r\n    unrefIfOneRef() {\r\n        if (this.refcount === 1) {\r\n            this.unref();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    createCall(metadata, host, method, listener) {\r\n        if (!this.transport) {\r\n            throw new Error('Cannot create call, subchannel not READY');\r\n        }\r\n        let statsTracker;\r\n        if (this.channelzEnabled) {\r\n            this.callTracker.addCallStarted();\r\n            this.streamTracker.addCallStarted();\r\n            statsTracker = {\r\n                onCallEnd: status => {\r\n                    if (status.code === constants_1.Status.OK) {\r\n                        this.callTracker.addCallSucceeded();\r\n                    }\r\n                    else {\r\n                        this.callTracker.addCallFailed();\r\n                    }\r\n                },\r\n            };\r\n        }\r\n        else {\r\n            statsTracker = {};\r\n        }\r\n        return this.transport.createCall(metadata, host, method, listener, statsTracker);\r\n    }\r\n    /**\r\n     * If the subchannel is currently IDLE, start connecting and switch to the\r\n     * CONNECTING state. If the subchannel is current in TRANSIENT_FAILURE,\r\n     * the next time it would transition to IDLE, start connecting again instead.\r\n     * Otherwise, do nothing.\r\n     */\r\n    startConnecting() {\r\n        process.nextTick(() => {\r\n            /* First, try to transition from IDLE to connecting. If that doesn't happen\r\n             * because the state is not currently IDLE, check if it is\r\n             * TRANSIENT_FAILURE, and if so indicate that it should go back to\r\n             * connecting after the backoff timer ends. Otherwise do nothing */\r\n            if (!this.transitionToState([connectivity_state_1.ConnectivityState.IDLE], connectivity_state_1.ConnectivityState.CONNECTING)) {\r\n                if (this.connectivityState === connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) {\r\n                    this.continueConnecting = true;\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Get the subchannel's current connectivity state.\r\n     */\r\n    getConnectivityState() {\r\n        return this.connectivityState;\r\n    }\r\n    /**\r\n     * Add a listener function to be called whenever the subchannel's\r\n     * connectivity state changes.\r\n     * @param listener\r\n     */\r\n    addConnectivityStateListener(listener) {\r\n        this.stateListeners.add(listener);\r\n    }\r\n    /**\r\n     * Remove a listener previously added with `addConnectivityStateListener`\r\n     * @param listener A reference to a function previously passed to\r\n     *     `addConnectivityStateListener`\r\n     */\r\n    removeConnectivityStateListener(listener) {\r\n        this.stateListeners.delete(listener);\r\n    }\r\n    /**\r\n     * Reset the backoff timeout, and immediately start connecting if in backoff.\r\n     */\r\n    resetBackoff() {\r\n        process.nextTick(() => {\r\n            this.backoffTimeout.reset();\r\n            this.transitionToState([connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE], connectivity_state_1.ConnectivityState.CONNECTING);\r\n        });\r\n    }\r\n    getAddress() {\r\n        return this.subchannelAddressString;\r\n    }\r\n    getChannelzRef() {\r\n        return this.channelzRef;\r\n    }\r\n    isHealthy() {\r\n        return true;\r\n    }\r\n    addHealthStateWatcher(listener) {\r\n        // Do nothing with the listener\r\n    }\r\n    removeHealthStateWatcher(listener) {\r\n        // Do nothing with the listener\r\n    }\r\n    getRealSubchannel() {\r\n        return this;\r\n    }\r\n    realSubchannelEquals(other) {\r\n        return other.getRealSubchannel() === this;\r\n    }\r\n    throttleKeepalive(newKeepaliveTime) {\r\n        if (newKeepaliveTime > this.keepaliveTime) {\r\n            this.keepaliveTime = newKeepaliveTime;\r\n        }\r\n    }\r\n    getCallCredentials() {\r\n        return this.secureConnector.getCallCredentials();\r\n    }\r\n}\r\nexports.Subchannel = Subchannel;\r\n//# sourceMappingURL=subchannel.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/subchannel.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/tls-helpers.js":
/*!*************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/tls-helpers.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2019 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.CIPHER_SUITES = void 0;\r\nexports.getDefaultRootsData = getDefaultRootsData;\r\nconst fs = __webpack_require__(/*! fs */ \"fs\");\r\nexports.CIPHER_SUITES = process.env.GRPC_SSL_CIPHER_SUITES;\r\nconst DEFAULT_ROOTS_FILE_PATH = process.env.GRPC_DEFAULT_SSL_ROOTS_FILE_PATH;\r\nlet defaultRootsData = null;\r\nfunction getDefaultRootsData() {\r\n    if (DEFAULT_ROOTS_FILE_PATH) {\r\n        if (defaultRootsData === null) {\r\n            defaultRootsData = fs.readFileSync(DEFAULT_ROOTS_FILE_PATH);\r\n        }\r\n        return defaultRootsData;\r\n    }\r\n    return null;\r\n}\r\n//# sourceMappingURL=tls-helpers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvdGxzLWhlbHBlcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUI7QUFDckIsMkJBQTJCO0FBQzNCLFdBQVcsbUJBQU8sQ0FBQyxjQUFJO0FBQ3ZCLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYW5pc2gtYnVkZHkvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvdGxzLWhlbHBlcnMuanM/YWJhMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuLypcclxuICogQ29weXJpZ2h0IDIwMTkgZ1JQQyBhdXRob3JzLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICpcclxuICovXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5DSVBIRVJfU1VJVEVTID0gdm9pZCAwO1xyXG5leHBvcnRzLmdldERlZmF1bHRSb290c0RhdGEgPSBnZXREZWZhdWx0Um9vdHNEYXRhO1xyXG5jb25zdCBmcyA9IHJlcXVpcmUoXCJmc1wiKTtcclxuZXhwb3J0cy5DSVBIRVJfU1VJVEVTID0gcHJvY2Vzcy5lbnYuR1JQQ19TU0xfQ0lQSEVSX1NVSVRFUztcclxuY29uc3QgREVGQVVMVF9ST09UU19GSUxFX1BBVEggPSBwcm9jZXNzLmVudi5HUlBDX0RFRkFVTFRfU1NMX1JPT1RTX0ZJTEVfUEFUSDtcclxubGV0IGRlZmF1bHRSb290c0RhdGEgPSBudWxsO1xyXG5mdW5jdGlvbiBnZXREZWZhdWx0Um9vdHNEYXRhKCkge1xyXG4gICAgaWYgKERFRkFVTFRfUk9PVFNfRklMRV9QQVRIKSB7XHJcbiAgICAgICAgaWYgKGRlZmF1bHRSb290c0RhdGEgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgZGVmYXVsdFJvb3RzRGF0YSA9IGZzLnJlYWRGaWxlU3luYyhERUZBVUxUX1JPT1RTX0ZJTEVfUEFUSCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBkZWZhdWx0Um9vdHNEYXRhO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGxzLWhlbHBlcnMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/tls-helpers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/transport.js":
/*!***********************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/transport.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/*\r\n * Copyright 2023 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Http2SubchannelConnector = void 0;\r\nconst http2 = __webpack_require__(/*! http2 */ \"http2\");\r\nconst channelz_1 = __webpack_require__(/*! ./channelz */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/channelz.js\");\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/constants.js\");\r\nconst http_proxy_1 = __webpack_require__(/*! ./http_proxy */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/http_proxy.js\");\r\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/logging.js\");\r\nconst resolver_1 = __webpack_require__(/*! ./resolver */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/resolver.js\");\r\nconst subchannel_address_1 = __webpack_require__(/*! ./subchannel-address */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/subchannel-address.js\");\r\nconst uri_parser_1 = __webpack_require__(/*! ./uri-parser */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js\");\r\nconst net = __webpack_require__(/*! net */ \"net\");\r\nconst subchannel_call_1 = __webpack_require__(/*! ./subchannel-call */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/subchannel-call.js\");\r\nconst call_number_1 = __webpack_require__(/*! ./call-number */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/call-number.js\");\r\nconst TRACER_NAME = 'transport';\r\nconst FLOW_CONTROL_TRACER_NAME = 'transport_flowctrl';\r\nconst clientVersion = (__webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/@grpc/grpc-js/package.json\").version);\r\nconst { HTTP2_HEADER_AUTHORITY, HTTP2_HEADER_CONTENT_TYPE, HTTP2_HEADER_METHOD, HTTP2_HEADER_PATH, HTTP2_HEADER_TE, HTTP2_HEADER_USER_AGENT, } = http2.constants;\r\nconst KEEPALIVE_TIMEOUT_MS = 20000;\r\nconst tooManyPingsData = Buffer.from('too_many_pings', 'ascii');\r\nclass Http2Transport {\r\n    constructor(session, subchannelAddress, options, \r\n    /**\r\n     * Name of the remote server, if it is not the same as the subchannel\r\n     * address, i.e. if connecting through an HTTP CONNECT proxy.\r\n     */\r\n    remoteName) {\r\n        this.session = session;\r\n        this.options = options;\r\n        this.remoteName = remoteName;\r\n        /**\r\n         * Timer reference indicating when to send the next ping or when the most recent ping will be considered lost.\r\n         */\r\n        this.keepaliveTimer = null;\r\n        /**\r\n         * Indicates that the keepalive timer ran out while there were no active\r\n         * calls, and a ping should be sent the next time a call starts.\r\n         */\r\n        this.pendingSendKeepalivePing = false;\r\n        this.activeCalls = new Set();\r\n        this.disconnectListeners = [];\r\n        this.disconnectHandled = false;\r\n        this.channelzEnabled = true;\r\n        this.keepalivesSent = 0;\r\n        this.messagesSent = 0;\r\n        this.messagesReceived = 0;\r\n        this.lastMessageSentTimestamp = null;\r\n        this.lastMessageReceivedTimestamp = null;\r\n        /* Populate subchannelAddressString and channelzRef before doing anything\r\n         * else, because they are used in the trace methods. */\r\n        this.subchannelAddressString = (0, subchannel_address_1.subchannelAddressToString)(subchannelAddress);\r\n        if (options['grpc.enable_channelz'] === 0) {\r\n            this.channelzEnabled = false;\r\n            this.streamTracker = new channelz_1.ChannelzCallTrackerStub();\r\n        }\r\n        else {\r\n            this.streamTracker = new channelz_1.ChannelzCallTracker();\r\n        }\r\n        this.channelzRef = (0, channelz_1.registerChannelzSocket)(this.subchannelAddressString, () => this.getChannelzInfo(), this.channelzEnabled);\r\n        // Build user-agent string.\r\n        this.userAgent = [\r\n            options['grpc.primary_user_agent'],\r\n            `grpc-node-js/${clientVersion}`,\r\n            options['grpc.secondary_user_agent'],\r\n        ]\r\n            .filter(e => e)\r\n            .join(' '); // remove falsey values first\r\n        if ('grpc.keepalive_time_ms' in options) {\r\n            this.keepaliveTimeMs = options['grpc.keepalive_time_ms'];\r\n        }\r\n        else {\r\n            this.keepaliveTimeMs = -1;\r\n        }\r\n        if ('grpc.keepalive_timeout_ms' in options) {\r\n            this.keepaliveTimeoutMs = options['grpc.keepalive_timeout_ms'];\r\n        }\r\n        else {\r\n            this.keepaliveTimeoutMs = KEEPALIVE_TIMEOUT_MS;\r\n        }\r\n        if ('grpc.keepalive_permit_without_calls' in options) {\r\n            this.keepaliveWithoutCalls =\r\n                options['grpc.keepalive_permit_without_calls'] === 1;\r\n        }\r\n        else {\r\n            this.keepaliveWithoutCalls = false;\r\n        }\r\n        session.once('close', () => {\r\n            this.trace('session closed');\r\n            this.handleDisconnect();\r\n        });\r\n        session.once('goaway', (errorCode, lastStreamID, opaqueData) => {\r\n            let tooManyPings = false;\r\n            /* See the last paragraph of\r\n             * https://github.com/grpc/proposal/blob/master/A8-client-side-keepalive.md#basic-keepalive */\r\n            if (errorCode === http2.constants.NGHTTP2_ENHANCE_YOUR_CALM &&\r\n                opaqueData &&\r\n                opaqueData.equals(tooManyPingsData)) {\r\n                tooManyPings = true;\r\n            }\r\n            this.trace('connection closed by GOAWAY with code ' +\r\n                errorCode +\r\n                ' and data ' +\r\n                (opaqueData === null || opaqueData === void 0 ? void 0 : opaqueData.toString()));\r\n            this.reportDisconnectToOwner(tooManyPings);\r\n        });\r\n        session.once('error', error => {\r\n            this.trace('connection closed with error ' + error.message);\r\n            this.handleDisconnect();\r\n        });\r\n        session.socket.once('close', (hadError) => {\r\n            this.trace('connection closed. hadError=' + hadError);\r\n            this.handleDisconnect();\r\n        });\r\n        if (logging.isTracerEnabled(TRACER_NAME)) {\r\n            session.on('remoteSettings', (settings) => {\r\n                this.trace('new settings received' +\r\n                    (this.session !== session ? ' on the old connection' : '') +\r\n                    ': ' +\r\n                    JSON.stringify(settings));\r\n            });\r\n            session.on('localSettings', (settings) => {\r\n                this.trace('local settings acknowledged by remote' +\r\n                    (this.session !== session ? ' on the old connection' : '') +\r\n                    ': ' +\r\n                    JSON.stringify(settings));\r\n            });\r\n        }\r\n        /* Start the keepalive timer last, because this can trigger trace logs,\r\n         * which should only happen after everything else is set up. */\r\n        if (this.keepaliveWithoutCalls) {\r\n            this.maybeStartKeepalivePingTimer();\r\n        }\r\n    }\r\n    getChannelzInfo() {\r\n        var _a, _b, _c;\r\n        const sessionSocket = this.session.socket;\r\n        const remoteAddress = sessionSocket.remoteAddress\r\n            ? (0, subchannel_address_1.stringToSubchannelAddress)(sessionSocket.remoteAddress, sessionSocket.remotePort)\r\n            : null;\r\n        const localAddress = sessionSocket.localAddress\r\n            ? (0, subchannel_address_1.stringToSubchannelAddress)(sessionSocket.localAddress, sessionSocket.localPort)\r\n            : null;\r\n        let tlsInfo;\r\n        if (this.session.encrypted) {\r\n            const tlsSocket = sessionSocket;\r\n            const cipherInfo = tlsSocket.getCipher();\r\n            const certificate = tlsSocket.getCertificate();\r\n            const peerCertificate = tlsSocket.getPeerCertificate();\r\n            tlsInfo = {\r\n                cipherSuiteStandardName: (_a = cipherInfo.standardName) !== null && _a !== void 0 ? _a : null,\r\n                cipherSuiteOtherName: cipherInfo.standardName ? null : cipherInfo.name,\r\n                localCertificate: certificate && 'raw' in certificate ? certificate.raw : null,\r\n                remoteCertificate: peerCertificate && 'raw' in peerCertificate\r\n                    ? peerCertificate.raw\r\n                    : null,\r\n            };\r\n        }\r\n        else {\r\n            tlsInfo = null;\r\n        }\r\n        const socketInfo = {\r\n            remoteAddress: remoteAddress,\r\n            localAddress: localAddress,\r\n            security: tlsInfo,\r\n            remoteName: this.remoteName,\r\n            streamsStarted: this.streamTracker.callsStarted,\r\n            streamsSucceeded: this.streamTracker.callsSucceeded,\r\n            streamsFailed: this.streamTracker.callsFailed,\r\n            messagesSent: this.messagesSent,\r\n            messagesReceived: this.messagesReceived,\r\n            keepAlivesSent: this.keepalivesSent,\r\n            lastLocalStreamCreatedTimestamp: this.streamTracker.lastCallStartedTimestamp,\r\n            lastRemoteStreamCreatedTimestamp: null,\r\n            lastMessageSentTimestamp: this.lastMessageSentTimestamp,\r\n            lastMessageReceivedTimestamp: this.lastMessageReceivedTimestamp,\r\n            localFlowControlWindow: (_b = this.session.state.localWindowSize) !== null && _b !== void 0 ? _b : null,\r\n            remoteFlowControlWindow: (_c = this.session.state.remoteWindowSize) !== null && _c !== void 0 ? _c : null,\r\n        };\r\n        return socketInfo;\r\n    }\r\n    trace(text) {\r\n        logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, '(' +\r\n            this.channelzRef.id +\r\n            ') ' +\r\n            this.subchannelAddressString +\r\n            ' ' +\r\n            text);\r\n    }\r\n    keepaliveTrace(text) {\r\n        logging.trace(constants_1.LogVerbosity.DEBUG, 'keepalive', '(' +\r\n            this.channelzRef.id +\r\n            ') ' +\r\n            this.subchannelAddressString +\r\n            ' ' +\r\n            text);\r\n    }\r\n    flowControlTrace(text) {\r\n        logging.trace(constants_1.LogVerbosity.DEBUG, FLOW_CONTROL_TRACER_NAME, '(' +\r\n            this.channelzRef.id +\r\n            ') ' +\r\n            this.subchannelAddressString +\r\n            ' ' +\r\n            text);\r\n    }\r\n    internalsTrace(text) {\r\n        logging.trace(constants_1.LogVerbosity.DEBUG, 'transport_internals', '(' +\r\n            this.channelzRef.id +\r\n            ') ' +\r\n            this.subchannelAddressString +\r\n            ' ' +\r\n            text);\r\n    }\r\n    /**\r\n     * Indicate to the owner of this object that this transport should no longer\r\n     * be used. That happens if the connection drops, or if the server sends a\r\n     * GOAWAY.\r\n     * @param tooManyPings If true, this was triggered by a GOAWAY with data\r\n     * indicating that the session was closed becaues the client sent too many\r\n     * pings.\r\n     * @returns\r\n     */\r\n    reportDisconnectToOwner(tooManyPings) {\r\n        if (this.disconnectHandled) {\r\n            return;\r\n        }\r\n        this.disconnectHandled = true;\r\n        this.disconnectListeners.forEach(listener => listener(tooManyPings));\r\n    }\r\n    /**\r\n     * Handle connection drops, but not GOAWAYs.\r\n     */\r\n    handleDisconnect() {\r\n        this.clearKeepaliveTimeout();\r\n        this.reportDisconnectToOwner(false);\r\n        for (const call of this.activeCalls) {\r\n            call.onDisconnect();\r\n        }\r\n        // Wait an event loop cycle before destroying the connection\r\n        setImmediate(() => {\r\n            this.session.destroy();\r\n        });\r\n    }\r\n    addDisconnectListener(listener) {\r\n        this.disconnectListeners.push(listener);\r\n    }\r\n    canSendPing() {\r\n        return (!this.session.destroyed &&\r\n            this.keepaliveTimeMs > 0 &&\r\n            (this.keepaliveWithoutCalls || this.activeCalls.size > 0));\r\n    }\r\n    maybeSendPing() {\r\n        var _a, _b;\r\n        if (!this.canSendPing()) {\r\n            this.pendingSendKeepalivePing = true;\r\n            return;\r\n        }\r\n        if (this.keepaliveTimer) {\r\n            console.error('keepaliveTimeout is not null');\r\n            return;\r\n        }\r\n        if (this.channelzEnabled) {\r\n            this.keepalivesSent += 1;\r\n        }\r\n        this.keepaliveTrace('Sending ping with timeout ' + this.keepaliveTimeoutMs + 'ms');\r\n        this.keepaliveTimer = setTimeout(() => {\r\n            this.keepaliveTimer = null;\r\n            this.keepaliveTrace('Ping timeout passed without response');\r\n            this.handleDisconnect();\r\n        }, this.keepaliveTimeoutMs);\r\n        (_b = (_a = this.keepaliveTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\r\n        let pingSendError = '';\r\n        try {\r\n            const pingSentSuccessfully = this.session.ping((err, duration, payload) => {\r\n                this.clearKeepaliveTimeout();\r\n                if (err) {\r\n                    this.keepaliveTrace('Ping failed with error ' + err.message);\r\n                    this.handleDisconnect();\r\n                }\r\n                else {\r\n                    this.keepaliveTrace('Received ping response');\r\n                    this.maybeStartKeepalivePingTimer();\r\n                }\r\n            });\r\n            if (!pingSentSuccessfully) {\r\n                pingSendError = 'Ping returned false';\r\n            }\r\n        }\r\n        catch (e) {\r\n            // grpc/grpc-node#2139\r\n            pingSendError = (e instanceof Error ? e.message : '') || 'Unknown error';\r\n        }\r\n        if (pingSendError) {\r\n            this.keepaliveTrace('Ping send failed: ' + pingSendError);\r\n            this.handleDisconnect();\r\n        }\r\n    }\r\n    /**\r\n     * Starts the keepalive ping timer if appropriate. If the timer already ran\r\n     * out while there were no active requests, instead send a ping immediately.\r\n     * If the ping timer is already running or a ping is currently in flight,\r\n     * instead do nothing and wait for them to resolve.\r\n     */\r\n    maybeStartKeepalivePingTimer() {\r\n        var _a, _b;\r\n        if (!this.canSendPing()) {\r\n            return;\r\n        }\r\n        if (this.pendingSendKeepalivePing) {\r\n            this.pendingSendKeepalivePing = false;\r\n            this.maybeSendPing();\r\n        }\r\n        else if (!this.keepaliveTimer) {\r\n            this.keepaliveTrace('Starting keepalive timer for ' + this.keepaliveTimeMs + 'ms');\r\n            this.keepaliveTimer = setTimeout(() => {\r\n                this.keepaliveTimer = null;\r\n                this.maybeSendPing();\r\n            }, this.keepaliveTimeMs);\r\n            (_b = (_a = this.keepaliveTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\r\n        }\r\n        /* Otherwise, there is already either a keepalive timer or a ping pending,\r\n         * wait for those to resolve. */\r\n    }\r\n    /**\r\n     * Clears whichever keepalive timeout is currently active, if any.\r\n     */\r\n    clearKeepaliveTimeout() {\r\n        if (this.keepaliveTimer) {\r\n            clearTimeout(this.keepaliveTimer);\r\n            this.keepaliveTimer = null;\r\n        }\r\n    }\r\n    removeActiveCall(call) {\r\n        this.activeCalls.delete(call);\r\n        if (this.activeCalls.size === 0) {\r\n            this.session.unref();\r\n        }\r\n    }\r\n    addActiveCall(call) {\r\n        this.activeCalls.add(call);\r\n        if (this.activeCalls.size === 1) {\r\n            this.session.ref();\r\n            if (!this.keepaliveWithoutCalls) {\r\n                this.maybeStartKeepalivePingTimer();\r\n            }\r\n        }\r\n    }\r\n    createCall(metadata, host, method, listener, subchannelCallStatsTracker) {\r\n        const headers = metadata.toHttp2Headers();\r\n        headers[HTTP2_HEADER_AUTHORITY] = host;\r\n        headers[HTTP2_HEADER_USER_AGENT] = this.userAgent;\r\n        headers[HTTP2_HEADER_CONTENT_TYPE] = 'application/grpc';\r\n        headers[HTTP2_HEADER_METHOD] = 'POST';\r\n        headers[HTTP2_HEADER_PATH] = method;\r\n        headers[HTTP2_HEADER_TE] = 'trailers';\r\n        let http2Stream;\r\n        /* In theory, if an error is thrown by session.request because session has\r\n         * become unusable (e.g. because it has received a goaway), this subchannel\r\n         * should soon see the corresponding close or goaway event anyway and leave\r\n         * READY. But we have seen reports that this does not happen\r\n         * (https://github.com/googleapis/nodejs-firestore/issues/1023#issuecomment-653204096)\r\n         * so for defense in depth, we just discard the session when we see an\r\n         * error here.\r\n         */\r\n        try {\r\n            http2Stream = this.session.request(headers);\r\n        }\r\n        catch (e) {\r\n            this.handleDisconnect();\r\n            throw e;\r\n        }\r\n        this.flowControlTrace('local window size: ' +\r\n            this.session.state.localWindowSize +\r\n            ' remote window size: ' +\r\n            this.session.state.remoteWindowSize);\r\n        this.internalsTrace('session.closed=' +\r\n            this.session.closed +\r\n            ' session.destroyed=' +\r\n            this.session.destroyed +\r\n            ' session.socket.destroyed=' +\r\n            this.session.socket.destroyed);\r\n        let eventTracker;\r\n        // eslint-disable-next-line prefer-const\r\n        let call;\r\n        if (this.channelzEnabled) {\r\n            this.streamTracker.addCallStarted();\r\n            eventTracker = {\r\n                addMessageSent: () => {\r\n                    var _a;\r\n                    this.messagesSent += 1;\r\n                    this.lastMessageSentTimestamp = new Date();\r\n                    (_a = subchannelCallStatsTracker.addMessageSent) === null || _a === void 0 ? void 0 : _a.call(subchannelCallStatsTracker);\r\n                },\r\n                addMessageReceived: () => {\r\n                    var _a;\r\n                    this.messagesReceived += 1;\r\n                    this.lastMessageReceivedTimestamp = new Date();\r\n                    (_a = subchannelCallStatsTracker.addMessageReceived) === null || _a === void 0 ? void 0 : _a.call(subchannelCallStatsTracker);\r\n                },\r\n                onCallEnd: status => {\r\n                    var _a;\r\n                    (_a = subchannelCallStatsTracker.onCallEnd) === null || _a === void 0 ? void 0 : _a.call(subchannelCallStatsTracker, status);\r\n                    this.removeActiveCall(call);\r\n                },\r\n                onStreamEnd: success => {\r\n                    var _a;\r\n                    if (success) {\r\n                        this.streamTracker.addCallSucceeded();\r\n                    }\r\n                    else {\r\n                        this.streamTracker.addCallFailed();\r\n                    }\r\n                    (_a = subchannelCallStatsTracker.onStreamEnd) === null || _a === void 0 ? void 0 : _a.call(subchannelCallStatsTracker, success);\r\n                },\r\n            };\r\n        }\r\n        else {\r\n            eventTracker = {\r\n                addMessageSent: () => {\r\n                    var _a;\r\n                    (_a = subchannelCallStatsTracker.addMessageSent) === null || _a === void 0 ? void 0 : _a.call(subchannelCallStatsTracker);\r\n                },\r\n                addMessageReceived: () => {\r\n                    var _a;\r\n                    (_a = subchannelCallStatsTracker.addMessageReceived) === null || _a === void 0 ? void 0 : _a.call(subchannelCallStatsTracker);\r\n                },\r\n                onCallEnd: status => {\r\n                    var _a;\r\n                    (_a = subchannelCallStatsTracker.onCallEnd) === null || _a === void 0 ? void 0 : _a.call(subchannelCallStatsTracker, status);\r\n                    this.removeActiveCall(call);\r\n                },\r\n                onStreamEnd: success => {\r\n                    var _a;\r\n                    (_a = subchannelCallStatsTracker.onStreamEnd) === null || _a === void 0 ? void 0 : _a.call(subchannelCallStatsTracker, success);\r\n                },\r\n            };\r\n        }\r\n        call = new subchannel_call_1.Http2SubchannelCall(http2Stream, eventTracker, listener, this, (0, call_number_1.getNextCallNumber)());\r\n        this.addActiveCall(call);\r\n        return call;\r\n    }\r\n    getChannelzRef() {\r\n        return this.channelzRef;\r\n    }\r\n    getPeerName() {\r\n        return this.subchannelAddressString;\r\n    }\r\n    getOptions() {\r\n        return this.options;\r\n    }\r\n    shutdown() {\r\n        this.session.close();\r\n        (0, channelz_1.unregisterChannelzRef)(this.channelzRef);\r\n    }\r\n}\r\nclass Http2SubchannelConnector {\r\n    constructor(channelTarget) {\r\n        this.channelTarget = channelTarget;\r\n        this.session = null;\r\n        this.isShutdown = false;\r\n    }\r\n    trace(text) {\r\n        logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, (0, uri_parser_1.uriToString)(this.channelTarget) + ' ' + text);\r\n    }\r\n    createSession(secureConnectResult, address, options) {\r\n        if (this.isShutdown) {\r\n            return Promise.reject();\r\n        }\r\n        if (secureConnectResult.socket.closed) {\r\n            return Promise.reject('Connection closed before starting HTTP/2 handshake');\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            let remoteName = null;\r\n            let realTarget = this.channelTarget;\r\n            if ('grpc.http_connect_target' in options) {\r\n                const parsedTarget = (0, uri_parser_1.parseUri)(options['grpc.http_connect_target']);\r\n                if (parsedTarget) {\r\n                    realTarget = parsedTarget;\r\n                    remoteName = (0, uri_parser_1.uriToString)(parsedTarget);\r\n                }\r\n            }\r\n            const scheme = secureConnectResult.secure ? 'https' : 'http';\r\n            const targetPath = (0, resolver_1.getDefaultAuthority)(realTarget);\r\n            const closeHandler = () => {\r\n                var _a;\r\n                (_a = this.session) === null || _a === void 0 ? void 0 : _a.destroy();\r\n                this.session = null;\r\n                // Leave time for error event to happen before rejecting\r\n                setImmediate(() => {\r\n                    if (!reportedError) {\r\n                        reportedError = true;\r\n                        reject(`${errorMessage.trim()} (${new Date().toISOString()})`);\r\n                    }\r\n                });\r\n            };\r\n            const errorHandler = (error) => {\r\n                var _a;\r\n                (_a = this.session) === null || _a === void 0 ? void 0 : _a.destroy();\r\n                errorMessage = error.message;\r\n                this.trace('connection failed with error ' + errorMessage);\r\n                if (!reportedError) {\r\n                    reportedError = true;\r\n                    reject(`${errorMessage} (${new Date().toISOString()})`);\r\n                }\r\n            };\r\n            const sessionOptions = {\r\n                createConnection: (authority, option) => {\r\n                    return secureConnectResult.socket;\r\n                }\r\n            };\r\n            if (options['grpc-node.flow_control_window'] !== undefined) {\r\n                sessionOptions.settings = {\r\n                    initialWindowSize: options['grpc-node.flow_control_window']\r\n                };\r\n            }\r\n            const session = http2.connect(`${scheme}://${targetPath}`, sessionOptions);\r\n            this.session = session;\r\n            let errorMessage = 'Failed to connect';\r\n            let reportedError = false;\r\n            session.unref();\r\n            session.once('remoteSettings', () => {\r\n                session.removeAllListeners();\r\n                secureConnectResult.socket.removeListener('close', closeHandler);\r\n                secureConnectResult.socket.removeListener('error', errorHandler);\r\n                resolve(new Http2Transport(session, address, options, remoteName));\r\n                this.session = null;\r\n            });\r\n            session.once('close', closeHandler);\r\n            session.once('error', errorHandler);\r\n            secureConnectResult.socket.once('close', closeHandler);\r\n            secureConnectResult.socket.once('error', errorHandler);\r\n        });\r\n    }\r\n    tcpConnect(address, options) {\r\n        return (0, http_proxy_1.getProxiedConnection)(address, options).then(proxiedSocket => {\r\n            if (proxiedSocket) {\r\n                return proxiedSocket;\r\n            }\r\n            else {\r\n                return new Promise((resolve, reject) => {\r\n                    const closeCallback = () => {\r\n                        reject(new Error('Socket closed'));\r\n                    };\r\n                    const errorCallback = (error) => {\r\n                        reject(error);\r\n                    };\r\n                    const socket = net.connect(address, () => {\r\n                        socket.removeListener('close', closeCallback);\r\n                        socket.removeListener('error', errorCallback);\r\n                        resolve(socket);\r\n                    });\r\n                    socket.once('close', closeCallback);\r\n                    socket.once('error', errorCallback);\r\n                });\r\n            }\r\n        });\r\n    }\r\n    async connect(address, secureConnector, options) {\r\n        if (this.isShutdown) {\r\n            return Promise.reject();\r\n        }\r\n        let tcpConnection = null;\r\n        let secureConnectResult = null;\r\n        const addressString = (0, subchannel_address_1.subchannelAddressToString)(address);\r\n        try {\r\n            this.trace(addressString + ' Waiting for secureConnector to be ready');\r\n            await secureConnector.waitForReady();\r\n            this.trace(addressString + ' secureConnector is ready');\r\n            tcpConnection = await this.tcpConnect(address, options);\r\n            tcpConnection.setNoDelay();\r\n            this.trace(addressString + ' Established TCP connection');\r\n            secureConnectResult = await secureConnector.connect(tcpConnection);\r\n            this.trace(addressString + ' Established secure connection');\r\n            return this.createSession(secureConnectResult, address, options);\r\n        }\r\n        catch (e) {\r\n            tcpConnection === null || tcpConnection === void 0 ? void 0 : tcpConnection.destroy();\r\n            secureConnectResult === null || secureConnectResult === void 0 ? void 0 : secureConnectResult.socket.destroy();\r\n            throw e;\r\n        }\r\n    }\r\n    shutdown() {\r\n        var _a;\r\n        this.isShutdown = true;\r\n        (_a = this.session) === null || _a === void 0 ? void 0 : _a.close();\r\n        this.session = null;\r\n    }\r\n}\r\nexports.Http2SubchannelConnector = Http2SubchannelConnector;\r\n//# sourceMappingURL=transport.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/transport.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js":
/*!************************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/build/src/uri-parser.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\n/*\r\n * Copyright 2020 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.parseUri = parseUri;\r\nexports.splitHostPort = splitHostPort;\r\nexports.combineHostPort = combineHostPort;\r\nexports.uriToString = uriToString;\r\n/*\r\n * The groups correspond to URI parts as follows:\r\n * 1. scheme\r\n * 2. authority\r\n * 3. path\r\n */\r\nconst URI_REGEX = /^(?:([A-Za-z0-9+.-]+):)?(?:\\/\\/([^/]*)\\/)?(.+)$/;\r\nfunction parseUri(uriString) {\r\n    const parsedUri = URI_REGEX.exec(uriString);\r\n    if (parsedUri === null) {\r\n        return null;\r\n    }\r\n    return {\r\n        scheme: parsedUri[1],\r\n        authority: parsedUri[2],\r\n        path: parsedUri[3],\r\n    };\r\n}\r\nconst NUMBER_REGEX = /^\\d+$/;\r\nfunction splitHostPort(path) {\r\n    if (path.startsWith('[')) {\r\n        const hostEnd = path.indexOf(']');\r\n        if (hostEnd === -1) {\r\n            return null;\r\n        }\r\n        const host = path.substring(1, hostEnd);\r\n        /* Only an IPv6 address should be in bracketed notation, and an IPv6\r\n         * address should have at least one colon */\r\n        if (host.indexOf(':') === -1) {\r\n            return null;\r\n        }\r\n        if (path.length > hostEnd + 1) {\r\n            if (path[hostEnd + 1] === ':') {\r\n                const portString = path.substring(hostEnd + 2);\r\n                if (NUMBER_REGEX.test(portString)) {\r\n                    return {\r\n                        host: host,\r\n                        port: +portString,\r\n                    };\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n        else {\r\n            return {\r\n                host,\r\n            };\r\n        }\r\n    }\r\n    else {\r\n        const splitPath = path.split(':');\r\n        /* Exactly one colon means that this is host:port. Zero colons means that\r\n         * there is no port. And multiple colons means that this is a bare IPv6\r\n         * address with no port */\r\n        if (splitPath.length === 2) {\r\n            if (NUMBER_REGEX.test(splitPath[1])) {\r\n                return {\r\n                    host: splitPath[0],\r\n                    port: +splitPath[1],\r\n                };\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n        else {\r\n            return {\r\n                host: path,\r\n            };\r\n        }\r\n    }\r\n}\r\nfunction combineHostPort(hostPort) {\r\n    if (hostPort.port === undefined) {\r\n        return hostPort.host;\r\n    }\r\n    else {\r\n        // Only an IPv6 host should include a colon\r\n        if (hostPort.host.includes(':')) {\r\n            return `[${hostPort.host}]:${hostPort.port}`;\r\n        }\r\n        else {\r\n            return `${hostPort.host}:${hostPort.port}`;\r\n        }\r\n    }\r\n}\r\nfunction uriToString(uri) {\r\n    let result = '';\r\n    if (uri.scheme !== undefined) {\r\n        result += uri.scheme + ':';\r\n    }\r\n    if (uri.authority !== undefined) {\r\n        result += '//' + uri.authority + '/';\r\n    }\r\n    result += uri.path;\r\n    return result;\r\n}\r\n//# sourceMappingURL=uri-parser.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvdXJpLXBhcnNlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGdCQUFnQjtBQUNoQixxQkFBcUI7QUFDckIsdUJBQXVCO0FBQ3ZCLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsY0FBYyxJQUFJLGNBQWM7QUFDdkQ7QUFDQTtBQUNBLHNCQUFzQixjQUFjLEdBQUcsY0FBYztBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYW5pc2gtYnVkZHkvLi9ub2RlX21vZHVsZXMvQGdycGMvZ3JwYy1qcy9idWlsZC9zcmMvdXJpLXBhcnNlci5qcz8yYWNiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG4vKlxyXG4gKiBDb3B5cmlnaHQgMjAyMCBnUlBDIGF1dGhvcnMuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKlxyXG4gKi9cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnBhcnNlVXJpID0gcGFyc2VVcmk7XHJcbmV4cG9ydHMuc3BsaXRIb3N0UG9ydCA9IHNwbGl0SG9zdFBvcnQ7XHJcbmV4cG9ydHMuY29tYmluZUhvc3RQb3J0ID0gY29tYmluZUhvc3RQb3J0O1xyXG5leHBvcnRzLnVyaVRvU3RyaW5nID0gdXJpVG9TdHJpbmc7XHJcbi8qXHJcbiAqIFRoZSBncm91cHMgY29ycmVzcG9uZCB0byBVUkkgcGFydHMgYXMgZm9sbG93czpcclxuICogMS4gc2NoZW1lXHJcbiAqIDIuIGF1dGhvcml0eVxyXG4gKiAzLiBwYXRoXHJcbiAqL1xyXG5jb25zdCBVUklfUkVHRVggPSAvXig/OihbQS1aYS16MC05Ky4tXSspOik/KD86XFwvXFwvKFteL10qKVxcLyk/KC4rKSQvO1xyXG5mdW5jdGlvbiBwYXJzZVVyaSh1cmlTdHJpbmcpIHtcclxuICAgIGNvbnN0IHBhcnNlZFVyaSA9IFVSSV9SRUdFWC5leGVjKHVyaVN0cmluZyk7XHJcbiAgICBpZiAocGFyc2VkVXJpID09PSBudWxsKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHNjaGVtZTogcGFyc2VkVXJpWzFdLFxyXG4gICAgICAgIGF1dGhvcml0eTogcGFyc2VkVXJpWzJdLFxyXG4gICAgICAgIHBhdGg6IHBhcnNlZFVyaVszXSxcclxuICAgIH07XHJcbn1cclxuY29uc3QgTlVNQkVSX1JFR0VYID0gL15cXGQrJC87XHJcbmZ1bmN0aW9uIHNwbGl0SG9zdFBvcnQocGF0aCkge1xyXG4gICAgaWYgKHBhdGguc3RhcnRzV2l0aCgnWycpKSB7XHJcbiAgICAgICAgY29uc3QgaG9zdEVuZCA9IHBhdGguaW5kZXhPZignXScpO1xyXG4gICAgICAgIGlmIChob3N0RW5kID09PSAtMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgaG9zdCA9IHBhdGguc3Vic3RyaW5nKDEsIGhvc3RFbmQpO1xyXG4gICAgICAgIC8qIE9ubHkgYW4gSVB2NiBhZGRyZXNzIHNob3VsZCBiZSBpbiBicmFja2V0ZWQgbm90YXRpb24sIGFuZCBhbiBJUHY2XHJcbiAgICAgICAgICogYWRkcmVzcyBzaG91bGQgaGF2ZSBhdCBsZWFzdCBvbmUgY29sb24gKi9cclxuICAgICAgICBpZiAoaG9zdC5pbmRleE9mKCc6JykgPT09IC0xKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocGF0aC5sZW5ndGggPiBob3N0RW5kICsgMSkge1xyXG4gICAgICAgICAgICBpZiAocGF0aFtob3N0RW5kICsgMV0gPT09ICc6Jykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcG9ydFN0cmluZyA9IHBhdGguc3Vic3RyaW5nKGhvc3RFbmQgKyAyKTtcclxuICAgICAgICAgICAgICAgIGlmIChOVU1CRVJfUkVHRVgudGVzdChwb3J0U3RyaW5nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvc3Q6IGhvc3QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcnQ6ICtwb3J0U3RyaW5nLFxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgaG9zdCxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBjb25zdCBzcGxpdFBhdGggPSBwYXRoLnNwbGl0KCc6Jyk7XHJcbiAgICAgICAgLyogRXhhY3RseSBvbmUgY29sb24gbWVhbnMgdGhhdCB0aGlzIGlzIGhvc3Q6cG9ydC4gWmVybyBjb2xvbnMgbWVhbnMgdGhhdFxyXG4gICAgICAgICAqIHRoZXJlIGlzIG5vIHBvcnQuIEFuZCBtdWx0aXBsZSBjb2xvbnMgbWVhbnMgdGhhdCB0aGlzIGlzIGEgYmFyZSBJUHY2XHJcbiAgICAgICAgICogYWRkcmVzcyB3aXRoIG5vIHBvcnQgKi9cclxuICAgICAgICBpZiAoc3BsaXRQYXRoLmxlbmd0aCA9PT0gMikge1xyXG4gICAgICAgICAgICBpZiAoTlVNQkVSX1JFR0VYLnRlc3Qoc3BsaXRQYXRoWzFdKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICBob3N0OiBzcGxpdFBhdGhbMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgcG9ydDogK3NwbGl0UGF0aFsxXSxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGhvc3Q6IHBhdGgsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGNvbWJpbmVIb3N0UG9ydChob3N0UG9ydCkge1xyXG4gICAgaWYgKGhvc3RQb3J0LnBvcnQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHJldHVybiBob3N0UG9ydC5ob3N0O1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgLy8gT25seSBhbiBJUHY2IGhvc3Qgc2hvdWxkIGluY2x1ZGUgYSBjb2xvblxyXG4gICAgICAgIGlmIChob3N0UG9ydC5ob3N0LmluY2x1ZGVzKCc6JykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGBbJHtob3N0UG9ydC5ob3N0fV06JHtob3N0UG9ydC5wb3J0fWA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gYCR7aG9zdFBvcnQuaG9zdH06JHtob3N0UG9ydC5wb3J0fWA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHVyaVRvU3RyaW5nKHVyaSkge1xyXG4gICAgbGV0IHJlc3VsdCA9ICcnO1xyXG4gICAgaWYgKHVyaS5zY2hlbWUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHJlc3VsdCArPSB1cmkuc2NoZW1lICsgJzonO1xyXG4gICAgfVxyXG4gICAgaWYgKHVyaS5hdXRob3JpdHkgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHJlc3VsdCArPSAnLy8nICsgdXJpLmF1dGhvcml0eSArICcvJztcclxuICAgIH1cclxuICAgIHJlc3VsdCArPSB1cmkucGF0aDtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXJpLXBhcnNlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/grpc-js/build/src/uri-parser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/proto-loader/build/src/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@grpc/proto-loader/build/src/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/**\r\n * @license\r\n * Copyright 2018 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.loadFileDescriptorSetFromObject = exports.loadFileDescriptorSetFromBuffer = exports.fromJSON = exports.loadSync = exports.load = exports.IdempotencyLevel = exports.isAnyExtension = exports.Long = void 0;\r\nconst camelCase = __webpack_require__(/*! lodash.camelcase */ \"(rsc)/./node_modules/lodash.camelcase/index.js\");\r\nconst Protobuf = __webpack_require__(/*! protobufjs */ \"(rsc)/./node_modules/protobufjs/index.js\");\r\nconst descriptor = __webpack_require__(/*! protobufjs/ext/descriptor */ \"(rsc)/./node_modules/protobufjs/ext/descriptor/index.js\");\r\nconst util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/@grpc/proto-loader/build/src/util.js\");\r\nconst Long = __webpack_require__(/*! long */ \"(rsc)/./node_modules/long/umd/index.js\");\r\nexports.Long = Long;\r\nfunction isAnyExtension(obj) {\r\n    return ('@type' in obj) && (typeof obj['@type'] === 'string');\r\n}\r\nexports.isAnyExtension = isAnyExtension;\r\nvar IdempotencyLevel;\r\n(function (IdempotencyLevel) {\r\n    IdempotencyLevel[\"IDEMPOTENCY_UNKNOWN\"] = \"IDEMPOTENCY_UNKNOWN\";\r\n    IdempotencyLevel[\"NO_SIDE_EFFECTS\"] = \"NO_SIDE_EFFECTS\";\r\n    IdempotencyLevel[\"IDEMPOTENT\"] = \"IDEMPOTENT\";\r\n})(IdempotencyLevel = exports.IdempotencyLevel || (exports.IdempotencyLevel = {}));\r\nconst descriptorOptions = {\r\n    longs: String,\r\n    enums: String,\r\n    bytes: String,\r\n    defaults: true,\r\n    oneofs: true,\r\n    json: true,\r\n};\r\nfunction joinName(baseName, name) {\r\n    if (baseName === '') {\r\n        return name;\r\n    }\r\n    else {\r\n        return baseName + '.' + name;\r\n    }\r\n}\r\nfunction isHandledReflectionObject(obj) {\r\n    return (obj instanceof Protobuf.Service ||\r\n        obj instanceof Protobuf.Type ||\r\n        obj instanceof Protobuf.Enum);\r\n}\r\nfunction isNamespaceBase(obj) {\r\n    return obj instanceof Protobuf.Namespace || obj instanceof Protobuf.Root;\r\n}\r\nfunction getAllHandledReflectionObjects(obj, parentName) {\r\n    const objName = joinName(parentName, obj.name);\r\n    if (isHandledReflectionObject(obj)) {\r\n        return [[objName, obj]];\r\n    }\r\n    else {\r\n        if (isNamespaceBase(obj) && typeof obj.nested !== 'undefined') {\r\n            return Object.keys(obj.nested)\r\n                .map(name => {\r\n                return getAllHandledReflectionObjects(obj.nested[name], objName);\r\n            })\r\n                .reduce((accumulator, currentValue) => accumulator.concat(currentValue), []);\r\n        }\r\n    }\r\n    return [];\r\n}\r\nfunction createDeserializer(cls, options) {\r\n    return function deserialize(argBuf) {\r\n        return cls.toObject(cls.decode(argBuf), options);\r\n    };\r\n}\r\nfunction createSerializer(cls) {\r\n    return function serialize(arg) {\r\n        if (Array.isArray(arg)) {\r\n            throw new Error(`Failed to serialize message: expected object with ${cls.name} structure, got array instead`);\r\n        }\r\n        const message = cls.fromObject(arg);\r\n        return cls.encode(message).finish();\r\n    };\r\n}\r\nfunction mapMethodOptions(options) {\r\n    return (options || []).reduce((obj, item) => {\r\n        for (const [key, value] of Object.entries(item)) {\r\n            switch (key) {\r\n                case 'uninterpreted_option':\r\n                    obj.uninterpreted_option.push(item.uninterpreted_option);\r\n                    break;\r\n                default:\r\n                    obj[key] = value;\r\n            }\r\n        }\r\n        return obj;\r\n    }, {\r\n        deprecated: false,\r\n        idempotency_level: IdempotencyLevel.IDEMPOTENCY_UNKNOWN,\r\n        uninterpreted_option: [],\r\n    });\r\n}\r\nfunction createMethodDefinition(method, serviceName, options, fileDescriptors) {\r\n    /* This is only ever called after the corresponding root.resolveAll(), so we\r\n     * can assume that the resolved request and response types are non-null */\r\n    const requestType = method.resolvedRequestType;\r\n    const responseType = method.resolvedResponseType;\r\n    return {\r\n        path: '/' + serviceName + '/' + method.name,\r\n        requestStream: !!method.requestStream,\r\n        responseStream: !!method.responseStream,\r\n        requestSerialize: createSerializer(requestType),\r\n        requestDeserialize: createDeserializer(requestType, options),\r\n        responseSerialize: createSerializer(responseType),\r\n        responseDeserialize: createDeserializer(responseType, options),\r\n        // TODO(murgatroid99): Find a better way to handle this\r\n        originalName: camelCase(method.name),\r\n        requestType: createMessageDefinition(requestType, fileDescriptors),\r\n        responseType: createMessageDefinition(responseType, fileDescriptors),\r\n        options: mapMethodOptions(method.parsedOptions),\r\n    };\r\n}\r\nfunction createServiceDefinition(service, name, options, fileDescriptors) {\r\n    const def = {};\r\n    for (const method of service.methodsArray) {\r\n        def[method.name] = createMethodDefinition(method, name, options, fileDescriptors);\r\n    }\r\n    return def;\r\n}\r\nfunction createMessageDefinition(message, fileDescriptors) {\r\n    const messageDescriptor = message.toDescriptor('proto3');\r\n    return {\r\n        format: 'Protocol Buffer 3 DescriptorProto',\r\n        type: messageDescriptor.$type.toObject(messageDescriptor, descriptorOptions),\r\n        fileDescriptorProtos: fileDescriptors,\r\n    };\r\n}\r\nfunction createEnumDefinition(enumType, fileDescriptors) {\r\n    const enumDescriptor = enumType.toDescriptor('proto3');\r\n    return {\r\n        format: 'Protocol Buffer 3 EnumDescriptorProto',\r\n        type: enumDescriptor.$type.toObject(enumDescriptor, descriptorOptions),\r\n        fileDescriptorProtos: fileDescriptors,\r\n    };\r\n}\r\n/**\r\n * function createDefinition(obj: Protobuf.Service, name: string, options:\r\n * Options): ServiceDefinition; function createDefinition(obj: Protobuf.Type,\r\n * name: string, options: Options): MessageTypeDefinition; function\r\n * createDefinition(obj: Protobuf.Enum, name: string, options: Options):\r\n * EnumTypeDefinition;\r\n */\r\nfunction createDefinition(obj, name, options, fileDescriptors) {\r\n    if (obj instanceof Protobuf.Service) {\r\n        return createServiceDefinition(obj, name, options, fileDescriptors);\r\n    }\r\n    else if (obj instanceof Protobuf.Type) {\r\n        return createMessageDefinition(obj, fileDescriptors);\r\n    }\r\n    else if (obj instanceof Protobuf.Enum) {\r\n        return createEnumDefinition(obj, fileDescriptors);\r\n    }\r\n    else {\r\n        throw new Error('Type mismatch in reflection object handling');\r\n    }\r\n}\r\nfunction createPackageDefinition(root, options) {\r\n    const def = {};\r\n    root.resolveAll();\r\n    const descriptorList = root.toDescriptor('proto3').file;\r\n    const bufferList = descriptorList.map(value => Buffer.from(descriptor.FileDescriptorProto.encode(value).finish()));\r\n    for (const [name, obj] of getAllHandledReflectionObjects(root, '')) {\r\n        def[name] = createDefinition(obj, name, options, bufferList);\r\n    }\r\n    return def;\r\n}\r\nfunction createPackageDefinitionFromDescriptorSet(decodedDescriptorSet, options) {\r\n    options = options || {};\r\n    const root = Protobuf.Root.fromDescriptor(decodedDescriptorSet);\r\n    root.resolveAll();\r\n    return createPackageDefinition(root, options);\r\n}\r\n/**\r\n * Load a .proto file with the specified options.\r\n * @param filename One or multiple file paths to load. Can be an absolute path\r\n *     or relative to an include path.\r\n * @param options.keepCase Preserve field names. The default is to change them\r\n *     to camel case.\r\n * @param options.longs The type that should be used to represent `long` values.\r\n *     Valid options are `Number` and `String`. Defaults to a `Long` object type\r\n *     from a library.\r\n * @param options.enums The type that should be used to represent `enum` values.\r\n *     The only valid option is `String`. Defaults to the numeric value.\r\n * @param options.bytes The type that should be used to represent `bytes`\r\n *     values. Valid options are `Array` and `String`. The default is to use\r\n *     `Buffer`.\r\n * @param options.defaults Set default values on output objects. Defaults to\r\n *     `false`.\r\n * @param options.arrays Set empty arrays for missing array values even if\r\n *     `defaults` is `false`. Defaults to `false`.\r\n * @param options.objects Set empty objects for missing object values even if\r\n *     `defaults` is `false`. Defaults to `false`.\r\n * @param options.oneofs Set virtual oneof properties to the present field's\r\n *     name\r\n * @param options.json Represent Infinity and NaN as strings in float fields,\r\n *     and automatically decode google.protobuf.Any values.\r\n * @param options.includeDirs Paths to search for imported `.proto` files.\r\n */\r\nfunction load(filename, options) {\r\n    return (0, util_1.loadProtosWithOptions)(filename, options).then(loadedRoot => {\r\n        return createPackageDefinition(loadedRoot, options);\r\n    });\r\n}\r\nexports.load = load;\r\nfunction loadSync(filename, options) {\r\n    const loadedRoot = (0, util_1.loadProtosWithOptionsSync)(filename, options);\r\n    return createPackageDefinition(loadedRoot, options);\r\n}\r\nexports.loadSync = loadSync;\r\nfunction fromJSON(json, options) {\r\n    options = options || {};\r\n    const loadedRoot = Protobuf.Root.fromJSON(json);\r\n    loadedRoot.resolveAll();\r\n    return createPackageDefinition(loadedRoot, options);\r\n}\r\nexports.fromJSON = fromJSON;\r\nfunction loadFileDescriptorSetFromBuffer(descriptorSet, options) {\r\n    const decodedDescriptorSet = descriptor.FileDescriptorSet.decode(descriptorSet);\r\n    return createPackageDefinitionFromDescriptorSet(decodedDescriptorSet, options);\r\n}\r\nexports.loadFileDescriptorSetFromBuffer = loadFileDescriptorSetFromBuffer;\r\nfunction loadFileDescriptorSetFromObject(descriptorSet, options) {\r\n    const decodedDescriptorSet = descriptor.FileDescriptorSet.fromObject(descriptorSet);\r\n    return createPackageDefinitionFromDescriptorSet(decodedDescriptorSet, options);\r\n}\r\nexports.loadFileDescriptorSetFromObject = loadFileDescriptorSetFromObject;\r\n(0, util_1.addCommonProtos)();\r\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/proto-loader/build/src/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/proto-loader/build/src/util.js":
/*!***********************************************************!*\
  !*** ./node_modules/@grpc/proto-loader/build/src/util.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n/**\r\n * @license\r\n * Copyright 2018 gRPC authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.addCommonProtos = exports.loadProtosWithOptionsSync = exports.loadProtosWithOptions = void 0;\r\nconst fs = __webpack_require__(/*! fs */ \"fs\");\r\nconst path = __webpack_require__(/*! path */ \"path\");\r\nconst Protobuf = __webpack_require__(/*! protobufjs */ \"(rsc)/./node_modules/protobufjs/index.js\");\r\nfunction addIncludePathResolver(root, includePaths) {\r\n    const originalResolvePath = root.resolvePath;\r\n    root.resolvePath = (origin, target) => {\r\n        if (path.isAbsolute(target)) {\r\n            return target;\r\n        }\r\n        for (const directory of includePaths) {\r\n            const fullPath = path.join(directory, target);\r\n            try {\r\n                fs.accessSync(fullPath, fs.constants.R_OK);\r\n                return fullPath;\r\n            }\r\n            catch (err) {\r\n                continue;\r\n            }\r\n        }\r\n        process.emitWarning(`${target} not found in any of the include paths ${includePaths}`);\r\n        return originalResolvePath(origin, target);\r\n    };\r\n}\r\nasync function loadProtosWithOptions(filename, options) {\r\n    const root = new Protobuf.Root();\r\n    options = options || {};\r\n    if (!!options.includeDirs) {\r\n        if (!Array.isArray(options.includeDirs)) {\r\n            return Promise.reject(new Error('The includeDirs option must be an array'));\r\n        }\r\n        addIncludePathResolver(root, options.includeDirs);\r\n    }\r\n    const loadedRoot = await root.load(filename, options);\r\n    loadedRoot.resolveAll();\r\n    return loadedRoot;\r\n}\r\nexports.loadProtosWithOptions = loadProtosWithOptions;\r\nfunction loadProtosWithOptionsSync(filename, options) {\r\n    const root = new Protobuf.Root();\r\n    options = options || {};\r\n    if (!!options.includeDirs) {\r\n        if (!Array.isArray(options.includeDirs)) {\r\n            throw new Error('The includeDirs option must be an array');\r\n        }\r\n        addIncludePathResolver(root, options.includeDirs);\r\n    }\r\n    const loadedRoot = root.loadSync(filename, options);\r\n    loadedRoot.resolveAll();\r\n    return loadedRoot;\r\n}\r\nexports.loadProtosWithOptionsSync = loadProtosWithOptionsSync;\r\n/**\r\n * Load Google's well-known proto files that aren't exposed by Protobuf.js.\r\n */\r\nfunction addCommonProtos() {\r\n    // Protobuf.js exposes: any, duration, empty, field_mask, struct, timestamp,\r\n    // and wrappers. compiler/plugin is excluded in Protobuf.js and here.\r\n    // Using constant strings for compatibility with tools like Webpack\r\n    const apiDescriptor = __webpack_require__(/*! protobufjs/google/protobuf/api.json */ \"(rsc)/./node_modules/protobufjs/google/protobuf/api.json\");\r\n    const descriptorDescriptor = __webpack_require__(/*! protobufjs/google/protobuf/descriptor.json */ \"(rsc)/./node_modules/protobufjs/google/protobuf/descriptor.json\");\r\n    const sourceContextDescriptor = __webpack_require__(/*! protobufjs/google/protobuf/source_context.json */ \"(rsc)/./node_modules/protobufjs/google/protobuf/source_context.json\");\r\n    const typeDescriptor = __webpack_require__(/*! protobufjs/google/protobuf/type.json */ \"(rsc)/./node_modules/protobufjs/google/protobuf/type.json\");\r\n    Protobuf.common('api', apiDescriptor.nested.google.nested.protobuf.nested);\r\n    Protobuf.common('descriptor', descriptorDescriptor.nested.google.nested.protobuf.nested);\r\n    Protobuf.common('source_context', sourceContextDescriptor.nested.google.nested.protobuf.nested);\r\n    Protobuf.common('type', typeDescriptor.nested.google.nested.protobuf.nested);\r\n}\r\nexports.addCommonProtos = addCommonProtos;\r\n//# sourceMappingURL=util.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdycGMvcHJvdG8tbG9hZGVyL2J1aWxkL3NyYy91dGlsLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx1QkFBdUIsR0FBRyxpQ0FBaUMsR0FBRyw2QkFBNkI7QUFDM0YsV0FBVyxtQkFBTyxDQUFDLGNBQUk7QUFDdkIsYUFBYSxtQkFBTyxDQUFDLGtCQUFNO0FBQzNCLGlCQUFpQixtQkFBTyxDQUFDLDREQUFZO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLFFBQVEsd0NBQXdDLGFBQWE7QUFDNUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsbUJBQU8sQ0FBQyxxR0FBcUM7QUFDdkUsaUNBQWlDLG1CQUFPLENBQUMsbUhBQTRDO0FBQ3JGLG9DQUFvQyxtQkFBTyxDQUFDLDJIQUFnRDtBQUM1RiwyQkFBMkIsbUJBQU8sQ0FBQyx1R0FBc0M7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QiIsInNvdXJjZXMiOlsid2VicGFjazovL2RhbmlzaC1idWRkeS8uL25vZGVfbW9kdWxlcy9AZ3JwYy9wcm90by1sb2FkZXIvYnVpbGQvc3JjL3V0aWwuanM/ZDBmYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE4IGdSUEMgYXV0aG9ycy5cclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqXHJcbiAqL1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuYWRkQ29tbW9uUHJvdG9zID0gZXhwb3J0cy5sb2FkUHJvdG9zV2l0aE9wdGlvbnNTeW5jID0gZXhwb3J0cy5sb2FkUHJvdG9zV2l0aE9wdGlvbnMgPSB2b2lkIDA7XHJcbmNvbnN0IGZzID0gcmVxdWlyZShcImZzXCIpO1xyXG5jb25zdCBwYXRoID0gcmVxdWlyZShcInBhdGhcIik7XHJcbmNvbnN0IFByb3RvYnVmID0gcmVxdWlyZShcInByb3RvYnVmanNcIik7XHJcbmZ1bmN0aW9uIGFkZEluY2x1ZGVQYXRoUmVzb2x2ZXIocm9vdCwgaW5jbHVkZVBhdGhzKSB7XHJcbiAgICBjb25zdCBvcmlnaW5hbFJlc29sdmVQYXRoID0gcm9vdC5yZXNvbHZlUGF0aDtcclxuICAgIHJvb3QucmVzb2x2ZVBhdGggPSAob3JpZ2luLCB0YXJnZXQpID0+IHtcclxuICAgICAgICBpZiAocGF0aC5pc0Fic29sdXRlKHRhcmdldCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRhcmdldDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChjb25zdCBkaXJlY3Rvcnkgb2YgaW5jbHVkZVBhdGhzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGZ1bGxQYXRoID0gcGF0aC5qb2luKGRpcmVjdG9yeSwgdGFyZ2V0KTtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGZzLmFjY2Vzc1N5bmMoZnVsbFBhdGgsIGZzLmNvbnN0YW50cy5SX09LKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmdWxsUGF0aDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBwcm9jZXNzLmVtaXRXYXJuaW5nKGAke3RhcmdldH0gbm90IGZvdW5kIGluIGFueSBvZiB0aGUgaW5jbHVkZSBwYXRocyAke2luY2x1ZGVQYXRoc31gKTtcclxuICAgICAgICByZXR1cm4gb3JpZ2luYWxSZXNvbHZlUGF0aChvcmlnaW4sIHRhcmdldCk7XHJcbiAgICB9O1xyXG59XHJcbmFzeW5jIGZ1bmN0aW9uIGxvYWRQcm90b3NXaXRoT3B0aW9ucyhmaWxlbmFtZSwgb3B0aW9ucykge1xyXG4gICAgY29uc3Qgcm9vdCA9IG5ldyBQcm90b2J1Zi5Sb290KCk7XHJcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuICAgIGlmICghIW9wdGlvbnMuaW5jbHVkZURpcnMpIHtcclxuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkob3B0aW9ucy5pbmNsdWRlRGlycykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcignVGhlIGluY2x1ZGVEaXJzIG9wdGlvbiBtdXN0IGJlIGFuIGFycmF5JykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhZGRJbmNsdWRlUGF0aFJlc29sdmVyKHJvb3QsIG9wdGlvbnMuaW5jbHVkZURpcnMpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgbG9hZGVkUm9vdCA9IGF3YWl0IHJvb3QubG9hZChmaWxlbmFtZSwgb3B0aW9ucyk7XHJcbiAgICBsb2FkZWRSb290LnJlc29sdmVBbGwoKTtcclxuICAgIHJldHVybiBsb2FkZWRSb290O1xyXG59XHJcbmV4cG9ydHMubG9hZFByb3Rvc1dpdGhPcHRpb25zID0gbG9hZFByb3Rvc1dpdGhPcHRpb25zO1xyXG5mdW5jdGlvbiBsb2FkUHJvdG9zV2l0aE9wdGlvbnNTeW5jKGZpbGVuYW1lLCBvcHRpb25zKSB7XHJcbiAgICBjb25zdCByb290ID0gbmV3IFByb3RvYnVmLlJvb3QoKTtcclxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xyXG4gICAgaWYgKCEhb3B0aW9ucy5pbmNsdWRlRGlycykge1xyXG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShvcHRpb25zLmluY2x1ZGVEaXJzKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBpbmNsdWRlRGlycyBvcHRpb24gbXVzdCBiZSBhbiBhcnJheScpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhZGRJbmNsdWRlUGF0aFJlc29sdmVyKHJvb3QsIG9wdGlvbnMuaW5jbHVkZURpcnMpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgbG9hZGVkUm9vdCA9IHJvb3QubG9hZFN5bmMoZmlsZW5hbWUsIG9wdGlvbnMpO1xyXG4gICAgbG9hZGVkUm9vdC5yZXNvbHZlQWxsKCk7XHJcbiAgICByZXR1cm4gbG9hZGVkUm9vdDtcclxufVxyXG5leHBvcnRzLmxvYWRQcm90b3NXaXRoT3B0aW9uc1N5bmMgPSBsb2FkUHJvdG9zV2l0aE9wdGlvbnNTeW5jO1xyXG4vKipcclxuICogTG9hZCBHb29nbGUncyB3ZWxsLWtub3duIHByb3RvIGZpbGVzIHRoYXQgYXJlbid0IGV4cG9zZWQgYnkgUHJvdG9idWYuanMuXHJcbiAqL1xyXG5mdW5jdGlvbiBhZGRDb21tb25Qcm90b3MoKSB7XHJcbiAgICAvLyBQcm90b2J1Zi5qcyBleHBvc2VzOiBhbnksIGR1cmF0aW9uLCBlbXB0eSwgZmllbGRfbWFzaywgc3RydWN0LCB0aW1lc3RhbXAsXHJcbiAgICAvLyBhbmQgd3JhcHBlcnMuIGNvbXBpbGVyL3BsdWdpbiBpcyBleGNsdWRlZCBpbiBQcm90b2J1Zi5qcyBhbmQgaGVyZS5cclxuICAgIC8vIFVzaW5nIGNvbnN0YW50IHN0cmluZ3MgZm9yIGNvbXBhdGliaWxpdHkgd2l0aCB0b29scyBsaWtlIFdlYnBhY2tcclxuICAgIGNvbnN0IGFwaURlc2NyaXB0b3IgPSByZXF1aXJlKCdwcm90b2J1ZmpzL2dvb2dsZS9wcm90b2J1Zi9hcGkuanNvbicpO1xyXG4gICAgY29uc3QgZGVzY3JpcHRvckRlc2NyaXB0b3IgPSByZXF1aXJlKCdwcm90b2J1ZmpzL2dvb2dsZS9wcm90b2J1Zi9kZXNjcmlwdG9yLmpzb24nKTtcclxuICAgIGNvbnN0IHNvdXJjZUNvbnRleHREZXNjcmlwdG9yID0gcmVxdWlyZSgncHJvdG9idWZqcy9nb29nbGUvcHJvdG9idWYvc291cmNlX2NvbnRleHQuanNvbicpO1xyXG4gICAgY29uc3QgdHlwZURlc2NyaXB0b3IgPSByZXF1aXJlKCdwcm90b2J1ZmpzL2dvb2dsZS9wcm90b2J1Zi90eXBlLmpzb24nKTtcclxuICAgIFByb3RvYnVmLmNvbW1vbignYXBpJywgYXBpRGVzY3JpcHRvci5uZXN0ZWQuZ29vZ2xlLm5lc3RlZC5wcm90b2J1Zi5uZXN0ZWQpO1xyXG4gICAgUHJvdG9idWYuY29tbW9uKCdkZXNjcmlwdG9yJywgZGVzY3JpcHRvckRlc2NyaXB0b3IubmVzdGVkLmdvb2dsZS5uZXN0ZWQucHJvdG9idWYubmVzdGVkKTtcclxuICAgIFByb3RvYnVmLmNvbW1vbignc291cmNlX2NvbnRleHQnLCBzb3VyY2VDb250ZXh0RGVzY3JpcHRvci5uZXN0ZWQuZ29vZ2xlLm5lc3RlZC5wcm90b2J1Zi5uZXN0ZWQpO1xyXG4gICAgUHJvdG9idWYuY29tbW9uKCd0eXBlJywgdHlwZURlc2NyaXB0b3IubmVzdGVkLmdvb2dsZS5uZXN0ZWQucHJvdG9idWYubmVzdGVkKTtcclxufVxyXG5leHBvcnRzLmFkZENvbW1vblByb3RvcyA9IGFkZENvbW1vblByb3RvcztcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@grpc/proto-loader/build/src/util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@grpc/grpc-js/package.json":
/*!*************************************************!*\
  !*** ./node_modules/@grpc/grpc-js/package.json ***!
  \*************************************************/
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"name":"@grpc/grpc-js","version":"1.13.3","description":"gRPC Library for Node - pure JS implementation","homepage":"https://grpc.io/","repository":"https://github.com/grpc/grpc-node/tree/master/packages/grpc-js","main":"build/src/index.js","engines":{"node":">=12.10.0"},"keywords":[],"author":{"name":"Google Inc."},"types":"build/src/index.d.ts","license":"Apache-2.0","devDependencies":{"@grpc/proto-loader":"file:../proto-loader","@types/gulp":"^4.0.17","@types/gulp-mocha":"0.0.37","@types/lodash":"^4.14.202","@types/mocha":"^10.0.6","@types/ncp":"^2.0.8","@types/node":">=20.11.20","@types/pify":"^5.0.4","@types/semver":"^7.5.8","@typescript-eslint/eslint-plugin":"^7.1.0","@typescript-eslint/parser":"^7.1.0","@typescript-eslint/typescript-estree":"^7.1.0","clang-format":"^1.8.0","eslint":"^8.42.0","eslint-config-prettier":"^8.8.0","eslint-plugin-node":"^11.1.0","eslint-plugin-prettier":"^4.2.1","execa":"^2.0.3","gulp":"^4.0.2","gulp-mocha":"^6.0.0","lodash":"^4.17.21","madge":"^5.0.1","mocha-jenkins-reporter":"^0.4.1","ncp":"^2.0.0","pify":"^4.0.1","prettier":"^2.8.8","rimraf":"^3.0.2","semver":"^7.6.0","ts-node":"^10.9.2","typescript":"^5.3.3"},"contributors":[{"name":"Google Inc."}],"scripts":{"build":"npm run compile","clean":"rimraf ./build","compile":"tsc -p .","format":"clang-format -i -style=\\"{Language: JavaScript, BasedOnStyle: Google, ColumnLimit: 80}\\" src/*.ts test/*.ts","lint":"eslint src/*.ts test/*.ts","prepare":"npm run generate-types && npm run compile","test":"gulp test","check":"npm run lint","fix":"eslint --fix src/*.ts test/*.ts","pretest":"npm run generate-types && npm run generate-test-types && npm run compile","posttest":"npm run check && madge -c ./build/src","generate-types":"proto-loader-gen-types --keepCase --longs String --enums String --defaults --oneofs --includeComments --includeDirs proto/ --include-dirs test/fixtures/ -O src/generated/ --grpcLib ../index channelz.proto","generate-test-types":"proto-loader-gen-types --keepCase --longs String --enums String --defaults --oneofs --includeComments --include-dirs test/fixtures/ -O test/generated/ --grpcLib ../../src/index test_service.proto"},"dependencies":{"@grpc/proto-loader":"^0.7.13","@js-sdsl/ordered-map":"^4.4.2"},"files":["src/**/*.ts","build/src/**/*.{js,d.ts,js.map}","proto/*.proto","LICENSE","deps/envoy-api/envoy/api/v2/**/*.proto","deps/envoy-api/envoy/config/**/*.proto","deps/envoy-api/envoy/service/**/*.proto","deps/envoy-api/envoy/type/**/*.proto","deps/udpa/udpa/**/*.proto","deps/googleapis/google/api/*.proto","deps/googleapis/google/rpc/*.proto","deps/protoc-gen-validate/validate/**/*.proto"]}');

/***/ })

};
;