/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/fetch-blob";
exports.ids = ["vendor-chunks/fetch-blob"];
exports.modules = {

/***/ "(rsc)/./node_modules/fetch-blob/node_modules/web-streams-polyfill/dist/ponyfill.es2018.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/fetch-blob/node_modules/web-streams-polyfill/dist/ponyfill.es2018.js ***!
  \*******************************************************************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("/**\r\n * @license\r\n * web-streams-polyfill v3.3.3\r\n * Copyright 2024 Mattias Buelens, Diwank Singh Tomer and other contributors.\r\n * This code is released under the MIT license.\r\n * SPDX-License-Identifier: MIT\r\n */\r\n(function (global, factory) {\r\n     true ? factory(exports) :\r\n    0;\r\n})(this, (function (exports) { 'use strict';\r\n\r\n    function noop() {\r\n        return undefined;\r\n    }\r\n\r\n    function typeIsObject(x) {\r\n        return (typeof x === 'object' && x !== null) || typeof x === 'function';\r\n    }\r\n    const rethrowAssertionErrorRejection = noop;\r\n    function setFunctionName(fn, name) {\r\n        try {\r\n            Object.defineProperty(fn, 'name', {\r\n                value: name,\r\n                configurable: true\r\n            });\r\n        }\r\n        catch (_a) {\r\n            // This property is non-configurable in older browsers, so ignore if this throws.\r\n            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name#browser_compatibility\r\n        }\r\n    }\r\n\r\n    const originalPromise = Promise;\r\n    const originalPromiseThen = Promise.prototype.then;\r\n    const originalPromiseReject = Promise.reject.bind(originalPromise);\r\n    // https://webidl.spec.whatwg.org/#a-new-promise\r\n    function newPromise(executor) {\r\n        return new originalPromise(executor);\r\n    }\r\n    // https://webidl.spec.whatwg.org/#a-promise-resolved-with\r\n    function promiseResolvedWith(value) {\r\n        return newPromise(resolve => resolve(value));\r\n    }\r\n    // https://webidl.spec.whatwg.org/#a-promise-rejected-with\r\n    function promiseRejectedWith(reason) {\r\n        return originalPromiseReject(reason);\r\n    }\r\n    function PerformPromiseThen(promise, onFulfilled, onRejected) {\r\n        // There doesn't appear to be any way to correctly emulate the behaviour from JavaScript, so this is just an\r\n        // approximation.\r\n        return originalPromiseThen.call(promise, onFulfilled, onRejected);\r\n    }\r\n    // Bluebird logs a warning when a promise is created within a fulfillment handler, but then isn't returned\r\n    // from that handler. To prevent this, return null instead of void from all handlers.\r\n    // http://bluebirdjs.com/docs/warning-explanations.html#warning-a-promise-was-created-in-a-handler-but-was-not-returned-from-it\r\n    function uponPromise(promise, onFulfilled, onRejected) {\r\n        PerformPromiseThen(PerformPromiseThen(promise, onFulfilled, onRejected), undefined, rethrowAssertionErrorRejection);\r\n    }\r\n    function uponFulfillment(promise, onFulfilled) {\r\n        uponPromise(promise, onFulfilled);\r\n    }\r\n    function uponRejection(promise, onRejected) {\r\n        uponPromise(promise, undefined, onRejected);\r\n    }\r\n    function transformPromiseWith(promise, fulfillmentHandler, rejectionHandler) {\r\n        return PerformPromiseThen(promise, fulfillmentHandler, rejectionHandler);\r\n    }\r\n    function setPromiseIsHandledToTrue(promise) {\r\n        PerformPromiseThen(promise, undefined, rethrowAssertionErrorRejection);\r\n    }\r\n    let _queueMicrotask = callback => {\r\n        if (typeof queueMicrotask === 'function') {\r\n            _queueMicrotask = queueMicrotask;\r\n        }\r\n        else {\r\n            const resolvedPromise = promiseResolvedWith(undefined);\r\n            _queueMicrotask = cb => PerformPromiseThen(resolvedPromise, cb);\r\n        }\r\n        return _queueMicrotask(callback);\r\n    };\r\n    function reflectCall(F, V, args) {\r\n        if (typeof F !== 'function') {\r\n            throw new TypeError('Argument is not a function');\r\n        }\r\n        return Function.prototype.apply.call(F, V, args);\r\n    }\r\n    function promiseCall(F, V, args) {\r\n        try {\r\n            return promiseResolvedWith(reflectCall(F, V, args));\r\n        }\r\n        catch (value) {\r\n            return promiseRejectedWith(value);\r\n        }\r\n    }\r\n\r\n    // Original from Chromium\r\n    // https://chromium.googlesource.com/chromium/src/+/0aee4434a4dba42a42abaea9bfbc0cd196a63bc1/third_party/blink/renderer/core/streams/SimpleQueue.js\r\n    const QUEUE_MAX_ARRAY_SIZE = 16384;\r\n    /**\r\n     * Simple queue structure.\r\n     *\r\n     * Avoids scalability issues with using a packed array directly by using\r\n     * multiple arrays in a linked list and keeping the array size bounded.\r\n     */\r\n    class SimpleQueue {\r\n        constructor() {\r\n            this._cursor = 0;\r\n            this._size = 0;\r\n            // _front and _back are always defined.\r\n            this._front = {\r\n                _elements: [],\r\n                _next: undefined\r\n            };\r\n            this._back = this._front;\r\n            // The cursor is used to avoid calling Array.shift().\r\n            // It contains the index of the front element of the array inside the\r\n            // front-most node. It is always in the range [0, QUEUE_MAX_ARRAY_SIZE).\r\n            this._cursor = 0;\r\n            // When there is only one node, size === elements.length - cursor.\r\n            this._size = 0;\r\n        }\r\n        get length() {\r\n            return this._size;\r\n        }\r\n        // For exception safety, this method is structured in order:\r\n        // 1. Read state\r\n        // 2. Calculate required state mutations\r\n        // 3. Perform state mutations\r\n        push(element) {\r\n            const oldBack = this._back;\r\n            let newBack = oldBack;\r\n            if (oldBack._elements.length === QUEUE_MAX_ARRAY_SIZE - 1) {\r\n                newBack = {\r\n                    _elements: [],\r\n                    _next: undefined\r\n                };\r\n            }\r\n            // push() is the mutation most likely to throw an exception, so it\r\n            // goes first.\r\n            oldBack._elements.push(element);\r\n            if (newBack !== oldBack) {\r\n                this._back = newBack;\r\n                oldBack._next = newBack;\r\n            }\r\n            ++this._size;\r\n        }\r\n        // Like push(), shift() follows the read -> calculate -> mutate pattern for\r\n        // exception safety.\r\n        shift() { // must not be called on an empty queue\r\n            const oldFront = this._front;\r\n            let newFront = oldFront;\r\n            const oldCursor = this._cursor;\r\n            let newCursor = oldCursor + 1;\r\n            const elements = oldFront._elements;\r\n            const element = elements[oldCursor];\r\n            if (newCursor === QUEUE_MAX_ARRAY_SIZE) {\r\n                newFront = oldFront._next;\r\n                newCursor = 0;\r\n            }\r\n            // No mutations before this point.\r\n            --this._size;\r\n            this._cursor = newCursor;\r\n            if (oldFront !== newFront) {\r\n                this._front = newFront;\r\n            }\r\n            // Permit shifted element to be garbage collected.\r\n            elements[oldCursor] = undefined;\r\n            return element;\r\n        }\r\n        // The tricky thing about forEach() is that it can be called\r\n        // re-entrantly. The queue may be mutated inside the callback. It is easy to\r\n        // see that push() within the callback has no negative effects since the end\r\n        // of the queue is checked for on every iteration. If shift() is called\r\n        // repeatedly within the callback then the next iteration may return an\r\n        // element that has been removed. In this case the callback will be called\r\n        // with undefined values until we either \"catch up\" with elements that still\r\n        // exist or reach the back of the queue.\r\n        forEach(callback) {\r\n            let i = this._cursor;\r\n            let node = this._front;\r\n            let elements = node._elements;\r\n            while (i !== elements.length || node._next !== undefined) {\r\n                if (i === elements.length) {\r\n                    node = node._next;\r\n                    elements = node._elements;\r\n                    i = 0;\r\n                    if (elements.length === 0) {\r\n                        break;\r\n                    }\r\n                }\r\n                callback(elements[i]);\r\n                ++i;\r\n            }\r\n        }\r\n        // Return the element that would be returned if shift() was called now,\r\n        // without modifying the queue.\r\n        peek() { // must not be called on an empty queue\r\n            const front = this._front;\r\n            const cursor = this._cursor;\r\n            return front._elements[cursor];\r\n        }\r\n    }\r\n\r\n    const AbortSteps = Symbol('[[AbortSteps]]');\r\n    const ErrorSteps = Symbol('[[ErrorSteps]]');\r\n    const CancelSteps = Symbol('[[CancelSteps]]');\r\n    const PullSteps = Symbol('[[PullSteps]]');\r\n    const ReleaseSteps = Symbol('[[ReleaseSteps]]');\r\n\r\n    function ReadableStreamReaderGenericInitialize(reader, stream) {\r\n        reader._ownerReadableStream = stream;\r\n        stream._reader = reader;\r\n        if (stream._state === 'readable') {\r\n            defaultReaderClosedPromiseInitialize(reader);\r\n        }\r\n        else if (stream._state === 'closed') {\r\n            defaultReaderClosedPromiseInitializeAsResolved(reader);\r\n        }\r\n        else {\r\n            defaultReaderClosedPromiseInitializeAsRejected(reader, stream._storedError);\r\n        }\r\n    }\r\n    // A client of ReadableStreamDefaultReader and ReadableStreamBYOBReader may use these functions directly to bypass state\r\n    // check.\r\n    function ReadableStreamReaderGenericCancel(reader, reason) {\r\n        const stream = reader._ownerReadableStream;\r\n        return ReadableStreamCancel(stream, reason);\r\n    }\r\n    function ReadableStreamReaderGenericRelease(reader) {\r\n        const stream = reader._ownerReadableStream;\r\n        if (stream._state === 'readable') {\r\n            defaultReaderClosedPromiseReject(reader, new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));\r\n        }\r\n        else {\r\n            defaultReaderClosedPromiseResetToRejected(reader, new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));\r\n        }\r\n        stream._readableStreamController[ReleaseSteps]();\r\n        stream._reader = undefined;\r\n        reader._ownerReadableStream = undefined;\r\n    }\r\n    // Helper functions for the readers.\r\n    function readerLockException(name) {\r\n        return new TypeError('Cannot ' + name + ' a stream using a released reader');\r\n    }\r\n    // Helper functions for the ReadableStreamDefaultReader.\r\n    function defaultReaderClosedPromiseInitialize(reader) {\r\n        reader._closedPromise = newPromise((resolve, reject) => {\r\n            reader._closedPromise_resolve = resolve;\r\n            reader._closedPromise_reject = reject;\r\n        });\r\n    }\r\n    function defaultReaderClosedPromiseInitializeAsRejected(reader, reason) {\r\n        defaultReaderClosedPromiseInitialize(reader);\r\n        defaultReaderClosedPromiseReject(reader, reason);\r\n    }\r\n    function defaultReaderClosedPromiseInitializeAsResolved(reader) {\r\n        defaultReaderClosedPromiseInitialize(reader);\r\n        defaultReaderClosedPromiseResolve(reader);\r\n    }\r\n    function defaultReaderClosedPromiseReject(reader, reason) {\r\n        if (reader._closedPromise_reject === undefined) {\r\n            return;\r\n        }\r\n        setPromiseIsHandledToTrue(reader._closedPromise);\r\n        reader._closedPromise_reject(reason);\r\n        reader._closedPromise_resolve = undefined;\r\n        reader._closedPromise_reject = undefined;\r\n    }\r\n    function defaultReaderClosedPromiseResetToRejected(reader, reason) {\r\n        defaultReaderClosedPromiseInitializeAsRejected(reader, reason);\r\n    }\r\n    function defaultReaderClosedPromiseResolve(reader) {\r\n        if (reader._closedPromise_resolve === undefined) {\r\n            return;\r\n        }\r\n        reader._closedPromise_resolve(undefined);\r\n        reader._closedPromise_resolve = undefined;\r\n        reader._closedPromise_reject = undefined;\r\n    }\r\n\r\n    /// <reference lib=\"es2015.core\" />\r\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite#Polyfill\r\n    const NumberIsFinite = Number.isFinite || function (x) {\r\n        return typeof x === 'number' && isFinite(x);\r\n    };\r\n\r\n    /// <reference lib=\"es2015.core\" />\r\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc#Polyfill\r\n    const MathTrunc = Math.trunc || function (v) {\r\n        return v < 0 ? Math.ceil(v) : Math.floor(v);\r\n    };\r\n\r\n    // https://heycam.github.io/webidl/#idl-dictionaries\r\n    function isDictionary(x) {\r\n        return typeof x === 'object' || typeof x === 'function';\r\n    }\r\n    function assertDictionary(obj, context) {\r\n        if (obj !== undefined && !isDictionary(obj)) {\r\n            throw new TypeError(`${context} is not an object.`);\r\n        }\r\n    }\r\n    // https://heycam.github.io/webidl/#idl-callback-functions\r\n    function assertFunction(x, context) {\r\n        if (typeof x !== 'function') {\r\n            throw new TypeError(`${context} is not a function.`);\r\n        }\r\n    }\r\n    // https://heycam.github.io/webidl/#idl-object\r\n    function isObject(x) {\r\n        return (typeof x === 'object' && x !== null) || typeof x === 'function';\r\n    }\r\n    function assertObject(x, context) {\r\n        if (!isObject(x)) {\r\n            throw new TypeError(`${context} is not an object.`);\r\n        }\r\n    }\r\n    function assertRequiredArgument(x, position, context) {\r\n        if (x === undefined) {\r\n            throw new TypeError(`Parameter ${position} is required in '${context}'.`);\r\n        }\r\n    }\r\n    function assertRequiredField(x, field, context) {\r\n        if (x === undefined) {\r\n            throw new TypeError(`${field} is required in '${context}'.`);\r\n        }\r\n    }\r\n    // https://heycam.github.io/webidl/#idl-unrestricted-double\r\n    function convertUnrestrictedDouble(value) {\r\n        return Number(value);\r\n    }\r\n    function censorNegativeZero(x) {\r\n        return x === 0 ? 0 : x;\r\n    }\r\n    function integerPart(x) {\r\n        return censorNegativeZero(MathTrunc(x));\r\n    }\r\n    // https://heycam.github.io/webidl/#idl-unsigned-long-long\r\n    function convertUnsignedLongLongWithEnforceRange(value, context) {\r\n        const lowerBound = 0;\r\n        const upperBound = Number.MAX_SAFE_INTEGER;\r\n        let x = Number(value);\r\n        x = censorNegativeZero(x);\r\n        if (!NumberIsFinite(x)) {\r\n            throw new TypeError(`${context} is not a finite number`);\r\n        }\r\n        x = integerPart(x);\r\n        if (x < lowerBound || x > upperBound) {\r\n            throw new TypeError(`${context} is outside the accepted range of ${lowerBound} to ${upperBound}, inclusive`);\r\n        }\r\n        if (!NumberIsFinite(x) || x === 0) {\r\n            return 0;\r\n        }\r\n        // TODO Use BigInt if supported?\r\n        // let xBigInt = BigInt(integerPart(x));\r\n        // xBigInt = BigInt.asUintN(64, xBigInt);\r\n        // return Number(xBigInt);\r\n        return x;\r\n    }\r\n\r\n    function assertReadableStream(x, context) {\r\n        if (!IsReadableStream(x)) {\r\n            throw new TypeError(`${context} is not a ReadableStream.`);\r\n        }\r\n    }\r\n\r\n    // Abstract operations for the ReadableStream.\r\n    function AcquireReadableStreamDefaultReader(stream) {\r\n        return new ReadableStreamDefaultReader(stream);\r\n    }\r\n    // ReadableStream API exposed for controllers.\r\n    function ReadableStreamAddReadRequest(stream, readRequest) {\r\n        stream._reader._readRequests.push(readRequest);\r\n    }\r\n    function ReadableStreamFulfillReadRequest(stream, chunk, done) {\r\n        const reader = stream._reader;\r\n        const readRequest = reader._readRequests.shift();\r\n        if (done) {\r\n            readRequest._closeSteps();\r\n        }\r\n        else {\r\n            readRequest._chunkSteps(chunk);\r\n        }\r\n    }\r\n    function ReadableStreamGetNumReadRequests(stream) {\r\n        return stream._reader._readRequests.length;\r\n    }\r\n    function ReadableStreamHasDefaultReader(stream) {\r\n        const reader = stream._reader;\r\n        if (reader === undefined) {\r\n            return false;\r\n        }\r\n        if (!IsReadableStreamDefaultReader(reader)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * A default reader vended by a {@link ReadableStream}.\r\n     *\r\n     * @public\r\n     */\r\n    class ReadableStreamDefaultReader {\r\n        constructor(stream) {\r\n            assertRequiredArgument(stream, 1, 'ReadableStreamDefaultReader');\r\n            assertReadableStream(stream, 'First parameter');\r\n            if (IsReadableStreamLocked(stream)) {\r\n                throw new TypeError('This stream has already been locked for exclusive reading by another reader');\r\n            }\r\n            ReadableStreamReaderGenericInitialize(this, stream);\r\n            this._readRequests = new SimpleQueue();\r\n        }\r\n        /**\r\n         * Returns a promise that will be fulfilled when the stream becomes closed,\r\n         * or rejected if the stream ever errors or the reader's lock is released before the stream finishes closing.\r\n         */\r\n        get closed() {\r\n            if (!IsReadableStreamDefaultReader(this)) {\r\n                return promiseRejectedWith(defaultReaderBrandCheckException('closed'));\r\n            }\r\n            return this._closedPromise;\r\n        }\r\n        /**\r\n         * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.\r\n         */\r\n        cancel(reason = undefined) {\r\n            if (!IsReadableStreamDefaultReader(this)) {\r\n                return promiseRejectedWith(defaultReaderBrandCheckException('cancel'));\r\n            }\r\n            if (this._ownerReadableStream === undefined) {\r\n                return promiseRejectedWith(readerLockException('cancel'));\r\n            }\r\n            return ReadableStreamReaderGenericCancel(this, reason);\r\n        }\r\n        /**\r\n         * Returns a promise that allows access to the next chunk from the stream's internal queue, if available.\r\n         *\r\n         * If reading a chunk causes the queue to become empty, more data will be pulled from the underlying source.\r\n         */\r\n        read() {\r\n            if (!IsReadableStreamDefaultReader(this)) {\r\n                return promiseRejectedWith(defaultReaderBrandCheckException('read'));\r\n            }\r\n            if (this._ownerReadableStream === undefined) {\r\n                return promiseRejectedWith(readerLockException('read from'));\r\n            }\r\n            let resolvePromise;\r\n            let rejectPromise;\r\n            const promise = newPromise((resolve, reject) => {\r\n                resolvePromise = resolve;\r\n                rejectPromise = reject;\r\n            });\r\n            const readRequest = {\r\n                _chunkSteps: chunk => resolvePromise({ value: chunk, done: false }),\r\n                _closeSteps: () => resolvePromise({ value: undefined, done: true }),\r\n                _errorSteps: e => rejectPromise(e)\r\n            };\r\n            ReadableStreamDefaultReaderRead(this, readRequest);\r\n            return promise;\r\n        }\r\n        /**\r\n         * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.\r\n         * If the associated stream is errored when the lock is released, the reader will appear errored in the same way\r\n         * from now on; otherwise, the reader will appear closed.\r\n         *\r\n         * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by\r\n         * the reader's {@link ReadableStreamDefaultReader.read | read()} method has not yet been settled. Attempting to\r\n         * do so will throw a `TypeError` and leave the reader locked to the stream.\r\n         */\r\n        releaseLock() {\r\n            if (!IsReadableStreamDefaultReader(this)) {\r\n                throw defaultReaderBrandCheckException('releaseLock');\r\n            }\r\n            if (this._ownerReadableStream === undefined) {\r\n                return;\r\n            }\r\n            ReadableStreamDefaultReaderRelease(this);\r\n        }\r\n    }\r\n    Object.defineProperties(ReadableStreamDefaultReader.prototype, {\r\n        cancel: { enumerable: true },\r\n        read: { enumerable: true },\r\n        releaseLock: { enumerable: true },\r\n        closed: { enumerable: true }\r\n    });\r\n    setFunctionName(ReadableStreamDefaultReader.prototype.cancel, 'cancel');\r\n    setFunctionName(ReadableStreamDefaultReader.prototype.read, 'read');\r\n    setFunctionName(ReadableStreamDefaultReader.prototype.releaseLock, 'releaseLock');\r\n    if (typeof Symbol.toStringTag === 'symbol') {\r\n        Object.defineProperty(ReadableStreamDefaultReader.prototype, Symbol.toStringTag, {\r\n            value: 'ReadableStreamDefaultReader',\r\n            configurable: true\r\n        });\r\n    }\r\n    // Abstract operations for the readers.\r\n    function IsReadableStreamDefaultReader(x) {\r\n        if (!typeIsObject(x)) {\r\n            return false;\r\n        }\r\n        if (!Object.prototype.hasOwnProperty.call(x, '_readRequests')) {\r\n            return false;\r\n        }\r\n        return x instanceof ReadableStreamDefaultReader;\r\n    }\r\n    function ReadableStreamDefaultReaderRead(reader, readRequest) {\r\n        const stream = reader._ownerReadableStream;\r\n        stream._disturbed = true;\r\n        if (stream._state === 'closed') {\r\n            readRequest._closeSteps();\r\n        }\r\n        else if (stream._state === 'errored') {\r\n            readRequest._errorSteps(stream._storedError);\r\n        }\r\n        else {\r\n            stream._readableStreamController[PullSteps](readRequest);\r\n        }\r\n    }\r\n    function ReadableStreamDefaultReaderRelease(reader) {\r\n        ReadableStreamReaderGenericRelease(reader);\r\n        const e = new TypeError('Reader was released');\r\n        ReadableStreamDefaultReaderErrorReadRequests(reader, e);\r\n    }\r\n    function ReadableStreamDefaultReaderErrorReadRequests(reader, e) {\r\n        const readRequests = reader._readRequests;\r\n        reader._readRequests = new SimpleQueue();\r\n        readRequests.forEach(readRequest => {\r\n            readRequest._errorSteps(e);\r\n        });\r\n    }\r\n    // Helper functions for the ReadableStreamDefaultReader.\r\n    function defaultReaderBrandCheckException(name) {\r\n        return new TypeError(`ReadableStreamDefaultReader.prototype.${name} can only be used on a ReadableStreamDefaultReader`);\r\n    }\r\n\r\n    /// <reference lib=\"es2018.asynciterable\" />\r\n    /* eslint-disable @typescript-eslint/no-empty-function */\r\n    const AsyncIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf(async function* () { }).prototype);\r\n\r\n    /// <reference lib=\"es2018.asynciterable\" />\r\n    class ReadableStreamAsyncIteratorImpl {\r\n        constructor(reader, preventCancel) {\r\n            this._ongoingPromise = undefined;\r\n            this._isFinished = false;\r\n            this._reader = reader;\r\n            this._preventCancel = preventCancel;\r\n        }\r\n        next() {\r\n            const nextSteps = () => this._nextSteps();\r\n            this._ongoingPromise = this._ongoingPromise ?\r\n                transformPromiseWith(this._ongoingPromise, nextSteps, nextSteps) :\r\n                nextSteps();\r\n            return this._ongoingPromise;\r\n        }\r\n        return(value) {\r\n            const returnSteps = () => this._returnSteps(value);\r\n            return this._ongoingPromise ?\r\n                transformPromiseWith(this._ongoingPromise, returnSteps, returnSteps) :\r\n                returnSteps();\r\n        }\r\n        _nextSteps() {\r\n            if (this._isFinished) {\r\n                return Promise.resolve({ value: undefined, done: true });\r\n            }\r\n            const reader = this._reader;\r\n            let resolvePromise;\r\n            let rejectPromise;\r\n            const promise = newPromise((resolve, reject) => {\r\n                resolvePromise = resolve;\r\n                rejectPromise = reject;\r\n            });\r\n            const readRequest = {\r\n                _chunkSteps: chunk => {\r\n                    this._ongoingPromise = undefined;\r\n                    // This needs to be delayed by one microtask, otherwise we stop pulling too early which breaks a test.\r\n                    // FIXME Is this a bug in the specification, or in the test?\r\n                    _queueMicrotask(() => resolvePromise({ value: chunk, done: false }));\r\n                },\r\n                _closeSteps: () => {\r\n                    this._ongoingPromise = undefined;\r\n                    this._isFinished = true;\r\n                    ReadableStreamReaderGenericRelease(reader);\r\n                    resolvePromise({ value: undefined, done: true });\r\n                },\r\n                _errorSteps: reason => {\r\n                    this._ongoingPromise = undefined;\r\n                    this._isFinished = true;\r\n                    ReadableStreamReaderGenericRelease(reader);\r\n                    rejectPromise(reason);\r\n                }\r\n            };\r\n            ReadableStreamDefaultReaderRead(reader, readRequest);\r\n            return promise;\r\n        }\r\n        _returnSteps(value) {\r\n            if (this._isFinished) {\r\n                return Promise.resolve({ value, done: true });\r\n            }\r\n            this._isFinished = true;\r\n            const reader = this._reader;\r\n            if (!this._preventCancel) {\r\n                const result = ReadableStreamReaderGenericCancel(reader, value);\r\n                ReadableStreamReaderGenericRelease(reader);\r\n                return transformPromiseWith(result, () => ({ value, done: true }));\r\n            }\r\n            ReadableStreamReaderGenericRelease(reader);\r\n            return promiseResolvedWith({ value, done: true });\r\n        }\r\n    }\r\n    const ReadableStreamAsyncIteratorPrototype = {\r\n        next() {\r\n            if (!IsReadableStreamAsyncIterator(this)) {\r\n                return promiseRejectedWith(streamAsyncIteratorBrandCheckException('next'));\r\n            }\r\n            return this._asyncIteratorImpl.next();\r\n        },\r\n        return(value) {\r\n            if (!IsReadableStreamAsyncIterator(this)) {\r\n                return promiseRejectedWith(streamAsyncIteratorBrandCheckException('return'));\r\n            }\r\n            return this._asyncIteratorImpl.return(value);\r\n        }\r\n    };\r\n    Object.setPrototypeOf(ReadableStreamAsyncIteratorPrototype, AsyncIteratorPrototype);\r\n    // Abstract operations for the ReadableStream.\r\n    function AcquireReadableStreamAsyncIterator(stream, preventCancel) {\r\n        const reader = AcquireReadableStreamDefaultReader(stream);\r\n        const impl = new ReadableStreamAsyncIteratorImpl(reader, preventCancel);\r\n        const iterator = Object.create(ReadableStreamAsyncIteratorPrototype);\r\n        iterator._asyncIteratorImpl = impl;\r\n        return iterator;\r\n    }\r\n    function IsReadableStreamAsyncIterator(x) {\r\n        if (!typeIsObject(x)) {\r\n            return false;\r\n        }\r\n        if (!Object.prototype.hasOwnProperty.call(x, '_asyncIteratorImpl')) {\r\n            return false;\r\n        }\r\n        try {\r\n            // noinspection SuspiciousTypeOfGuard\r\n            return x._asyncIteratorImpl instanceof\r\n                ReadableStreamAsyncIteratorImpl;\r\n        }\r\n        catch (_a) {\r\n            return false;\r\n        }\r\n    }\r\n    // Helper functions for the ReadableStream.\r\n    function streamAsyncIteratorBrandCheckException(name) {\r\n        return new TypeError(`ReadableStreamAsyncIterator.${name} can only be used on a ReadableSteamAsyncIterator`);\r\n    }\r\n\r\n    /// <reference lib=\"es2015.core\" />\r\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN#Polyfill\r\n    const NumberIsNaN = Number.isNaN || function (x) {\r\n        // eslint-disable-next-line no-self-compare\r\n        return x !== x;\r\n    };\r\n\r\n    var _a, _b, _c;\r\n    function CreateArrayFromList(elements) {\r\n        // We use arrays to represent lists, so this is basically a no-op.\r\n        // Do a slice though just in case we happen to depend on the unique-ness.\r\n        return elements.slice();\r\n    }\r\n    function CopyDataBlockBytes(dest, destOffset, src, srcOffset, n) {\r\n        new Uint8Array(dest).set(new Uint8Array(src, srcOffset, n), destOffset);\r\n    }\r\n    let TransferArrayBuffer = (O) => {\r\n        if (typeof O.transfer === 'function') {\r\n            TransferArrayBuffer = buffer => buffer.transfer();\r\n        }\r\n        else if (typeof structuredClone === 'function') {\r\n            TransferArrayBuffer = buffer => structuredClone(buffer, { transfer: [buffer] });\r\n        }\r\n        else {\r\n            // Not implemented correctly\r\n            TransferArrayBuffer = buffer => buffer;\r\n        }\r\n        return TransferArrayBuffer(O);\r\n    };\r\n    let IsDetachedBuffer = (O) => {\r\n        if (typeof O.detached === 'boolean') {\r\n            IsDetachedBuffer = buffer => buffer.detached;\r\n        }\r\n        else {\r\n            // Not implemented correctly\r\n            IsDetachedBuffer = buffer => buffer.byteLength === 0;\r\n        }\r\n        return IsDetachedBuffer(O);\r\n    };\r\n    function ArrayBufferSlice(buffer, begin, end) {\r\n        // ArrayBuffer.prototype.slice is not available on IE10\r\n        // https://www.caniuse.com/mdn-javascript_builtins_arraybuffer_slice\r\n        if (buffer.slice) {\r\n            return buffer.slice(begin, end);\r\n        }\r\n        const length = end - begin;\r\n        const slice = new ArrayBuffer(length);\r\n        CopyDataBlockBytes(slice, 0, buffer, begin, length);\r\n        return slice;\r\n    }\r\n    function GetMethod(receiver, prop) {\r\n        const func = receiver[prop];\r\n        if (func === undefined || func === null) {\r\n            return undefined;\r\n        }\r\n        if (typeof func !== 'function') {\r\n            throw new TypeError(`${String(prop)} is not a function`);\r\n        }\r\n        return func;\r\n    }\r\n    function CreateAsyncFromSyncIterator(syncIteratorRecord) {\r\n        // Instead of re-implementing CreateAsyncFromSyncIterator and %AsyncFromSyncIteratorPrototype%,\r\n        // we use yield* inside an async generator function to achieve the same result.\r\n        // Wrap the sync iterator inside a sync iterable, so we can use it with yield*.\r\n        const syncIterable = {\r\n            [Symbol.iterator]: () => syncIteratorRecord.iterator\r\n        };\r\n        // Create an async generator function and immediately invoke it.\r\n        const asyncIterator = (async function* () {\r\n            return yield* syncIterable;\r\n        }());\r\n        // Return as an async iterator record.\r\n        const nextMethod = asyncIterator.next;\r\n        return { iterator: asyncIterator, nextMethod, done: false };\r\n    }\r\n    // Aligns with core-js/modules/es.symbol.async-iterator.js\r\n    const SymbolAsyncIterator = (_c = (_a = Symbol.asyncIterator) !== null && _a !== void 0 ? _a : (_b = Symbol.for) === null || _b === void 0 ? void 0 : _b.call(Symbol, 'Symbol.asyncIterator')) !== null && _c !== void 0 ? _c : '@@asyncIterator';\r\n    function GetIterator(obj, hint = 'sync', method) {\r\n        if (method === undefined) {\r\n            if (hint === 'async') {\r\n                method = GetMethod(obj, SymbolAsyncIterator);\r\n                if (method === undefined) {\r\n                    const syncMethod = GetMethod(obj, Symbol.iterator);\r\n                    const syncIteratorRecord = GetIterator(obj, 'sync', syncMethod);\r\n                    return CreateAsyncFromSyncIterator(syncIteratorRecord);\r\n                }\r\n            }\r\n            else {\r\n                method = GetMethod(obj, Symbol.iterator);\r\n            }\r\n        }\r\n        if (method === undefined) {\r\n            throw new TypeError('The object is not iterable');\r\n        }\r\n        const iterator = reflectCall(method, obj, []);\r\n        if (!typeIsObject(iterator)) {\r\n            throw new TypeError('The iterator method must return an object');\r\n        }\r\n        const nextMethod = iterator.next;\r\n        return { iterator, nextMethod, done: false };\r\n    }\r\n    function IteratorNext(iteratorRecord) {\r\n        const result = reflectCall(iteratorRecord.nextMethod, iteratorRecord.iterator, []);\r\n        if (!typeIsObject(result)) {\r\n            throw new TypeError('The iterator.next() method must return an object');\r\n        }\r\n        return result;\r\n    }\r\n    function IteratorComplete(iterResult) {\r\n        return Boolean(iterResult.done);\r\n    }\r\n    function IteratorValue(iterResult) {\r\n        return iterResult.value;\r\n    }\r\n\r\n    function IsNonNegativeNumber(v) {\r\n        if (typeof v !== 'number') {\r\n            return false;\r\n        }\r\n        if (NumberIsNaN(v)) {\r\n            return false;\r\n        }\r\n        if (v < 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    function CloneAsUint8Array(O) {\r\n        const buffer = ArrayBufferSlice(O.buffer, O.byteOffset, O.byteOffset + O.byteLength);\r\n        return new Uint8Array(buffer);\r\n    }\r\n\r\n    function DequeueValue(container) {\r\n        const pair = container._queue.shift();\r\n        container._queueTotalSize -= pair.size;\r\n        if (container._queueTotalSize < 0) {\r\n            container._queueTotalSize = 0;\r\n        }\r\n        return pair.value;\r\n    }\r\n    function EnqueueValueWithSize(container, value, size) {\r\n        if (!IsNonNegativeNumber(size) || size === Infinity) {\r\n            throw new RangeError('Size must be a finite, non-NaN, non-negative number.');\r\n        }\r\n        container._queue.push({ value, size });\r\n        container._queueTotalSize += size;\r\n    }\r\n    function PeekQueueValue(container) {\r\n        const pair = container._queue.peek();\r\n        return pair.value;\r\n    }\r\n    function ResetQueue(container) {\r\n        container._queue = new SimpleQueue();\r\n        container._queueTotalSize = 0;\r\n    }\r\n\r\n    function isDataViewConstructor(ctor) {\r\n        return ctor === DataView;\r\n    }\r\n    function isDataView(view) {\r\n        return isDataViewConstructor(view.constructor);\r\n    }\r\n    function arrayBufferViewElementSize(ctor) {\r\n        if (isDataViewConstructor(ctor)) {\r\n            return 1;\r\n        }\r\n        return ctor.BYTES_PER_ELEMENT;\r\n    }\r\n\r\n    /**\r\n     * A pull-into request in a {@link ReadableByteStreamController}.\r\n     *\r\n     * @public\r\n     */\r\n    class ReadableStreamBYOBRequest {\r\n        constructor() {\r\n            throw new TypeError('Illegal constructor');\r\n        }\r\n        /**\r\n         * Returns the view for writing in to, or `null` if the BYOB request has already been responded to.\r\n         */\r\n        get view() {\r\n            if (!IsReadableStreamBYOBRequest(this)) {\r\n                throw byobRequestBrandCheckException('view');\r\n            }\r\n            return this._view;\r\n        }\r\n        respond(bytesWritten) {\r\n            if (!IsReadableStreamBYOBRequest(this)) {\r\n                throw byobRequestBrandCheckException('respond');\r\n            }\r\n            assertRequiredArgument(bytesWritten, 1, 'respond');\r\n            bytesWritten = convertUnsignedLongLongWithEnforceRange(bytesWritten, 'First parameter');\r\n            if (this._associatedReadableByteStreamController === undefined) {\r\n                throw new TypeError('This BYOB request has been invalidated');\r\n            }\r\n            if (IsDetachedBuffer(this._view.buffer)) {\r\n                throw new TypeError(`The BYOB request's buffer has been detached and so cannot be used as a response`);\r\n            }\r\n            ReadableByteStreamControllerRespond(this._associatedReadableByteStreamController, bytesWritten);\r\n        }\r\n        respondWithNewView(view) {\r\n            if (!IsReadableStreamBYOBRequest(this)) {\r\n                throw byobRequestBrandCheckException('respondWithNewView');\r\n            }\r\n            assertRequiredArgument(view, 1, 'respondWithNewView');\r\n            if (!ArrayBuffer.isView(view)) {\r\n                throw new TypeError('You can only respond with array buffer views');\r\n            }\r\n            if (this._associatedReadableByteStreamController === undefined) {\r\n                throw new TypeError('This BYOB request has been invalidated');\r\n            }\r\n            if (IsDetachedBuffer(view.buffer)) {\r\n                throw new TypeError('The given view\\'s buffer has been detached and so cannot be used as a response');\r\n            }\r\n            ReadableByteStreamControllerRespondWithNewView(this._associatedReadableByteStreamController, view);\r\n        }\r\n    }\r\n    Object.defineProperties(ReadableStreamBYOBRequest.prototype, {\r\n        respond: { enumerable: true },\r\n        respondWithNewView: { enumerable: true },\r\n        view: { enumerable: true }\r\n    });\r\n    setFunctionName(ReadableStreamBYOBRequest.prototype.respond, 'respond');\r\n    setFunctionName(ReadableStreamBYOBRequest.prototype.respondWithNewView, 'respondWithNewView');\r\n    if (typeof Symbol.toStringTag === 'symbol') {\r\n        Object.defineProperty(ReadableStreamBYOBRequest.prototype, Symbol.toStringTag, {\r\n            value: 'ReadableStreamBYOBRequest',\r\n            configurable: true\r\n        });\r\n    }\r\n    /**\r\n     * Allows control of a {@link ReadableStream | readable byte stream}'s state and internal queue.\r\n     *\r\n     * @public\r\n     */\r\n    class ReadableByteStreamController {\r\n        constructor() {\r\n            throw new TypeError('Illegal constructor');\r\n        }\r\n        /**\r\n         * Returns the current BYOB pull request, or `null` if there isn't one.\r\n         */\r\n        get byobRequest() {\r\n            if (!IsReadableByteStreamController(this)) {\r\n                throw byteStreamControllerBrandCheckException('byobRequest');\r\n            }\r\n            return ReadableByteStreamControllerGetBYOBRequest(this);\r\n        }\r\n        /**\r\n         * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is\r\n         * over-full. An underlying byte source ought to use this information to determine when and how to apply backpressure.\r\n         */\r\n        get desiredSize() {\r\n            if (!IsReadableByteStreamController(this)) {\r\n                throw byteStreamControllerBrandCheckException('desiredSize');\r\n            }\r\n            return ReadableByteStreamControllerGetDesiredSize(this);\r\n        }\r\n        /**\r\n         * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from\r\n         * the stream, but once those are read, the stream will become closed.\r\n         */\r\n        close() {\r\n            if (!IsReadableByteStreamController(this)) {\r\n                throw byteStreamControllerBrandCheckException('close');\r\n            }\r\n            if (this._closeRequested) {\r\n                throw new TypeError('The stream has already been closed; do not close it again!');\r\n            }\r\n            const state = this._controlledReadableByteStream._state;\r\n            if (state !== 'readable') {\r\n                throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be closed`);\r\n            }\r\n            ReadableByteStreamControllerClose(this);\r\n        }\r\n        enqueue(chunk) {\r\n            if (!IsReadableByteStreamController(this)) {\r\n                throw byteStreamControllerBrandCheckException('enqueue');\r\n            }\r\n            assertRequiredArgument(chunk, 1, 'enqueue');\r\n            if (!ArrayBuffer.isView(chunk)) {\r\n                throw new TypeError('chunk must be an array buffer view');\r\n            }\r\n            if (chunk.byteLength === 0) {\r\n                throw new TypeError('chunk must have non-zero byteLength');\r\n            }\r\n            if (chunk.buffer.byteLength === 0) {\r\n                throw new TypeError(`chunk's buffer must have non-zero byteLength`);\r\n            }\r\n            if (this._closeRequested) {\r\n                throw new TypeError('stream is closed or draining');\r\n            }\r\n            const state = this._controlledReadableByteStream._state;\r\n            if (state !== 'readable') {\r\n                throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be enqueued to`);\r\n            }\r\n            ReadableByteStreamControllerEnqueue(this, chunk);\r\n        }\r\n        /**\r\n         * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.\r\n         */\r\n        error(e = undefined) {\r\n            if (!IsReadableByteStreamController(this)) {\r\n                throw byteStreamControllerBrandCheckException('error');\r\n            }\r\n            ReadableByteStreamControllerError(this, e);\r\n        }\r\n        /** @internal */\r\n        [CancelSteps](reason) {\r\n            ReadableByteStreamControllerClearPendingPullIntos(this);\r\n            ResetQueue(this);\r\n            const result = this._cancelAlgorithm(reason);\r\n            ReadableByteStreamControllerClearAlgorithms(this);\r\n            return result;\r\n        }\r\n        /** @internal */\r\n        [PullSteps](readRequest) {\r\n            const stream = this._controlledReadableByteStream;\r\n            if (this._queueTotalSize > 0) {\r\n                ReadableByteStreamControllerFillReadRequestFromQueue(this, readRequest);\r\n                return;\r\n            }\r\n            const autoAllocateChunkSize = this._autoAllocateChunkSize;\r\n            if (autoAllocateChunkSize !== undefined) {\r\n                let buffer;\r\n                try {\r\n                    buffer = new ArrayBuffer(autoAllocateChunkSize);\r\n                }\r\n                catch (bufferE) {\r\n                    readRequest._errorSteps(bufferE);\r\n                    return;\r\n                }\r\n                const pullIntoDescriptor = {\r\n                    buffer,\r\n                    bufferByteLength: autoAllocateChunkSize,\r\n                    byteOffset: 0,\r\n                    byteLength: autoAllocateChunkSize,\r\n                    bytesFilled: 0,\r\n                    minimumFill: 1,\r\n                    elementSize: 1,\r\n                    viewConstructor: Uint8Array,\r\n                    readerType: 'default'\r\n                };\r\n                this._pendingPullIntos.push(pullIntoDescriptor);\r\n            }\r\n            ReadableStreamAddReadRequest(stream, readRequest);\r\n            ReadableByteStreamControllerCallPullIfNeeded(this);\r\n        }\r\n        /** @internal */\r\n        [ReleaseSteps]() {\r\n            if (this._pendingPullIntos.length > 0) {\r\n                const firstPullInto = this._pendingPullIntos.peek();\r\n                firstPullInto.readerType = 'none';\r\n                this._pendingPullIntos = new SimpleQueue();\r\n                this._pendingPullIntos.push(firstPullInto);\r\n            }\r\n        }\r\n    }\r\n    Object.defineProperties(ReadableByteStreamController.prototype, {\r\n        close: { enumerable: true },\r\n        enqueue: { enumerable: true },\r\n        error: { enumerable: true },\r\n        byobRequest: { enumerable: true },\r\n        desiredSize: { enumerable: true }\r\n    });\r\n    setFunctionName(ReadableByteStreamController.prototype.close, 'close');\r\n    setFunctionName(ReadableByteStreamController.prototype.enqueue, 'enqueue');\r\n    setFunctionName(ReadableByteStreamController.prototype.error, 'error');\r\n    if (typeof Symbol.toStringTag === 'symbol') {\r\n        Object.defineProperty(ReadableByteStreamController.prototype, Symbol.toStringTag, {\r\n            value: 'ReadableByteStreamController',\r\n            configurable: true\r\n        });\r\n    }\r\n    // Abstract operations for the ReadableByteStreamController.\r\n    function IsReadableByteStreamController(x) {\r\n        if (!typeIsObject(x)) {\r\n            return false;\r\n        }\r\n        if (!Object.prototype.hasOwnProperty.call(x, '_controlledReadableByteStream')) {\r\n            return false;\r\n        }\r\n        return x instanceof ReadableByteStreamController;\r\n    }\r\n    function IsReadableStreamBYOBRequest(x) {\r\n        if (!typeIsObject(x)) {\r\n            return false;\r\n        }\r\n        if (!Object.prototype.hasOwnProperty.call(x, '_associatedReadableByteStreamController')) {\r\n            return false;\r\n        }\r\n        return x instanceof ReadableStreamBYOBRequest;\r\n    }\r\n    function ReadableByteStreamControllerCallPullIfNeeded(controller) {\r\n        const shouldPull = ReadableByteStreamControllerShouldCallPull(controller);\r\n        if (!shouldPull) {\r\n            return;\r\n        }\r\n        if (controller._pulling) {\r\n            controller._pullAgain = true;\r\n            return;\r\n        }\r\n        controller._pulling = true;\r\n        // TODO: Test controller argument\r\n        const pullPromise = controller._pullAlgorithm();\r\n        uponPromise(pullPromise, () => {\r\n            controller._pulling = false;\r\n            if (controller._pullAgain) {\r\n                controller._pullAgain = false;\r\n                ReadableByteStreamControllerCallPullIfNeeded(controller);\r\n            }\r\n            return null;\r\n        }, e => {\r\n            ReadableByteStreamControllerError(controller, e);\r\n            return null;\r\n        });\r\n    }\r\n    function ReadableByteStreamControllerClearPendingPullIntos(controller) {\r\n        ReadableByteStreamControllerInvalidateBYOBRequest(controller);\r\n        controller._pendingPullIntos = new SimpleQueue();\r\n    }\r\n    function ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor) {\r\n        let done = false;\r\n        if (stream._state === 'closed') {\r\n            done = true;\r\n        }\r\n        const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);\r\n        if (pullIntoDescriptor.readerType === 'default') {\r\n            ReadableStreamFulfillReadRequest(stream, filledView, done);\r\n        }\r\n        else {\r\n            ReadableStreamFulfillReadIntoRequest(stream, filledView, done);\r\n        }\r\n    }\r\n    function ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor) {\r\n        const bytesFilled = pullIntoDescriptor.bytesFilled;\r\n        const elementSize = pullIntoDescriptor.elementSize;\r\n        return new pullIntoDescriptor.viewConstructor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, bytesFilled / elementSize);\r\n    }\r\n    function ReadableByteStreamControllerEnqueueChunkToQueue(controller, buffer, byteOffset, byteLength) {\r\n        controller._queue.push({ buffer, byteOffset, byteLength });\r\n        controller._queueTotalSize += byteLength;\r\n    }\r\n    function ReadableByteStreamControllerEnqueueClonedChunkToQueue(controller, buffer, byteOffset, byteLength) {\r\n        let clonedChunk;\r\n        try {\r\n            clonedChunk = ArrayBufferSlice(buffer, byteOffset, byteOffset + byteLength);\r\n        }\r\n        catch (cloneE) {\r\n            ReadableByteStreamControllerError(controller, cloneE);\r\n            throw cloneE;\r\n        }\r\n        ReadableByteStreamControllerEnqueueChunkToQueue(controller, clonedChunk, 0, byteLength);\r\n    }\r\n    function ReadableByteStreamControllerEnqueueDetachedPullIntoToQueue(controller, firstDescriptor) {\r\n        if (firstDescriptor.bytesFilled > 0) {\r\n            ReadableByteStreamControllerEnqueueClonedChunkToQueue(controller, firstDescriptor.buffer, firstDescriptor.byteOffset, firstDescriptor.bytesFilled);\r\n        }\r\n        ReadableByteStreamControllerShiftPendingPullInto(controller);\r\n    }\r\n    function ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor) {\r\n        const maxBytesToCopy = Math.min(controller._queueTotalSize, pullIntoDescriptor.byteLength - pullIntoDescriptor.bytesFilled);\r\n        const maxBytesFilled = pullIntoDescriptor.bytesFilled + maxBytesToCopy;\r\n        let totalBytesToCopyRemaining = maxBytesToCopy;\r\n        let ready = false;\r\n        const remainderBytes = maxBytesFilled % pullIntoDescriptor.elementSize;\r\n        const maxAlignedBytes = maxBytesFilled - remainderBytes;\r\n        // A descriptor for a read() request that is not yet filled up to its minimum length will stay at the head\r\n        // of the queue, so the underlying source can keep filling it.\r\n        if (maxAlignedBytes >= pullIntoDescriptor.minimumFill) {\r\n            totalBytesToCopyRemaining = maxAlignedBytes - pullIntoDescriptor.bytesFilled;\r\n            ready = true;\r\n        }\r\n        const queue = controller._queue;\r\n        while (totalBytesToCopyRemaining > 0) {\r\n            const headOfQueue = queue.peek();\r\n            const bytesToCopy = Math.min(totalBytesToCopyRemaining, headOfQueue.byteLength);\r\n            const destStart = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;\r\n            CopyDataBlockBytes(pullIntoDescriptor.buffer, destStart, headOfQueue.buffer, headOfQueue.byteOffset, bytesToCopy);\r\n            if (headOfQueue.byteLength === bytesToCopy) {\r\n                queue.shift();\r\n            }\r\n            else {\r\n                headOfQueue.byteOffset += bytesToCopy;\r\n                headOfQueue.byteLength -= bytesToCopy;\r\n            }\r\n            controller._queueTotalSize -= bytesToCopy;\r\n            ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesToCopy, pullIntoDescriptor);\r\n            totalBytesToCopyRemaining -= bytesToCopy;\r\n        }\r\n        return ready;\r\n    }\r\n    function ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, size, pullIntoDescriptor) {\r\n        pullIntoDescriptor.bytesFilled += size;\r\n    }\r\n    function ReadableByteStreamControllerHandleQueueDrain(controller) {\r\n        if (controller._queueTotalSize === 0 && controller._closeRequested) {\r\n            ReadableByteStreamControllerClearAlgorithms(controller);\r\n            ReadableStreamClose(controller._controlledReadableByteStream);\r\n        }\r\n        else {\r\n            ReadableByteStreamControllerCallPullIfNeeded(controller);\r\n        }\r\n    }\r\n    function ReadableByteStreamControllerInvalidateBYOBRequest(controller) {\r\n        if (controller._byobRequest === null) {\r\n            return;\r\n        }\r\n        controller._byobRequest._associatedReadableByteStreamController = undefined;\r\n        controller._byobRequest._view = null;\r\n        controller._byobRequest = null;\r\n    }\r\n    function ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller) {\r\n        while (controller._pendingPullIntos.length > 0) {\r\n            if (controller._queueTotalSize === 0) {\r\n                return;\r\n            }\r\n            const pullIntoDescriptor = controller._pendingPullIntos.peek();\r\n            if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {\r\n                ReadableByteStreamControllerShiftPendingPullInto(controller);\r\n                ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);\r\n            }\r\n        }\r\n    }\r\n    function ReadableByteStreamControllerProcessReadRequestsUsingQueue(controller) {\r\n        const reader = controller._controlledReadableByteStream._reader;\r\n        while (reader._readRequests.length > 0) {\r\n            if (controller._queueTotalSize === 0) {\r\n                return;\r\n            }\r\n            const readRequest = reader._readRequests.shift();\r\n            ReadableByteStreamControllerFillReadRequestFromQueue(controller, readRequest);\r\n        }\r\n    }\r\n    function ReadableByteStreamControllerPullInto(controller, view, min, readIntoRequest) {\r\n        const stream = controller._controlledReadableByteStream;\r\n        const ctor = view.constructor;\r\n        const elementSize = arrayBufferViewElementSize(ctor);\r\n        const { byteOffset, byteLength } = view;\r\n        const minimumFill = min * elementSize;\r\n        let buffer;\r\n        try {\r\n            buffer = TransferArrayBuffer(view.buffer);\r\n        }\r\n        catch (e) {\r\n            readIntoRequest._errorSteps(e);\r\n            return;\r\n        }\r\n        const pullIntoDescriptor = {\r\n            buffer,\r\n            bufferByteLength: buffer.byteLength,\r\n            byteOffset,\r\n            byteLength,\r\n            bytesFilled: 0,\r\n            minimumFill,\r\n            elementSize,\r\n            viewConstructor: ctor,\r\n            readerType: 'byob'\r\n        };\r\n        if (controller._pendingPullIntos.length > 0) {\r\n            controller._pendingPullIntos.push(pullIntoDescriptor);\r\n            // No ReadableByteStreamControllerCallPullIfNeeded() call since:\r\n            // - No change happens on desiredSize\r\n            // - The source has already been notified of that there's at least 1 pending read(view)\r\n            ReadableStreamAddReadIntoRequest(stream, readIntoRequest);\r\n            return;\r\n        }\r\n        if (stream._state === 'closed') {\r\n            const emptyView = new ctor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, 0);\r\n            readIntoRequest._closeSteps(emptyView);\r\n            return;\r\n        }\r\n        if (controller._queueTotalSize > 0) {\r\n            if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {\r\n                const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);\r\n                ReadableByteStreamControllerHandleQueueDrain(controller);\r\n                readIntoRequest._chunkSteps(filledView);\r\n                return;\r\n            }\r\n            if (controller._closeRequested) {\r\n                const e = new TypeError('Insufficient bytes to fill elements in the given buffer');\r\n                ReadableByteStreamControllerError(controller, e);\r\n                readIntoRequest._errorSteps(e);\r\n                return;\r\n            }\r\n        }\r\n        controller._pendingPullIntos.push(pullIntoDescriptor);\r\n        ReadableStreamAddReadIntoRequest(stream, readIntoRequest);\r\n        ReadableByteStreamControllerCallPullIfNeeded(controller);\r\n    }\r\n    function ReadableByteStreamControllerRespondInClosedState(controller, firstDescriptor) {\r\n        if (firstDescriptor.readerType === 'none') {\r\n            ReadableByteStreamControllerShiftPendingPullInto(controller);\r\n        }\r\n        const stream = controller._controlledReadableByteStream;\r\n        if (ReadableStreamHasBYOBReader(stream)) {\r\n            while (ReadableStreamGetNumReadIntoRequests(stream) > 0) {\r\n                const pullIntoDescriptor = ReadableByteStreamControllerShiftPendingPullInto(controller);\r\n                ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor);\r\n            }\r\n        }\r\n    }\r\n    function ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, pullIntoDescriptor) {\r\n        ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesWritten, pullIntoDescriptor);\r\n        if (pullIntoDescriptor.readerType === 'none') {\r\n            ReadableByteStreamControllerEnqueueDetachedPullIntoToQueue(controller, pullIntoDescriptor);\r\n            ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\r\n            return;\r\n        }\r\n        if (pullIntoDescriptor.bytesFilled < pullIntoDescriptor.minimumFill) {\r\n            // A descriptor for a read() request that is not yet filled up to its minimum length will stay at the head\r\n            // of the queue, so the underlying source can keep filling it.\r\n            return;\r\n        }\r\n        ReadableByteStreamControllerShiftPendingPullInto(controller);\r\n        const remainderSize = pullIntoDescriptor.bytesFilled % pullIntoDescriptor.elementSize;\r\n        if (remainderSize > 0) {\r\n            const end = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;\r\n            ReadableByteStreamControllerEnqueueClonedChunkToQueue(controller, pullIntoDescriptor.buffer, end - remainderSize, remainderSize);\r\n        }\r\n        pullIntoDescriptor.bytesFilled -= remainderSize;\r\n        ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);\r\n        ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\r\n    }\r\n    function ReadableByteStreamControllerRespondInternal(controller, bytesWritten) {\r\n        const firstDescriptor = controller._pendingPullIntos.peek();\r\n        ReadableByteStreamControllerInvalidateBYOBRequest(controller);\r\n        const state = controller._controlledReadableByteStream._state;\r\n        if (state === 'closed') {\r\n            ReadableByteStreamControllerRespondInClosedState(controller, firstDescriptor);\r\n        }\r\n        else {\r\n            ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, firstDescriptor);\r\n        }\r\n        ReadableByteStreamControllerCallPullIfNeeded(controller);\r\n    }\r\n    function ReadableByteStreamControllerShiftPendingPullInto(controller) {\r\n        const descriptor = controller._pendingPullIntos.shift();\r\n        return descriptor;\r\n    }\r\n    function ReadableByteStreamControllerShouldCallPull(controller) {\r\n        const stream = controller._controlledReadableByteStream;\r\n        if (stream._state !== 'readable') {\r\n            return false;\r\n        }\r\n        if (controller._closeRequested) {\r\n            return false;\r\n        }\r\n        if (!controller._started) {\r\n            return false;\r\n        }\r\n        if (ReadableStreamHasDefaultReader(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\r\n            return true;\r\n        }\r\n        if (ReadableStreamHasBYOBReader(stream) && ReadableStreamGetNumReadIntoRequests(stream) > 0) {\r\n            return true;\r\n        }\r\n        const desiredSize = ReadableByteStreamControllerGetDesiredSize(controller);\r\n        if (desiredSize > 0) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    function ReadableByteStreamControllerClearAlgorithms(controller) {\r\n        controller._pullAlgorithm = undefined;\r\n        controller._cancelAlgorithm = undefined;\r\n    }\r\n    // A client of ReadableByteStreamController may use these functions directly to bypass state check.\r\n    function ReadableByteStreamControllerClose(controller) {\r\n        const stream = controller._controlledReadableByteStream;\r\n        if (controller._closeRequested || stream._state !== 'readable') {\r\n            return;\r\n        }\r\n        if (controller._queueTotalSize > 0) {\r\n            controller._closeRequested = true;\r\n            return;\r\n        }\r\n        if (controller._pendingPullIntos.length > 0) {\r\n            const firstPendingPullInto = controller._pendingPullIntos.peek();\r\n            if (firstPendingPullInto.bytesFilled % firstPendingPullInto.elementSize !== 0) {\r\n                const e = new TypeError('Insufficient bytes to fill elements in the given buffer');\r\n                ReadableByteStreamControllerError(controller, e);\r\n                throw e;\r\n            }\r\n        }\r\n        ReadableByteStreamControllerClearAlgorithms(controller);\r\n        ReadableStreamClose(stream);\r\n    }\r\n    function ReadableByteStreamControllerEnqueue(controller, chunk) {\r\n        const stream = controller._controlledReadableByteStream;\r\n        if (controller._closeRequested || stream._state !== 'readable') {\r\n            return;\r\n        }\r\n        const { buffer, byteOffset, byteLength } = chunk;\r\n        if (IsDetachedBuffer(buffer)) {\r\n            throw new TypeError('chunk\\'s buffer is detached and so cannot be enqueued');\r\n        }\r\n        const transferredBuffer = TransferArrayBuffer(buffer);\r\n        if (controller._pendingPullIntos.length > 0) {\r\n            const firstPendingPullInto = controller._pendingPullIntos.peek();\r\n            if (IsDetachedBuffer(firstPendingPullInto.buffer)) {\r\n                throw new TypeError('The BYOB request\\'s buffer has been detached and so cannot be filled with an enqueued chunk');\r\n            }\r\n            ReadableByteStreamControllerInvalidateBYOBRequest(controller);\r\n            firstPendingPullInto.buffer = TransferArrayBuffer(firstPendingPullInto.buffer);\r\n            if (firstPendingPullInto.readerType === 'none') {\r\n                ReadableByteStreamControllerEnqueueDetachedPullIntoToQueue(controller, firstPendingPullInto);\r\n            }\r\n        }\r\n        if (ReadableStreamHasDefaultReader(stream)) {\r\n            ReadableByteStreamControllerProcessReadRequestsUsingQueue(controller);\r\n            if (ReadableStreamGetNumReadRequests(stream) === 0) {\r\n                ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\r\n            }\r\n            else {\r\n                if (controller._pendingPullIntos.length > 0) {\r\n                    ReadableByteStreamControllerShiftPendingPullInto(controller);\r\n                }\r\n                const transferredView = new Uint8Array(transferredBuffer, byteOffset, byteLength);\r\n                ReadableStreamFulfillReadRequest(stream, transferredView, false);\r\n            }\r\n        }\r\n        else if (ReadableStreamHasBYOBReader(stream)) {\r\n            // TODO: Ideally in this branch detaching should happen only if the buffer is not consumed fully.\r\n            ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\r\n            ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\r\n        }\r\n        else {\r\n            ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\r\n        }\r\n        ReadableByteStreamControllerCallPullIfNeeded(controller);\r\n    }\r\n    function ReadableByteStreamControllerError(controller, e) {\r\n        const stream = controller._controlledReadableByteStream;\r\n        if (stream._state !== 'readable') {\r\n            return;\r\n        }\r\n        ReadableByteStreamControllerClearPendingPullIntos(controller);\r\n        ResetQueue(controller);\r\n        ReadableByteStreamControllerClearAlgorithms(controller);\r\n        ReadableStreamError(stream, e);\r\n    }\r\n    function ReadableByteStreamControllerFillReadRequestFromQueue(controller, readRequest) {\r\n        const entry = controller._queue.shift();\r\n        controller._queueTotalSize -= entry.byteLength;\r\n        ReadableByteStreamControllerHandleQueueDrain(controller);\r\n        const view = new Uint8Array(entry.buffer, entry.byteOffset, entry.byteLength);\r\n        readRequest._chunkSteps(view);\r\n    }\r\n    function ReadableByteStreamControllerGetBYOBRequest(controller) {\r\n        if (controller._byobRequest === null && controller._pendingPullIntos.length > 0) {\r\n            const firstDescriptor = controller._pendingPullIntos.peek();\r\n            const view = new Uint8Array(firstDescriptor.buffer, firstDescriptor.byteOffset + firstDescriptor.bytesFilled, firstDescriptor.byteLength - firstDescriptor.bytesFilled);\r\n            const byobRequest = Object.create(ReadableStreamBYOBRequest.prototype);\r\n            SetUpReadableStreamBYOBRequest(byobRequest, controller, view);\r\n            controller._byobRequest = byobRequest;\r\n        }\r\n        return controller._byobRequest;\r\n    }\r\n    function ReadableByteStreamControllerGetDesiredSize(controller) {\r\n        const state = controller._controlledReadableByteStream._state;\r\n        if (state === 'errored') {\r\n            return null;\r\n        }\r\n        if (state === 'closed') {\r\n            return 0;\r\n        }\r\n        return controller._strategyHWM - controller._queueTotalSize;\r\n    }\r\n    function ReadableByteStreamControllerRespond(controller, bytesWritten) {\r\n        const firstDescriptor = controller._pendingPullIntos.peek();\r\n        const state = controller._controlledReadableByteStream._state;\r\n        if (state === 'closed') {\r\n            if (bytesWritten !== 0) {\r\n                throw new TypeError('bytesWritten must be 0 when calling respond() on a closed stream');\r\n            }\r\n        }\r\n        else {\r\n            if (bytesWritten === 0) {\r\n                throw new TypeError('bytesWritten must be greater than 0 when calling respond() on a readable stream');\r\n            }\r\n            if (firstDescriptor.bytesFilled + bytesWritten > firstDescriptor.byteLength) {\r\n                throw new RangeError('bytesWritten out of range');\r\n            }\r\n        }\r\n        firstDescriptor.buffer = TransferArrayBuffer(firstDescriptor.buffer);\r\n        ReadableByteStreamControllerRespondInternal(controller, bytesWritten);\r\n    }\r\n    function ReadableByteStreamControllerRespondWithNewView(controller, view) {\r\n        const firstDescriptor = controller._pendingPullIntos.peek();\r\n        const state = controller._controlledReadableByteStream._state;\r\n        if (state === 'closed') {\r\n            if (view.byteLength !== 0) {\r\n                throw new TypeError('The view\\'s length must be 0 when calling respondWithNewView() on a closed stream');\r\n            }\r\n        }\r\n        else {\r\n            if (view.byteLength === 0) {\r\n                throw new TypeError('The view\\'s length must be greater than 0 when calling respondWithNewView() on a readable stream');\r\n            }\r\n        }\r\n        if (firstDescriptor.byteOffset + firstDescriptor.bytesFilled !== view.byteOffset) {\r\n            throw new RangeError('The region specified by view does not match byobRequest');\r\n        }\r\n        if (firstDescriptor.bufferByteLength !== view.buffer.byteLength) {\r\n            throw new RangeError('The buffer of view has different capacity than byobRequest');\r\n        }\r\n        if (firstDescriptor.bytesFilled + view.byteLength > firstDescriptor.byteLength) {\r\n            throw new RangeError('The region specified by view is larger than byobRequest');\r\n        }\r\n        const viewByteLength = view.byteLength;\r\n        firstDescriptor.buffer = TransferArrayBuffer(view.buffer);\r\n        ReadableByteStreamControllerRespondInternal(controller, viewByteLength);\r\n    }\r\n    function SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize) {\r\n        controller._controlledReadableByteStream = stream;\r\n        controller._pullAgain = false;\r\n        controller._pulling = false;\r\n        controller._byobRequest = null;\r\n        // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.\r\n        controller._queue = controller._queueTotalSize = undefined;\r\n        ResetQueue(controller);\r\n        controller._closeRequested = false;\r\n        controller._started = false;\r\n        controller._strategyHWM = highWaterMark;\r\n        controller._pullAlgorithm = pullAlgorithm;\r\n        controller._cancelAlgorithm = cancelAlgorithm;\r\n        controller._autoAllocateChunkSize = autoAllocateChunkSize;\r\n        controller._pendingPullIntos = new SimpleQueue();\r\n        stream._readableStreamController = controller;\r\n        const startResult = startAlgorithm();\r\n        uponPromise(promiseResolvedWith(startResult), () => {\r\n            controller._started = true;\r\n            ReadableByteStreamControllerCallPullIfNeeded(controller);\r\n            return null;\r\n        }, r => {\r\n            ReadableByteStreamControllerError(controller, r);\r\n            return null;\r\n        });\r\n    }\r\n    function SetUpReadableByteStreamControllerFromUnderlyingSource(stream, underlyingByteSource, highWaterMark) {\r\n        const controller = Object.create(ReadableByteStreamController.prototype);\r\n        let startAlgorithm;\r\n        let pullAlgorithm;\r\n        let cancelAlgorithm;\r\n        if (underlyingByteSource.start !== undefined) {\r\n            startAlgorithm = () => underlyingByteSource.start(controller);\r\n        }\r\n        else {\r\n            startAlgorithm = () => undefined;\r\n        }\r\n        if (underlyingByteSource.pull !== undefined) {\r\n            pullAlgorithm = () => underlyingByteSource.pull(controller);\r\n        }\r\n        else {\r\n            pullAlgorithm = () => promiseResolvedWith(undefined);\r\n        }\r\n        if (underlyingByteSource.cancel !== undefined) {\r\n            cancelAlgorithm = reason => underlyingByteSource.cancel(reason);\r\n        }\r\n        else {\r\n            cancelAlgorithm = () => promiseResolvedWith(undefined);\r\n        }\r\n        const autoAllocateChunkSize = underlyingByteSource.autoAllocateChunkSize;\r\n        if (autoAllocateChunkSize === 0) {\r\n            throw new TypeError('autoAllocateChunkSize must be greater than 0');\r\n        }\r\n        SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize);\r\n    }\r\n    function SetUpReadableStreamBYOBRequest(request, controller, view) {\r\n        request._associatedReadableByteStreamController = controller;\r\n        request._view = view;\r\n    }\r\n    // Helper functions for the ReadableStreamBYOBRequest.\r\n    function byobRequestBrandCheckException(name) {\r\n        return new TypeError(`ReadableStreamBYOBRequest.prototype.${name} can only be used on a ReadableStreamBYOBRequest`);\r\n    }\r\n    // Helper functions for the ReadableByteStreamController.\r\n    function byteStreamControllerBrandCheckException(name) {\r\n        return new TypeError(`ReadableByteStreamController.prototype.${name} can only be used on a ReadableByteStreamController`);\r\n    }\r\n\r\n    function convertReaderOptions(options, context) {\r\n        assertDictionary(options, context);\r\n        const mode = options === null || options === void 0 ? void 0 : options.mode;\r\n        return {\r\n            mode: mode === undefined ? undefined : convertReadableStreamReaderMode(mode, `${context} has member 'mode' that`)\r\n        };\r\n    }\r\n    function convertReadableStreamReaderMode(mode, context) {\r\n        mode = `${mode}`;\r\n        if (mode !== 'byob') {\r\n            throw new TypeError(`${context} '${mode}' is not a valid enumeration value for ReadableStreamReaderMode`);\r\n        }\r\n        return mode;\r\n    }\r\n    function convertByobReadOptions(options, context) {\r\n        var _a;\r\n        assertDictionary(options, context);\r\n        const min = (_a = options === null || options === void 0 ? void 0 : options.min) !== null && _a !== void 0 ? _a : 1;\r\n        return {\r\n            min: convertUnsignedLongLongWithEnforceRange(min, `${context} has member 'min' that`)\r\n        };\r\n    }\r\n\r\n    // Abstract operations for the ReadableStream.\r\n    function AcquireReadableStreamBYOBReader(stream) {\r\n        return new ReadableStreamBYOBReader(stream);\r\n    }\r\n    // ReadableStream API exposed for controllers.\r\n    function ReadableStreamAddReadIntoRequest(stream, readIntoRequest) {\r\n        stream._reader._readIntoRequests.push(readIntoRequest);\r\n    }\r\n    function ReadableStreamFulfillReadIntoRequest(stream, chunk, done) {\r\n        const reader = stream._reader;\r\n        const readIntoRequest = reader._readIntoRequests.shift();\r\n        if (done) {\r\n            readIntoRequest._closeSteps(chunk);\r\n        }\r\n        else {\r\n            readIntoRequest._chunkSteps(chunk);\r\n        }\r\n    }\r\n    function ReadableStreamGetNumReadIntoRequests(stream) {\r\n        return stream._reader._readIntoRequests.length;\r\n    }\r\n    function ReadableStreamHasBYOBReader(stream) {\r\n        const reader = stream._reader;\r\n        if (reader === undefined) {\r\n            return false;\r\n        }\r\n        if (!IsReadableStreamBYOBReader(reader)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * A BYOB reader vended by a {@link ReadableStream}.\r\n     *\r\n     * @public\r\n     */\r\n    class ReadableStreamBYOBReader {\r\n        constructor(stream) {\r\n            assertRequiredArgument(stream, 1, 'ReadableStreamBYOBReader');\r\n            assertReadableStream(stream, 'First parameter');\r\n            if (IsReadableStreamLocked(stream)) {\r\n                throw new TypeError('This stream has already been locked for exclusive reading by another reader');\r\n            }\r\n            if (!IsReadableByteStreamController(stream._readableStreamController)) {\r\n                throw new TypeError('Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte ' +\r\n                    'source');\r\n            }\r\n            ReadableStreamReaderGenericInitialize(this, stream);\r\n            this._readIntoRequests = new SimpleQueue();\r\n        }\r\n        /**\r\n         * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or\r\n         * the reader's lock is released before the stream finishes closing.\r\n         */\r\n        get closed() {\r\n            if (!IsReadableStreamBYOBReader(this)) {\r\n                return promiseRejectedWith(byobReaderBrandCheckException('closed'));\r\n            }\r\n            return this._closedPromise;\r\n        }\r\n        /**\r\n         * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.\r\n         */\r\n        cancel(reason = undefined) {\r\n            if (!IsReadableStreamBYOBReader(this)) {\r\n                return promiseRejectedWith(byobReaderBrandCheckException('cancel'));\r\n            }\r\n            if (this._ownerReadableStream === undefined) {\r\n                return promiseRejectedWith(readerLockException('cancel'));\r\n            }\r\n            return ReadableStreamReaderGenericCancel(this, reason);\r\n        }\r\n        read(view, rawOptions = {}) {\r\n            if (!IsReadableStreamBYOBReader(this)) {\r\n                return promiseRejectedWith(byobReaderBrandCheckException('read'));\r\n            }\r\n            if (!ArrayBuffer.isView(view)) {\r\n                return promiseRejectedWith(new TypeError('view must be an array buffer view'));\r\n            }\r\n            if (view.byteLength === 0) {\r\n                return promiseRejectedWith(new TypeError('view must have non-zero byteLength'));\r\n            }\r\n            if (view.buffer.byteLength === 0) {\r\n                return promiseRejectedWith(new TypeError(`view's buffer must have non-zero byteLength`));\r\n            }\r\n            if (IsDetachedBuffer(view.buffer)) {\r\n                return promiseRejectedWith(new TypeError('view\\'s buffer has been detached'));\r\n            }\r\n            let options;\r\n            try {\r\n                options = convertByobReadOptions(rawOptions, 'options');\r\n            }\r\n            catch (e) {\r\n                return promiseRejectedWith(e);\r\n            }\r\n            const min = options.min;\r\n            if (min === 0) {\r\n                return promiseRejectedWith(new TypeError('options.min must be greater than 0'));\r\n            }\r\n            if (!isDataView(view)) {\r\n                if (min > view.length) {\r\n                    return promiseRejectedWith(new RangeError('options.min must be less than or equal to view\\'s length'));\r\n                }\r\n            }\r\n            else if (min > view.byteLength) {\r\n                return promiseRejectedWith(new RangeError('options.min must be less than or equal to view\\'s byteLength'));\r\n            }\r\n            if (this._ownerReadableStream === undefined) {\r\n                return promiseRejectedWith(readerLockException('read from'));\r\n            }\r\n            let resolvePromise;\r\n            let rejectPromise;\r\n            const promise = newPromise((resolve, reject) => {\r\n                resolvePromise = resolve;\r\n                rejectPromise = reject;\r\n            });\r\n            const readIntoRequest = {\r\n                _chunkSteps: chunk => resolvePromise({ value: chunk, done: false }),\r\n                _closeSteps: chunk => resolvePromise({ value: chunk, done: true }),\r\n                _errorSteps: e => rejectPromise(e)\r\n            };\r\n            ReadableStreamBYOBReaderRead(this, view, min, readIntoRequest);\r\n            return promise;\r\n        }\r\n        /**\r\n         * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.\r\n         * If the associated stream is errored when the lock is released, the reader will appear errored in the same way\r\n         * from now on; otherwise, the reader will appear closed.\r\n         *\r\n         * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by\r\n         * the reader's {@link ReadableStreamBYOBReader.read | read()} method has not yet been settled. Attempting to\r\n         * do so will throw a `TypeError` and leave the reader locked to the stream.\r\n         */\r\n        releaseLock() {\r\n            if (!IsReadableStreamBYOBReader(this)) {\r\n                throw byobReaderBrandCheckException('releaseLock');\r\n            }\r\n            if (this._ownerReadableStream === undefined) {\r\n                return;\r\n            }\r\n            ReadableStreamBYOBReaderRelease(this);\r\n        }\r\n    }\r\n    Object.defineProperties(ReadableStreamBYOBReader.prototype, {\r\n        cancel: { enumerable: true },\r\n        read: { enumerable: true },\r\n        releaseLock: { enumerable: true },\r\n        closed: { enumerable: true }\r\n    });\r\n    setFunctionName(ReadableStreamBYOBReader.prototype.cancel, 'cancel');\r\n    setFunctionName(ReadableStreamBYOBReader.prototype.read, 'read');\r\n    setFunctionName(ReadableStreamBYOBReader.prototype.releaseLock, 'releaseLock');\r\n    if (typeof Symbol.toStringTag === 'symbol') {\r\n        Object.defineProperty(ReadableStreamBYOBReader.prototype, Symbol.toStringTag, {\r\n            value: 'ReadableStreamBYOBReader',\r\n            configurable: true\r\n        });\r\n    }\r\n    // Abstract operations for the readers.\r\n    function IsReadableStreamBYOBReader(x) {\r\n        if (!typeIsObject(x)) {\r\n            return false;\r\n        }\r\n        if (!Object.prototype.hasOwnProperty.call(x, '_readIntoRequests')) {\r\n            return false;\r\n        }\r\n        return x instanceof ReadableStreamBYOBReader;\r\n    }\r\n    function ReadableStreamBYOBReaderRead(reader, view, min, readIntoRequest) {\r\n        const stream = reader._ownerReadableStream;\r\n        stream._disturbed = true;\r\n        if (stream._state === 'errored') {\r\n            readIntoRequest._errorSteps(stream._storedError);\r\n        }\r\n        else {\r\n            ReadableByteStreamControllerPullInto(stream._readableStreamController, view, min, readIntoRequest);\r\n        }\r\n    }\r\n    function ReadableStreamBYOBReaderRelease(reader) {\r\n        ReadableStreamReaderGenericRelease(reader);\r\n        const e = new TypeError('Reader was released');\r\n        ReadableStreamBYOBReaderErrorReadIntoRequests(reader, e);\r\n    }\r\n    function ReadableStreamBYOBReaderErrorReadIntoRequests(reader, e) {\r\n        const readIntoRequests = reader._readIntoRequests;\r\n        reader._readIntoRequests = new SimpleQueue();\r\n        readIntoRequests.forEach(readIntoRequest => {\r\n            readIntoRequest._errorSteps(e);\r\n        });\r\n    }\r\n    // Helper functions for the ReadableStreamBYOBReader.\r\n    function byobReaderBrandCheckException(name) {\r\n        return new TypeError(`ReadableStreamBYOBReader.prototype.${name} can only be used on a ReadableStreamBYOBReader`);\r\n    }\r\n\r\n    function ExtractHighWaterMark(strategy, defaultHWM) {\r\n        const { highWaterMark } = strategy;\r\n        if (highWaterMark === undefined) {\r\n            return defaultHWM;\r\n        }\r\n        if (NumberIsNaN(highWaterMark) || highWaterMark < 0) {\r\n            throw new RangeError('Invalid highWaterMark');\r\n        }\r\n        return highWaterMark;\r\n    }\r\n    function ExtractSizeAlgorithm(strategy) {\r\n        const { size } = strategy;\r\n        if (!size) {\r\n            return () => 1;\r\n        }\r\n        return size;\r\n    }\r\n\r\n    function convertQueuingStrategy(init, context) {\r\n        assertDictionary(init, context);\r\n        const highWaterMark = init === null || init === void 0 ? void 0 : init.highWaterMark;\r\n        const size = init === null || init === void 0 ? void 0 : init.size;\r\n        return {\r\n            highWaterMark: highWaterMark === undefined ? undefined : convertUnrestrictedDouble(highWaterMark),\r\n            size: size === undefined ? undefined : convertQueuingStrategySize(size, `${context} has member 'size' that`)\r\n        };\r\n    }\r\n    function convertQueuingStrategySize(fn, context) {\r\n        assertFunction(fn, context);\r\n        return chunk => convertUnrestrictedDouble(fn(chunk));\r\n    }\r\n\r\n    function convertUnderlyingSink(original, context) {\r\n        assertDictionary(original, context);\r\n        const abort = original === null || original === void 0 ? void 0 : original.abort;\r\n        const close = original === null || original === void 0 ? void 0 : original.close;\r\n        const start = original === null || original === void 0 ? void 0 : original.start;\r\n        const type = original === null || original === void 0 ? void 0 : original.type;\r\n        const write = original === null || original === void 0 ? void 0 : original.write;\r\n        return {\r\n            abort: abort === undefined ?\r\n                undefined :\r\n                convertUnderlyingSinkAbortCallback(abort, original, `${context} has member 'abort' that`),\r\n            close: close === undefined ?\r\n                undefined :\r\n                convertUnderlyingSinkCloseCallback(close, original, `${context} has member 'close' that`),\r\n            start: start === undefined ?\r\n                undefined :\r\n                convertUnderlyingSinkStartCallback(start, original, `${context} has member 'start' that`),\r\n            write: write === undefined ?\r\n                undefined :\r\n                convertUnderlyingSinkWriteCallback(write, original, `${context} has member 'write' that`),\r\n            type\r\n        };\r\n    }\r\n    function convertUnderlyingSinkAbortCallback(fn, original, context) {\r\n        assertFunction(fn, context);\r\n        return (reason) => promiseCall(fn, original, [reason]);\r\n    }\r\n    function convertUnderlyingSinkCloseCallback(fn, original, context) {\r\n        assertFunction(fn, context);\r\n        return () => promiseCall(fn, original, []);\r\n    }\r\n    function convertUnderlyingSinkStartCallback(fn, original, context) {\r\n        assertFunction(fn, context);\r\n        return (controller) => reflectCall(fn, original, [controller]);\r\n    }\r\n    function convertUnderlyingSinkWriteCallback(fn, original, context) {\r\n        assertFunction(fn, context);\r\n        return (chunk, controller) => promiseCall(fn, original, [chunk, controller]);\r\n    }\r\n\r\n    function assertWritableStream(x, context) {\r\n        if (!IsWritableStream(x)) {\r\n            throw new TypeError(`${context} is not a WritableStream.`);\r\n        }\r\n    }\r\n\r\n    function isAbortSignal(value) {\r\n        if (typeof value !== 'object' || value === null) {\r\n            return false;\r\n        }\r\n        try {\r\n            return typeof value.aborted === 'boolean';\r\n        }\r\n        catch (_a) {\r\n            // AbortSignal.prototype.aborted throws if its brand check fails\r\n            return false;\r\n        }\r\n    }\r\n    const supportsAbortController = typeof AbortController === 'function';\r\n    /**\r\n     * Construct a new AbortController, if supported by the platform.\r\n     *\r\n     * @internal\r\n     */\r\n    function createAbortController() {\r\n        if (supportsAbortController) {\r\n            return new AbortController();\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * A writable stream represents a destination for data, into which you can write.\r\n     *\r\n     * @public\r\n     */\r\n    class WritableStream {\r\n        constructor(rawUnderlyingSink = {}, rawStrategy = {}) {\r\n            if (rawUnderlyingSink === undefined) {\r\n                rawUnderlyingSink = null;\r\n            }\r\n            else {\r\n                assertObject(rawUnderlyingSink, 'First parameter');\r\n            }\r\n            const strategy = convertQueuingStrategy(rawStrategy, 'Second parameter');\r\n            const underlyingSink = convertUnderlyingSink(rawUnderlyingSink, 'First parameter');\r\n            InitializeWritableStream(this);\r\n            const type = underlyingSink.type;\r\n            if (type !== undefined) {\r\n                throw new RangeError('Invalid type is specified');\r\n            }\r\n            const sizeAlgorithm = ExtractSizeAlgorithm(strategy);\r\n            const highWaterMark = ExtractHighWaterMark(strategy, 1);\r\n            SetUpWritableStreamDefaultControllerFromUnderlyingSink(this, underlyingSink, highWaterMark, sizeAlgorithm);\r\n        }\r\n        /**\r\n         * Returns whether or not the writable stream is locked to a writer.\r\n         */\r\n        get locked() {\r\n            if (!IsWritableStream(this)) {\r\n                throw streamBrandCheckException$2('locked');\r\n            }\r\n            return IsWritableStreamLocked(this);\r\n        }\r\n        /**\r\n         * Aborts the stream, signaling that the producer can no longer successfully write to the stream and it is to be\r\n         * immediately moved to an errored state, with any queued-up writes discarded. This will also execute any abort\r\n         * mechanism of the underlying sink.\r\n         *\r\n         * The returned promise will fulfill if the stream shuts down successfully, or reject if the underlying sink signaled\r\n         * that there was an error doing so. Additionally, it will reject with a `TypeError` (without attempting to cancel\r\n         * the stream) if the stream is currently locked.\r\n         */\r\n        abort(reason = undefined) {\r\n            if (!IsWritableStream(this)) {\r\n                return promiseRejectedWith(streamBrandCheckException$2('abort'));\r\n            }\r\n            if (IsWritableStreamLocked(this)) {\r\n                return promiseRejectedWith(new TypeError('Cannot abort a stream that already has a writer'));\r\n            }\r\n            return WritableStreamAbort(this, reason);\r\n        }\r\n        /**\r\n         * Closes the stream. The underlying sink will finish processing any previously-written chunks, before invoking its\r\n         * close behavior. During this time any further attempts to write will fail (without erroring the stream).\r\n         *\r\n         * The method returns a promise that will fulfill if all remaining chunks are successfully written and the stream\r\n         * successfully closes, or rejects if an error is encountered during this process. Additionally, it will reject with\r\n         * a `TypeError` (without attempting to cancel the stream) if the stream is currently locked.\r\n         */\r\n        close() {\r\n            if (!IsWritableStream(this)) {\r\n                return promiseRejectedWith(streamBrandCheckException$2('close'));\r\n            }\r\n            if (IsWritableStreamLocked(this)) {\r\n                return promiseRejectedWith(new TypeError('Cannot close a stream that already has a writer'));\r\n            }\r\n            if (WritableStreamCloseQueuedOrInFlight(this)) {\r\n                return promiseRejectedWith(new TypeError('Cannot close an already-closing stream'));\r\n            }\r\n            return WritableStreamClose(this);\r\n        }\r\n        /**\r\n         * Creates a {@link WritableStreamDefaultWriter | writer} and locks the stream to the new writer. While the stream\r\n         * is locked, no other writer can be acquired until this one is released.\r\n         *\r\n         * This functionality is especially useful for creating abstractions that desire the ability to write to a stream\r\n         * without interruption or interleaving. By getting a writer for the stream, you can ensure nobody else can write at\r\n         * the same time, which would cause the resulting written data to be unpredictable and probably useless.\r\n         */\r\n        getWriter() {\r\n            if (!IsWritableStream(this)) {\r\n                throw streamBrandCheckException$2('getWriter');\r\n            }\r\n            return AcquireWritableStreamDefaultWriter(this);\r\n        }\r\n    }\r\n    Object.defineProperties(WritableStream.prototype, {\r\n        abort: { enumerable: true },\r\n        close: { enumerable: true },\r\n        getWriter: { enumerable: true },\r\n        locked: { enumerable: true }\r\n    });\r\n    setFunctionName(WritableStream.prototype.abort, 'abort');\r\n    setFunctionName(WritableStream.prototype.close, 'close');\r\n    setFunctionName(WritableStream.prototype.getWriter, 'getWriter');\r\n    if (typeof Symbol.toStringTag === 'symbol') {\r\n        Object.defineProperty(WritableStream.prototype, Symbol.toStringTag, {\r\n            value: 'WritableStream',\r\n            configurable: true\r\n        });\r\n    }\r\n    // Abstract operations for the WritableStream.\r\n    function AcquireWritableStreamDefaultWriter(stream) {\r\n        return new WritableStreamDefaultWriter(stream);\r\n    }\r\n    // Throws if and only if startAlgorithm throws.\r\n    function CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark = 1, sizeAlgorithm = () => 1) {\r\n        const stream = Object.create(WritableStream.prototype);\r\n        InitializeWritableStream(stream);\r\n        const controller = Object.create(WritableStreamDefaultController.prototype);\r\n        SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm);\r\n        return stream;\r\n    }\r\n    function InitializeWritableStream(stream) {\r\n        stream._state = 'writable';\r\n        // The error that will be reported by new method calls once the state becomes errored. Only set when [[state]] is\r\n        // 'erroring' or 'errored'. May be set to an undefined value.\r\n        stream._storedError = undefined;\r\n        stream._writer = undefined;\r\n        // Initialize to undefined first because the constructor of the controller checks this\r\n        // variable to validate the caller.\r\n        stream._writableStreamController = undefined;\r\n        // This queue is placed here instead of the writer class in order to allow for passing a writer to the next data\r\n        // producer without waiting for the queued writes to finish.\r\n        stream._writeRequests = new SimpleQueue();\r\n        // Write requests are removed from _writeRequests when write() is called on the underlying sink. This prevents\r\n        // them from being erroneously rejected on error. If a write() call is in-flight, the request is stored here.\r\n        stream._inFlightWriteRequest = undefined;\r\n        // The promise that was returned from writer.close(). Stored here because it may be fulfilled after the writer\r\n        // has been detached.\r\n        stream._closeRequest = undefined;\r\n        // Close request is removed from _closeRequest when close() is called on the underlying sink. This prevents it\r\n        // from being erroneously rejected on error. If a close() call is in-flight, the request is stored here.\r\n        stream._inFlightCloseRequest = undefined;\r\n        // The promise that was returned from writer.abort(). This may also be fulfilled after the writer has detached.\r\n        stream._pendingAbortRequest = undefined;\r\n        // The backpressure signal set by the controller.\r\n        stream._backpressure = false;\r\n    }\r\n    function IsWritableStream(x) {\r\n        if (!typeIsObject(x)) {\r\n            return false;\r\n        }\r\n        if (!Object.prototype.hasOwnProperty.call(x, '_writableStreamController')) {\r\n            return false;\r\n        }\r\n        return x instanceof WritableStream;\r\n    }\r\n    function IsWritableStreamLocked(stream) {\r\n        if (stream._writer === undefined) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    function WritableStreamAbort(stream, reason) {\r\n        var _a;\r\n        if (stream._state === 'closed' || stream._state === 'errored') {\r\n            return promiseResolvedWith(undefined);\r\n        }\r\n        stream._writableStreamController._abortReason = reason;\r\n        (_a = stream._writableStreamController._abortController) === null || _a === void 0 ? void 0 : _a.abort(reason);\r\n        // TypeScript narrows the type of `stream._state` down to 'writable' | 'erroring',\r\n        // but it doesn't know that signaling abort runs author code that might have changed the state.\r\n        // Widen the type again by casting to WritableStreamState.\r\n        const state = stream._state;\r\n        if (state === 'closed' || state === 'errored') {\r\n            return promiseResolvedWith(undefined);\r\n        }\r\n        if (stream._pendingAbortRequest !== undefined) {\r\n            return stream._pendingAbortRequest._promise;\r\n        }\r\n        let wasAlreadyErroring = false;\r\n        if (state === 'erroring') {\r\n            wasAlreadyErroring = true;\r\n            // reason will not be used, so don't keep a reference to it.\r\n            reason = undefined;\r\n        }\r\n        const promise = newPromise((resolve, reject) => {\r\n            stream._pendingAbortRequest = {\r\n                _promise: undefined,\r\n                _resolve: resolve,\r\n                _reject: reject,\r\n                _reason: reason,\r\n                _wasAlreadyErroring: wasAlreadyErroring\r\n            };\r\n        });\r\n        stream._pendingAbortRequest._promise = promise;\r\n        if (!wasAlreadyErroring) {\r\n            WritableStreamStartErroring(stream, reason);\r\n        }\r\n        return promise;\r\n    }\r\n    function WritableStreamClose(stream) {\r\n        const state = stream._state;\r\n        if (state === 'closed' || state === 'errored') {\r\n            return promiseRejectedWith(new TypeError(`The stream (in ${state} state) is not in the writable state and cannot be closed`));\r\n        }\r\n        const promise = newPromise((resolve, reject) => {\r\n            const closeRequest = {\r\n                _resolve: resolve,\r\n                _reject: reject\r\n            };\r\n            stream._closeRequest = closeRequest;\r\n        });\r\n        const writer = stream._writer;\r\n        if (writer !== undefined && stream._backpressure && state === 'writable') {\r\n            defaultWriterReadyPromiseResolve(writer);\r\n        }\r\n        WritableStreamDefaultControllerClose(stream._writableStreamController);\r\n        return promise;\r\n    }\r\n    // WritableStream API exposed for controllers.\r\n    function WritableStreamAddWriteRequest(stream) {\r\n        const promise = newPromise((resolve, reject) => {\r\n            const writeRequest = {\r\n                _resolve: resolve,\r\n                _reject: reject\r\n            };\r\n            stream._writeRequests.push(writeRequest);\r\n        });\r\n        return promise;\r\n    }\r\n    function WritableStreamDealWithRejection(stream, error) {\r\n        const state = stream._state;\r\n        if (state === 'writable') {\r\n            WritableStreamStartErroring(stream, error);\r\n            return;\r\n        }\r\n        WritableStreamFinishErroring(stream);\r\n    }\r\n    function WritableStreamStartErroring(stream, reason) {\r\n        const controller = stream._writableStreamController;\r\n        stream._state = 'erroring';\r\n        stream._storedError = reason;\r\n        const writer = stream._writer;\r\n        if (writer !== undefined) {\r\n            WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, reason);\r\n        }\r\n        if (!WritableStreamHasOperationMarkedInFlight(stream) && controller._started) {\r\n            WritableStreamFinishErroring(stream);\r\n        }\r\n    }\r\n    function WritableStreamFinishErroring(stream) {\r\n        stream._state = 'errored';\r\n        stream._writableStreamController[ErrorSteps]();\r\n        const storedError = stream._storedError;\r\n        stream._writeRequests.forEach(writeRequest => {\r\n            writeRequest._reject(storedError);\r\n        });\r\n        stream._writeRequests = new SimpleQueue();\r\n        if (stream._pendingAbortRequest === undefined) {\r\n            WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\r\n            return;\r\n        }\r\n        const abortRequest = stream._pendingAbortRequest;\r\n        stream._pendingAbortRequest = undefined;\r\n        if (abortRequest._wasAlreadyErroring) {\r\n            abortRequest._reject(storedError);\r\n            WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\r\n            return;\r\n        }\r\n        const promise = stream._writableStreamController[AbortSteps](abortRequest._reason);\r\n        uponPromise(promise, () => {\r\n            abortRequest._resolve();\r\n            WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\r\n            return null;\r\n        }, (reason) => {\r\n            abortRequest._reject(reason);\r\n            WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\r\n            return null;\r\n        });\r\n    }\r\n    function WritableStreamFinishInFlightWrite(stream) {\r\n        stream._inFlightWriteRequest._resolve(undefined);\r\n        stream._inFlightWriteRequest = undefined;\r\n    }\r\n    function WritableStreamFinishInFlightWriteWithError(stream, error) {\r\n        stream._inFlightWriteRequest._reject(error);\r\n        stream._inFlightWriteRequest = undefined;\r\n        WritableStreamDealWithRejection(stream, error);\r\n    }\r\n    function WritableStreamFinishInFlightClose(stream) {\r\n        stream._inFlightCloseRequest._resolve(undefined);\r\n        stream._inFlightCloseRequest = undefined;\r\n        const state = stream._state;\r\n        if (state === 'erroring') {\r\n            // The error was too late to do anything, so it is ignored.\r\n            stream._storedError = undefined;\r\n            if (stream._pendingAbortRequest !== undefined) {\r\n                stream._pendingAbortRequest._resolve();\r\n                stream._pendingAbortRequest = undefined;\r\n            }\r\n        }\r\n        stream._state = 'closed';\r\n        const writer = stream._writer;\r\n        if (writer !== undefined) {\r\n            defaultWriterClosedPromiseResolve(writer);\r\n        }\r\n    }\r\n    function WritableStreamFinishInFlightCloseWithError(stream, error) {\r\n        stream._inFlightCloseRequest._reject(error);\r\n        stream._inFlightCloseRequest = undefined;\r\n        // Never execute sink abort() after sink close().\r\n        if (stream._pendingAbortRequest !== undefined) {\r\n            stream._pendingAbortRequest._reject(error);\r\n            stream._pendingAbortRequest = undefined;\r\n        }\r\n        WritableStreamDealWithRejection(stream, error);\r\n    }\r\n    // TODO(ricea): Fix alphabetical order.\r\n    function WritableStreamCloseQueuedOrInFlight(stream) {\r\n        if (stream._closeRequest === undefined && stream._inFlightCloseRequest === undefined) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    function WritableStreamHasOperationMarkedInFlight(stream) {\r\n        if (stream._inFlightWriteRequest === undefined && stream._inFlightCloseRequest === undefined) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    function WritableStreamMarkCloseRequestInFlight(stream) {\r\n        stream._inFlightCloseRequest = stream._closeRequest;\r\n        stream._closeRequest = undefined;\r\n    }\r\n    function WritableStreamMarkFirstWriteRequestInFlight(stream) {\r\n        stream._inFlightWriteRequest = stream._writeRequests.shift();\r\n    }\r\n    function WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream) {\r\n        if (stream._closeRequest !== undefined) {\r\n            stream._closeRequest._reject(stream._storedError);\r\n            stream._closeRequest = undefined;\r\n        }\r\n        const writer = stream._writer;\r\n        if (writer !== undefined) {\r\n            defaultWriterClosedPromiseReject(writer, stream._storedError);\r\n        }\r\n    }\r\n    function WritableStreamUpdateBackpressure(stream, backpressure) {\r\n        const writer = stream._writer;\r\n        if (writer !== undefined && backpressure !== stream._backpressure) {\r\n            if (backpressure) {\r\n                defaultWriterReadyPromiseReset(writer);\r\n            }\r\n            else {\r\n                defaultWriterReadyPromiseResolve(writer);\r\n            }\r\n        }\r\n        stream._backpressure = backpressure;\r\n    }\r\n    /**\r\n     * A default writer vended by a {@link WritableStream}.\r\n     *\r\n     * @public\r\n     */\r\n    class WritableStreamDefaultWriter {\r\n        constructor(stream) {\r\n            assertRequiredArgument(stream, 1, 'WritableStreamDefaultWriter');\r\n            assertWritableStream(stream, 'First parameter');\r\n            if (IsWritableStreamLocked(stream)) {\r\n                throw new TypeError('This stream has already been locked for exclusive writing by another writer');\r\n            }\r\n            this._ownerWritableStream = stream;\r\n            stream._writer = this;\r\n            const state = stream._state;\r\n            if (state === 'writable') {\r\n                if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._backpressure) {\r\n                    defaultWriterReadyPromiseInitialize(this);\r\n                }\r\n                else {\r\n                    defaultWriterReadyPromiseInitializeAsResolved(this);\r\n                }\r\n                defaultWriterClosedPromiseInitialize(this);\r\n            }\r\n            else if (state === 'erroring') {\r\n                defaultWriterReadyPromiseInitializeAsRejected(this, stream._storedError);\r\n                defaultWriterClosedPromiseInitialize(this);\r\n            }\r\n            else if (state === 'closed') {\r\n                defaultWriterReadyPromiseInitializeAsResolved(this);\r\n                defaultWriterClosedPromiseInitializeAsResolved(this);\r\n            }\r\n            else {\r\n                const storedError = stream._storedError;\r\n                defaultWriterReadyPromiseInitializeAsRejected(this, storedError);\r\n                defaultWriterClosedPromiseInitializeAsRejected(this, storedError);\r\n            }\r\n        }\r\n        /**\r\n         * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or\r\n         * the writer’s lock is released before the stream finishes closing.\r\n         */\r\n        get closed() {\r\n            if (!IsWritableStreamDefaultWriter(this)) {\r\n                return promiseRejectedWith(defaultWriterBrandCheckException('closed'));\r\n            }\r\n            return this._closedPromise;\r\n        }\r\n        /**\r\n         * Returns the desired size to fill the stream’s internal queue. It can be negative, if the queue is over-full.\r\n         * A producer can use this information to determine the right amount of data to write.\r\n         *\r\n         * It will be `null` if the stream cannot be successfully written to (due to either being errored, or having an abort\r\n         * queued up). It will return zero if the stream is closed. And the getter will throw an exception if invoked when\r\n         * the writer’s lock is released.\r\n         */\r\n        get desiredSize() {\r\n            if (!IsWritableStreamDefaultWriter(this)) {\r\n                throw defaultWriterBrandCheckException('desiredSize');\r\n            }\r\n            if (this._ownerWritableStream === undefined) {\r\n                throw defaultWriterLockException('desiredSize');\r\n            }\r\n            return WritableStreamDefaultWriterGetDesiredSize(this);\r\n        }\r\n        /**\r\n         * Returns a promise that will be fulfilled when the desired size to fill the stream’s internal queue transitions\r\n         * from non-positive to positive, signaling that it is no longer applying backpressure. Once the desired size dips\r\n         * back to zero or below, the getter will return a new promise that stays pending until the next transition.\r\n         *\r\n         * If the stream becomes errored or aborted, or the writer’s lock is released, the returned promise will become\r\n         * rejected.\r\n         */\r\n        get ready() {\r\n            if (!IsWritableStreamDefaultWriter(this)) {\r\n                return promiseRejectedWith(defaultWriterBrandCheckException('ready'));\r\n            }\r\n            return this._readyPromise;\r\n        }\r\n        /**\r\n         * If the reader is active, behaves the same as {@link WritableStream.abort | stream.abort(reason)}.\r\n         */\r\n        abort(reason = undefined) {\r\n            if (!IsWritableStreamDefaultWriter(this)) {\r\n                return promiseRejectedWith(defaultWriterBrandCheckException('abort'));\r\n            }\r\n            if (this._ownerWritableStream === undefined) {\r\n                return promiseRejectedWith(defaultWriterLockException('abort'));\r\n            }\r\n            return WritableStreamDefaultWriterAbort(this, reason);\r\n        }\r\n        /**\r\n         * If the reader is active, behaves the same as {@link WritableStream.close | stream.close()}.\r\n         */\r\n        close() {\r\n            if (!IsWritableStreamDefaultWriter(this)) {\r\n                return promiseRejectedWith(defaultWriterBrandCheckException('close'));\r\n            }\r\n            const stream = this._ownerWritableStream;\r\n            if (stream === undefined) {\r\n                return promiseRejectedWith(defaultWriterLockException('close'));\r\n            }\r\n            if (WritableStreamCloseQueuedOrInFlight(stream)) {\r\n                return promiseRejectedWith(new TypeError('Cannot close an already-closing stream'));\r\n            }\r\n            return WritableStreamDefaultWriterClose(this);\r\n        }\r\n        /**\r\n         * Releases the writer’s lock on the corresponding stream. After the lock is released, the writer is no longer active.\r\n         * If the associated stream is errored when the lock is released, the writer will appear errored in the same way from\r\n         * now on; otherwise, the writer will appear closed.\r\n         *\r\n         * Note that the lock can still be released even if some ongoing writes have not yet finished (i.e. even if the\r\n         * promises returned from previous calls to {@link WritableStreamDefaultWriter.write | write()} have not yet settled).\r\n         * It’s not necessary to hold the lock on the writer for the duration of the write; the lock instead simply prevents\r\n         * other producers from writing in an interleaved manner.\r\n         */\r\n        releaseLock() {\r\n            if (!IsWritableStreamDefaultWriter(this)) {\r\n                throw defaultWriterBrandCheckException('releaseLock');\r\n            }\r\n            const stream = this._ownerWritableStream;\r\n            if (stream === undefined) {\r\n                return;\r\n            }\r\n            WritableStreamDefaultWriterRelease(this);\r\n        }\r\n        write(chunk = undefined) {\r\n            if (!IsWritableStreamDefaultWriter(this)) {\r\n                return promiseRejectedWith(defaultWriterBrandCheckException('write'));\r\n            }\r\n            if (this._ownerWritableStream === undefined) {\r\n                return promiseRejectedWith(defaultWriterLockException('write to'));\r\n            }\r\n            return WritableStreamDefaultWriterWrite(this, chunk);\r\n        }\r\n    }\r\n    Object.defineProperties(WritableStreamDefaultWriter.prototype, {\r\n        abort: { enumerable: true },\r\n        close: { enumerable: true },\r\n        releaseLock: { enumerable: true },\r\n        write: { enumerable: true },\r\n        closed: { enumerable: true },\r\n        desiredSize: { enumerable: true },\r\n        ready: { enumerable: true }\r\n    });\r\n    setFunctionName(WritableStreamDefaultWriter.prototype.abort, 'abort');\r\n    setFunctionName(WritableStreamDefaultWriter.prototype.close, 'close');\r\n    setFunctionName(WritableStreamDefaultWriter.prototype.releaseLock, 'releaseLock');\r\n    setFunctionName(WritableStreamDefaultWriter.prototype.write, 'write');\r\n    if (typeof Symbol.toStringTag === 'symbol') {\r\n        Object.defineProperty(WritableStreamDefaultWriter.prototype, Symbol.toStringTag, {\r\n            value: 'WritableStreamDefaultWriter',\r\n            configurable: true\r\n        });\r\n    }\r\n    // Abstract operations for the WritableStreamDefaultWriter.\r\n    function IsWritableStreamDefaultWriter(x) {\r\n        if (!typeIsObject(x)) {\r\n            return false;\r\n        }\r\n        if (!Object.prototype.hasOwnProperty.call(x, '_ownerWritableStream')) {\r\n            return false;\r\n        }\r\n        return x instanceof WritableStreamDefaultWriter;\r\n    }\r\n    // A client of WritableStreamDefaultWriter may use these functions directly to bypass state check.\r\n    function WritableStreamDefaultWriterAbort(writer, reason) {\r\n        const stream = writer._ownerWritableStream;\r\n        return WritableStreamAbort(stream, reason);\r\n    }\r\n    function WritableStreamDefaultWriterClose(writer) {\r\n        const stream = writer._ownerWritableStream;\r\n        return WritableStreamClose(stream);\r\n    }\r\n    function WritableStreamDefaultWriterCloseWithErrorPropagation(writer) {\r\n        const stream = writer._ownerWritableStream;\r\n        const state = stream._state;\r\n        if (WritableStreamCloseQueuedOrInFlight(stream) || state === 'closed') {\r\n            return promiseResolvedWith(undefined);\r\n        }\r\n        if (state === 'errored') {\r\n            return promiseRejectedWith(stream._storedError);\r\n        }\r\n        return WritableStreamDefaultWriterClose(writer);\r\n    }\r\n    function WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, error) {\r\n        if (writer._closedPromiseState === 'pending') {\r\n            defaultWriterClosedPromiseReject(writer, error);\r\n        }\r\n        else {\r\n            defaultWriterClosedPromiseResetToRejected(writer, error);\r\n        }\r\n    }\r\n    function WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, error) {\r\n        if (writer._readyPromiseState === 'pending') {\r\n            defaultWriterReadyPromiseReject(writer, error);\r\n        }\r\n        else {\r\n            defaultWriterReadyPromiseResetToRejected(writer, error);\r\n        }\r\n    }\r\n    function WritableStreamDefaultWriterGetDesiredSize(writer) {\r\n        const stream = writer._ownerWritableStream;\r\n        const state = stream._state;\r\n        if (state === 'errored' || state === 'erroring') {\r\n            return null;\r\n        }\r\n        if (state === 'closed') {\r\n            return 0;\r\n        }\r\n        return WritableStreamDefaultControllerGetDesiredSize(stream._writableStreamController);\r\n    }\r\n    function WritableStreamDefaultWriterRelease(writer) {\r\n        const stream = writer._ownerWritableStream;\r\n        const releasedError = new TypeError(`Writer was released and can no longer be used to monitor the stream's closedness`);\r\n        WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, releasedError);\r\n        // The state transitions to \"errored\" before the sink abort() method runs, but the writer.closed promise is not\r\n        // rejected until afterwards. This means that simply testing state will not work.\r\n        WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, releasedError);\r\n        stream._writer = undefined;\r\n        writer._ownerWritableStream = undefined;\r\n    }\r\n    function WritableStreamDefaultWriterWrite(writer, chunk) {\r\n        const stream = writer._ownerWritableStream;\r\n        const controller = stream._writableStreamController;\r\n        const chunkSize = WritableStreamDefaultControllerGetChunkSize(controller, chunk);\r\n        if (stream !== writer._ownerWritableStream) {\r\n            return promiseRejectedWith(defaultWriterLockException('write to'));\r\n        }\r\n        const state = stream._state;\r\n        if (state === 'errored') {\r\n            return promiseRejectedWith(stream._storedError);\r\n        }\r\n        if (WritableStreamCloseQueuedOrInFlight(stream) || state === 'closed') {\r\n            return promiseRejectedWith(new TypeError('The stream is closing or closed and cannot be written to'));\r\n        }\r\n        if (state === 'erroring') {\r\n            return promiseRejectedWith(stream._storedError);\r\n        }\r\n        const promise = WritableStreamAddWriteRequest(stream);\r\n        WritableStreamDefaultControllerWrite(controller, chunk, chunkSize);\r\n        return promise;\r\n    }\r\n    const closeSentinel = {};\r\n    /**\r\n     * Allows control of a {@link WritableStream | writable stream}'s state and internal queue.\r\n     *\r\n     * @public\r\n     */\r\n    class WritableStreamDefaultController {\r\n        constructor() {\r\n            throw new TypeError('Illegal constructor');\r\n        }\r\n        /**\r\n         * The reason which was passed to `WritableStream.abort(reason)` when the stream was aborted.\r\n         *\r\n         * @deprecated\r\n         *  This property has been removed from the specification, see https://github.com/whatwg/streams/pull/1177.\r\n         *  Use {@link WritableStreamDefaultController.signal}'s `reason` instead.\r\n         */\r\n        get abortReason() {\r\n            if (!IsWritableStreamDefaultController(this)) {\r\n                throw defaultControllerBrandCheckException$2('abortReason');\r\n            }\r\n            return this._abortReason;\r\n        }\r\n        /**\r\n         * An `AbortSignal` that can be used to abort the pending write or close operation when the stream is aborted.\r\n         */\r\n        get signal() {\r\n            if (!IsWritableStreamDefaultController(this)) {\r\n                throw defaultControllerBrandCheckException$2('signal');\r\n            }\r\n            if (this._abortController === undefined) {\r\n                // Older browsers or older Node versions may not support `AbortController` or `AbortSignal`.\r\n                // We don't want to bundle and ship an `AbortController` polyfill together with our polyfill,\r\n                // so instead we only implement support for `signal` if we find a global `AbortController` constructor.\r\n                throw new TypeError('WritableStreamDefaultController.prototype.signal is not supported');\r\n            }\r\n            return this._abortController.signal;\r\n        }\r\n        /**\r\n         * Closes the controlled writable stream, making all future interactions with it fail with the given error `e`.\r\n         *\r\n         * This method is rarely used, since usually it suffices to return a rejected promise from one of the underlying\r\n         * sink's methods. However, it can be useful for suddenly shutting down a stream in response to an event outside the\r\n         * normal lifecycle of interactions with the underlying sink.\r\n         */\r\n        error(e = undefined) {\r\n            if (!IsWritableStreamDefaultController(this)) {\r\n                throw defaultControllerBrandCheckException$2('error');\r\n            }\r\n            const state = this._controlledWritableStream._state;\r\n            if (state !== 'writable') {\r\n                // The stream is closed, errored or will be soon. The sink can't do anything useful if it gets an error here, so\r\n                // just treat it as a no-op.\r\n                return;\r\n            }\r\n            WritableStreamDefaultControllerError(this, e);\r\n        }\r\n        /** @internal */\r\n        [AbortSteps](reason) {\r\n            const result = this._abortAlgorithm(reason);\r\n            WritableStreamDefaultControllerClearAlgorithms(this);\r\n            return result;\r\n        }\r\n        /** @internal */\r\n        [ErrorSteps]() {\r\n            ResetQueue(this);\r\n        }\r\n    }\r\n    Object.defineProperties(WritableStreamDefaultController.prototype, {\r\n        abortReason: { enumerable: true },\r\n        signal: { enumerable: true },\r\n        error: { enumerable: true }\r\n    });\r\n    if (typeof Symbol.toStringTag === 'symbol') {\r\n        Object.defineProperty(WritableStreamDefaultController.prototype, Symbol.toStringTag, {\r\n            value: 'WritableStreamDefaultController',\r\n            configurable: true\r\n        });\r\n    }\r\n    // Abstract operations implementing interface required by the WritableStream.\r\n    function IsWritableStreamDefaultController(x) {\r\n        if (!typeIsObject(x)) {\r\n            return false;\r\n        }\r\n        if (!Object.prototype.hasOwnProperty.call(x, '_controlledWritableStream')) {\r\n            return false;\r\n        }\r\n        return x instanceof WritableStreamDefaultController;\r\n    }\r\n    function SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm) {\r\n        controller._controlledWritableStream = stream;\r\n        stream._writableStreamController = controller;\r\n        // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.\r\n        controller._queue = undefined;\r\n        controller._queueTotalSize = undefined;\r\n        ResetQueue(controller);\r\n        controller._abortReason = undefined;\r\n        controller._abortController = createAbortController();\r\n        controller._started = false;\r\n        controller._strategySizeAlgorithm = sizeAlgorithm;\r\n        controller._strategyHWM = highWaterMark;\r\n        controller._writeAlgorithm = writeAlgorithm;\r\n        controller._closeAlgorithm = closeAlgorithm;\r\n        controller._abortAlgorithm = abortAlgorithm;\r\n        const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\r\n        WritableStreamUpdateBackpressure(stream, backpressure);\r\n        const startResult = startAlgorithm();\r\n        const startPromise = promiseResolvedWith(startResult);\r\n        uponPromise(startPromise, () => {\r\n            controller._started = true;\r\n            WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\r\n            return null;\r\n        }, r => {\r\n            controller._started = true;\r\n            WritableStreamDealWithRejection(stream, r);\r\n            return null;\r\n        });\r\n    }\r\n    function SetUpWritableStreamDefaultControllerFromUnderlyingSink(stream, underlyingSink, highWaterMark, sizeAlgorithm) {\r\n        const controller = Object.create(WritableStreamDefaultController.prototype);\r\n        let startAlgorithm;\r\n        let writeAlgorithm;\r\n        let closeAlgorithm;\r\n        let abortAlgorithm;\r\n        if (underlyingSink.start !== undefined) {\r\n            startAlgorithm = () => underlyingSink.start(controller);\r\n        }\r\n        else {\r\n            startAlgorithm = () => undefined;\r\n        }\r\n        if (underlyingSink.write !== undefined) {\r\n            writeAlgorithm = chunk => underlyingSink.write(chunk, controller);\r\n        }\r\n        else {\r\n            writeAlgorithm = () => promiseResolvedWith(undefined);\r\n        }\r\n        if (underlyingSink.close !== undefined) {\r\n            closeAlgorithm = () => underlyingSink.close();\r\n        }\r\n        else {\r\n            closeAlgorithm = () => promiseResolvedWith(undefined);\r\n        }\r\n        if (underlyingSink.abort !== undefined) {\r\n            abortAlgorithm = reason => underlyingSink.abort(reason);\r\n        }\r\n        else {\r\n            abortAlgorithm = () => promiseResolvedWith(undefined);\r\n        }\r\n        SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm);\r\n    }\r\n    // ClearAlgorithms may be called twice. Erroring the same stream in multiple ways will often result in redundant calls.\r\n    function WritableStreamDefaultControllerClearAlgorithms(controller) {\r\n        controller._writeAlgorithm = undefined;\r\n        controller._closeAlgorithm = undefined;\r\n        controller._abortAlgorithm = undefined;\r\n        controller._strategySizeAlgorithm = undefined;\r\n    }\r\n    function WritableStreamDefaultControllerClose(controller) {\r\n        EnqueueValueWithSize(controller, closeSentinel, 0);\r\n        WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\r\n    }\r\n    function WritableStreamDefaultControllerGetChunkSize(controller, chunk) {\r\n        try {\r\n            return controller._strategySizeAlgorithm(chunk);\r\n        }\r\n        catch (chunkSizeE) {\r\n            WritableStreamDefaultControllerErrorIfNeeded(controller, chunkSizeE);\r\n            return 1;\r\n        }\r\n    }\r\n    function WritableStreamDefaultControllerGetDesiredSize(controller) {\r\n        return controller._strategyHWM - controller._queueTotalSize;\r\n    }\r\n    function WritableStreamDefaultControllerWrite(controller, chunk, chunkSize) {\r\n        try {\r\n            EnqueueValueWithSize(controller, chunk, chunkSize);\r\n        }\r\n        catch (enqueueE) {\r\n            WritableStreamDefaultControllerErrorIfNeeded(controller, enqueueE);\r\n            return;\r\n        }\r\n        const stream = controller._controlledWritableStream;\r\n        if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._state === 'writable') {\r\n            const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\r\n            WritableStreamUpdateBackpressure(stream, backpressure);\r\n        }\r\n        WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\r\n    }\r\n    // Abstract operations for the WritableStreamDefaultController.\r\n    function WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller) {\r\n        const stream = controller._controlledWritableStream;\r\n        if (!controller._started) {\r\n            return;\r\n        }\r\n        if (stream._inFlightWriteRequest !== undefined) {\r\n            return;\r\n        }\r\n        const state = stream._state;\r\n        if (state === 'erroring') {\r\n            WritableStreamFinishErroring(stream);\r\n            return;\r\n        }\r\n        if (controller._queue.length === 0) {\r\n            return;\r\n        }\r\n        const value = PeekQueueValue(controller);\r\n        if (value === closeSentinel) {\r\n            WritableStreamDefaultControllerProcessClose(controller);\r\n        }\r\n        else {\r\n            WritableStreamDefaultControllerProcessWrite(controller, value);\r\n        }\r\n    }\r\n    function WritableStreamDefaultControllerErrorIfNeeded(controller, error) {\r\n        if (controller._controlledWritableStream._state === 'writable') {\r\n            WritableStreamDefaultControllerError(controller, error);\r\n        }\r\n    }\r\n    function WritableStreamDefaultControllerProcessClose(controller) {\r\n        const stream = controller._controlledWritableStream;\r\n        WritableStreamMarkCloseRequestInFlight(stream);\r\n        DequeueValue(controller);\r\n        const sinkClosePromise = controller._closeAlgorithm();\r\n        WritableStreamDefaultControllerClearAlgorithms(controller);\r\n        uponPromise(sinkClosePromise, () => {\r\n            WritableStreamFinishInFlightClose(stream);\r\n            return null;\r\n        }, reason => {\r\n            WritableStreamFinishInFlightCloseWithError(stream, reason);\r\n            return null;\r\n        });\r\n    }\r\n    function WritableStreamDefaultControllerProcessWrite(controller, chunk) {\r\n        const stream = controller._controlledWritableStream;\r\n        WritableStreamMarkFirstWriteRequestInFlight(stream);\r\n        const sinkWritePromise = controller._writeAlgorithm(chunk);\r\n        uponPromise(sinkWritePromise, () => {\r\n            WritableStreamFinishInFlightWrite(stream);\r\n            const state = stream._state;\r\n            DequeueValue(controller);\r\n            if (!WritableStreamCloseQueuedOrInFlight(stream) && state === 'writable') {\r\n                const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\r\n                WritableStreamUpdateBackpressure(stream, backpressure);\r\n            }\r\n            WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\r\n            return null;\r\n        }, reason => {\r\n            if (stream._state === 'writable') {\r\n                WritableStreamDefaultControllerClearAlgorithms(controller);\r\n            }\r\n            WritableStreamFinishInFlightWriteWithError(stream, reason);\r\n            return null;\r\n        });\r\n    }\r\n    function WritableStreamDefaultControllerGetBackpressure(controller) {\r\n        const desiredSize = WritableStreamDefaultControllerGetDesiredSize(controller);\r\n        return desiredSize <= 0;\r\n    }\r\n    // A client of WritableStreamDefaultController may use these functions directly to bypass state check.\r\n    function WritableStreamDefaultControllerError(controller, error) {\r\n        const stream = controller._controlledWritableStream;\r\n        WritableStreamDefaultControllerClearAlgorithms(controller);\r\n        WritableStreamStartErroring(stream, error);\r\n    }\r\n    // Helper functions for the WritableStream.\r\n    function streamBrandCheckException$2(name) {\r\n        return new TypeError(`WritableStream.prototype.${name} can only be used on a WritableStream`);\r\n    }\r\n    // Helper functions for the WritableStreamDefaultController.\r\n    function defaultControllerBrandCheckException$2(name) {\r\n        return new TypeError(`WritableStreamDefaultController.prototype.${name} can only be used on a WritableStreamDefaultController`);\r\n    }\r\n    // Helper functions for the WritableStreamDefaultWriter.\r\n    function defaultWriterBrandCheckException(name) {\r\n        return new TypeError(`WritableStreamDefaultWriter.prototype.${name} can only be used on a WritableStreamDefaultWriter`);\r\n    }\r\n    function defaultWriterLockException(name) {\r\n        return new TypeError('Cannot ' + name + ' a stream using a released writer');\r\n    }\r\n    function defaultWriterClosedPromiseInitialize(writer) {\r\n        writer._closedPromise = newPromise((resolve, reject) => {\r\n            writer._closedPromise_resolve = resolve;\r\n            writer._closedPromise_reject = reject;\r\n            writer._closedPromiseState = 'pending';\r\n        });\r\n    }\r\n    function defaultWriterClosedPromiseInitializeAsRejected(writer, reason) {\r\n        defaultWriterClosedPromiseInitialize(writer);\r\n        defaultWriterClosedPromiseReject(writer, reason);\r\n    }\r\n    function defaultWriterClosedPromiseInitializeAsResolved(writer) {\r\n        defaultWriterClosedPromiseInitialize(writer);\r\n        defaultWriterClosedPromiseResolve(writer);\r\n    }\r\n    function defaultWriterClosedPromiseReject(writer, reason) {\r\n        if (writer._closedPromise_reject === undefined) {\r\n            return;\r\n        }\r\n        setPromiseIsHandledToTrue(writer._closedPromise);\r\n        writer._closedPromise_reject(reason);\r\n        writer._closedPromise_resolve = undefined;\r\n        writer._closedPromise_reject = undefined;\r\n        writer._closedPromiseState = 'rejected';\r\n    }\r\n    function defaultWriterClosedPromiseResetToRejected(writer, reason) {\r\n        defaultWriterClosedPromiseInitializeAsRejected(writer, reason);\r\n    }\r\n    function defaultWriterClosedPromiseResolve(writer) {\r\n        if (writer._closedPromise_resolve === undefined) {\r\n            return;\r\n        }\r\n        writer._closedPromise_resolve(undefined);\r\n        writer._closedPromise_resolve = undefined;\r\n        writer._closedPromise_reject = undefined;\r\n        writer._closedPromiseState = 'resolved';\r\n    }\r\n    function defaultWriterReadyPromiseInitialize(writer) {\r\n        writer._readyPromise = newPromise((resolve, reject) => {\r\n            writer._readyPromise_resolve = resolve;\r\n            writer._readyPromise_reject = reject;\r\n        });\r\n        writer._readyPromiseState = 'pending';\r\n    }\r\n    function defaultWriterReadyPromiseInitializeAsRejected(writer, reason) {\r\n        defaultWriterReadyPromiseInitialize(writer);\r\n        defaultWriterReadyPromiseReject(writer, reason);\r\n    }\r\n    function defaultWriterReadyPromiseInitializeAsResolved(writer) {\r\n        defaultWriterReadyPromiseInitialize(writer);\r\n        defaultWriterReadyPromiseResolve(writer);\r\n    }\r\n    function defaultWriterReadyPromiseReject(writer, reason) {\r\n        if (writer._readyPromise_reject === undefined) {\r\n            return;\r\n        }\r\n        setPromiseIsHandledToTrue(writer._readyPromise);\r\n        writer._readyPromise_reject(reason);\r\n        writer._readyPromise_resolve = undefined;\r\n        writer._readyPromise_reject = undefined;\r\n        writer._readyPromiseState = 'rejected';\r\n    }\r\n    function defaultWriterReadyPromiseReset(writer) {\r\n        defaultWriterReadyPromiseInitialize(writer);\r\n    }\r\n    function defaultWriterReadyPromiseResetToRejected(writer, reason) {\r\n        defaultWriterReadyPromiseInitializeAsRejected(writer, reason);\r\n    }\r\n    function defaultWriterReadyPromiseResolve(writer) {\r\n        if (writer._readyPromise_resolve === undefined) {\r\n            return;\r\n        }\r\n        writer._readyPromise_resolve(undefined);\r\n        writer._readyPromise_resolve = undefined;\r\n        writer._readyPromise_reject = undefined;\r\n        writer._readyPromiseState = 'fulfilled';\r\n    }\r\n\r\n    /// <reference lib=\"dom\" />\r\n    function getGlobals() {\r\n        if (typeof globalThis !== 'undefined') {\r\n            return globalThis;\r\n        }\r\n        else if (typeof self !== 'undefined') {\r\n            return self;\r\n        }\r\n        else if (typeof global !== 'undefined') {\r\n            return global;\r\n        }\r\n        return undefined;\r\n    }\r\n    const globals = getGlobals();\r\n\r\n    /// <reference types=\"node\" />\r\n    function isDOMExceptionConstructor(ctor) {\r\n        if (!(typeof ctor === 'function' || typeof ctor === 'object')) {\r\n            return false;\r\n        }\r\n        if (ctor.name !== 'DOMException') {\r\n            return false;\r\n        }\r\n        try {\r\n            new ctor();\r\n            return true;\r\n        }\r\n        catch (_a) {\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * Support:\r\n     * - Web browsers\r\n     * - Node 18 and higher (https://github.com/nodejs/node/commit/e4b1fb5e6422c1ff151234bb9de792d45dd88d87)\r\n     */\r\n    function getFromGlobal() {\r\n        const ctor = globals === null || globals === void 0 ? void 0 : globals.DOMException;\r\n        return isDOMExceptionConstructor(ctor) ? ctor : undefined;\r\n    }\r\n    /**\r\n     * Support:\r\n     * - All platforms\r\n     */\r\n    function createPolyfill() {\r\n        // eslint-disable-next-line @typescript-eslint/no-shadow\r\n        const ctor = function DOMException(message, name) {\r\n            this.message = message || '';\r\n            this.name = name || 'Error';\r\n            if (Error.captureStackTrace) {\r\n                Error.captureStackTrace(this, this.constructor);\r\n            }\r\n        };\r\n        setFunctionName(ctor, 'DOMException');\r\n        ctor.prototype = Object.create(Error.prototype);\r\n        Object.defineProperty(ctor.prototype, 'constructor', { value: ctor, writable: true, configurable: true });\r\n        return ctor;\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-redeclare\r\n    const DOMException = getFromGlobal() || createPolyfill();\r\n\r\n    function ReadableStreamPipeTo(source, dest, preventClose, preventAbort, preventCancel, signal) {\r\n        const reader = AcquireReadableStreamDefaultReader(source);\r\n        const writer = AcquireWritableStreamDefaultWriter(dest);\r\n        source._disturbed = true;\r\n        let shuttingDown = false;\r\n        // This is used to keep track of the spec's requirement that we wait for ongoing writes during shutdown.\r\n        let currentWrite = promiseResolvedWith(undefined);\r\n        return newPromise((resolve, reject) => {\r\n            let abortAlgorithm;\r\n            if (signal !== undefined) {\r\n                abortAlgorithm = () => {\r\n                    const error = signal.reason !== undefined ? signal.reason : new DOMException('Aborted', 'AbortError');\r\n                    const actions = [];\r\n                    if (!preventAbort) {\r\n                        actions.push(() => {\r\n                            if (dest._state === 'writable') {\r\n                                return WritableStreamAbort(dest, error);\r\n                            }\r\n                            return promiseResolvedWith(undefined);\r\n                        });\r\n                    }\r\n                    if (!preventCancel) {\r\n                        actions.push(() => {\r\n                            if (source._state === 'readable') {\r\n                                return ReadableStreamCancel(source, error);\r\n                            }\r\n                            return promiseResolvedWith(undefined);\r\n                        });\r\n                    }\r\n                    shutdownWithAction(() => Promise.all(actions.map(action => action())), true, error);\r\n                };\r\n                if (signal.aborted) {\r\n                    abortAlgorithm();\r\n                    return;\r\n                }\r\n                signal.addEventListener('abort', abortAlgorithm);\r\n            }\r\n            // Using reader and writer, read all chunks from this and write them to dest\r\n            // - Backpressure must be enforced\r\n            // - Shutdown must stop all activity\r\n            function pipeLoop() {\r\n                return newPromise((resolveLoop, rejectLoop) => {\r\n                    function next(done) {\r\n                        if (done) {\r\n                            resolveLoop();\r\n                        }\r\n                        else {\r\n                            // Use `PerformPromiseThen` instead of `uponPromise` to avoid\r\n                            // adding unnecessary `.catch(rethrowAssertionErrorRejection)` handlers\r\n                            PerformPromiseThen(pipeStep(), next, rejectLoop);\r\n                        }\r\n                    }\r\n                    next(false);\r\n                });\r\n            }\r\n            function pipeStep() {\r\n                if (shuttingDown) {\r\n                    return promiseResolvedWith(true);\r\n                }\r\n                return PerformPromiseThen(writer._readyPromise, () => {\r\n                    return newPromise((resolveRead, rejectRead) => {\r\n                        ReadableStreamDefaultReaderRead(reader, {\r\n                            _chunkSteps: chunk => {\r\n                                currentWrite = PerformPromiseThen(WritableStreamDefaultWriterWrite(writer, chunk), undefined, noop);\r\n                                resolveRead(false);\r\n                            },\r\n                            _closeSteps: () => resolveRead(true),\r\n                            _errorSteps: rejectRead\r\n                        });\r\n                    });\r\n                });\r\n            }\r\n            // Errors must be propagated forward\r\n            isOrBecomesErrored(source, reader._closedPromise, storedError => {\r\n                if (!preventAbort) {\r\n                    shutdownWithAction(() => WritableStreamAbort(dest, storedError), true, storedError);\r\n                }\r\n                else {\r\n                    shutdown(true, storedError);\r\n                }\r\n                return null;\r\n            });\r\n            // Errors must be propagated backward\r\n            isOrBecomesErrored(dest, writer._closedPromise, storedError => {\r\n                if (!preventCancel) {\r\n                    shutdownWithAction(() => ReadableStreamCancel(source, storedError), true, storedError);\r\n                }\r\n                else {\r\n                    shutdown(true, storedError);\r\n                }\r\n                return null;\r\n            });\r\n            // Closing must be propagated forward\r\n            isOrBecomesClosed(source, reader._closedPromise, () => {\r\n                if (!preventClose) {\r\n                    shutdownWithAction(() => WritableStreamDefaultWriterCloseWithErrorPropagation(writer));\r\n                }\r\n                else {\r\n                    shutdown();\r\n                }\r\n                return null;\r\n            });\r\n            // Closing must be propagated backward\r\n            if (WritableStreamCloseQueuedOrInFlight(dest) || dest._state === 'closed') {\r\n                const destClosed = new TypeError('the destination writable stream closed before all data could be piped to it');\r\n                if (!preventCancel) {\r\n                    shutdownWithAction(() => ReadableStreamCancel(source, destClosed), true, destClosed);\r\n                }\r\n                else {\r\n                    shutdown(true, destClosed);\r\n                }\r\n            }\r\n            setPromiseIsHandledToTrue(pipeLoop());\r\n            function waitForWritesToFinish() {\r\n                // Another write may have started while we were waiting on this currentWrite, so we have to be sure to wait\r\n                // for that too.\r\n                const oldCurrentWrite = currentWrite;\r\n                return PerformPromiseThen(currentWrite, () => oldCurrentWrite !== currentWrite ? waitForWritesToFinish() : undefined);\r\n            }\r\n            function isOrBecomesErrored(stream, promise, action) {\r\n                if (stream._state === 'errored') {\r\n                    action(stream._storedError);\r\n                }\r\n                else {\r\n                    uponRejection(promise, action);\r\n                }\r\n            }\r\n            function isOrBecomesClosed(stream, promise, action) {\r\n                if (stream._state === 'closed') {\r\n                    action();\r\n                }\r\n                else {\r\n                    uponFulfillment(promise, action);\r\n                }\r\n            }\r\n            function shutdownWithAction(action, originalIsError, originalError) {\r\n                if (shuttingDown) {\r\n                    return;\r\n                }\r\n                shuttingDown = true;\r\n                if (dest._state === 'writable' && !WritableStreamCloseQueuedOrInFlight(dest)) {\r\n                    uponFulfillment(waitForWritesToFinish(), doTheRest);\r\n                }\r\n                else {\r\n                    doTheRest();\r\n                }\r\n                function doTheRest() {\r\n                    uponPromise(action(), () => finalize(originalIsError, originalError), newError => finalize(true, newError));\r\n                    return null;\r\n                }\r\n            }\r\n            function shutdown(isError, error) {\r\n                if (shuttingDown) {\r\n                    return;\r\n                }\r\n                shuttingDown = true;\r\n                if (dest._state === 'writable' && !WritableStreamCloseQueuedOrInFlight(dest)) {\r\n                    uponFulfillment(waitForWritesToFinish(), () => finalize(isError, error));\r\n                }\r\n                else {\r\n                    finalize(isError, error);\r\n                }\r\n            }\r\n            function finalize(isError, error) {\r\n                WritableStreamDefaultWriterRelease(writer);\r\n                ReadableStreamReaderGenericRelease(reader);\r\n                if (signal !== undefined) {\r\n                    signal.removeEventListener('abort', abortAlgorithm);\r\n                }\r\n                if (isError) {\r\n                    reject(error);\r\n                }\r\n                else {\r\n                    resolve(undefined);\r\n                }\r\n                return null;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Allows control of a {@link ReadableStream | readable stream}'s state and internal queue.\r\n     *\r\n     * @public\r\n     */\r\n    class ReadableStreamDefaultController {\r\n        constructor() {\r\n            throw new TypeError('Illegal constructor');\r\n        }\r\n        /**\r\n         * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is\r\n         * over-full. An underlying source ought to use this information to determine when and how to apply backpressure.\r\n         */\r\n        get desiredSize() {\r\n            if (!IsReadableStreamDefaultController(this)) {\r\n                throw defaultControllerBrandCheckException$1('desiredSize');\r\n            }\r\n            return ReadableStreamDefaultControllerGetDesiredSize(this);\r\n        }\r\n        /**\r\n         * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from\r\n         * the stream, but once those are read, the stream will become closed.\r\n         */\r\n        close() {\r\n            if (!IsReadableStreamDefaultController(this)) {\r\n                throw defaultControllerBrandCheckException$1('close');\r\n            }\r\n            if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {\r\n                throw new TypeError('The stream is not in a state that permits close');\r\n            }\r\n            ReadableStreamDefaultControllerClose(this);\r\n        }\r\n        enqueue(chunk = undefined) {\r\n            if (!IsReadableStreamDefaultController(this)) {\r\n                throw defaultControllerBrandCheckException$1('enqueue');\r\n            }\r\n            if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {\r\n                throw new TypeError('The stream is not in a state that permits enqueue');\r\n            }\r\n            return ReadableStreamDefaultControllerEnqueue(this, chunk);\r\n        }\r\n        /**\r\n         * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.\r\n         */\r\n        error(e = undefined) {\r\n            if (!IsReadableStreamDefaultController(this)) {\r\n                throw defaultControllerBrandCheckException$1('error');\r\n            }\r\n            ReadableStreamDefaultControllerError(this, e);\r\n        }\r\n        /** @internal */\r\n        [CancelSteps](reason) {\r\n            ResetQueue(this);\r\n            const result = this._cancelAlgorithm(reason);\r\n            ReadableStreamDefaultControllerClearAlgorithms(this);\r\n            return result;\r\n        }\r\n        /** @internal */\r\n        [PullSteps](readRequest) {\r\n            const stream = this._controlledReadableStream;\r\n            if (this._queue.length > 0) {\r\n                const chunk = DequeueValue(this);\r\n                if (this._closeRequested && this._queue.length === 0) {\r\n                    ReadableStreamDefaultControllerClearAlgorithms(this);\r\n                    ReadableStreamClose(stream);\r\n                }\r\n                else {\r\n                    ReadableStreamDefaultControllerCallPullIfNeeded(this);\r\n                }\r\n                readRequest._chunkSteps(chunk);\r\n            }\r\n            else {\r\n                ReadableStreamAddReadRequest(stream, readRequest);\r\n                ReadableStreamDefaultControllerCallPullIfNeeded(this);\r\n            }\r\n        }\r\n        /** @internal */\r\n        [ReleaseSteps]() {\r\n            // Do nothing.\r\n        }\r\n    }\r\n    Object.defineProperties(ReadableStreamDefaultController.prototype, {\r\n        close: { enumerable: true },\r\n        enqueue: { enumerable: true },\r\n        error: { enumerable: true },\r\n        desiredSize: { enumerable: true }\r\n    });\r\n    setFunctionName(ReadableStreamDefaultController.prototype.close, 'close');\r\n    setFunctionName(ReadableStreamDefaultController.prototype.enqueue, 'enqueue');\r\n    setFunctionName(ReadableStreamDefaultController.prototype.error, 'error');\r\n    if (typeof Symbol.toStringTag === 'symbol') {\r\n        Object.defineProperty(ReadableStreamDefaultController.prototype, Symbol.toStringTag, {\r\n            value: 'ReadableStreamDefaultController',\r\n            configurable: true\r\n        });\r\n    }\r\n    // Abstract operations for the ReadableStreamDefaultController.\r\n    function IsReadableStreamDefaultController(x) {\r\n        if (!typeIsObject(x)) {\r\n            return false;\r\n        }\r\n        if (!Object.prototype.hasOwnProperty.call(x, '_controlledReadableStream')) {\r\n            return false;\r\n        }\r\n        return x instanceof ReadableStreamDefaultController;\r\n    }\r\n    function ReadableStreamDefaultControllerCallPullIfNeeded(controller) {\r\n        const shouldPull = ReadableStreamDefaultControllerShouldCallPull(controller);\r\n        if (!shouldPull) {\r\n            return;\r\n        }\r\n        if (controller._pulling) {\r\n            controller._pullAgain = true;\r\n            return;\r\n        }\r\n        controller._pulling = true;\r\n        const pullPromise = controller._pullAlgorithm();\r\n        uponPromise(pullPromise, () => {\r\n            controller._pulling = false;\r\n            if (controller._pullAgain) {\r\n                controller._pullAgain = false;\r\n                ReadableStreamDefaultControllerCallPullIfNeeded(controller);\r\n            }\r\n            return null;\r\n        }, e => {\r\n            ReadableStreamDefaultControllerError(controller, e);\r\n            return null;\r\n        });\r\n    }\r\n    function ReadableStreamDefaultControllerShouldCallPull(controller) {\r\n        const stream = controller._controlledReadableStream;\r\n        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\r\n            return false;\r\n        }\r\n        if (!controller._started) {\r\n            return false;\r\n        }\r\n        if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\r\n            return true;\r\n        }\r\n        const desiredSize = ReadableStreamDefaultControllerGetDesiredSize(controller);\r\n        if (desiredSize > 0) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    function ReadableStreamDefaultControllerClearAlgorithms(controller) {\r\n        controller._pullAlgorithm = undefined;\r\n        controller._cancelAlgorithm = undefined;\r\n        controller._strategySizeAlgorithm = undefined;\r\n    }\r\n    // A client of ReadableStreamDefaultController may use these functions directly to bypass state check.\r\n    function ReadableStreamDefaultControllerClose(controller) {\r\n        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\r\n            return;\r\n        }\r\n        const stream = controller._controlledReadableStream;\r\n        controller._closeRequested = true;\r\n        if (controller._queue.length === 0) {\r\n            ReadableStreamDefaultControllerClearAlgorithms(controller);\r\n            ReadableStreamClose(stream);\r\n        }\r\n    }\r\n    function ReadableStreamDefaultControllerEnqueue(controller, chunk) {\r\n        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\r\n            return;\r\n        }\r\n        const stream = controller._controlledReadableStream;\r\n        if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\r\n            ReadableStreamFulfillReadRequest(stream, chunk, false);\r\n        }\r\n        else {\r\n            let chunkSize;\r\n            try {\r\n                chunkSize = controller._strategySizeAlgorithm(chunk);\r\n            }\r\n            catch (chunkSizeE) {\r\n                ReadableStreamDefaultControllerError(controller, chunkSizeE);\r\n                throw chunkSizeE;\r\n            }\r\n            try {\r\n                EnqueueValueWithSize(controller, chunk, chunkSize);\r\n            }\r\n            catch (enqueueE) {\r\n                ReadableStreamDefaultControllerError(controller, enqueueE);\r\n                throw enqueueE;\r\n            }\r\n        }\r\n        ReadableStreamDefaultControllerCallPullIfNeeded(controller);\r\n    }\r\n    function ReadableStreamDefaultControllerError(controller, e) {\r\n        const stream = controller._controlledReadableStream;\r\n        if (stream._state !== 'readable') {\r\n            return;\r\n        }\r\n        ResetQueue(controller);\r\n        ReadableStreamDefaultControllerClearAlgorithms(controller);\r\n        ReadableStreamError(stream, e);\r\n    }\r\n    function ReadableStreamDefaultControllerGetDesiredSize(controller) {\r\n        const state = controller._controlledReadableStream._state;\r\n        if (state === 'errored') {\r\n            return null;\r\n        }\r\n        if (state === 'closed') {\r\n            return 0;\r\n        }\r\n        return controller._strategyHWM - controller._queueTotalSize;\r\n    }\r\n    // This is used in the implementation of TransformStream.\r\n    function ReadableStreamDefaultControllerHasBackpressure(controller) {\r\n        if (ReadableStreamDefaultControllerShouldCallPull(controller)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    function ReadableStreamDefaultControllerCanCloseOrEnqueue(controller) {\r\n        const state = controller._controlledReadableStream._state;\r\n        if (!controller._closeRequested && state === 'readable') {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    function SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm) {\r\n        controller._controlledReadableStream = stream;\r\n        controller._queue = undefined;\r\n        controller._queueTotalSize = undefined;\r\n        ResetQueue(controller);\r\n        controller._started = false;\r\n        controller._closeRequested = false;\r\n        controller._pullAgain = false;\r\n        controller._pulling = false;\r\n        controller._strategySizeAlgorithm = sizeAlgorithm;\r\n        controller._strategyHWM = highWaterMark;\r\n        controller._pullAlgorithm = pullAlgorithm;\r\n        controller._cancelAlgorithm = cancelAlgorithm;\r\n        stream._readableStreamController = controller;\r\n        const startResult = startAlgorithm();\r\n        uponPromise(promiseResolvedWith(startResult), () => {\r\n            controller._started = true;\r\n            ReadableStreamDefaultControllerCallPullIfNeeded(controller);\r\n            return null;\r\n        }, r => {\r\n            ReadableStreamDefaultControllerError(controller, r);\r\n            return null;\r\n        });\r\n    }\r\n    function SetUpReadableStreamDefaultControllerFromUnderlyingSource(stream, underlyingSource, highWaterMark, sizeAlgorithm) {\r\n        const controller = Object.create(ReadableStreamDefaultController.prototype);\r\n        let startAlgorithm;\r\n        let pullAlgorithm;\r\n        let cancelAlgorithm;\r\n        if (underlyingSource.start !== undefined) {\r\n            startAlgorithm = () => underlyingSource.start(controller);\r\n        }\r\n        else {\r\n            startAlgorithm = () => undefined;\r\n        }\r\n        if (underlyingSource.pull !== undefined) {\r\n            pullAlgorithm = () => underlyingSource.pull(controller);\r\n        }\r\n        else {\r\n            pullAlgorithm = () => promiseResolvedWith(undefined);\r\n        }\r\n        if (underlyingSource.cancel !== undefined) {\r\n            cancelAlgorithm = reason => underlyingSource.cancel(reason);\r\n        }\r\n        else {\r\n            cancelAlgorithm = () => promiseResolvedWith(undefined);\r\n        }\r\n        SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm);\r\n    }\r\n    // Helper functions for the ReadableStreamDefaultController.\r\n    function defaultControllerBrandCheckException$1(name) {\r\n        return new TypeError(`ReadableStreamDefaultController.prototype.${name} can only be used on a ReadableStreamDefaultController`);\r\n    }\r\n\r\n    function ReadableStreamTee(stream, cloneForBranch2) {\r\n        if (IsReadableByteStreamController(stream._readableStreamController)) {\r\n            return ReadableByteStreamTee(stream);\r\n        }\r\n        return ReadableStreamDefaultTee(stream);\r\n    }\r\n    function ReadableStreamDefaultTee(stream, cloneForBranch2) {\r\n        const reader = AcquireReadableStreamDefaultReader(stream);\r\n        let reading = false;\r\n        let readAgain = false;\r\n        let canceled1 = false;\r\n        let canceled2 = false;\r\n        let reason1;\r\n        let reason2;\r\n        let branch1;\r\n        let branch2;\r\n        let resolveCancelPromise;\r\n        const cancelPromise = newPromise(resolve => {\r\n            resolveCancelPromise = resolve;\r\n        });\r\n        function pullAlgorithm() {\r\n            if (reading) {\r\n                readAgain = true;\r\n                return promiseResolvedWith(undefined);\r\n            }\r\n            reading = true;\r\n            const readRequest = {\r\n                _chunkSteps: chunk => {\r\n                    // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\r\n                    // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\r\n                    // successful synchronously-available reads get ahead of asynchronously-available errors.\r\n                    _queueMicrotask(() => {\r\n                        readAgain = false;\r\n                        const chunk1 = chunk;\r\n                        const chunk2 = chunk;\r\n                        // There is no way to access the cloning code right now in the reference implementation.\r\n                        // If we add one then we'll need an implementation for serializable objects.\r\n                        // if (!canceled2 && cloneForBranch2) {\r\n                        //   chunk2 = StructuredDeserialize(StructuredSerialize(chunk2));\r\n                        // }\r\n                        if (!canceled1) {\r\n                            ReadableStreamDefaultControllerEnqueue(branch1._readableStreamController, chunk1);\r\n                        }\r\n                        if (!canceled2) {\r\n                            ReadableStreamDefaultControllerEnqueue(branch2._readableStreamController, chunk2);\r\n                        }\r\n                        reading = false;\r\n                        if (readAgain) {\r\n                            pullAlgorithm();\r\n                        }\r\n                    });\r\n                },\r\n                _closeSteps: () => {\r\n                    reading = false;\r\n                    if (!canceled1) {\r\n                        ReadableStreamDefaultControllerClose(branch1._readableStreamController);\r\n                    }\r\n                    if (!canceled2) {\r\n                        ReadableStreamDefaultControllerClose(branch2._readableStreamController);\r\n                    }\r\n                    if (!canceled1 || !canceled2) {\r\n                        resolveCancelPromise(undefined);\r\n                    }\r\n                },\r\n                _errorSteps: () => {\r\n                    reading = false;\r\n                }\r\n            };\r\n            ReadableStreamDefaultReaderRead(reader, readRequest);\r\n            return promiseResolvedWith(undefined);\r\n        }\r\n        function cancel1Algorithm(reason) {\r\n            canceled1 = true;\r\n            reason1 = reason;\r\n            if (canceled2) {\r\n                const compositeReason = CreateArrayFromList([reason1, reason2]);\r\n                const cancelResult = ReadableStreamCancel(stream, compositeReason);\r\n                resolveCancelPromise(cancelResult);\r\n            }\r\n            return cancelPromise;\r\n        }\r\n        function cancel2Algorithm(reason) {\r\n            canceled2 = true;\r\n            reason2 = reason;\r\n            if (canceled1) {\r\n                const compositeReason = CreateArrayFromList([reason1, reason2]);\r\n                const cancelResult = ReadableStreamCancel(stream, compositeReason);\r\n                resolveCancelPromise(cancelResult);\r\n            }\r\n            return cancelPromise;\r\n        }\r\n        function startAlgorithm() {\r\n            // do nothing\r\n        }\r\n        branch1 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel1Algorithm);\r\n        branch2 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel2Algorithm);\r\n        uponRejection(reader._closedPromise, (r) => {\r\n            ReadableStreamDefaultControllerError(branch1._readableStreamController, r);\r\n            ReadableStreamDefaultControllerError(branch2._readableStreamController, r);\r\n            if (!canceled1 || !canceled2) {\r\n                resolveCancelPromise(undefined);\r\n            }\r\n            return null;\r\n        });\r\n        return [branch1, branch2];\r\n    }\r\n    function ReadableByteStreamTee(stream) {\r\n        let reader = AcquireReadableStreamDefaultReader(stream);\r\n        let reading = false;\r\n        let readAgainForBranch1 = false;\r\n        let readAgainForBranch2 = false;\r\n        let canceled1 = false;\r\n        let canceled2 = false;\r\n        let reason1;\r\n        let reason2;\r\n        let branch1;\r\n        let branch2;\r\n        let resolveCancelPromise;\r\n        const cancelPromise = newPromise(resolve => {\r\n            resolveCancelPromise = resolve;\r\n        });\r\n        function forwardReaderError(thisReader) {\r\n            uponRejection(thisReader._closedPromise, r => {\r\n                if (thisReader !== reader) {\r\n                    return null;\r\n                }\r\n                ReadableByteStreamControllerError(branch1._readableStreamController, r);\r\n                ReadableByteStreamControllerError(branch2._readableStreamController, r);\r\n                if (!canceled1 || !canceled2) {\r\n                    resolveCancelPromise(undefined);\r\n                }\r\n                return null;\r\n            });\r\n        }\r\n        function pullWithDefaultReader() {\r\n            if (IsReadableStreamBYOBReader(reader)) {\r\n                ReadableStreamReaderGenericRelease(reader);\r\n                reader = AcquireReadableStreamDefaultReader(stream);\r\n                forwardReaderError(reader);\r\n            }\r\n            const readRequest = {\r\n                _chunkSteps: chunk => {\r\n                    // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\r\n                    // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\r\n                    // successful synchronously-available reads get ahead of asynchronously-available errors.\r\n                    _queueMicrotask(() => {\r\n                        readAgainForBranch1 = false;\r\n                        readAgainForBranch2 = false;\r\n                        const chunk1 = chunk;\r\n                        let chunk2 = chunk;\r\n                        if (!canceled1 && !canceled2) {\r\n                            try {\r\n                                chunk2 = CloneAsUint8Array(chunk);\r\n                            }\r\n                            catch (cloneE) {\r\n                                ReadableByteStreamControllerError(branch1._readableStreamController, cloneE);\r\n                                ReadableByteStreamControllerError(branch2._readableStreamController, cloneE);\r\n                                resolveCancelPromise(ReadableStreamCancel(stream, cloneE));\r\n                                return;\r\n                            }\r\n                        }\r\n                        if (!canceled1) {\r\n                            ReadableByteStreamControllerEnqueue(branch1._readableStreamController, chunk1);\r\n                        }\r\n                        if (!canceled2) {\r\n                            ReadableByteStreamControllerEnqueue(branch2._readableStreamController, chunk2);\r\n                        }\r\n                        reading = false;\r\n                        if (readAgainForBranch1) {\r\n                            pull1Algorithm();\r\n                        }\r\n                        else if (readAgainForBranch2) {\r\n                            pull2Algorithm();\r\n                        }\r\n                    });\r\n                },\r\n                _closeSteps: () => {\r\n                    reading = false;\r\n                    if (!canceled1) {\r\n                        ReadableByteStreamControllerClose(branch1._readableStreamController);\r\n                    }\r\n                    if (!canceled2) {\r\n                        ReadableByteStreamControllerClose(branch2._readableStreamController);\r\n                    }\r\n                    if (branch1._readableStreamController._pendingPullIntos.length > 0) {\r\n                        ReadableByteStreamControllerRespond(branch1._readableStreamController, 0);\r\n                    }\r\n                    if (branch2._readableStreamController._pendingPullIntos.length > 0) {\r\n                        ReadableByteStreamControllerRespond(branch2._readableStreamController, 0);\r\n                    }\r\n                    if (!canceled1 || !canceled2) {\r\n                        resolveCancelPromise(undefined);\r\n                    }\r\n                },\r\n                _errorSteps: () => {\r\n                    reading = false;\r\n                }\r\n            };\r\n            ReadableStreamDefaultReaderRead(reader, readRequest);\r\n        }\r\n        function pullWithBYOBReader(view, forBranch2) {\r\n            if (IsReadableStreamDefaultReader(reader)) {\r\n                ReadableStreamReaderGenericRelease(reader);\r\n                reader = AcquireReadableStreamBYOBReader(stream);\r\n                forwardReaderError(reader);\r\n            }\r\n            const byobBranch = forBranch2 ? branch2 : branch1;\r\n            const otherBranch = forBranch2 ? branch1 : branch2;\r\n            const readIntoRequest = {\r\n                _chunkSteps: chunk => {\r\n                    // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\r\n                    // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\r\n                    // successful synchronously-available reads get ahead of asynchronously-available errors.\r\n                    _queueMicrotask(() => {\r\n                        readAgainForBranch1 = false;\r\n                        readAgainForBranch2 = false;\r\n                        const byobCanceled = forBranch2 ? canceled2 : canceled1;\r\n                        const otherCanceled = forBranch2 ? canceled1 : canceled2;\r\n                        if (!otherCanceled) {\r\n                            let clonedChunk;\r\n                            try {\r\n                                clonedChunk = CloneAsUint8Array(chunk);\r\n                            }\r\n                            catch (cloneE) {\r\n                                ReadableByteStreamControllerError(byobBranch._readableStreamController, cloneE);\r\n                                ReadableByteStreamControllerError(otherBranch._readableStreamController, cloneE);\r\n                                resolveCancelPromise(ReadableStreamCancel(stream, cloneE));\r\n                                return;\r\n                            }\r\n                            if (!byobCanceled) {\r\n                                ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\r\n                            }\r\n                            ReadableByteStreamControllerEnqueue(otherBranch._readableStreamController, clonedChunk);\r\n                        }\r\n                        else if (!byobCanceled) {\r\n                            ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\r\n                        }\r\n                        reading = false;\r\n                        if (readAgainForBranch1) {\r\n                            pull1Algorithm();\r\n                        }\r\n                        else if (readAgainForBranch2) {\r\n                            pull2Algorithm();\r\n                        }\r\n                    });\r\n                },\r\n                _closeSteps: chunk => {\r\n                    reading = false;\r\n                    const byobCanceled = forBranch2 ? canceled2 : canceled1;\r\n                    const otherCanceled = forBranch2 ? canceled1 : canceled2;\r\n                    if (!byobCanceled) {\r\n                        ReadableByteStreamControllerClose(byobBranch._readableStreamController);\r\n                    }\r\n                    if (!otherCanceled) {\r\n                        ReadableByteStreamControllerClose(otherBranch._readableStreamController);\r\n                    }\r\n                    if (chunk !== undefined) {\r\n                        if (!byobCanceled) {\r\n                            ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\r\n                        }\r\n                        if (!otherCanceled && otherBranch._readableStreamController._pendingPullIntos.length > 0) {\r\n                            ReadableByteStreamControllerRespond(otherBranch._readableStreamController, 0);\r\n                        }\r\n                    }\r\n                    if (!byobCanceled || !otherCanceled) {\r\n                        resolveCancelPromise(undefined);\r\n                    }\r\n                },\r\n                _errorSteps: () => {\r\n                    reading = false;\r\n                }\r\n            };\r\n            ReadableStreamBYOBReaderRead(reader, view, 1, readIntoRequest);\r\n        }\r\n        function pull1Algorithm() {\r\n            if (reading) {\r\n                readAgainForBranch1 = true;\r\n                return promiseResolvedWith(undefined);\r\n            }\r\n            reading = true;\r\n            const byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch1._readableStreamController);\r\n            if (byobRequest === null) {\r\n                pullWithDefaultReader();\r\n            }\r\n            else {\r\n                pullWithBYOBReader(byobRequest._view, false);\r\n            }\r\n            return promiseResolvedWith(undefined);\r\n        }\r\n        function pull2Algorithm() {\r\n            if (reading) {\r\n                readAgainForBranch2 = true;\r\n                return promiseResolvedWith(undefined);\r\n            }\r\n            reading = true;\r\n            const byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch2._readableStreamController);\r\n            if (byobRequest === null) {\r\n                pullWithDefaultReader();\r\n            }\r\n            else {\r\n                pullWithBYOBReader(byobRequest._view, true);\r\n            }\r\n            return promiseResolvedWith(undefined);\r\n        }\r\n        function cancel1Algorithm(reason) {\r\n            canceled1 = true;\r\n            reason1 = reason;\r\n            if (canceled2) {\r\n                const compositeReason = CreateArrayFromList([reason1, reason2]);\r\n                const cancelResult = ReadableStreamCancel(stream, compositeReason);\r\n                resolveCancelPromise(cancelResult);\r\n            }\r\n            return cancelPromise;\r\n        }\r\n        function cancel2Algorithm(reason) {\r\n            canceled2 = true;\r\n            reason2 = reason;\r\n            if (canceled1) {\r\n                const compositeReason = CreateArrayFromList([reason1, reason2]);\r\n                const cancelResult = ReadableStreamCancel(stream, compositeReason);\r\n                resolveCancelPromise(cancelResult);\r\n            }\r\n            return cancelPromise;\r\n        }\r\n        function startAlgorithm() {\r\n            return;\r\n        }\r\n        branch1 = CreateReadableByteStream(startAlgorithm, pull1Algorithm, cancel1Algorithm);\r\n        branch2 = CreateReadableByteStream(startAlgorithm, pull2Algorithm, cancel2Algorithm);\r\n        forwardReaderError(reader);\r\n        return [branch1, branch2];\r\n    }\r\n\r\n    function isReadableStreamLike(stream) {\r\n        return typeIsObject(stream) && typeof stream.getReader !== 'undefined';\r\n    }\r\n\r\n    function ReadableStreamFrom(source) {\r\n        if (isReadableStreamLike(source)) {\r\n            return ReadableStreamFromDefaultReader(source.getReader());\r\n        }\r\n        return ReadableStreamFromIterable(source);\r\n    }\r\n    function ReadableStreamFromIterable(asyncIterable) {\r\n        let stream;\r\n        const iteratorRecord = GetIterator(asyncIterable, 'async');\r\n        const startAlgorithm = noop;\r\n        function pullAlgorithm() {\r\n            let nextResult;\r\n            try {\r\n                nextResult = IteratorNext(iteratorRecord);\r\n            }\r\n            catch (e) {\r\n                return promiseRejectedWith(e);\r\n            }\r\n            const nextPromise = promiseResolvedWith(nextResult);\r\n            return transformPromiseWith(nextPromise, iterResult => {\r\n                if (!typeIsObject(iterResult)) {\r\n                    throw new TypeError('The promise returned by the iterator.next() method must fulfill with an object');\r\n                }\r\n                const done = IteratorComplete(iterResult);\r\n                if (done) {\r\n                    ReadableStreamDefaultControllerClose(stream._readableStreamController);\r\n                }\r\n                else {\r\n                    const value = IteratorValue(iterResult);\r\n                    ReadableStreamDefaultControllerEnqueue(stream._readableStreamController, value);\r\n                }\r\n            });\r\n        }\r\n        function cancelAlgorithm(reason) {\r\n            const iterator = iteratorRecord.iterator;\r\n            let returnMethod;\r\n            try {\r\n                returnMethod = GetMethod(iterator, 'return');\r\n            }\r\n            catch (e) {\r\n                return promiseRejectedWith(e);\r\n            }\r\n            if (returnMethod === undefined) {\r\n                return promiseResolvedWith(undefined);\r\n            }\r\n            let returnResult;\r\n            try {\r\n                returnResult = reflectCall(returnMethod, iterator, [reason]);\r\n            }\r\n            catch (e) {\r\n                return promiseRejectedWith(e);\r\n            }\r\n            const returnPromise = promiseResolvedWith(returnResult);\r\n            return transformPromiseWith(returnPromise, iterResult => {\r\n                if (!typeIsObject(iterResult)) {\r\n                    throw new TypeError('The promise returned by the iterator.return() method must fulfill with an object');\r\n                }\r\n                return undefined;\r\n            });\r\n        }\r\n        stream = CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, 0);\r\n        return stream;\r\n    }\r\n    function ReadableStreamFromDefaultReader(reader) {\r\n        let stream;\r\n        const startAlgorithm = noop;\r\n        function pullAlgorithm() {\r\n            let readPromise;\r\n            try {\r\n                readPromise = reader.read();\r\n            }\r\n            catch (e) {\r\n                return promiseRejectedWith(e);\r\n            }\r\n            return transformPromiseWith(readPromise, readResult => {\r\n                if (!typeIsObject(readResult)) {\r\n                    throw new TypeError('The promise returned by the reader.read() method must fulfill with an object');\r\n                }\r\n                if (readResult.done) {\r\n                    ReadableStreamDefaultControllerClose(stream._readableStreamController);\r\n                }\r\n                else {\r\n                    const value = readResult.value;\r\n                    ReadableStreamDefaultControllerEnqueue(stream._readableStreamController, value);\r\n                }\r\n            });\r\n        }\r\n        function cancelAlgorithm(reason) {\r\n            try {\r\n                return promiseResolvedWith(reader.cancel(reason));\r\n            }\r\n            catch (e) {\r\n                return promiseRejectedWith(e);\r\n            }\r\n        }\r\n        stream = CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, 0);\r\n        return stream;\r\n    }\r\n\r\n    function convertUnderlyingDefaultOrByteSource(source, context) {\r\n        assertDictionary(source, context);\r\n        const original = source;\r\n        const autoAllocateChunkSize = original === null || original === void 0 ? void 0 : original.autoAllocateChunkSize;\r\n        const cancel = original === null || original === void 0 ? void 0 : original.cancel;\r\n        const pull = original === null || original === void 0 ? void 0 : original.pull;\r\n        const start = original === null || original === void 0 ? void 0 : original.start;\r\n        const type = original === null || original === void 0 ? void 0 : original.type;\r\n        return {\r\n            autoAllocateChunkSize: autoAllocateChunkSize === undefined ?\r\n                undefined :\r\n                convertUnsignedLongLongWithEnforceRange(autoAllocateChunkSize, `${context} has member 'autoAllocateChunkSize' that`),\r\n            cancel: cancel === undefined ?\r\n                undefined :\r\n                convertUnderlyingSourceCancelCallback(cancel, original, `${context} has member 'cancel' that`),\r\n            pull: pull === undefined ?\r\n                undefined :\r\n                convertUnderlyingSourcePullCallback(pull, original, `${context} has member 'pull' that`),\r\n            start: start === undefined ?\r\n                undefined :\r\n                convertUnderlyingSourceStartCallback(start, original, `${context} has member 'start' that`),\r\n            type: type === undefined ? undefined : convertReadableStreamType(type, `${context} has member 'type' that`)\r\n        };\r\n    }\r\n    function convertUnderlyingSourceCancelCallback(fn, original, context) {\r\n        assertFunction(fn, context);\r\n        return (reason) => promiseCall(fn, original, [reason]);\r\n    }\r\n    function convertUnderlyingSourcePullCallback(fn, original, context) {\r\n        assertFunction(fn, context);\r\n        return (controller) => promiseCall(fn, original, [controller]);\r\n    }\r\n    function convertUnderlyingSourceStartCallback(fn, original, context) {\r\n        assertFunction(fn, context);\r\n        return (controller) => reflectCall(fn, original, [controller]);\r\n    }\r\n    function convertReadableStreamType(type, context) {\r\n        type = `${type}`;\r\n        if (type !== 'bytes') {\r\n            throw new TypeError(`${context} '${type}' is not a valid enumeration value for ReadableStreamType`);\r\n        }\r\n        return type;\r\n    }\r\n\r\n    function convertIteratorOptions(options, context) {\r\n        assertDictionary(options, context);\r\n        const preventCancel = options === null || options === void 0 ? void 0 : options.preventCancel;\r\n        return { preventCancel: Boolean(preventCancel) };\r\n    }\r\n\r\n    function convertPipeOptions(options, context) {\r\n        assertDictionary(options, context);\r\n        const preventAbort = options === null || options === void 0 ? void 0 : options.preventAbort;\r\n        const preventCancel = options === null || options === void 0 ? void 0 : options.preventCancel;\r\n        const preventClose = options === null || options === void 0 ? void 0 : options.preventClose;\r\n        const signal = options === null || options === void 0 ? void 0 : options.signal;\r\n        if (signal !== undefined) {\r\n            assertAbortSignal(signal, `${context} has member 'signal' that`);\r\n        }\r\n        return {\r\n            preventAbort: Boolean(preventAbort),\r\n            preventCancel: Boolean(preventCancel),\r\n            preventClose: Boolean(preventClose),\r\n            signal\r\n        };\r\n    }\r\n    function assertAbortSignal(signal, context) {\r\n        if (!isAbortSignal(signal)) {\r\n            throw new TypeError(`${context} is not an AbortSignal.`);\r\n        }\r\n    }\r\n\r\n    function convertReadableWritablePair(pair, context) {\r\n        assertDictionary(pair, context);\r\n        const readable = pair === null || pair === void 0 ? void 0 : pair.readable;\r\n        assertRequiredField(readable, 'readable', 'ReadableWritablePair');\r\n        assertReadableStream(readable, `${context} has member 'readable' that`);\r\n        const writable = pair === null || pair === void 0 ? void 0 : pair.writable;\r\n        assertRequiredField(writable, 'writable', 'ReadableWritablePair');\r\n        assertWritableStream(writable, `${context} has member 'writable' that`);\r\n        return { readable, writable };\r\n    }\r\n\r\n    /**\r\n     * A readable stream represents a source of data, from which you can read.\r\n     *\r\n     * @public\r\n     */\r\n    class ReadableStream {\r\n        constructor(rawUnderlyingSource = {}, rawStrategy = {}) {\r\n            if (rawUnderlyingSource === undefined) {\r\n                rawUnderlyingSource = null;\r\n            }\r\n            else {\r\n                assertObject(rawUnderlyingSource, 'First parameter');\r\n            }\r\n            const strategy = convertQueuingStrategy(rawStrategy, 'Second parameter');\r\n            const underlyingSource = convertUnderlyingDefaultOrByteSource(rawUnderlyingSource, 'First parameter');\r\n            InitializeReadableStream(this);\r\n            if (underlyingSource.type === 'bytes') {\r\n                if (strategy.size !== undefined) {\r\n                    throw new RangeError('The strategy for a byte stream cannot have a size function');\r\n                }\r\n                const highWaterMark = ExtractHighWaterMark(strategy, 0);\r\n                SetUpReadableByteStreamControllerFromUnderlyingSource(this, underlyingSource, highWaterMark);\r\n            }\r\n            else {\r\n                const sizeAlgorithm = ExtractSizeAlgorithm(strategy);\r\n                const highWaterMark = ExtractHighWaterMark(strategy, 1);\r\n                SetUpReadableStreamDefaultControllerFromUnderlyingSource(this, underlyingSource, highWaterMark, sizeAlgorithm);\r\n            }\r\n        }\r\n        /**\r\n         * Whether or not the readable stream is locked to a {@link ReadableStreamDefaultReader | reader}.\r\n         */\r\n        get locked() {\r\n            if (!IsReadableStream(this)) {\r\n                throw streamBrandCheckException$1('locked');\r\n            }\r\n            return IsReadableStreamLocked(this);\r\n        }\r\n        /**\r\n         * Cancels the stream, signaling a loss of interest in the stream by a consumer.\r\n         *\r\n         * The supplied `reason` argument will be given to the underlying source's {@link UnderlyingSource.cancel | cancel()}\r\n         * method, which might or might not use it.\r\n         */\r\n        cancel(reason = undefined) {\r\n            if (!IsReadableStream(this)) {\r\n                return promiseRejectedWith(streamBrandCheckException$1('cancel'));\r\n            }\r\n            if (IsReadableStreamLocked(this)) {\r\n                return promiseRejectedWith(new TypeError('Cannot cancel a stream that already has a reader'));\r\n            }\r\n            return ReadableStreamCancel(this, reason);\r\n        }\r\n        getReader(rawOptions = undefined) {\r\n            if (!IsReadableStream(this)) {\r\n                throw streamBrandCheckException$1('getReader');\r\n            }\r\n            const options = convertReaderOptions(rawOptions, 'First parameter');\r\n            if (options.mode === undefined) {\r\n                return AcquireReadableStreamDefaultReader(this);\r\n            }\r\n            return AcquireReadableStreamBYOBReader(this);\r\n        }\r\n        pipeThrough(rawTransform, rawOptions = {}) {\r\n            if (!IsReadableStream(this)) {\r\n                throw streamBrandCheckException$1('pipeThrough');\r\n            }\r\n            assertRequiredArgument(rawTransform, 1, 'pipeThrough');\r\n            const transform = convertReadableWritablePair(rawTransform, 'First parameter');\r\n            const options = convertPipeOptions(rawOptions, 'Second parameter');\r\n            if (IsReadableStreamLocked(this)) {\r\n                throw new TypeError('ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream');\r\n            }\r\n            if (IsWritableStreamLocked(transform.writable)) {\r\n                throw new TypeError('ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream');\r\n            }\r\n            const promise = ReadableStreamPipeTo(this, transform.writable, options.preventClose, options.preventAbort, options.preventCancel, options.signal);\r\n            setPromiseIsHandledToTrue(promise);\r\n            return transform.readable;\r\n        }\r\n        pipeTo(destination, rawOptions = {}) {\r\n            if (!IsReadableStream(this)) {\r\n                return promiseRejectedWith(streamBrandCheckException$1('pipeTo'));\r\n            }\r\n            if (destination === undefined) {\r\n                return promiseRejectedWith(`Parameter 1 is required in 'pipeTo'.`);\r\n            }\r\n            if (!IsWritableStream(destination)) {\r\n                return promiseRejectedWith(new TypeError(`ReadableStream.prototype.pipeTo's first argument must be a WritableStream`));\r\n            }\r\n            let options;\r\n            try {\r\n                options = convertPipeOptions(rawOptions, 'Second parameter');\r\n            }\r\n            catch (e) {\r\n                return promiseRejectedWith(e);\r\n            }\r\n            if (IsReadableStreamLocked(this)) {\r\n                return promiseRejectedWith(new TypeError('ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream'));\r\n            }\r\n            if (IsWritableStreamLocked(destination)) {\r\n                return promiseRejectedWith(new TypeError('ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream'));\r\n            }\r\n            return ReadableStreamPipeTo(this, destination, options.preventClose, options.preventAbort, options.preventCancel, options.signal);\r\n        }\r\n        /**\r\n         * Tees this readable stream, returning a two-element array containing the two resulting branches as\r\n         * new {@link ReadableStream} instances.\r\n         *\r\n         * Teeing a stream will lock it, preventing any other consumer from acquiring a reader.\r\n         * To cancel the stream, cancel both of the resulting branches; a composite cancellation reason will then be\r\n         * propagated to the stream's underlying source.\r\n         *\r\n         * Note that the chunks seen in each branch will be the same object. If the chunks are not immutable,\r\n         * this could allow interference between the two branches.\r\n         */\r\n        tee() {\r\n            if (!IsReadableStream(this)) {\r\n                throw streamBrandCheckException$1('tee');\r\n            }\r\n            const branches = ReadableStreamTee(this);\r\n            return CreateArrayFromList(branches);\r\n        }\r\n        values(rawOptions = undefined) {\r\n            if (!IsReadableStream(this)) {\r\n                throw streamBrandCheckException$1('values');\r\n            }\r\n            const options = convertIteratorOptions(rawOptions, 'First parameter');\r\n            return AcquireReadableStreamAsyncIterator(this, options.preventCancel);\r\n        }\r\n        [SymbolAsyncIterator](options) {\r\n            // Stub implementation, overridden below\r\n            return this.values(options);\r\n        }\r\n        /**\r\n         * Creates a new ReadableStream wrapping the provided iterable or async iterable.\r\n         *\r\n         * This can be used to adapt various kinds of objects into a readable stream,\r\n         * such as an array, an async generator, or a Node.js readable stream.\r\n         */\r\n        static from(asyncIterable) {\r\n            return ReadableStreamFrom(asyncIterable);\r\n        }\r\n    }\r\n    Object.defineProperties(ReadableStream, {\r\n        from: { enumerable: true }\r\n    });\r\n    Object.defineProperties(ReadableStream.prototype, {\r\n        cancel: { enumerable: true },\r\n        getReader: { enumerable: true },\r\n        pipeThrough: { enumerable: true },\r\n        pipeTo: { enumerable: true },\r\n        tee: { enumerable: true },\r\n        values: { enumerable: true },\r\n        locked: { enumerable: true }\r\n    });\r\n    setFunctionName(ReadableStream.from, 'from');\r\n    setFunctionName(ReadableStream.prototype.cancel, 'cancel');\r\n    setFunctionName(ReadableStream.prototype.getReader, 'getReader');\r\n    setFunctionName(ReadableStream.prototype.pipeThrough, 'pipeThrough');\r\n    setFunctionName(ReadableStream.prototype.pipeTo, 'pipeTo');\r\n    setFunctionName(ReadableStream.prototype.tee, 'tee');\r\n    setFunctionName(ReadableStream.prototype.values, 'values');\r\n    if (typeof Symbol.toStringTag === 'symbol') {\r\n        Object.defineProperty(ReadableStream.prototype, Symbol.toStringTag, {\r\n            value: 'ReadableStream',\r\n            configurable: true\r\n        });\r\n    }\r\n    Object.defineProperty(ReadableStream.prototype, SymbolAsyncIterator, {\r\n        value: ReadableStream.prototype.values,\r\n        writable: true,\r\n        configurable: true\r\n    });\r\n    // Abstract operations for the ReadableStream.\r\n    // Throws if and only if startAlgorithm throws.\r\n    function CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark = 1, sizeAlgorithm = () => 1) {\r\n        const stream = Object.create(ReadableStream.prototype);\r\n        InitializeReadableStream(stream);\r\n        const controller = Object.create(ReadableStreamDefaultController.prototype);\r\n        SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm);\r\n        return stream;\r\n    }\r\n    // Throws if and only if startAlgorithm throws.\r\n    function CreateReadableByteStream(startAlgorithm, pullAlgorithm, cancelAlgorithm) {\r\n        const stream = Object.create(ReadableStream.prototype);\r\n        InitializeReadableStream(stream);\r\n        const controller = Object.create(ReadableByteStreamController.prototype);\r\n        SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, 0, undefined);\r\n        return stream;\r\n    }\r\n    function InitializeReadableStream(stream) {\r\n        stream._state = 'readable';\r\n        stream._reader = undefined;\r\n        stream._storedError = undefined;\r\n        stream._disturbed = false;\r\n    }\r\n    function IsReadableStream(x) {\r\n        if (!typeIsObject(x)) {\r\n            return false;\r\n        }\r\n        if (!Object.prototype.hasOwnProperty.call(x, '_readableStreamController')) {\r\n            return false;\r\n        }\r\n        return x instanceof ReadableStream;\r\n    }\r\n    function IsReadableStreamLocked(stream) {\r\n        if (stream._reader === undefined) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    // ReadableStream API exposed for controllers.\r\n    function ReadableStreamCancel(stream, reason) {\r\n        stream._disturbed = true;\r\n        if (stream._state === 'closed') {\r\n            return promiseResolvedWith(undefined);\r\n        }\r\n        if (stream._state === 'errored') {\r\n            return promiseRejectedWith(stream._storedError);\r\n        }\r\n        ReadableStreamClose(stream);\r\n        const reader = stream._reader;\r\n        if (reader !== undefined && IsReadableStreamBYOBReader(reader)) {\r\n            const readIntoRequests = reader._readIntoRequests;\r\n            reader._readIntoRequests = new SimpleQueue();\r\n            readIntoRequests.forEach(readIntoRequest => {\r\n                readIntoRequest._closeSteps(undefined);\r\n            });\r\n        }\r\n        const sourceCancelPromise = stream._readableStreamController[CancelSteps](reason);\r\n        return transformPromiseWith(sourceCancelPromise, noop);\r\n    }\r\n    function ReadableStreamClose(stream) {\r\n        stream._state = 'closed';\r\n        const reader = stream._reader;\r\n        if (reader === undefined) {\r\n            return;\r\n        }\r\n        defaultReaderClosedPromiseResolve(reader);\r\n        if (IsReadableStreamDefaultReader(reader)) {\r\n            const readRequests = reader._readRequests;\r\n            reader._readRequests = new SimpleQueue();\r\n            readRequests.forEach(readRequest => {\r\n                readRequest._closeSteps();\r\n            });\r\n        }\r\n    }\r\n    function ReadableStreamError(stream, e) {\r\n        stream._state = 'errored';\r\n        stream._storedError = e;\r\n        const reader = stream._reader;\r\n        if (reader === undefined) {\r\n            return;\r\n        }\r\n        defaultReaderClosedPromiseReject(reader, e);\r\n        if (IsReadableStreamDefaultReader(reader)) {\r\n            ReadableStreamDefaultReaderErrorReadRequests(reader, e);\r\n        }\r\n        else {\r\n            ReadableStreamBYOBReaderErrorReadIntoRequests(reader, e);\r\n        }\r\n    }\r\n    // Helper functions for the ReadableStream.\r\n    function streamBrandCheckException$1(name) {\r\n        return new TypeError(`ReadableStream.prototype.${name} can only be used on a ReadableStream`);\r\n    }\r\n\r\n    function convertQueuingStrategyInit(init, context) {\r\n        assertDictionary(init, context);\r\n        const highWaterMark = init === null || init === void 0 ? void 0 : init.highWaterMark;\r\n        assertRequiredField(highWaterMark, 'highWaterMark', 'QueuingStrategyInit');\r\n        return {\r\n            highWaterMark: convertUnrestrictedDouble(highWaterMark)\r\n        };\r\n    }\r\n\r\n    // The size function must not have a prototype property nor be a constructor\r\n    const byteLengthSizeFunction = (chunk) => {\r\n        return chunk.byteLength;\r\n    };\r\n    setFunctionName(byteLengthSizeFunction, 'size');\r\n    /**\r\n     * A queuing strategy that counts the number of bytes in each chunk.\r\n     *\r\n     * @public\r\n     */\r\n    class ByteLengthQueuingStrategy {\r\n        constructor(options) {\r\n            assertRequiredArgument(options, 1, 'ByteLengthQueuingStrategy');\r\n            options = convertQueuingStrategyInit(options, 'First parameter');\r\n            this._byteLengthQueuingStrategyHighWaterMark = options.highWaterMark;\r\n        }\r\n        /**\r\n         * Returns the high water mark provided to the constructor.\r\n         */\r\n        get highWaterMark() {\r\n            if (!IsByteLengthQueuingStrategy(this)) {\r\n                throw byteLengthBrandCheckException('highWaterMark');\r\n            }\r\n            return this._byteLengthQueuingStrategyHighWaterMark;\r\n        }\r\n        /**\r\n         * Measures the size of `chunk` by returning the value of its `byteLength` property.\r\n         */\r\n        get size() {\r\n            if (!IsByteLengthQueuingStrategy(this)) {\r\n                throw byteLengthBrandCheckException('size');\r\n            }\r\n            return byteLengthSizeFunction;\r\n        }\r\n    }\r\n    Object.defineProperties(ByteLengthQueuingStrategy.prototype, {\r\n        highWaterMark: { enumerable: true },\r\n        size: { enumerable: true }\r\n    });\r\n    if (typeof Symbol.toStringTag === 'symbol') {\r\n        Object.defineProperty(ByteLengthQueuingStrategy.prototype, Symbol.toStringTag, {\r\n            value: 'ByteLengthQueuingStrategy',\r\n            configurable: true\r\n        });\r\n    }\r\n    // Helper functions for the ByteLengthQueuingStrategy.\r\n    function byteLengthBrandCheckException(name) {\r\n        return new TypeError(`ByteLengthQueuingStrategy.prototype.${name} can only be used on a ByteLengthQueuingStrategy`);\r\n    }\r\n    function IsByteLengthQueuingStrategy(x) {\r\n        if (!typeIsObject(x)) {\r\n            return false;\r\n        }\r\n        if (!Object.prototype.hasOwnProperty.call(x, '_byteLengthQueuingStrategyHighWaterMark')) {\r\n            return false;\r\n        }\r\n        return x instanceof ByteLengthQueuingStrategy;\r\n    }\r\n\r\n    // The size function must not have a prototype property nor be a constructor\r\n    const countSizeFunction = () => {\r\n        return 1;\r\n    };\r\n    setFunctionName(countSizeFunction, 'size');\r\n    /**\r\n     * A queuing strategy that counts the number of chunks.\r\n     *\r\n     * @public\r\n     */\r\n    class CountQueuingStrategy {\r\n        constructor(options) {\r\n            assertRequiredArgument(options, 1, 'CountQueuingStrategy');\r\n            options = convertQueuingStrategyInit(options, 'First parameter');\r\n            this._countQueuingStrategyHighWaterMark = options.highWaterMark;\r\n        }\r\n        /**\r\n         * Returns the high water mark provided to the constructor.\r\n         */\r\n        get highWaterMark() {\r\n            if (!IsCountQueuingStrategy(this)) {\r\n                throw countBrandCheckException('highWaterMark');\r\n            }\r\n            return this._countQueuingStrategyHighWaterMark;\r\n        }\r\n        /**\r\n         * Measures the size of `chunk` by always returning 1.\r\n         * This ensures that the total queue size is a count of the number of chunks in the queue.\r\n         */\r\n        get size() {\r\n            if (!IsCountQueuingStrategy(this)) {\r\n                throw countBrandCheckException('size');\r\n            }\r\n            return countSizeFunction;\r\n        }\r\n    }\r\n    Object.defineProperties(CountQueuingStrategy.prototype, {\r\n        highWaterMark: { enumerable: true },\r\n        size: { enumerable: true }\r\n    });\r\n    if (typeof Symbol.toStringTag === 'symbol') {\r\n        Object.defineProperty(CountQueuingStrategy.prototype, Symbol.toStringTag, {\r\n            value: 'CountQueuingStrategy',\r\n            configurable: true\r\n        });\r\n    }\r\n    // Helper functions for the CountQueuingStrategy.\r\n    function countBrandCheckException(name) {\r\n        return new TypeError(`CountQueuingStrategy.prototype.${name} can only be used on a CountQueuingStrategy`);\r\n    }\r\n    function IsCountQueuingStrategy(x) {\r\n        if (!typeIsObject(x)) {\r\n            return false;\r\n        }\r\n        if (!Object.prototype.hasOwnProperty.call(x, '_countQueuingStrategyHighWaterMark')) {\r\n            return false;\r\n        }\r\n        return x instanceof CountQueuingStrategy;\r\n    }\r\n\r\n    function convertTransformer(original, context) {\r\n        assertDictionary(original, context);\r\n        const cancel = original === null || original === void 0 ? void 0 : original.cancel;\r\n        const flush = original === null || original === void 0 ? void 0 : original.flush;\r\n        const readableType = original === null || original === void 0 ? void 0 : original.readableType;\r\n        const start = original === null || original === void 0 ? void 0 : original.start;\r\n        const transform = original === null || original === void 0 ? void 0 : original.transform;\r\n        const writableType = original === null || original === void 0 ? void 0 : original.writableType;\r\n        return {\r\n            cancel: cancel === undefined ?\r\n                undefined :\r\n                convertTransformerCancelCallback(cancel, original, `${context} has member 'cancel' that`),\r\n            flush: flush === undefined ?\r\n                undefined :\r\n                convertTransformerFlushCallback(flush, original, `${context} has member 'flush' that`),\r\n            readableType,\r\n            start: start === undefined ?\r\n                undefined :\r\n                convertTransformerStartCallback(start, original, `${context} has member 'start' that`),\r\n            transform: transform === undefined ?\r\n                undefined :\r\n                convertTransformerTransformCallback(transform, original, `${context} has member 'transform' that`),\r\n            writableType\r\n        };\r\n    }\r\n    function convertTransformerFlushCallback(fn, original, context) {\r\n        assertFunction(fn, context);\r\n        return (controller) => promiseCall(fn, original, [controller]);\r\n    }\r\n    function convertTransformerStartCallback(fn, original, context) {\r\n        assertFunction(fn, context);\r\n        return (controller) => reflectCall(fn, original, [controller]);\r\n    }\r\n    function convertTransformerTransformCallback(fn, original, context) {\r\n        assertFunction(fn, context);\r\n        return (chunk, controller) => promiseCall(fn, original, [chunk, controller]);\r\n    }\r\n    function convertTransformerCancelCallback(fn, original, context) {\r\n        assertFunction(fn, context);\r\n        return (reason) => promiseCall(fn, original, [reason]);\r\n    }\r\n\r\n    // Class TransformStream\r\n    /**\r\n     * A transform stream consists of a pair of streams: a {@link WritableStream | writable stream},\r\n     * known as its writable side, and a {@link ReadableStream | readable stream}, known as its readable side.\r\n     * In a manner specific to the transform stream in question, writes to the writable side result in new data being\r\n     * made available for reading from the readable side.\r\n     *\r\n     * @public\r\n     */\r\n    class TransformStream {\r\n        constructor(rawTransformer = {}, rawWritableStrategy = {}, rawReadableStrategy = {}) {\r\n            if (rawTransformer === undefined) {\r\n                rawTransformer = null;\r\n            }\r\n            const writableStrategy = convertQueuingStrategy(rawWritableStrategy, 'Second parameter');\r\n            const readableStrategy = convertQueuingStrategy(rawReadableStrategy, 'Third parameter');\r\n            const transformer = convertTransformer(rawTransformer, 'First parameter');\r\n            if (transformer.readableType !== undefined) {\r\n                throw new RangeError('Invalid readableType specified');\r\n            }\r\n            if (transformer.writableType !== undefined) {\r\n                throw new RangeError('Invalid writableType specified');\r\n            }\r\n            const readableHighWaterMark = ExtractHighWaterMark(readableStrategy, 0);\r\n            const readableSizeAlgorithm = ExtractSizeAlgorithm(readableStrategy);\r\n            const writableHighWaterMark = ExtractHighWaterMark(writableStrategy, 1);\r\n            const writableSizeAlgorithm = ExtractSizeAlgorithm(writableStrategy);\r\n            let startPromise_resolve;\r\n            const startPromise = newPromise(resolve => {\r\n                startPromise_resolve = resolve;\r\n            });\r\n            InitializeTransformStream(this, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm);\r\n            SetUpTransformStreamDefaultControllerFromTransformer(this, transformer);\r\n            if (transformer.start !== undefined) {\r\n                startPromise_resolve(transformer.start(this._transformStreamController));\r\n            }\r\n            else {\r\n                startPromise_resolve(undefined);\r\n            }\r\n        }\r\n        /**\r\n         * The readable side of the transform stream.\r\n         */\r\n        get readable() {\r\n            if (!IsTransformStream(this)) {\r\n                throw streamBrandCheckException('readable');\r\n            }\r\n            return this._readable;\r\n        }\r\n        /**\r\n         * The writable side of the transform stream.\r\n         */\r\n        get writable() {\r\n            if (!IsTransformStream(this)) {\r\n                throw streamBrandCheckException('writable');\r\n            }\r\n            return this._writable;\r\n        }\r\n    }\r\n    Object.defineProperties(TransformStream.prototype, {\r\n        readable: { enumerable: true },\r\n        writable: { enumerable: true }\r\n    });\r\n    if (typeof Symbol.toStringTag === 'symbol') {\r\n        Object.defineProperty(TransformStream.prototype, Symbol.toStringTag, {\r\n            value: 'TransformStream',\r\n            configurable: true\r\n        });\r\n    }\r\n    function InitializeTransformStream(stream, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm) {\r\n        function startAlgorithm() {\r\n            return startPromise;\r\n        }\r\n        function writeAlgorithm(chunk) {\r\n            return TransformStreamDefaultSinkWriteAlgorithm(stream, chunk);\r\n        }\r\n        function abortAlgorithm(reason) {\r\n            return TransformStreamDefaultSinkAbortAlgorithm(stream, reason);\r\n        }\r\n        function closeAlgorithm() {\r\n            return TransformStreamDefaultSinkCloseAlgorithm(stream);\r\n        }\r\n        stream._writable = CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, writableHighWaterMark, writableSizeAlgorithm);\r\n        function pullAlgorithm() {\r\n            return TransformStreamDefaultSourcePullAlgorithm(stream);\r\n        }\r\n        function cancelAlgorithm(reason) {\r\n            return TransformStreamDefaultSourceCancelAlgorithm(stream, reason);\r\n        }\r\n        stream._readable = CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, readableHighWaterMark, readableSizeAlgorithm);\r\n        // The [[backpressure]] slot is set to undefined so that it can be initialised by TransformStreamSetBackpressure.\r\n        stream._backpressure = undefined;\r\n        stream._backpressureChangePromise = undefined;\r\n        stream._backpressureChangePromise_resolve = undefined;\r\n        TransformStreamSetBackpressure(stream, true);\r\n        stream._transformStreamController = undefined;\r\n    }\r\n    function IsTransformStream(x) {\r\n        if (!typeIsObject(x)) {\r\n            return false;\r\n        }\r\n        if (!Object.prototype.hasOwnProperty.call(x, '_transformStreamController')) {\r\n            return false;\r\n        }\r\n        return x instanceof TransformStream;\r\n    }\r\n    // This is a no-op if both sides are already errored.\r\n    function TransformStreamError(stream, e) {\r\n        ReadableStreamDefaultControllerError(stream._readable._readableStreamController, e);\r\n        TransformStreamErrorWritableAndUnblockWrite(stream, e);\r\n    }\r\n    function TransformStreamErrorWritableAndUnblockWrite(stream, e) {\r\n        TransformStreamDefaultControllerClearAlgorithms(stream._transformStreamController);\r\n        WritableStreamDefaultControllerErrorIfNeeded(stream._writable._writableStreamController, e);\r\n        TransformStreamUnblockWrite(stream);\r\n    }\r\n    function TransformStreamUnblockWrite(stream) {\r\n        if (stream._backpressure) {\r\n            // Pretend that pull() was called to permit any pending write() calls to complete. TransformStreamSetBackpressure()\r\n            // cannot be called from enqueue() or pull() once the ReadableStream is errored, so this will will be the final time\r\n            // _backpressure is set.\r\n            TransformStreamSetBackpressure(stream, false);\r\n        }\r\n    }\r\n    function TransformStreamSetBackpressure(stream, backpressure) {\r\n        // Passes also when called during construction.\r\n        if (stream._backpressureChangePromise !== undefined) {\r\n            stream._backpressureChangePromise_resolve();\r\n        }\r\n        stream._backpressureChangePromise = newPromise(resolve => {\r\n            stream._backpressureChangePromise_resolve = resolve;\r\n        });\r\n        stream._backpressure = backpressure;\r\n    }\r\n    // Class TransformStreamDefaultController\r\n    /**\r\n     * Allows control of the {@link ReadableStream} and {@link WritableStream} of the associated {@link TransformStream}.\r\n     *\r\n     * @public\r\n     */\r\n    class TransformStreamDefaultController {\r\n        constructor() {\r\n            throw new TypeError('Illegal constructor');\r\n        }\r\n        /**\r\n         * Returns the desired size to fill the readable side’s internal queue. It can be negative, if the queue is over-full.\r\n         */\r\n        get desiredSize() {\r\n            if (!IsTransformStreamDefaultController(this)) {\r\n                throw defaultControllerBrandCheckException('desiredSize');\r\n            }\r\n            const readableController = this._controlledTransformStream._readable._readableStreamController;\r\n            return ReadableStreamDefaultControllerGetDesiredSize(readableController);\r\n        }\r\n        enqueue(chunk = undefined) {\r\n            if (!IsTransformStreamDefaultController(this)) {\r\n                throw defaultControllerBrandCheckException('enqueue');\r\n            }\r\n            TransformStreamDefaultControllerEnqueue(this, chunk);\r\n        }\r\n        /**\r\n         * Errors both the readable side and the writable side of the controlled transform stream, making all future\r\n         * interactions with it fail with the given error `e`. Any chunks queued for transformation will be discarded.\r\n         */\r\n        error(reason = undefined) {\r\n            if (!IsTransformStreamDefaultController(this)) {\r\n                throw defaultControllerBrandCheckException('error');\r\n            }\r\n            TransformStreamDefaultControllerError(this, reason);\r\n        }\r\n        /**\r\n         * Closes the readable side and errors the writable side of the controlled transform stream. This is useful when the\r\n         * transformer only needs to consume a portion of the chunks written to the writable side.\r\n         */\r\n        terminate() {\r\n            if (!IsTransformStreamDefaultController(this)) {\r\n                throw defaultControllerBrandCheckException('terminate');\r\n            }\r\n            TransformStreamDefaultControllerTerminate(this);\r\n        }\r\n    }\r\n    Object.defineProperties(TransformStreamDefaultController.prototype, {\r\n        enqueue: { enumerable: true },\r\n        error: { enumerable: true },\r\n        terminate: { enumerable: true },\r\n        desiredSize: { enumerable: true }\r\n    });\r\n    setFunctionName(TransformStreamDefaultController.prototype.enqueue, 'enqueue');\r\n    setFunctionName(TransformStreamDefaultController.prototype.error, 'error');\r\n    setFunctionName(TransformStreamDefaultController.prototype.terminate, 'terminate');\r\n    if (typeof Symbol.toStringTag === 'symbol') {\r\n        Object.defineProperty(TransformStreamDefaultController.prototype, Symbol.toStringTag, {\r\n            value: 'TransformStreamDefaultController',\r\n            configurable: true\r\n        });\r\n    }\r\n    // Transform Stream Default Controller Abstract Operations\r\n    function IsTransformStreamDefaultController(x) {\r\n        if (!typeIsObject(x)) {\r\n            return false;\r\n        }\r\n        if (!Object.prototype.hasOwnProperty.call(x, '_controlledTransformStream')) {\r\n            return false;\r\n        }\r\n        return x instanceof TransformStreamDefaultController;\r\n    }\r\n    function SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm, cancelAlgorithm) {\r\n        controller._controlledTransformStream = stream;\r\n        stream._transformStreamController = controller;\r\n        controller._transformAlgorithm = transformAlgorithm;\r\n        controller._flushAlgorithm = flushAlgorithm;\r\n        controller._cancelAlgorithm = cancelAlgorithm;\r\n        controller._finishPromise = undefined;\r\n        controller._finishPromise_resolve = undefined;\r\n        controller._finishPromise_reject = undefined;\r\n    }\r\n    function SetUpTransformStreamDefaultControllerFromTransformer(stream, transformer) {\r\n        const controller = Object.create(TransformStreamDefaultController.prototype);\r\n        let transformAlgorithm;\r\n        let flushAlgorithm;\r\n        let cancelAlgorithm;\r\n        if (transformer.transform !== undefined) {\r\n            transformAlgorithm = chunk => transformer.transform(chunk, controller);\r\n        }\r\n        else {\r\n            transformAlgorithm = chunk => {\r\n                try {\r\n                    TransformStreamDefaultControllerEnqueue(controller, chunk);\r\n                    return promiseResolvedWith(undefined);\r\n                }\r\n                catch (transformResultE) {\r\n                    return promiseRejectedWith(transformResultE);\r\n                }\r\n            };\r\n        }\r\n        if (transformer.flush !== undefined) {\r\n            flushAlgorithm = () => transformer.flush(controller);\r\n        }\r\n        else {\r\n            flushAlgorithm = () => promiseResolvedWith(undefined);\r\n        }\r\n        if (transformer.cancel !== undefined) {\r\n            cancelAlgorithm = reason => transformer.cancel(reason);\r\n        }\r\n        else {\r\n            cancelAlgorithm = () => promiseResolvedWith(undefined);\r\n        }\r\n        SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm, cancelAlgorithm);\r\n    }\r\n    function TransformStreamDefaultControllerClearAlgorithms(controller) {\r\n        controller._transformAlgorithm = undefined;\r\n        controller._flushAlgorithm = undefined;\r\n        controller._cancelAlgorithm = undefined;\r\n    }\r\n    function TransformStreamDefaultControllerEnqueue(controller, chunk) {\r\n        const stream = controller._controlledTransformStream;\r\n        const readableController = stream._readable._readableStreamController;\r\n        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(readableController)) {\r\n            throw new TypeError('Readable side is not in a state that permits enqueue');\r\n        }\r\n        // We throttle transform invocations based on the backpressure of the ReadableStream, but we still\r\n        // accept TransformStreamDefaultControllerEnqueue() calls.\r\n        try {\r\n            ReadableStreamDefaultControllerEnqueue(readableController, chunk);\r\n        }\r\n        catch (e) {\r\n            // This happens when readableStrategy.size() throws.\r\n            TransformStreamErrorWritableAndUnblockWrite(stream, e);\r\n            throw stream._readable._storedError;\r\n        }\r\n        const backpressure = ReadableStreamDefaultControllerHasBackpressure(readableController);\r\n        if (backpressure !== stream._backpressure) {\r\n            TransformStreamSetBackpressure(stream, true);\r\n        }\r\n    }\r\n    function TransformStreamDefaultControllerError(controller, e) {\r\n        TransformStreamError(controller._controlledTransformStream, e);\r\n    }\r\n    function TransformStreamDefaultControllerPerformTransform(controller, chunk) {\r\n        const transformPromise = controller._transformAlgorithm(chunk);\r\n        return transformPromiseWith(transformPromise, undefined, r => {\r\n            TransformStreamError(controller._controlledTransformStream, r);\r\n            throw r;\r\n        });\r\n    }\r\n    function TransformStreamDefaultControllerTerminate(controller) {\r\n        const stream = controller._controlledTransformStream;\r\n        const readableController = stream._readable._readableStreamController;\r\n        ReadableStreamDefaultControllerClose(readableController);\r\n        const error = new TypeError('TransformStream terminated');\r\n        TransformStreamErrorWritableAndUnblockWrite(stream, error);\r\n    }\r\n    // TransformStreamDefaultSink Algorithms\r\n    function TransformStreamDefaultSinkWriteAlgorithm(stream, chunk) {\r\n        const controller = stream._transformStreamController;\r\n        if (stream._backpressure) {\r\n            const backpressureChangePromise = stream._backpressureChangePromise;\r\n            return transformPromiseWith(backpressureChangePromise, () => {\r\n                const writable = stream._writable;\r\n                const state = writable._state;\r\n                if (state === 'erroring') {\r\n                    throw writable._storedError;\r\n                }\r\n                return TransformStreamDefaultControllerPerformTransform(controller, chunk);\r\n            });\r\n        }\r\n        return TransformStreamDefaultControllerPerformTransform(controller, chunk);\r\n    }\r\n    function TransformStreamDefaultSinkAbortAlgorithm(stream, reason) {\r\n        const controller = stream._transformStreamController;\r\n        if (controller._finishPromise !== undefined) {\r\n            return controller._finishPromise;\r\n        }\r\n        // stream._readable cannot change after construction, so caching it across a call to user code is safe.\r\n        const readable = stream._readable;\r\n        // Assign the _finishPromise now so that if _cancelAlgorithm calls readable.cancel() internally,\r\n        // we don't run the _cancelAlgorithm again.\r\n        controller._finishPromise = newPromise((resolve, reject) => {\r\n            controller._finishPromise_resolve = resolve;\r\n            controller._finishPromise_reject = reject;\r\n        });\r\n        const cancelPromise = controller._cancelAlgorithm(reason);\r\n        TransformStreamDefaultControllerClearAlgorithms(controller);\r\n        uponPromise(cancelPromise, () => {\r\n            if (readable._state === 'errored') {\r\n                defaultControllerFinishPromiseReject(controller, readable._storedError);\r\n            }\r\n            else {\r\n                ReadableStreamDefaultControllerError(readable._readableStreamController, reason);\r\n                defaultControllerFinishPromiseResolve(controller);\r\n            }\r\n            return null;\r\n        }, r => {\r\n            ReadableStreamDefaultControllerError(readable._readableStreamController, r);\r\n            defaultControllerFinishPromiseReject(controller, r);\r\n            return null;\r\n        });\r\n        return controller._finishPromise;\r\n    }\r\n    function TransformStreamDefaultSinkCloseAlgorithm(stream) {\r\n        const controller = stream._transformStreamController;\r\n        if (controller._finishPromise !== undefined) {\r\n            return controller._finishPromise;\r\n        }\r\n        // stream._readable cannot change after construction, so caching it across a call to user code is safe.\r\n        const readable = stream._readable;\r\n        // Assign the _finishPromise now so that if _flushAlgorithm calls readable.cancel() internally,\r\n        // we don't also run the _cancelAlgorithm.\r\n        controller._finishPromise = newPromise((resolve, reject) => {\r\n            controller._finishPromise_resolve = resolve;\r\n            controller._finishPromise_reject = reject;\r\n        });\r\n        const flushPromise = controller._flushAlgorithm();\r\n        TransformStreamDefaultControllerClearAlgorithms(controller);\r\n        uponPromise(flushPromise, () => {\r\n            if (readable._state === 'errored') {\r\n                defaultControllerFinishPromiseReject(controller, readable._storedError);\r\n            }\r\n            else {\r\n                ReadableStreamDefaultControllerClose(readable._readableStreamController);\r\n                defaultControllerFinishPromiseResolve(controller);\r\n            }\r\n            return null;\r\n        }, r => {\r\n            ReadableStreamDefaultControllerError(readable._readableStreamController, r);\r\n            defaultControllerFinishPromiseReject(controller, r);\r\n            return null;\r\n        });\r\n        return controller._finishPromise;\r\n    }\r\n    // TransformStreamDefaultSource Algorithms\r\n    function TransformStreamDefaultSourcePullAlgorithm(stream) {\r\n        // Invariant. Enforced by the promises returned by start() and pull().\r\n        TransformStreamSetBackpressure(stream, false);\r\n        // Prevent the next pull() call until there is backpressure.\r\n        return stream._backpressureChangePromise;\r\n    }\r\n    function TransformStreamDefaultSourceCancelAlgorithm(stream, reason) {\r\n        const controller = stream._transformStreamController;\r\n        if (controller._finishPromise !== undefined) {\r\n            return controller._finishPromise;\r\n        }\r\n        // stream._writable cannot change after construction, so caching it across a call to user code is safe.\r\n        const writable = stream._writable;\r\n        // Assign the _finishPromise now so that if _flushAlgorithm calls writable.abort() or\r\n        // writable.cancel() internally, we don't run the _cancelAlgorithm again, or also run the\r\n        // _flushAlgorithm.\r\n        controller._finishPromise = newPromise((resolve, reject) => {\r\n            controller._finishPromise_resolve = resolve;\r\n            controller._finishPromise_reject = reject;\r\n        });\r\n        const cancelPromise = controller._cancelAlgorithm(reason);\r\n        TransformStreamDefaultControllerClearAlgorithms(controller);\r\n        uponPromise(cancelPromise, () => {\r\n            if (writable._state === 'errored') {\r\n                defaultControllerFinishPromiseReject(controller, writable._storedError);\r\n            }\r\n            else {\r\n                WritableStreamDefaultControllerErrorIfNeeded(writable._writableStreamController, reason);\r\n                TransformStreamUnblockWrite(stream);\r\n                defaultControllerFinishPromiseResolve(controller);\r\n            }\r\n            return null;\r\n        }, r => {\r\n            WritableStreamDefaultControllerErrorIfNeeded(writable._writableStreamController, r);\r\n            TransformStreamUnblockWrite(stream);\r\n            defaultControllerFinishPromiseReject(controller, r);\r\n            return null;\r\n        });\r\n        return controller._finishPromise;\r\n    }\r\n    // Helper functions for the TransformStreamDefaultController.\r\n    function defaultControllerBrandCheckException(name) {\r\n        return new TypeError(`TransformStreamDefaultController.prototype.${name} can only be used on a TransformStreamDefaultController`);\r\n    }\r\n    function defaultControllerFinishPromiseResolve(controller) {\r\n        if (controller._finishPromise_resolve === undefined) {\r\n            return;\r\n        }\r\n        controller._finishPromise_resolve();\r\n        controller._finishPromise_resolve = undefined;\r\n        controller._finishPromise_reject = undefined;\r\n    }\r\n    function defaultControllerFinishPromiseReject(controller, reason) {\r\n        if (controller._finishPromise_reject === undefined) {\r\n            return;\r\n        }\r\n        setPromiseIsHandledToTrue(controller._finishPromise);\r\n        controller._finishPromise_reject(reason);\r\n        controller._finishPromise_resolve = undefined;\r\n        controller._finishPromise_reject = undefined;\r\n    }\r\n    // Helper functions for the TransformStream.\r\n    function streamBrandCheckException(name) {\r\n        return new TypeError(`TransformStream.prototype.${name} can only be used on a TransformStream`);\r\n    }\r\n\r\n    exports.ByteLengthQueuingStrategy = ByteLengthQueuingStrategy;\r\n    exports.CountQueuingStrategy = CountQueuingStrategy;\r\n    exports.ReadableByteStreamController = ReadableByteStreamController;\r\n    exports.ReadableStream = ReadableStream;\r\n    exports.ReadableStreamBYOBReader = ReadableStreamBYOBReader;\r\n    exports.ReadableStreamBYOBRequest = ReadableStreamBYOBRequest;\r\n    exports.ReadableStreamDefaultController = ReadableStreamDefaultController;\r\n    exports.ReadableStreamDefaultReader = ReadableStreamDefaultReader;\r\n    exports.TransformStream = TransformStream;\r\n    exports.TransformStreamDefaultController = TransformStreamDefaultController;\r\n    exports.WritableStream = WritableStream;\r\n    exports.WritableStreamDefaultController = WritableStreamDefaultController;\r\n    exports.WritableStreamDefaultWriter = WritableStreamDefaultWriter;\r\n\r\n}));\r\n//# sourceMappingURL=ponyfill.es2018.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fetch-blob/node_modules/web-streams-polyfill/dist/ponyfill.es2018.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fetch-blob/streams.cjs":
/*!*********************************************!*\
  !*** ./node_modules/fetch-blob/streams.cjs ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("/* c8 ignore start */\r\n// 64 KiB (same size chrome slice theirs blob into Uint8array's)\r\nconst POOL_SIZE = 65536\r\n\r\nif (!globalThis.ReadableStream) {\r\n  // `node:stream/web` got introduced in v16.5.0 as experimental\r\n  // and it's preferred over the polyfilled version. So we also\r\n  // suppress the warning that gets emitted by NodeJS for using it.\r\n  try {\r\n    const process = __webpack_require__(/*! node:process */ \"node:process\")\r\n    const { emitWarning } = process\r\n    try {\r\n      process.emitWarning = () => {}\r\n      Object.assign(globalThis, __webpack_require__(/*! node:stream/web */ \"node:stream/web\"))\r\n      process.emitWarning = emitWarning\r\n    } catch (error) {\r\n      process.emitWarning = emitWarning\r\n      throw error\r\n    }\r\n  } catch (error) {\r\n    // fallback to polyfill implementation\r\n    Object.assign(globalThis, __webpack_require__(/*! web-streams-polyfill/dist/ponyfill.es2018.js */ \"(rsc)/./node_modules/fetch-blob/node_modules/web-streams-polyfill/dist/ponyfill.es2018.js\"))\r\n  }\r\n}\r\n\r\ntry {\r\n  // Don't use node: prefix for this, require+node: is not supported until node v14.14\r\n  // Only `import()` can use prefix in 12.20 and later\r\n  const { Blob } = __webpack_require__(/*! buffer */ \"buffer\")\r\n  if (Blob && !Blob.prototype.stream) {\r\n    Blob.prototype.stream = function name (params) {\r\n      let position = 0\r\n      const blob = this\r\n\r\n      return new ReadableStream({\r\n        type: 'bytes',\r\n        async pull (ctrl) {\r\n          const chunk = blob.slice(position, Math.min(blob.size, position + POOL_SIZE))\r\n          const buffer = await chunk.arrayBuffer()\r\n          position += buffer.byteLength\r\n          ctrl.enqueue(new Uint8Array(buffer))\r\n\r\n          if (position === blob.size) {\r\n            ctrl.close()\r\n          }\r\n        }\r\n      })\r\n    }\r\n  }\r\n} catch (error) {}\r\n/* c8 ignore end */\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZmV0Y2gtYmxvYi9zdHJlYW1zLmNqcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsbUJBQU8sQ0FBQyxrQ0FBYztBQUMxQyxZQUFZLGNBQWM7QUFDMUI7QUFDQTtBQUNBLGdDQUFnQyxtQkFBTyxDQUFDLHdDQUFpQjtBQUN6RDtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSw4QkFBOEIsbUJBQU8sQ0FBQywrSUFBOEM7QUFDcEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxPQUFPLEVBQUUsbUJBQU8sQ0FBQyxzQkFBUTtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxFQUFFO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYW5pc2gtYnVkZHkvLi9ub2RlX21vZHVsZXMvZmV0Y2gtYmxvYi9zdHJlYW1zLmNqcz9mMTU1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIGM4IGlnbm9yZSBzdGFydCAqL1xyXG4vLyA2NCBLaUIgKHNhbWUgc2l6ZSBjaHJvbWUgc2xpY2UgdGhlaXJzIGJsb2IgaW50byBVaW50OGFycmF5J3MpXHJcbmNvbnN0IFBPT0xfU0laRSA9IDY1NTM2XHJcblxyXG5pZiAoIWdsb2JhbFRoaXMuUmVhZGFibGVTdHJlYW0pIHtcclxuICAvLyBgbm9kZTpzdHJlYW0vd2ViYCBnb3QgaW50cm9kdWNlZCBpbiB2MTYuNS4wIGFzIGV4cGVyaW1lbnRhbFxyXG4gIC8vIGFuZCBpdCdzIHByZWZlcnJlZCBvdmVyIHRoZSBwb2x5ZmlsbGVkIHZlcnNpb24uIFNvIHdlIGFsc29cclxuICAvLyBzdXBwcmVzcyB0aGUgd2FybmluZyB0aGF0IGdldHMgZW1pdHRlZCBieSBOb2RlSlMgZm9yIHVzaW5nIGl0LlxyXG4gIHRyeSB7XHJcbiAgICBjb25zdCBwcm9jZXNzID0gcmVxdWlyZSgnbm9kZTpwcm9jZXNzJylcclxuICAgIGNvbnN0IHsgZW1pdFdhcm5pbmcgfSA9IHByb2Nlc3NcclxuICAgIHRyeSB7XHJcbiAgICAgIHByb2Nlc3MuZW1pdFdhcm5pbmcgPSAoKSA9PiB7fVxyXG4gICAgICBPYmplY3QuYXNzaWduKGdsb2JhbFRoaXMsIHJlcXVpcmUoJ25vZGU6c3RyZWFtL3dlYicpKVxyXG4gICAgICBwcm9jZXNzLmVtaXRXYXJuaW5nID0gZW1pdFdhcm5pbmdcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIHByb2Nlc3MuZW1pdFdhcm5pbmcgPSBlbWl0V2FybmluZ1xyXG4gICAgICB0aHJvdyBlcnJvclxyXG4gICAgfVxyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAvLyBmYWxsYmFjayB0byBwb2x5ZmlsbCBpbXBsZW1lbnRhdGlvblxyXG4gICAgT2JqZWN0LmFzc2lnbihnbG9iYWxUaGlzLCByZXF1aXJlKCd3ZWItc3RyZWFtcy1wb2x5ZmlsbC9kaXN0L3BvbnlmaWxsLmVzMjAxOC5qcycpKVxyXG4gIH1cclxufVxyXG5cclxudHJ5IHtcclxuICAvLyBEb24ndCB1c2Ugbm9kZTogcHJlZml4IGZvciB0aGlzLCByZXF1aXJlK25vZGU6IGlzIG5vdCBzdXBwb3J0ZWQgdW50aWwgbm9kZSB2MTQuMTRcclxuICAvLyBPbmx5IGBpbXBvcnQoKWAgY2FuIHVzZSBwcmVmaXggaW4gMTIuMjAgYW5kIGxhdGVyXHJcbiAgY29uc3QgeyBCbG9iIH0gPSByZXF1aXJlKCdidWZmZXInKVxyXG4gIGlmIChCbG9iICYmICFCbG9iLnByb3RvdHlwZS5zdHJlYW0pIHtcclxuICAgIEJsb2IucHJvdG90eXBlLnN0cmVhbSA9IGZ1bmN0aW9uIG5hbWUgKHBhcmFtcykge1xyXG4gICAgICBsZXQgcG9zaXRpb24gPSAwXHJcbiAgICAgIGNvbnN0IGJsb2IgPSB0aGlzXHJcblxyXG4gICAgICByZXR1cm4gbmV3IFJlYWRhYmxlU3RyZWFtKHtcclxuICAgICAgICB0eXBlOiAnYnl0ZXMnLFxyXG4gICAgICAgIGFzeW5jIHB1bGwgKGN0cmwpIHtcclxuICAgICAgICAgIGNvbnN0IGNodW5rID0gYmxvYi5zbGljZShwb3NpdGlvbiwgTWF0aC5taW4oYmxvYi5zaXplLCBwb3NpdGlvbiArIFBPT0xfU0laRSkpXHJcbiAgICAgICAgICBjb25zdCBidWZmZXIgPSBhd2FpdCBjaHVuay5hcnJheUJ1ZmZlcigpXHJcbiAgICAgICAgICBwb3NpdGlvbiArPSBidWZmZXIuYnl0ZUxlbmd0aFxyXG4gICAgICAgICAgY3RybC5lbnF1ZXVlKG5ldyBVaW50OEFycmF5KGJ1ZmZlcikpXHJcblxyXG4gICAgICAgICAgaWYgKHBvc2l0aW9uID09PSBibG9iLnNpemUpIHtcclxuICAgICAgICAgICAgY3RybC5jbG9zZSgpXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxufSBjYXRjaCAoZXJyb3IpIHt9XHJcbi8qIGM4IGlnbm9yZSBlbmQgKi9cclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fetch-blob/streams.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/fetch-blob/file.js":
/*!*****************************************!*\
  !*** ./node_modules/fetch-blob/file.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   File: () => (/* binding */ File),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.js */ \"(rsc)/./node_modules/fetch-blob/index.js\");\n\r\n\r\nconst _File = class File extends _index_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\r\n  #lastModified = 0\r\n  #name = ''\r\n\r\n  /**\r\n   * @param {*[]} fileBits\r\n   * @param {string} fileName\r\n   * @param {{lastModified?: number, type?: string}} options\r\n   */// @ts-ignore\r\n  constructor (fileBits, fileName, options = {}) {\r\n    if (arguments.length < 2) {\r\n      throw new TypeError(`Failed to construct 'File': 2 arguments required, but only ${arguments.length} present.`)\r\n    }\r\n    super(fileBits, options)\r\n\r\n    if (options === null) options = {}\r\n\r\n    // Simulate WebIDL type casting for NaN value in lastModified option.\r\n    const lastModified = options.lastModified === undefined ? Date.now() : Number(options.lastModified)\r\n    if (!Number.isNaN(lastModified)) {\r\n      this.#lastModified = lastModified\r\n    }\r\n\r\n    this.#name = String(fileName)\r\n  }\r\n\r\n  get name () {\r\n    return this.#name\r\n  }\r\n\r\n  get lastModified () {\r\n    return this.#lastModified\r\n  }\r\n\r\n  get [Symbol.toStringTag] () {\r\n    return 'File'\r\n  }\r\n\r\n  static [Symbol.hasInstance] (object) {\r\n    return !!object && object instanceof _index_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] &&\r\n      /^(File)$/.test(object[Symbol.toStringTag])\r\n  }\r\n}\r\n\r\n/** @type {typeof globalThis.File} */// @ts-ignore\r\nconst File = _File\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (File);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZmV0Y2gtYmxvYi9maWxlLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE2QjtBQUM3QjtBQUNBLGlDQUFpQyxpREFBSTtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsS0FBSztBQUNsQixhQUFhLFFBQVE7QUFDckIsY0FBYyx1Q0FBdUM7QUFDckQ7QUFDQSwrQ0FBK0M7QUFDL0M7QUFDQSx3RkFBd0Ysa0JBQWtCO0FBQzFHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QyxpREFBSTtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsd0JBQXdCO0FBQzVCO0FBQ1AsaUVBQWUsSUFBSSIsInNvdXJjZXMiOlsid2VicGFjazovL2RhbmlzaC1idWRkeS8uL25vZGVfbW9kdWxlcy9mZXRjaC1ibG9iL2ZpbGUuanM/OWU0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQmxvYiBmcm9tICcuL2luZGV4LmpzJ1xyXG5cclxuY29uc3QgX0ZpbGUgPSBjbGFzcyBGaWxlIGV4dGVuZHMgQmxvYiB7XHJcbiAgI2xhc3RNb2RpZmllZCA9IDBcclxuICAjbmFtZSA9ICcnXHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7KltdfSBmaWxlQml0c1xyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlTmFtZVxyXG4gICAqIEBwYXJhbSB7e2xhc3RNb2RpZmllZD86IG51bWJlciwgdHlwZT86IHN0cmluZ319IG9wdGlvbnNcclxuICAgKi8vLyBAdHMtaWdub3JlXHJcbiAgY29uc3RydWN0b3IgKGZpbGVCaXRzLCBmaWxlTmFtZSwgb3B0aW9ucyA9IHt9KSB7XHJcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcclxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgRmFpbGVkIHRvIGNvbnN0cnVjdCAnRmlsZSc6IDIgYXJndW1lbnRzIHJlcXVpcmVkLCBidXQgb25seSAke2FyZ3VtZW50cy5sZW5ndGh9IHByZXNlbnQuYClcclxuICAgIH1cclxuICAgIHN1cGVyKGZpbGVCaXRzLCBvcHRpb25zKVxyXG5cclxuICAgIGlmIChvcHRpb25zID09PSBudWxsKSBvcHRpb25zID0ge31cclxuXHJcbiAgICAvLyBTaW11bGF0ZSBXZWJJREwgdHlwZSBjYXN0aW5nIGZvciBOYU4gdmFsdWUgaW4gbGFzdE1vZGlmaWVkIG9wdGlvbi5cclxuICAgIGNvbnN0IGxhc3RNb2RpZmllZCA9IG9wdGlvbnMubGFzdE1vZGlmaWVkID09PSB1bmRlZmluZWQgPyBEYXRlLm5vdygpIDogTnVtYmVyKG9wdGlvbnMubGFzdE1vZGlmaWVkKVxyXG4gICAgaWYgKCFOdW1iZXIuaXNOYU4obGFzdE1vZGlmaWVkKSkge1xyXG4gICAgICB0aGlzLiNsYXN0TW9kaWZpZWQgPSBsYXN0TW9kaWZpZWRcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLiNuYW1lID0gU3RyaW5nKGZpbGVOYW1lKVxyXG4gIH1cclxuXHJcbiAgZ2V0IG5hbWUgKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuI25hbWVcclxuICB9XHJcblxyXG4gIGdldCBsYXN0TW9kaWZpZWQgKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuI2xhc3RNb2RpZmllZFxyXG4gIH1cclxuXHJcbiAgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddICgpIHtcclxuICAgIHJldHVybiAnRmlsZSdcclxuICB9XHJcblxyXG4gIHN0YXRpYyBbU3ltYm9sLmhhc0luc3RhbmNlXSAob2JqZWN0KSB7XHJcbiAgICByZXR1cm4gISFvYmplY3QgJiYgb2JqZWN0IGluc3RhbmNlb2YgQmxvYiAmJlxyXG4gICAgICAvXihGaWxlKSQvLnRlc3Qob2JqZWN0W1N5bWJvbC50b1N0cmluZ1RhZ10pXHJcbiAgfVxyXG59XHJcblxyXG4vKiogQHR5cGUge3R5cGVvZiBnbG9iYWxUaGlzLkZpbGV9ICovLy8gQHRzLWlnbm9yZVxyXG5leHBvcnQgY29uc3QgRmlsZSA9IF9GaWxlXHJcbmV4cG9ydCBkZWZhdWx0IEZpbGVcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fetch-blob/file.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fetch-blob/from.js":
/*!*****************************************!*\
  !*** ./node_modules/fetch-blob/from.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Blob: () => (/* reexport safe */ _index_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"]),\n/* harmony export */   File: () => (/* reexport safe */ _file_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]),\n/* harmony export */   blobFrom: () => (/* binding */ blobFrom),\n/* harmony export */   blobFromSync: () => (/* binding */ blobFromSync),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   fileFrom: () => (/* binding */ fileFrom),\n/* harmony export */   fileFromSync: () => (/* binding */ fileFromSync)\n/* harmony export */ });\n/* harmony import */ var node_fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:fs */ \"node:fs\");\n/* harmony import */ var node_path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:path */ \"node:path\");\n/* harmony import */ var node_domexception__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! node-domexception */ \"(rsc)/./node_modules/node-domexception/index.js\");\n/* harmony import */ var _file_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./file.js */ \"(rsc)/./node_modules/fetch-blob/file.js\");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./index.js */ \"(rsc)/./node_modules/fetch-blob/index.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst { stat } = node_fs__WEBPACK_IMPORTED_MODULE_0__.promises\r\n\r\n/**\r\n * @param {string} path filepath on the disk\r\n * @param {string} [type] mimetype to use\r\n */\r\nconst blobFromSync = (path, type) => fromBlob((0,node_fs__WEBPACK_IMPORTED_MODULE_0__.statSync)(path), path, type)\r\n\r\n/**\r\n * @param {string} path filepath on the disk\r\n * @param {string} [type] mimetype to use\r\n * @returns {Promise<Blob>}\r\n */\r\nconst blobFrom = (path, type) => stat(path).then(stat => fromBlob(stat, path, type))\r\n\r\n/**\r\n * @param {string} path filepath on the disk\r\n * @param {string} [type] mimetype to use\r\n * @returns {Promise<File>}\r\n */\r\nconst fileFrom = (path, type) => stat(path).then(stat => fromFile(stat, path, type))\r\n\r\n/**\r\n * @param {string} path filepath on the disk\r\n * @param {string} [type] mimetype to use\r\n */\r\nconst fileFromSync = (path, type) => fromFile((0,node_fs__WEBPACK_IMPORTED_MODULE_0__.statSync)(path), path, type)\r\n\r\n// @ts-ignore\r\nconst fromBlob = (stat, path, type = '') => new _index_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"]([new BlobDataItem({\r\n  path,\r\n  size: stat.size,\r\n  lastModified: stat.mtimeMs,\r\n  start: 0\r\n})], { type })\r\n\r\n// @ts-ignore\r\nconst fromFile = (stat, path, type = '') => new _file_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]([new BlobDataItem({\r\n  path,\r\n  size: stat.size,\r\n  lastModified: stat.mtimeMs,\r\n  start: 0\r\n})], (0,node_path__WEBPACK_IMPORTED_MODULE_1__.basename)(path), { type, lastModified: stat.mtimeMs })\r\n\r\n/**\r\n * This is a blob backed up by a file on the disk\r\n * with minium requirement. Its wrapped around a Blob as a blobPart\r\n * so you have no direct access to this.\r\n *\r\n * @private\r\n */\r\nclass BlobDataItem {\r\n  #path\r\n  #start\r\n\r\n  constructor (options) {\r\n    this.#path = options.path\r\n    this.#start = options.start\r\n    this.size = options.size\r\n    this.lastModified = options.lastModified\r\n  }\r\n\r\n  /**\r\n   * Slicing arguments is first validated and formatted\r\n   * to not be out of range by Blob.prototype.slice\r\n   */\r\n  slice (start, end) {\r\n    return new BlobDataItem({\r\n      path: this.#path,\r\n      lastModified: this.lastModified,\r\n      size: end - start,\r\n      start: this.#start + start\r\n    })\r\n  }\r\n\r\n  async * stream () {\r\n    const { mtimeMs } = await stat(this.#path)\r\n    if (mtimeMs > this.lastModified) {\r\n      throw new node_domexception__WEBPACK_IMPORTED_MODULE_2__('The requested file could not be read, typically due to permission problems that have occurred after a reference to a file was acquired.', 'NotReadableError')\r\n    }\r\n    yield * (0,node_fs__WEBPACK_IMPORTED_MODULE_0__.createReadStream)(this.#path, {\r\n      start: this.#start,\r\n      end: this.#start + this.size - 1\r\n    })\r\n  }\r\n\r\n  get [Symbol.toStringTag] () {\r\n    return 'Blob'\r\n  }\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (blobFromSync);\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZmV0Y2gtYmxvYi9mcm9tLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFvRTtBQUNoQztBQUNRO0FBQzVDO0FBQzRCO0FBQ0M7QUFDN0I7QUFDQSxRQUFRLE9BQU8sRUFBRSw2Q0FBRTtBQUNuQjtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQjtBQUNBLDhDQUE4QyxpREFBUTtBQUN0RDtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkI7QUFDQSw4Q0FBOEMsaURBQVE7QUFDdEQ7QUFDQTtBQUNBLGdEQUFnRCxpREFBSTtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsTUFBTSxNQUFNO0FBQ2I7QUFDQTtBQUNBLGdEQUFnRCxnREFBSTtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsSUFBSSxtREFBUSxVQUFVLGtDQUFrQztBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFlBQVksVUFBVTtBQUN0QjtBQUNBLGdCQUFnQiw4Q0FBWTtBQUM1QjtBQUNBLFlBQVkseURBQWdCO0FBQzVCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBZSxZQUFZO0FBQzBDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFuaXNoLWJ1ZGR5Ly4vbm9kZV9tb2R1bGVzL2ZldGNoLWJsb2IvZnJvbS5qcz80MTg3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHN0YXRTeW5jLCBjcmVhdGVSZWFkU3RyZWFtLCBwcm9taXNlcyBhcyBmcyB9IGZyb20gJ25vZGU6ZnMnXHJcbmltcG9ydCB7IGJhc2VuYW1lIH0gZnJvbSAnbm9kZTpwYXRoJ1xyXG5pbXBvcnQgRE9NRXhjZXB0aW9uIGZyb20gJ25vZGUtZG9tZXhjZXB0aW9uJ1xyXG5cclxuaW1wb3J0IEZpbGUgZnJvbSAnLi9maWxlLmpzJ1xyXG5pbXBvcnQgQmxvYiBmcm9tICcuL2luZGV4LmpzJ1xyXG5cclxuY29uc3QgeyBzdGF0IH0gPSBmc1xyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIGZpbGVwYXRoIG9uIHRoZSBkaXNrXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBbdHlwZV0gbWltZXR5cGUgdG8gdXNlXHJcbiAqL1xyXG5jb25zdCBibG9iRnJvbVN5bmMgPSAocGF0aCwgdHlwZSkgPT4gZnJvbUJsb2Ioc3RhdFN5bmMocGF0aCksIHBhdGgsIHR5cGUpXHJcblxyXG4vKipcclxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggZmlsZXBhdGggb24gdGhlIGRpc2tcclxuICogQHBhcmFtIHtzdHJpbmd9IFt0eXBlXSBtaW1ldHlwZSB0byB1c2VcclxuICogQHJldHVybnMge1Byb21pc2U8QmxvYj59XHJcbiAqL1xyXG5jb25zdCBibG9iRnJvbSA9IChwYXRoLCB0eXBlKSA9PiBzdGF0KHBhdGgpLnRoZW4oc3RhdCA9PiBmcm9tQmxvYihzdGF0LCBwYXRoLCB0eXBlKSlcclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBmaWxlcGF0aCBvbiB0aGUgZGlza1xyXG4gKiBAcGFyYW0ge3N0cmluZ30gW3R5cGVdIG1pbWV0eXBlIHRvIHVzZVxyXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxGaWxlPn1cclxuICovXHJcbmNvbnN0IGZpbGVGcm9tID0gKHBhdGgsIHR5cGUpID0+IHN0YXQocGF0aCkudGhlbihzdGF0ID0+IGZyb21GaWxlKHN0YXQsIHBhdGgsIHR5cGUpKVxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIGZpbGVwYXRoIG9uIHRoZSBkaXNrXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBbdHlwZV0gbWltZXR5cGUgdG8gdXNlXHJcbiAqL1xyXG5jb25zdCBmaWxlRnJvbVN5bmMgPSAocGF0aCwgdHlwZSkgPT4gZnJvbUZpbGUoc3RhdFN5bmMocGF0aCksIHBhdGgsIHR5cGUpXHJcblxyXG4vLyBAdHMtaWdub3JlXHJcbmNvbnN0IGZyb21CbG9iID0gKHN0YXQsIHBhdGgsIHR5cGUgPSAnJykgPT4gbmV3IEJsb2IoW25ldyBCbG9iRGF0YUl0ZW0oe1xyXG4gIHBhdGgsXHJcbiAgc2l6ZTogc3RhdC5zaXplLFxyXG4gIGxhc3RNb2RpZmllZDogc3RhdC5tdGltZU1zLFxyXG4gIHN0YXJ0OiAwXHJcbn0pXSwgeyB0eXBlIH0pXHJcblxyXG4vLyBAdHMtaWdub3JlXHJcbmNvbnN0IGZyb21GaWxlID0gKHN0YXQsIHBhdGgsIHR5cGUgPSAnJykgPT4gbmV3IEZpbGUoW25ldyBCbG9iRGF0YUl0ZW0oe1xyXG4gIHBhdGgsXHJcbiAgc2l6ZTogc3RhdC5zaXplLFxyXG4gIGxhc3RNb2RpZmllZDogc3RhdC5tdGltZU1zLFxyXG4gIHN0YXJ0OiAwXHJcbn0pXSwgYmFzZW5hbWUocGF0aCksIHsgdHlwZSwgbGFzdE1vZGlmaWVkOiBzdGF0Lm10aW1lTXMgfSlcclxuXHJcbi8qKlxyXG4gKiBUaGlzIGlzIGEgYmxvYiBiYWNrZWQgdXAgYnkgYSBmaWxlIG9uIHRoZSBkaXNrXHJcbiAqIHdpdGggbWluaXVtIHJlcXVpcmVtZW50LiBJdHMgd3JhcHBlZCBhcm91bmQgYSBCbG9iIGFzIGEgYmxvYlBhcnRcclxuICogc28geW91IGhhdmUgbm8gZGlyZWN0IGFjY2VzcyB0byB0aGlzLlxyXG4gKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuY2xhc3MgQmxvYkRhdGFJdGVtIHtcclxuICAjcGF0aFxyXG4gICNzdGFydFxyXG5cclxuICBjb25zdHJ1Y3RvciAob3B0aW9ucykge1xyXG4gICAgdGhpcy4jcGF0aCA9IG9wdGlvbnMucGF0aFxyXG4gICAgdGhpcy4jc3RhcnQgPSBvcHRpb25zLnN0YXJ0XHJcbiAgICB0aGlzLnNpemUgPSBvcHRpb25zLnNpemVcclxuICAgIHRoaXMubGFzdE1vZGlmaWVkID0gb3B0aW9ucy5sYXN0TW9kaWZpZWRcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNsaWNpbmcgYXJndW1lbnRzIGlzIGZpcnN0IHZhbGlkYXRlZCBhbmQgZm9ybWF0dGVkXHJcbiAgICogdG8gbm90IGJlIG91dCBvZiByYW5nZSBieSBCbG9iLnByb3RvdHlwZS5zbGljZVxyXG4gICAqL1xyXG4gIHNsaWNlIChzdGFydCwgZW5kKSB7XHJcbiAgICByZXR1cm4gbmV3IEJsb2JEYXRhSXRlbSh7XHJcbiAgICAgIHBhdGg6IHRoaXMuI3BhdGgsXHJcbiAgICAgIGxhc3RNb2RpZmllZDogdGhpcy5sYXN0TW9kaWZpZWQsXHJcbiAgICAgIHNpemU6IGVuZCAtIHN0YXJ0LFxyXG4gICAgICBzdGFydDogdGhpcy4jc3RhcnQgKyBzdGFydFxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIGFzeW5jICogc3RyZWFtICgpIHtcclxuICAgIGNvbnN0IHsgbXRpbWVNcyB9ID0gYXdhaXQgc3RhdCh0aGlzLiNwYXRoKVxyXG4gICAgaWYgKG10aW1lTXMgPiB0aGlzLmxhc3RNb2RpZmllZCkge1xyXG4gICAgICB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKCdUaGUgcmVxdWVzdGVkIGZpbGUgY291bGQgbm90IGJlIHJlYWQsIHR5cGljYWxseSBkdWUgdG8gcGVybWlzc2lvbiBwcm9ibGVtcyB0aGF0IGhhdmUgb2NjdXJyZWQgYWZ0ZXIgYSByZWZlcmVuY2UgdG8gYSBmaWxlIHdhcyBhY3F1aXJlZC4nLCAnTm90UmVhZGFibGVFcnJvcicpXHJcbiAgICB9XHJcbiAgICB5aWVsZCAqIGNyZWF0ZVJlYWRTdHJlYW0odGhpcy4jcGF0aCwge1xyXG4gICAgICBzdGFydDogdGhpcy4jc3RhcnQsXHJcbiAgICAgIGVuZDogdGhpcy4jc3RhcnQgKyB0aGlzLnNpemUgLSAxXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddICgpIHtcclxuICAgIHJldHVybiAnQmxvYidcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGJsb2JGcm9tU3luY1xyXG5leHBvcnQgeyBGaWxlLCBCbG9iLCBibG9iRnJvbSwgYmxvYkZyb21TeW5jLCBmaWxlRnJvbSwgZmlsZUZyb21TeW5jIH1cclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fetch-blob/from.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fetch-blob/index.js":
/*!******************************************!*\
  !*** ./node_modules/fetch-blob/index.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Blob: () => (/* binding */ Blob),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _streams_cjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./streams.cjs */ \"(rsc)/./node_modules/fetch-blob/streams.cjs\");\n/*! fetch-blob. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */\r\n\r\n// TODO (jimmywarting): in the feature use conditional loading with top level await (requires 14.x)\r\n// Node has recently added whatwg stream into core\r\n\r\n\r\n\r\n// 64 KiB (same size chrome slice theirs blob into Uint8array's)\r\nconst POOL_SIZE = 65536\r\n\r\n/** @param {(Blob | Uint8Array)[]} parts */\r\nasync function * toIterator (parts, clone = true) {\r\n  for (const part of parts) {\r\n    if ('stream' in part) {\r\n      yield * (/** @type {AsyncIterableIterator<Uint8Array>} */ (part.stream()))\r\n    } else if (ArrayBuffer.isView(part)) {\r\n      if (clone) {\r\n        let position = part.byteOffset\r\n        const end = part.byteOffset + part.byteLength\r\n        while (position !== end) {\r\n          const size = Math.min(end - position, POOL_SIZE)\r\n          const chunk = part.buffer.slice(position, position + size)\r\n          position += chunk.byteLength\r\n          yield new Uint8Array(chunk)\r\n        }\r\n      } else {\r\n        yield part\r\n      }\r\n    /* c8 ignore next 10 */\r\n    } else {\r\n      // For blobs that have arrayBuffer but no stream method (nodes buffer.Blob)\r\n      let position = 0, b = (/** @type {Blob} */ (part))\r\n      while (position !== b.size) {\r\n        const chunk = b.slice(position, Math.min(b.size, position + POOL_SIZE))\r\n        const buffer = await chunk.arrayBuffer()\r\n        position += buffer.byteLength\r\n        yield new Uint8Array(buffer)\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nconst _Blob = class Blob {\r\n  /** @type {Array.<(Blob|Uint8Array)>} */\r\n  #parts = []\r\n  #type = ''\r\n  #size = 0\r\n  #endings = 'transparent'\r\n\r\n  /**\r\n   * The Blob() constructor returns a new Blob object. The content\r\n   * of the blob consists of the concatenation of the values given\r\n   * in the parameter array.\r\n   *\r\n   * @param {*} blobParts\r\n   * @param {{ type?: string, endings?: string }} [options]\r\n   */\r\n  constructor (blobParts = [], options = {}) {\r\n    if (typeof blobParts !== 'object' || blobParts === null) {\r\n      throw new TypeError('Failed to construct \\'Blob\\': The provided value cannot be converted to a sequence.')\r\n    }\r\n\r\n    if (typeof blobParts[Symbol.iterator] !== 'function') {\r\n      throw new TypeError('Failed to construct \\'Blob\\': The object must have a callable @@iterator property.')\r\n    }\r\n\r\n    if (typeof options !== 'object' && typeof options !== 'function') {\r\n      throw new TypeError('Failed to construct \\'Blob\\': parameter 2 cannot convert to dictionary.')\r\n    }\r\n\r\n    if (options === null) options = {}\r\n\r\n    const encoder = new TextEncoder()\r\n    for (const element of blobParts) {\r\n      let part\r\n      if (ArrayBuffer.isView(element)) {\r\n        part = new Uint8Array(element.buffer.slice(element.byteOffset, element.byteOffset + element.byteLength))\r\n      } else if (element instanceof ArrayBuffer) {\r\n        part = new Uint8Array(element.slice(0))\r\n      } else if (element instanceof Blob) {\r\n        part = element\r\n      } else {\r\n        part = encoder.encode(`${element}`)\r\n      }\r\n\r\n      this.#size += ArrayBuffer.isView(part) ? part.byteLength : part.size\r\n      this.#parts.push(part)\r\n    }\r\n\r\n    this.#endings = `${options.endings === undefined ? 'transparent' : options.endings}`\r\n    const type = options.type === undefined ? '' : String(options.type)\r\n    this.#type = /^[\\x20-\\x7E]*$/.test(type) ? type : ''\r\n  }\r\n\r\n  /**\r\n   * The Blob interface's size property returns the\r\n   * size of the Blob in bytes.\r\n   */\r\n  get size () {\r\n    return this.#size\r\n  }\r\n\r\n  /**\r\n   * The type property of a Blob object returns the MIME type of the file.\r\n   */\r\n  get type () {\r\n    return this.#type\r\n  }\r\n\r\n  /**\r\n   * The text() method in the Blob interface returns a Promise\r\n   * that resolves with a string containing the contents of\r\n   * the blob, interpreted as UTF-8.\r\n   *\r\n   * @return {Promise<string>}\r\n   */\r\n  async text () {\r\n    // More optimized than using this.arrayBuffer()\r\n    // that requires twice as much ram\r\n    const decoder = new TextDecoder()\r\n    let str = ''\r\n    for await (const part of toIterator(this.#parts, false)) {\r\n      str += decoder.decode(part, { stream: true })\r\n    }\r\n    // Remaining\r\n    str += decoder.decode()\r\n    return str\r\n  }\r\n\r\n  /**\r\n   * The arrayBuffer() method in the Blob interface returns a\r\n   * Promise that resolves with the contents of the blob as\r\n   * binary data contained in an ArrayBuffer.\r\n   *\r\n   * @return {Promise<ArrayBuffer>}\r\n   */\r\n  async arrayBuffer () {\r\n    // Easier way... Just a unnecessary overhead\r\n    // const view = new Uint8Array(this.size);\r\n    // await this.stream().getReader({mode: 'byob'}).read(view);\r\n    // return view.buffer;\r\n\r\n    const data = new Uint8Array(this.size)\r\n    let offset = 0\r\n    for await (const chunk of toIterator(this.#parts, false)) {\r\n      data.set(chunk, offset)\r\n      offset += chunk.length\r\n    }\r\n\r\n    return data.buffer\r\n  }\r\n\r\n  stream () {\r\n    const it = toIterator(this.#parts, true)\r\n\r\n    return new globalThis.ReadableStream({\r\n      // @ts-ignore\r\n      type: 'bytes',\r\n      async pull (ctrl) {\r\n        const chunk = await it.next()\r\n        chunk.done ? ctrl.close() : ctrl.enqueue(chunk.value)\r\n      },\r\n\r\n      async cancel () {\r\n        await it.return()\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * The Blob interface's slice() method creates and returns a\r\n   * new Blob object which contains data from a subset of the\r\n   * blob on which it's called.\r\n   *\r\n   * @param {number} [start]\r\n   * @param {number} [end]\r\n   * @param {string} [type]\r\n   */\r\n  slice (start = 0, end = this.size, type = '') {\r\n    const { size } = this\r\n\r\n    let relativeStart = start < 0 ? Math.max(size + start, 0) : Math.min(start, size)\r\n    let relativeEnd = end < 0 ? Math.max(size + end, 0) : Math.min(end, size)\r\n\r\n    const span = Math.max(relativeEnd - relativeStart, 0)\r\n    const parts = this.#parts\r\n    const blobParts = []\r\n    let added = 0\r\n\r\n    for (const part of parts) {\r\n      // don't add the overflow to new blobParts\r\n      if (added >= span) {\r\n        break\r\n      }\r\n\r\n      const size = ArrayBuffer.isView(part) ? part.byteLength : part.size\r\n      if (relativeStart && size <= relativeStart) {\r\n        // Skip the beginning and change the relative\r\n        // start & end position as we skip the unwanted parts\r\n        relativeStart -= size\r\n        relativeEnd -= size\r\n      } else {\r\n        let chunk\r\n        if (ArrayBuffer.isView(part)) {\r\n          chunk = part.subarray(relativeStart, Math.min(size, relativeEnd))\r\n          added += chunk.byteLength\r\n        } else {\r\n          chunk = part.slice(relativeStart, Math.min(size, relativeEnd))\r\n          added += chunk.size\r\n        }\r\n        relativeEnd -= size\r\n        blobParts.push(chunk)\r\n        relativeStart = 0 // All next sequential parts should start at 0\r\n      }\r\n    }\r\n\r\n    const blob = new Blob([], { type: String(type).toLowerCase() })\r\n    blob.#size = span\r\n    blob.#parts = blobParts\r\n\r\n    return blob\r\n  }\r\n\r\n  get [Symbol.toStringTag] () {\r\n    return 'Blob'\r\n  }\r\n\r\n  static [Symbol.hasInstance] (object) {\r\n    return (\r\n      object &&\r\n      typeof object === 'object' &&\r\n      typeof object.constructor === 'function' &&\r\n      (\r\n        typeof object.stream === 'function' ||\r\n        typeof object.arrayBuffer === 'function'\r\n      ) &&\r\n      /^(Blob|File)$/.test(object[Symbol.toStringTag])\r\n    )\r\n  }\r\n}\r\n\r\nObject.defineProperties(_Blob.prototype, {\r\n  size: { enumerable: true },\r\n  type: { enumerable: true },\r\n  slice: { enumerable: true }\r\n})\r\n\r\n/** @type {typeof globalThis.Blob} */\r\nconst Blob = _Blob\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Blob);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fetch-blob/index.js\n");

/***/ })

};
;