"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/https-proxy-agent";
exports.ids = ["vendor-chunks/https-proxy-agent"];
exports.modules = {

/***/ "(rsc)/./node_modules/https-proxy-agent/dist/index.js":
/*!******************************************************!*\
  !*** ./node_modules/https-proxy-agent/dist/index.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.HttpsProxyAgent = void 0;\r\nconst net = __importStar(__webpack_require__(/*! net */ \"net\"));\r\nconst tls = __importStar(__webpack_require__(/*! tls */ \"tls\"));\r\nconst assert_1 = __importDefault(__webpack_require__(/*! assert */ \"assert\"));\r\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"(rsc)/./node_modules/debug/src/index.js\"));\r\nconst agent_base_1 = __webpack_require__(/*! agent-base */ \"(rsc)/./node_modules/agent-base/dist/index.js\");\r\nconst url_1 = __webpack_require__(/*! url */ \"url\");\r\nconst parse_proxy_response_1 = __webpack_require__(/*! ./parse-proxy-response */ \"(rsc)/./node_modules/https-proxy-agent/dist/parse-proxy-response.js\");\r\nconst debug = (0, debug_1.default)('https-proxy-agent');\r\nconst setServernameFromNonIpHost = (options) => {\r\n    if (options.servername === undefined &&\r\n        options.host &&\r\n        !net.isIP(options.host)) {\r\n        return {\r\n            ...options,\r\n            servername: options.host,\r\n        };\r\n    }\r\n    return options;\r\n};\r\n/**\r\n * The `HttpsProxyAgent` implements an HTTP Agent subclass that connects to\r\n * the specified \"HTTP(s) proxy server\" in order to proxy HTTPS requests.\r\n *\r\n * Outgoing HTTP requests are first tunneled through the proxy server using the\r\n * `CONNECT` HTTP request method to establish a connection to the proxy server,\r\n * and then the proxy server connects to the destination target and issues the\r\n * HTTP request from the proxy server.\r\n *\r\n * `https:` requests have their socket connection upgraded to TLS once\r\n * the connection to the proxy server has been established.\r\n */\r\nclass HttpsProxyAgent extends agent_base_1.Agent {\r\n    constructor(proxy, opts) {\r\n        super(opts);\r\n        this.options = { path: undefined };\r\n        this.proxy = typeof proxy === 'string' ? new url_1.URL(proxy) : proxy;\r\n        this.proxyHeaders = opts?.headers ?? {};\r\n        debug('Creating new HttpsProxyAgent instance: %o', this.proxy.href);\r\n        // Trim off the brackets from IPv6 addresses\r\n        const host = (this.proxy.hostname || this.proxy.host).replace(/^\\[|\\]$/g, '');\r\n        const port = this.proxy.port\r\n            ? parseInt(this.proxy.port, 10)\r\n            : this.proxy.protocol === 'https:'\r\n                ? 443\r\n                : 80;\r\n        this.connectOpts = {\r\n            // Attempt to negotiate http/1.1 for proxy servers that support http/2\r\n            ALPNProtocols: ['http/1.1'],\r\n            ...(opts ? omit(opts, 'headers') : null),\r\n            host,\r\n            port,\r\n        };\r\n    }\r\n    /**\r\n     * Called when the node-core HTTP client library is creating a\r\n     * new HTTP request.\r\n     */\r\n    async connect(req, opts) {\r\n        const { proxy } = this;\r\n        if (!opts.host) {\r\n            throw new TypeError('No \"host\" provided');\r\n        }\r\n        // Create a socket connection to the proxy server.\r\n        let socket;\r\n        if (proxy.protocol === 'https:') {\r\n            debug('Creating `tls.Socket`: %o', this.connectOpts);\r\n            socket = tls.connect(setServernameFromNonIpHost(this.connectOpts));\r\n        }\r\n        else {\r\n            debug('Creating `net.Socket`: %o', this.connectOpts);\r\n            socket = net.connect(this.connectOpts);\r\n        }\r\n        const headers = typeof this.proxyHeaders === 'function'\r\n            ? this.proxyHeaders()\r\n            : { ...this.proxyHeaders };\r\n        const host = net.isIPv6(opts.host) ? `[${opts.host}]` : opts.host;\r\n        let payload = `CONNECT ${host}:${opts.port} HTTP/1.1\\r\\n`;\r\n        // Inject the `Proxy-Authorization` header if necessary.\r\n        if (proxy.username || proxy.password) {\r\n            const auth = `${decodeURIComponent(proxy.username)}:${decodeURIComponent(proxy.password)}`;\r\n            headers['Proxy-Authorization'] = `Basic ${Buffer.from(auth).toString('base64')}`;\r\n        }\r\n        headers.Host = `${host}:${opts.port}`;\r\n        if (!headers['Proxy-Connection']) {\r\n            headers['Proxy-Connection'] = this.keepAlive\r\n                ? 'Keep-Alive'\r\n                : 'close';\r\n        }\r\n        for (const name of Object.keys(headers)) {\r\n            payload += `${name}: ${headers[name]}\\r\\n`;\r\n        }\r\n        const proxyResponsePromise = (0, parse_proxy_response_1.parseProxyResponse)(socket);\r\n        socket.write(`${payload}\\r\\n`);\r\n        const { connect, buffered } = await proxyResponsePromise;\r\n        req.emit('proxyConnect', connect);\r\n        this.emit('proxyConnect', connect, req);\r\n        if (connect.statusCode === 200) {\r\n            req.once('socket', resume);\r\n            if (opts.secureEndpoint) {\r\n                // The proxy is connecting to a TLS server, so upgrade\r\n                // this socket connection to a TLS connection.\r\n                debug('Upgrading socket connection to TLS');\r\n                return tls.connect({\r\n                    ...omit(setServernameFromNonIpHost(opts), 'host', 'path', 'port'),\r\n                    socket,\r\n                });\r\n            }\r\n            return socket;\r\n        }\r\n        // Some other status code that's not 200... need to re-play the HTTP\r\n        // header \"data\" events onto the socket once the HTTP machinery is\r\n        // attached so that the node core `http` can parse and handle the\r\n        // error status code.\r\n        // Close the original socket, and a new \"fake\" socket is returned\r\n        // instead, so that the proxy doesn't get the HTTP request\r\n        // written to it (which may contain `Authorization` headers or other\r\n        // sensitive data).\r\n        //\r\n        // See: https://hackerone.com/reports/541502\r\n        socket.destroy();\r\n        const fakeSocket = new net.Socket({ writable: false });\r\n        fakeSocket.readable = true;\r\n        // Need to wait for the \"socket\" event to re-play the \"data\" events.\r\n        req.once('socket', (s) => {\r\n            debug('Replaying proxy buffer for failed request');\r\n            (0, assert_1.default)(s.listenerCount('data') > 0);\r\n            // Replay the \"buffered\" Buffer onto the fake `socket`, since at\r\n            // this point the HTTP module machinery has been hooked up for\r\n            // the user.\r\n            s.push(buffered);\r\n            s.push(null);\r\n        });\r\n        return fakeSocket;\r\n    }\r\n}\r\nHttpsProxyAgent.protocols = ['http', 'https'];\r\nexports.HttpsProxyAgent = HttpsProxyAgent;\r\nfunction resume(socket) {\r\n    socket.resume();\r\n}\r\nfunction omit(obj, ...keys) {\r\n    const ret = {};\r\n    let key;\r\n    for (key in obj) {\r\n        if (!keys.includes(key)) {\r\n            ret[key] = obj[key];\r\n        }\r\n    }\r\n    return ret;\r\n}\r\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/https-proxy-agent/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/https-proxy-agent/dist/parse-proxy-response.js":
/*!*********************************************************************!*\
  !*** ./node_modules/https-proxy-agent/dist/parse-proxy-response.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.parseProxyResponse = void 0;\r\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"(rsc)/./node_modules/debug/src/index.js\"));\r\nconst debug = (0, debug_1.default)('https-proxy-agent:parse-proxy-response');\r\nfunction parseProxyResponse(socket) {\r\n    return new Promise((resolve, reject) => {\r\n        // we need to buffer any HTTP traffic that happens with the proxy before we get\r\n        // the CONNECT response, so that if the response is anything other than an \"200\"\r\n        // response code, then we can re-play the \"data\" events on the socket once the\r\n        // HTTP parser is hooked up...\r\n        let buffersLength = 0;\r\n        const buffers = [];\r\n        function read() {\r\n            const b = socket.read();\r\n            if (b)\r\n                ondata(b);\r\n            else\r\n                socket.once('readable', read);\r\n        }\r\n        function cleanup() {\r\n            socket.removeListener('end', onend);\r\n            socket.removeListener('error', onerror);\r\n            socket.removeListener('readable', read);\r\n        }\r\n        function onend() {\r\n            cleanup();\r\n            debug('onend');\r\n            reject(new Error('Proxy connection ended before receiving CONNECT response'));\r\n        }\r\n        function onerror(err) {\r\n            cleanup();\r\n            debug('onerror %o', err);\r\n            reject(err);\r\n        }\r\n        function ondata(b) {\r\n            buffers.push(b);\r\n            buffersLength += b.length;\r\n            const buffered = Buffer.concat(buffers, buffersLength);\r\n            const endOfHeaders = buffered.indexOf('\\r\\n\\r\\n');\r\n            if (endOfHeaders === -1) {\r\n                // keep buffering\r\n                debug('have not received end of HTTP headers yet...');\r\n                read();\r\n                return;\r\n            }\r\n            const headerParts = buffered\r\n                .slice(0, endOfHeaders)\r\n                .toString('ascii')\r\n                .split('\\r\\n');\r\n            const firstLine = headerParts.shift();\r\n            if (!firstLine) {\r\n                socket.destroy();\r\n                return reject(new Error('No header received from proxy CONNECT response'));\r\n            }\r\n            const firstLineParts = firstLine.split(' ');\r\n            const statusCode = +firstLineParts[1];\r\n            const statusText = firstLineParts.slice(2).join(' ');\r\n            const headers = {};\r\n            for (const header of headerParts) {\r\n                if (!header)\r\n                    continue;\r\n                const firstColon = header.indexOf(':');\r\n                if (firstColon === -1) {\r\n                    socket.destroy();\r\n                    return reject(new Error(`Invalid header from proxy CONNECT response: \"${header}\"`));\r\n                }\r\n                const key = header.slice(0, firstColon).toLowerCase();\r\n                const value = header.slice(firstColon + 1).trimStart();\r\n                const current = headers[key];\r\n                if (typeof current === 'string') {\r\n                    headers[key] = [current, value];\r\n                }\r\n                else if (Array.isArray(current)) {\r\n                    current.push(value);\r\n                }\r\n                else {\r\n                    headers[key] = value;\r\n                }\r\n            }\r\n            debug('got proxy server response: %o %o', firstLine, headers);\r\n            cleanup();\r\n            resolve({\r\n                connect: {\r\n                    statusCode,\r\n                    statusText,\r\n                    headers,\r\n                },\r\n                buffered,\r\n            });\r\n        }\r\n        socket.on('error', onerror);\r\n        socket.on('end', onend);\r\n        read();\r\n    });\r\n}\r\nexports.parseProxyResponse = parseProxyResponse;\r\n//# sourceMappingURL=parse-proxy-response.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaHR0cHMtcHJveHktYWdlbnQvZGlzdC9wYXJzZS1wcm94eS1yZXNwb25zZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDBCQUEwQjtBQUMxQixnQ0FBZ0MsbUJBQU8sQ0FBQyxzREFBTztBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRGQUE0RixPQUFPO0FBQ25HO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLDBCQUEwQjtBQUMxQiIsInNvdXJjZXMiOlsid2VicGFjazovL2RhbmlzaC1idWRkeS8uL25vZGVfbW9kdWxlcy9odHRwcy1wcm94eS1hZ2VudC9kaXN0L3BhcnNlLXByb3h5LXJlc3BvbnNlLmpzPzIzM2QiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5wYXJzZVByb3h5UmVzcG9uc2UgPSB2b2lkIDA7XHJcbmNvbnN0IGRlYnVnXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImRlYnVnXCIpKTtcclxuY29uc3QgZGVidWcgPSAoMCwgZGVidWdfMS5kZWZhdWx0KSgnaHR0cHMtcHJveHktYWdlbnQ6cGFyc2UtcHJveHktcmVzcG9uc2UnKTtcclxuZnVuY3Rpb24gcGFyc2VQcm94eVJlc3BvbnNlKHNvY2tldCkge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAvLyB3ZSBuZWVkIHRvIGJ1ZmZlciBhbnkgSFRUUCB0cmFmZmljIHRoYXQgaGFwcGVucyB3aXRoIHRoZSBwcm94eSBiZWZvcmUgd2UgZ2V0XHJcbiAgICAgICAgLy8gdGhlIENPTk5FQ1QgcmVzcG9uc2UsIHNvIHRoYXQgaWYgdGhlIHJlc3BvbnNlIGlzIGFueXRoaW5nIG90aGVyIHRoYW4gYW4gXCIyMDBcIlxyXG4gICAgICAgIC8vIHJlc3BvbnNlIGNvZGUsIHRoZW4gd2UgY2FuIHJlLXBsYXkgdGhlIFwiZGF0YVwiIGV2ZW50cyBvbiB0aGUgc29ja2V0IG9uY2UgdGhlXHJcbiAgICAgICAgLy8gSFRUUCBwYXJzZXIgaXMgaG9va2VkIHVwLi4uXHJcbiAgICAgICAgbGV0IGJ1ZmZlcnNMZW5ndGggPSAwO1xyXG4gICAgICAgIGNvbnN0IGJ1ZmZlcnMgPSBbXTtcclxuICAgICAgICBmdW5jdGlvbiByZWFkKCkge1xyXG4gICAgICAgICAgICBjb25zdCBiID0gc29ja2V0LnJlYWQoKTtcclxuICAgICAgICAgICAgaWYgKGIpXHJcbiAgICAgICAgICAgICAgICBvbmRhdGEoYik7XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHNvY2tldC5vbmNlKCdyZWFkYWJsZScsIHJlYWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBjbGVhbnVwKCkge1xyXG4gICAgICAgICAgICBzb2NrZXQucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIG9uZW5kKTtcclxuICAgICAgICAgICAgc29ja2V0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xyXG4gICAgICAgICAgICBzb2NrZXQucmVtb3ZlTGlzdGVuZXIoJ3JlYWRhYmxlJywgcmVhZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIG9uZW5kKCkge1xyXG4gICAgICAgICAgICBjbGVhbnVwKCk7XHJcbiAgICAgICAgICAgIGRlYnVnKCdvbmVuZCcpO1xyXG4gICAgICAgICAgICByZWplY3QobmV3IEVycm9yKCdQcm94eSBjb25uZWN0aW9uIGVuZGVkIGJlZm9yZSByZWNlaXZpbmcgQ09OTkVDVCByZXNwb25zZScpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gb25lcnJvcihlcnIpIHtcclxuICAgICAgICAgICAgY2xlYW51cCgpO1xyXG4gICAgICAgICAgICBkZWJ1Zygnb25lcnJvciAlbycsIGVycik7XHJcbiAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBvbmRhdGEoYikge1xyXG4gICAgICAgICAgICBidWZmZXJzLnB1c2goYik7XHJcbiAgICAgICAgICAgIGJ1ZmZlcnNMZW5ndGggKz0gYi5sZW5ndGg7XHJcbiAgICAgICAgICAgIGNvbnN0IGJ1ZmZlcmVkID0gQnVmZmVyLmNvbmNhdChidWZmZXJzLCBidWZmZXJzTGVuZ3RoKTtcclxuICAgICAgICAgICAgY29uc3QgZW5kT2ZIZWFkZXJzID0gYnVmZmVyZWQuaW5kZXhPZignXFxyXFxuXFxyXFxuJyk7XHJcbiAgICAgICAgICAgIGlmIChlbmRPZkhlYWRlcnMgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBrZWVwIGJ1ZmZlcmluZ1xyXG4gICAgICAgICAgICAgICAgZGVidWcoJ2hhdmUgbm90IHJlY2VpdmVkIGVuZCBvZiBIVFRQIGhlYWRlcnMgeWV0Li4uJyk7XHJcbiAgICAgICAgICAgICAgICByZWFkKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgaGVhZGVyUGFydHMgPSBidWZmZXJlZFxyXG4gICAgICAgICAgICAgICAgLnNsaWNlKDAsIGVuZE9mSGVhZGVycylcclxuICAgICAgICAgICAgICAgIC50b1N0cmluZygnYXNjaWknKVxyXG4gICAgICAgICAgICAgICAgLnNwbGl0KCdcXHJcXG4nKTtcclxuICAgICAgICAgICAgY29uc3QgZmlyc3RMaW5lID0gaGVhZGVyUGFydHMuc2hpZnQoKTtcclxuICAgICAgICAgICAgaWYgKCFmaXJzdExpbmUpIHtcclxuICAgICAgICAgICAgICAgIHNvY2tldC5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KG5ldyBFcnJvcignTm8gaGVhZGVyIHJlY2VpdmVkIGZyb20gcHJveHkgQ09OTkVDVCByZXNwb25zZScpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBmaXJzdExpbmVQYXJ0cyA9IGZpcnN0TGluZS5zcGxpdCgnICcpO1xyXG4gICAgICAgICAgICBjb25zdCBzdGF0dXNDb2RlID0gK2ZpcnN0TGluZVBhcnRzWzFdO1xyXG4gICAgICAgICAgICBjb25zdCBzdGF0dXNUZXh0ID0gZmlyc3RMaW5lUGFydHMuc2xpY2UoMikuam9pbignICcpO1xyXG4gICAgICAgICAgICBjb25zdCBoZWFkZXJzID0ge307XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgaGVhZGVyIG9mIGhlYWRlclBhcnRzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWhlYWRlcilcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGZpcnN0Q29sb24gPSBoZWFkZXIuaW5kZXhPZignOicpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGZpcnN0Q29sb24gPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc29ja2V0LmRlc3Ryb3koKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KG5ldyBFcnJvcihgSW52YWxpZCBoZWFkZXIgZnJvbSBwcm94eSBDT05ORUNUIHJlc3BvbnNlOiBcIiR7aGVhZGVyfVwiYCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gaGVhZGVyLnNsaWNlKDAsIGZpcnN0Q29sb24pLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGhlYWRlci5zbGljZShmaXJzdENvbG9uICsgMSkudHJpbVN0YXJ0KCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50ID0gaGVhZGVyc1trZXldO1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjdXJyZW50ID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnNba2V5XSA9IFtjdXJyZW50LCB2YWx1ZV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KGN1cnJlbnQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudC5wdXNoKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnNba2V5XSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRlYnVnKCdnb3QgcHJveHkgc2VydmVyIHJlc3BvbnNlOiAlbyAlbycsIGZpcnN0TGluZSwgaGVhZGVycyk7XHJcbiAgICAgICAgICAgIGNsZWFudXAoKTtcclxuICAgICAgICAgICAgcmVzb2x2ZSh7XHJcbiAgICAgICAgICAgICAgICBjb25uZWN0OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzQ29kZSxcclxuICAgICAgICAgICAgICAgICAgICBzdGF0dXNUZXh0LFxyXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnMsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgYnVmZmVyZWQsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzb2NrZXQub24oJ2Vycm9yJywgb25lcnJvcik7XHJcbiAgICAgICAgc29ja2V0Lm9uKCdlbmQnLCBvbmVuZCk7XHJcbiAgICAgICAgcmVhZCgpO1xyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0cy5wYXJzZVByb3h5UmVzcG9uc2UgPSBwYXJzZVByb3h5UmVzcG9uc2U7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhcnNlLXByb3h5LXJlc3BvbnNlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/https-proxy-agent/dist/parse-proxy-response.js\n");

/***/ })

};
;