/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/google-gax";
exports.ids = ["vendor-chunks/google-gax"];
exports.modules = {

/***/ "(rsc)/./node_modules/google-gax/build/protos/iam_service.js":
/*!*************************************************************!*\
  !*** ./node_modules/google-gax/build/protos/iam_service.js ***!
  \*************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(e=>{ true?!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! protobufjs/minimal */ \"(rsc)/./node_modules/protobufjs/minimal.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (e),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)):0})(function(o){var e,t,n,r,F,a=o.Reader,i=o.Writer,p=o.util,l=o.roots.iam_protos||(o.roots.iam_protos={});function B(e,t,n){o.rpc.Service.call(this,e,t,n)}function s(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function u(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function c(e){if(this.permissions=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function G(e){if(this.permissions=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function U(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function d(e){if(this.bindings=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function g(e){if(this.members=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function M(e){if(this.bindingDeltas=[],this.auditConfigDeltas=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function f(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function y(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function L(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function J(e){if(this.rules=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function h(e){if(this.additionalBindings=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function _(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function b(e){if(this.pattern=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function H(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function q(e){if(this.file=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function m(e){if(this.dependency=[],this.publicDependency=[],this.weakDependency=[],this.messageType=[],this.enumType=[],this.service=[],this.extension=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function O(e){if(this.field=[],this.extension=[],this.nestedType=[],this.enumType=[],this.extensionRange=[],this.oneofDecl=[],this.reservedRange=[],this.reservedName=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function v(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function Y(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function z(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function P(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function W(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function w(e){if(this.value=[],this.reservedRange=[],this.reservedName=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function X(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function j(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function D(e){if(this.method=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function x(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function S(e){if(this.uninterpretedOption=[],this[\".google.api.resourceDefinition\"]=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function k(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function T(e){if(this.uninterpretedOption=[],this[\".google.api.fieldBehavior\"]=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function Q(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function E(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function K(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function A(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function N(e){if(this.uninterpretedOption=[],this[\".google.api.methodSignature\"]=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function R(e){if(this.name=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function Z(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function $(e){if(this.location=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function I(e){if(this.path=[],this.span=[],this.leadingDetachedComments=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function ee(e){if(this.annotation=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function C(e){if(this.path=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function V(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return l.google=((F={}).iam=((n={}).v1=((t={}).IAMPolicy=(((B.prototype=Object.create(o.rpc.Service.prototype)).constructor=B).create=function(e,t,n){return new this(e,t,n)},Object.defineProperty(B.prototype.setIamPolicy=function e(t,n){return this.rpcCall(e,l.google.iam.v1.SetIamPolicyRequest,l.google.iam.v1.Policy,t,n)},\"name\",{value:\"SetIamPolicy\"}),Object.defineProperty(B.prototype.getIamPolicy=function e(t,n){return this.rpcCall(e,l.google.iam.v1.GetIamPolicyRequest,l.google.iam.v1.Policy,t,n)},\"name\",{value:\"GetIamPolicy\"}),Object.defineProperty(B.prototype.testIamPermissions=function e(t,n){return this.rpcCall(e,l.google.iam.v1.TestIamPermissionsRequest,l.google.iam.v1.TestIamPermissionsResponse,t,n)},\"name\",{value:\"TestIamPermissions\"}),B),t.SetIamPolicyRequest=(s.prototype.resource=\"\",s.prototype.policy=null,s.create=function(e){return new s(e)},s.encode=function(e,t){return t=t||i.create(),null!=e.resource&&Object.hasOwnProperty.call(e,\"resource\")&&t.uint32(10).string(e.resource),null!=e.policy&&Object.hasOwnProperty.call(e,\"policy\")&&l.google.iam.v1.Policy.encode(e.policy,t.uint32(18).fork()).ldelim(),t},s.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},s.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.iam.v1.SetIamPolicyRequest;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.resource=e.string();break;case 2:o.policy=l.google.iam.v1.Policy.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},s.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},s.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.resource&&e.hasOwnProperty(\"resource\")&&!p.isString(e.resource))return\"resource: string expected\";if(null!=e.policy&&e.hasOwnProperty(\"policy\")){e=l.google.iam.v1.Policy.verify(e.policy);if(e)return\"policy.\"+e}return null},s.fromObject=function(e){if(e instanceof l.google.iam.v1.SetIamPolicyRequest)return e;var t=new l.google.iam.v1.SetIamPolicyRequest;if(null!=e.resource&&(t.resource=String(e.resource)),null!=e.policy){if(\"object\"!=typeof e.policy)throw TypeError(\".google.iam.v1.SetIamPolicyRequest.policy: object expected\");t.policy=l.google.iam.v1.Policy.fromObject(e.policy)}return t},s.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.resource=\"\",n.policy=null),null!=e.resource&&e.hasOwnProperty(\"resource\")&&(n.resource=e.resource),null!=e.policy&&e.hasOwnProperty(\"policy\")&&(n.policy=l.google.iam.v1.Policy.toObject(e.policy,t)),n},s.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},s),t.GetIamPolicyRequest=(u.prototype.resource=\"\",u.prototype.options=null,u.create=function(e){return new u(e)},u.encode=function(e,t){return t=t||i.create(),null!=e.resource&&Object.hasOwnProperty.call(e,\"resource\")&&t.uint32(10).string(e.resource),null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&l.google.iam.v1.GetPolicyOptions.encode(e.options,t.uint32(18).fork()).ldelim(),t},u.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},u.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.iam.v1.GetIamPolicyRequest;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.resource=e.string();break;case 2:o.options=l.google.iam.v1.GetPolicyOptions.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},u.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},u.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.resource&&e.hasOwnProperty(\"resource\")&&!p.isString(e.resource))return\"resource: string expected\";if(null!=e.options&&e.hasOwnProperty(\"options\")){e=l.google.iam.v1.GetPolicyOptions.verify(e.options);if(e)return\"options.\"+e}return null},u.fromObject=function(e){if(e instanceof l.google.iam.v1.GetIamPolicyRequest)return e;var t=new l.google.iam.v1.GetIamPolicyRequest;if(null!=e.resource&&(t.resource=String(e.resource)),null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.iam.v1.GetIamPolicyRequest.options: object expected\");t.options=l.google.iam.v1.GetPolicyOptions.fromObject(e.options)}return t},u.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.resource=\"\",n.options=null),null!=e.resource&&e.hasOwnProperty(\"resource\")&&(n.resource=e.resource),null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=l.google.iam.v1.GetPolicyOptions.toObject(e.options,t)),n},u.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},u),t.TestIamPermissionsRequest=(c.prototype.resource=\"\",c.prototype.permissions=p.emptyArray,c.create=function(e){return new c(e)},c.encode=function(e,t){if(t=t||i.create(),null!=e.resource&&Object.hasOwnProperty.call(e,\"resource\")&&t.uint32(10).string(e.resource),null!=e.permissions&&e.permissions.length)for(var n=0;n<e.permissions.length;++n)t.uint32(18).string(e.permissions[n]);return t},c.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},c.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.iam.v1.TestIamPermissionsRequest;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.resource=e.string();break;case 2:o.permissions&&o.permissions.length||(o.permissions=[]),o.permissions.push(e.string());break;default:e.skipType(7&r)}}return o},c.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},c.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.resource&&e.hasOwnProperty(\"resource\")&&!p.isString(e.resource))return\"resource: string expected\";if(null!=e.permissions&&e.hasOwnProperty(\"permissions\")){if(!Array.isArray(e.permissions))return\"permissions: array expected\";for(var t=0;t<e.permissions.length;++t)if(!p.isString(e.permissions[t]))return\"permissions: string[] expected\"}return null},c.fromObject=function(e){if(e instanceof l.google.iam.v1.TestIamPermissionsRequest)return e;var t=new l.google.iam.v1.TestIamPermissionsRequest;if(null!=e.resource&&(t.resource=String(e.resource)),e.permissions){if(!Array.isArray(e.permissions))throw TypeError(\".google.iam.v1.TestIamPermissionsRequest.permissions: array expected\");t.permissions=[];for(var n=0;n<e.permissions.length;++n)t.permissions[n]=String(e.permissions[n])}return t},c.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.permissions=[]),t.defaults&&(n.resource=\"\"),null!=e.resource&&e.hasOwnProperty(\"resource\")&&(n.resource=e.resource),e.permissions&&e.permissions.length){n.permissions=[];for(var o=0;o<e.permissions.length;++o)n.permissions[o]=e.permissions[o]}return n},c.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},c),t.TestIamPermissionsResponse=(G.prototype.permissions=p.emptyArray,G.create=function(e){return new G(e)},G.encode=function(e,t){if(t=t||i.create(),null!=e.permissions&&e.permissions.length)for(var n=0;n<e.permissions.length;++n)t.uint32(10).string(e.permissions[n]);return t},G.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},G.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.iam.v1.TestIamPermissionsResponse;e.pos<n;){var r=e.uint32();r>>>3==1?(o.permissions&&o.permissions.length||(o.permissions=[]),o.permissions.push(e.string())):e.skipType(7&r)}return o},G.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},G.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.permissions&&e.hasOwnProperty(\"permissions\")){if(!Array.isArray(e.permissions))return\"permissions: array expected\";for(var t=0;t<e.permissions.length;++t)if(!p.isString(e.permissions[t]))return\"permissions: string[] expected\"}return null},G.fromObject=function(e){if(e instanceof l.google.iam.v1.TestIamPermissionsResponse)return e;var t=new l.google.iam.v1.TestIamPermissionsResponse;if(e.permissions){if(!Array.isArray(e.permissions))throw TypeError(\".google.iam.v1.TestIamPermissionsResponse.permissions: array expected\");t.permissions=[];for(var n=0;n<e.permissions.length;++n)t.permissions[n]=String(e.permissions[n])}return t},G.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.permissions=[]),e.permissions&&e.permissions.length){n.permissions=[];for(var o=0;o<e.permissions.length;++o)n.permissions[o]=e.permissions[o]}return n},G.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},G),t.GetPolicyOptions=(U.prototype.requestedPolicyVersion=0,U.create=function(e){return new U(e)},U.encode=function(e,t){return t=t||i.create(),null!=e.requestedPolicyVersion&&Object.hasOwnProperty.call(e,\"requestedPolicyVersion\")&&t.uint32(8).int32(e.requestedPolicyVersion),t},U.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},U.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.iam.v1.GetPolicyOptions;e.pos<n;){var r=e.uint32();r>>>3==1?o.requestedPolicyVersion=e.int32():e.skipType(7&r)}return o},U.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},U.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.requestedPolicyVersion&&e.hasOwnProperty(\"requestedPolicyVersion\")&&!p.isInteger(e.requestedPolicyVersion)?\"requestedPolicyVersion: integer expected\":null},U.fromObject=function(e){var t;return e instanceof l.google.iam.v1.GetPolicyOptions?e:(t=new l.google.iam.v1.GetPolicyOptions,null!=e.requestedPolicyVersion&&(t.requestedPolicyVersion=0|e.requestedPolicyVersion),t)},U.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.requestedPolicyVersion=0),null!=e.requestedPolicyVersion&&e.hasOwnProperty(\"requestedPolicyVersion\")&&(n.requestedPolicyVersion=e.requestedPolicyVersion),n},U.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},U),t.Policy=(d.prototype.version=0,d.prototype.bindings=p.emptyArray,d.prototype.etag=p.newBuffer([]),d.create=function(e){return new d(e)},d.encode=function(e,t){if(t=t||i.create(),null!=e.version&&Object.hasOwnProperty.call(e,\"version\")&&t.uint32(8).int32(e.version),null!=e.etag&&Object.hasOwnProperty.call(e,\"etag\")&&t.uint32(26).bytes(e.etag),null!=e.bindings&&e.bindings.length)for(var n=0;n<e.bindings.length;++n)l.google.iam.v1.Binding.encode(e.bindings[n],t.uint32(34).fork()).ldelim();return t},d.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},d.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.iam.v1.Policy;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.version=e.int32();break;case 4:o.bindings&&o.bindings.length||(o.bindings=[]),o.bindings.push(l.google.iam.v1.Binding.decode(e,e.uint32()));break;case 3:o.etag=e.bytes();break;default:e.skipType(7&r)}}return o},d.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},d.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.version&&e.hasOwnProperty(\"version\")&&!p.isInteger(e.version))return\"version: integer expected\";if(null!=e.bindings&&e.hasOwnProperty(\"bindings\")){if(!Array.isArray(e.bindings))return\"bindings: array expected\";for(var t=0;t<e.bindings.length;++t){var n=l.google.iam.v1.Binding.verify(e.bindings[t]);if(n)return\"bindings.\"+n}}return null!=e.etag&&e.hasOwnProperty(\"etag\")&&!(e.etag&&\"number\"==typeof e.etag.length||p.isString(e.etag))?\"etag: buffer expected\":null},d.fromObject=function(e){if(e instanceof l.google.iam.v1.Policy)return e;var t=new l.google.iam.v1.Policy;if(null!=e.version&&(t.version=0|e.version),e.bindings){if(!Array.isArray(e.bindings))throw TypeError(\".google.iam.v1.Policy.bindings: array expected\");t.bindings=[];for(var n=0;n<e.bindings.length;++n){if(\"object\"!=typeof e.bindings[n])throw TypeError(\".google.iam.v1.Policy.bindings: object expected\");t.bindings[n]=l.google.iam.v1.Binding.fromObject(e.bindings[n])}}return null!=e.etag&&(\"string\"==typeof e.etag?p.base64.decode(e.etag,t.etag=p.newBuffer(p.base64.length(e.etag)),0):e.etag.length&&(t.etag=e.etag)),t},d.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.bindings=[]),t.defaults&&(n.version=0,t.bytes===String?n.etag=\"\":(n.etag=[],t.bytes!==Array&&(n.etag=p.newBuffer(n.etag)))),null!=e.version&&e.hasOwnProperty(\"version\")&&(n.version=e.version),null!=e.etag&&e.hasOwnProperty(\"etag\")&&(n.etag=t.bytes===String?p.base64.encode(e.etag,0,e.etag.length):t.bytes===Array?Array.prototype.slice.call(e.etag):e.etag),e.bindings&&e.bindings.length){n.bindings=[];for(var o=0;o<e.bindings.length;++o)n.bindings[o]=l.google.iam.v1.Binding.toObject(e.bindings[o],t)}return n},d.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},d),t.Binding=(g.prototype.role=\"\",g.prototype.members=p.emptyArray,g.prototype.condition=null,g.create=function(e){return new g(e)},g.encode=function(e,t){if(t=t||i.create(),null!=e.role&&Object.hasOwnProperty.call(e,\"role\")&&t.uint32(10).string(e.role),null!=e.members&&e.members.length)for(var n=0;n<e.members.length;++n)t.uint32(18).string(e.members[n]);return null!=e.condition&&Object.hasOwnProperty.call(e,\"condition\")&&l.google.type.Expr.encode(e.condition,t.uint32(26).fork()).ldelim(),t},g.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},g.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.iam.v1.Binding;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.role=e.string();break;case 2:o.members&&o.members.length||(o.members=[]),o.members.push(e.string());break;case 3:o.condition=l.google.type.Expr.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},g.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},g.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.role&&e.hasOwnProperty(\"role\")&&!p.isString(e.role))return\"role: string expected\";if(null!=e.members&&e.hasOwnProperty(\"members\")){if(!Array.isArray(e.members))return\"members: array expected\";for(var t=0;t<e.members.length;++t)if(!p.isString(e.members[t]))return\"members: string[] expected\"}if(null!=e.condition&&e.hasOwnProperty(\"condition\")){var n=l.google.type.Expr.verify(e.condition);if(n)return\"condition.\"+n}return null},g.fromObject=function(e){if(e instanceof l.google.iam.v1.Binding)return e;var t=new l.google.iam.v1.Binding;if(null!=e.role&&(t.role=String(e.role)),e.members){if(!Array.isArray(e.members))throw TypeError(\".google.iam.v1.Binding.members: array expected\");t.members=[];for(var n=0;n<e.members.length;++n)t.members[n]=String(e.members[n])}if(null!=e.condition){if(\"object\"!=typeof e.condition)throw TypeError(\".google.iam.v1.Binding.condition: object expected\");t.condition=l.google.type.Expr.fromObject(e.condition)}return t},g.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.members=[]),t.defaults&&(n.role=\"\",n.condition=null),null!=e.role&&e.hasOwnProperty(\"role\")&&(n.role=e.role),e.members&&e.members.length){n.members=[];for(var o=0;o<e.members.length;++o)n.members[o]=e.members[o]}return null!=e.condition&&e.hasOwnProperty(\"condition\")&&(n.condition=l.google.type.Expr.toObject(e.condition,t)),n},g.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},g),t.PolicyDelta=(M.prototype.bindingDeltas=p.emptyArray,M.prototype.auditConfigDeltas=p.emptyArray,M.create=function(e){return new M(e)},M.encode=function(e,t){if(t=t||i.create(),null!=e.bindingDeltas&&e.bindingDeltas.length)for(var n=0;n<e.bindingDeltas.length;++n)l.google.iam.v1.BindingDelta.encode(e.bindingDeltas[n],t.uint32(10).fork()).ldelim();if(null!=e.auditConfigDeltas&&e.auditConfigDeltas.length)for(n=0;n<e.auditConfigDeltas.length;++n)l.google.iam.v1.AuditConfigDelta.encode(e.auditConfigDeltas[n],t.uint32(18).fork()).ldelim();return t},M.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},M.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.iam.v1.PolicyDelta;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.bindingDeltas&&o.bindingDeltas.length||(o.bindingDeltas=[]),o.bindingDeltas.push(l.google.iam.v1.BindingDelta.decode(e,e.uint32()));break;case 2:o.auditConfigDeltas&&o.auditConfigDeltas.length||(o.auditConfigDeltas=[]),o.auditConfigDeltas.push(l.google.iam.v1.AuditConfigDelta.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return o},M.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},M.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.bindingDeltas&&e.hasOwnProperty(\"bindingDeltas\")){if(!Array.isArray(e.bindingDeltas))return\"bindingDeltas: array expected\";for(var t=0;t<e.bindingDeltas.length;++t)if(n=l.google.iam.v1.BindingDelta.verify(e.bindingDeltas[t]))return\"bindingDeltas.\"+n}if(null!=e.auditConfigDeltas&&e.hasOwnProperty(\"auditConfigDeltas\")){if(!Array.isArray(e.auditConfigDeltas))return\"auditConfigDeltas: array expected\";for(var n,t=0;t<e.auditConfigDeltas.length;++t)if(n=l.google.iam.v1.AuditConfigDelta.verify(e.auditConfigDeltas[t]))return\"auditConfigDeltas.\"+n}return null},M.fromObject=function(e){if(e instanceof l.google.iam.v1.PolicyDelta)return e;var t=new l.google.iam.v1.PolicyDelta;if(e.bindingDeltas){if(!Array.isArray(e.bindingDeltas))throw TypeError(\".google.iam.v1.PolicyDelta.bindingDeltas: array expected\");t.bindingDeltas=[];for(var n=0;n<e.bindingDeltas.length;++n){if(\"object\"!=typeof e.bindingDeltas[n])throw TypeError(\".google.iam.v1.PolicyDelta.bindingDeltas: object expected\");t.bindingDeltas[n]=l.google.iam.v1.BindingDelta.fromObject(e.bindingDeltas[n])}}if(e.auditConfigDeltas){if(!Array.isArray(e.auditConfigDeltas))throw TypeError(\".google.iam.v1.PolicyDelta.auditConfigDeltas: array expected\");t.auditConfigDeltas=[];for(n=0;n<e.auditConfigDeltas.length;++n){if(\"object\"!=typeof e.auditConfigDeltas[n])throw TypeError(\".google.iam.v1.PolicyDelta.auditConfigDeltas: object expected\");t.auditConfigDeltas[n]=l.google.iam.v1.AuditConfigDelta.fromObject(e.auditConfigDeltas[n])}}return t},M.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.bindingDeltas=[],n.auditConfigDeltas=[]),e.bindingDeltas&&e.bindingDeltas.length){n.bindingDeltas=[];for(var o=0;o<e.bindingDeltas.length;++o)n.bindingDeltas[o]=l.google.iam.v1.BindingDelta.toObject(e.bindingDeltas[o],t)}if(e.auditConfigDeltas&&e.auditConfigDeltas.length){n.auditConfigDeltas=[];for(o=0;o<e.auditConfigDeltas.length;++o)n.auditConfigDeltas[o]=l.google.iam.v1.AuditConfigDelta.toObject(e.auditConfigDeltas[o],t)}return n},M.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},M),t.BindingDelta=(f.prototype.action=0,f.prototype.role=\"\",f.prototype.member=\"\",f.prototype.condition=null,f.create=function(e){return new f(e)},f.encode=function(e,t){return t=t||i.create(),null!=e.action&&Object.hasOwnProperty.call(e,\"action\")&&t.uint32(8).int32(e.action),null!=e.role&&Object.hasOwnProperty.call(e,\"role\")&&t.uint32(18).string(e.role),null!=e.member&&Object.hasOwnProperty.call(e,\"member\")&&t.uint32(26).string(e.member),null!=e.condition&&Object.hasOwnProperty.call(e,\"condition\")&&l.google.type.Expr.encode(e.condition,t.uint32(34).fork()).ldelim(),t},f.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},f.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.iam.v1.BindingDelta;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.action=e.int32();break;case 2:o.role=e.string();break;case 3:o.member=e.string();break;case 4:o.condition=l.google.type.Expr.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},f.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},f.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.action&&e.hasOwnProperty(\"action\"))switch(e.action){default:return\"action: enum value expected\";case 0:case 1:case 2:}if(null!=e.role&&e.hasOwnProperty(\"role\")&&!p.isString(e.role))return\"role: string expected\";if(null!=e.member&&e.hasOwnProperty(\"member\")&&!p.isString(e.member))return\"member: string expected\";if(null!=e.condition&&e.hasOwnProperty(\"condition\")){e=l.google.type.Expr.verify(e.condition);if(e)return\"condition.\"+e}return null},f.fromObject=function(e){if(e instanceof l.google.iam.v1.BindingDelta)return e;var t=new l.google.iam.v1.BindingDelta;switch(e.action){case\"ACTION_UNSPECIFIED\":case 0:t.action=0;break;case\"ADD\":case 1:t.action=1;break;case\"REMOVE\":case 2:t.action=2}if(null!=e.role&&(t.role=String(e.role)),null!=e.member&&(t.member=String(e.member)),null!=e.condition){if(\"object\"!=typeof e.condition)throw TypeError(\".google.iam.v1.BindingDelta.condition: object expected\");t.condition=l.google.type.Expr.fromObject(e.condition)}return t},f.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.action=t.enums===String?\"ACTION_UNSPECIFIED\":0,n.role=\"\",n.member=\"\",n.condition=null),null!=e.action&&e.hasOwnProperty(\"action\")&&(n.action=t.enums===String?l.google.iam.v1.BindingDelta.Action[e.action]:e.action),null!=e.role&&e.hasOwnProperty(\"role\")&&(n.role=e.role),null!=e.member&&e.hasOwnProperty(\"member\")&&(n.member=e.member),null!=e.condition&&e.hasOwnProperty(\"condition\")&&(n.condition=l.google.type.Expr.toObject(e.condition,t)),n},f.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},f.Action=(e={},(r=Object.create(e))[e[0]=\"ACTION_UNSPECIFIED\"]=0,r[e[1]=\"ADD\"]=1,r[e[2]=\"REMOVE\"]=2,r),f),t.AuditConfigDelta=(y.prototype.action=0,y.prototype.service=\"\",y.prototype.exemptedMember=\"\",y.prototype.logType=\"\",y.create=function(e){return new y(e)},y.encode=function(e,t){return t=t||i.create(),null!=e.action&&Object.hasOwnProperty.call(e,\"action\")&&t.uint32(8).int32(e.action),null!=e.service&&Object.hasOwnProperty.call(e,\"service\")&&t.uint32(18).string(e.service),null!=e.exemptedMember&&Object.hasOwnProperty.call(e,\"exemptedMember\")&&t.uint32(26).string(e.exemptedMember),null!=e.logType&&Object.hasOwnProperty.call(e,\"logType\")&&t.uint32(34).string(e.logType),t},y.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},y.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.iam.v1.AuditConfigDelta;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.action=e.int32();break;case 2:o.service=e.string();break;case 3:o.exemptedMember=e.string();break;case 4:o.logType=e.string();break;default:e.skipType(7&r)}}return o},y.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},y.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.action&&e.hasOwnProperty(\"action\"))switch(e.action){default:return\"action: enum value expected\";case 0:case 1:case 2:}return null!=e.service&&e.hasOwnProperty(\"service\")&&!p.isString(e.service)?\"service: string expected\":null!=e.exemptedMember&&e.hasOwnProperty(\"exemptedMember\")&&!p.isString(e.exemptedMember)?\"exemptedMember: string expected\":null!=e.logType&&e.hasOwnProperty(\"logType\")&&!p.isString(e.logType)?\"logType: string expected\":null},y.fromObject=function(e){if(e instanceof l.google.iam.v1.AuditConfigDelta)return e;var t=new l.google.iam.v1.AuditConfigDelta;switch(e.action){case\"ACTION_UNSPECIFIED\":case 0:t.action=0;break;case\"ADD\":case 1:t.action=1;break;case\"REMOVE\":case 2:t.action=2}return null!=e.service&&(t.service=String(e.service)),null!=e.exemptedMember&&(t.exemptedMember=String(e.exemptedMember)),null!=e.logType&&(t.logType=String(e.logType)),t},y.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.action=t.enums===String?\"ACTION_UNSPECIFIED\":0,n.service=\"\",n.exemptedMember=\"\",n.logType=\"\"),null!=e.action&&e.hasOwnProperty(\"action\")&&(n.action=t.enums===String?l.google.iam.v1.AuditConfigDelta.Action[e.action]:e.action),null!=e.service&&e.hasOwnProperty(\"service\")&&(n.service=e.service),null!=e.exemptedMember&&e.hasOwnProperty(\"exemptedMember\")&&(n.exemptedMember=e.exemptedMember),null!=e.logType&&e.hasOwnProperty(\"logType\")&&(n.logType=e.logType),n},y.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},y.Action=(e={},(r=Object.create(e))[e[0]=\"ACTION_UNSPECIFIED\"]=0,r[e[1]=\"ADD\"]=1,r[e[2]=\"REMOVE\"]=2,r),y),t.logging=((e={}).AuditData=(L.prototype.policyDelta=null,L.create=function(e){return new L(e)},L.encode=function(e,t){return t=t||i.create(),null!=e.policyDelta&&Object.hasOwnProperty.call(e,\"policyDelta\")&&l.google.iam.v1.PolicyDelta.encode(e.policyDelta,t.uint32(18).fork()).ldelim(),t},L.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},L.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.iam.v1.logging.AuditData;e.pos<n;){var r=e.uint32();r>>>3==2?o.policyDelta=l.google.iam.v1.PolicyDelta.decode(e,e.uint32()):e.skipType(7&r)}return o},L.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},L.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.policyDelta&&e.hasOwnProperty(\"policyDelta\")){e=l.google.iam.v1.PolicyDelta.verify(e.policyDelta);if(e)return\"policyDelta.\"+e}return null},L.fromObject=function(e){if(e instanceof l.google.iam.v1.logging.AuditData)return e;var t=new l.google.iam.v1.logging.AuditData;if(null!=e.policyDelta){if(\"object\"!=typeof e.policyDelta)throw TypeError(\".google.iam.v1.logging.AuditData.policyDelta: object expected\");t.policyDelta=l.google.iam.v1.PolicyDelta.fromObject(e.policyDelta)}return t},L.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.policyDelta=null),null!=e.policyDelta&&e.hasOwnProperty(\"policyDelta\")&&(n.policyDelta=l.google.iam.v1.PolicyDelta.toObject(e.policyDelta,t)),n},L.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},L),e),t),n),F.api=((r={}).Http=(J.prototype.rules=p.emptyArray,J.prototype.fullyDecodeReservedExpansion=!1,J.create=function(e){return new J(e)},J.encode=function(e,t){if(t=t||i.create(),null!=e.rules&&e.rules.length)for(var n=0;n<e.rules.length;++n)l.google.api.HttpRule.encode(e.rules[n],t.uint32(10).fork()).ldelim();return null!=e.fullyDecodeReservedExpansion&&Object.hasOwnProperty.call(e,\"fullyDecodeReservedExpansion\")&&t.uint32(16).bool(e.fullyDecodeReservedExpansion),t},J.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},J.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.api.Http;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.rules&&o.rules.length||(o.rules=[]),o.rules.push(l.google.api.HttpRule.decode(e,e.uint32()));break;case 2:o.fullyDecodeReservedExpansion=e.bool();break;default:e.skipType(7&r)}}return o},J.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},J.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.rules&&e.hasOwnProperty(\"rules\")){if(!Array.isArray(e.rules))return\"rules: array expected\";for(var t=0;t<e.rules.length;++t){var n=l.google.api.HttpRule.verify(e.rules[t]);if(n)return\"rules.\"+n}}return null!=e.fullyDecodeReservedExpansion&&e.hasOwnProperty(\"fullyDecodeReservedExpansion\")&&\"boolean\"!=typeof e.fullyDecodeReservedExpansion?\"fullyDecodeReservedExpansion: boolean expected\":null},J.fromObject=function(e){if(e instanceof l.google.api.Http)return e;var t=new l.google.api.Http;if(e.rules){if(!Array.isArray(e.rules))throw TypeError(\".google.api.Http.rules: array expected\");t.rules=[];for(var n=0;n<e.rules.length;++n){if(\"object\"!=typeof e.rules[n])throw TypeError(\".google.api.Http.rules: object expected\");t.rules[n]=l.google.api.HttpRule.fromObject(e.rules[n])}}return null!=e.fullyDecodeReservedExpansion&&(t.fullyDecodeReservedExpansion=Boolean(e.fullyDecodeReservedExpansion)),t},J.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.rules=[]),t.defaults&&(n.fullyDecodeReservedExpansion=!1),e.rules&&e.rules.length){n.rules=[];for(var o=0;o<e.rules.length;++o)n.rules[o]=l.google.api.HttpRule.toObject(e.rules[o],t)}return null!=e.fullyDecodeReservedExpansion&&e.hasOwnProperty(\"fullyDecodeReservedExpansion\")&&(n.fullyDecodeReservedExpansion=e.fullyDecodeReservedExpansion),n},J.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},J),r.HttpRule=(h.prototype.selector=\"\",h.prototype.get=\"\",h.prototype.put=\"\",h.prototype.post=\"\",h.prototype.delete=\"\",h.prototype.patch=\"\",h.prototype.custom=null,h.prototype.body=\"\",h.prototype.responseBody=\"\",h.prototype.additionalBindings=p.emptyArray,Object.defineProperty(h.prototype,\"pattern\",{get:p.oneOfGetter(e=[\"get\",\"put\",\"post\",\"delete\",\"patch\",\"custom\"]),set:p.oneOfSetter(e)}),h.create=function(e){return new h(e)},h.encode=function(e,t){if(t=t||i.create(),null!=e.selector&&Object.hasOwnProperty.call(e,\"selector\")&&t.uint32(10).string(e.selector),null!=e.get&&Object.hasOwnProperty.call(e,\"get\")&&t.uint32(18).string(e.get),null!=e.put&&Object.hasOwnProperty.call(e,\"put\")&&t.uint32(26).string(e.put),null!=e.post&&Object.hasOwnProperty.call(e,\"post\")&&t.uint32(34).string(e.post),null!=e.delete&&Object.hasOwnProperty.call(e,\"delete\")&&t.uint32(42).string(e.delete),null!=e.patch&&Object.hasOwnProperty.call(e,\"patch\")&&t.uint32(50).string(e.patch),null!=e.body&&Object.hasOwnProperty.call(e,\"body\")&&t.uint32(58).string(e.body),null!=e.custom&&Object.hasOwnProperty.call(e,\"custom\")&&l.google.api.CustomHttpPattern.encode(e.custom,t.uint32(66).fork()).ldelim(),null!=e.additionalBindings&&e.additionalBindings.length)for(var n=0;n<e.additionalBindings.length;++n)l.google.api.HttpRule.encode(e.additionalBindings[n],t.uint32(90).fork()).ldelim();return null!=e.responseBody&&Object.hasOwnProperty.call(e,\"responseBody\")&&t.uint32(98).string(e.responseBody),t},h.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},h.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.api.HttpRule;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.selector=e.string();break;case 2:o.get=e.string();break;case 3:o.put=e.string();break;case 4:o.post=e.string();break;case 5:o.delete=e.string();break;case 6:o.patch=e.string();break;case 8:o.custom=l.google.api.CustomHttpPattern.decode(e,e.uint32());break;case 7:o.body=e.string();break;case 12:o.responseBody=e.string();break;case 11:o.additionalBindings&&o.additionalBindings.length||(o.additionalBindings=[]),o.additionalBindings.push(l.google.api.HttpRule.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return o},h.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},h.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";var t={};if(null!=e.selector&&e.hasOwnProperty(\"selector\")&&!p.isString(e.selector))return\"selector: string expected\";if(null!=e.get&&e.hasOwnProperty(\"get\")&&(t.pattern=1,!p.isString(e.get)))return\"get: string expected\";if(null!=e.put&&e.hasOwnProperty(\"put\")){if(1===t.pattern)return\"pattern: multiple values\";if(t.pattern=1,!p.isString(e.put))return\"put: string expected\"}if(null!=e.post&&e.hasOwnProperty(\"post\")){if(1===t.pattern)return\"pattern: multiple values\";if(t.pattern=1,!p.isString(e.post))return\"post: string expected\"}if(null!=e.delete&&e.hasOwnProperty(\"delete\")){if(1===t.pattern)return\"pattern: multiple values\";if(t.pattern=1,!p.isString(e.delete))return\"delete: string expected\"}if(null!=e.patch&&e.hasOwnProperty(\"patch\")){if(1===t.pattern)return\"pattern: multiple values\";if(t.pattern=1,!p.isString(e.patch))return\"patch: string expected\"}if(null!=e.custom&&e.hasOwnProperty(\"custom\")){if(1===t.pattern)return\"pattern: multiple values\";if(t.pattern=1,n=l.google.api.CustomHttpPattern.verify(e.custom))return\"custom.\"+n}if(null!=e.body&&e.hasOwnProperty(\"body\")&&!p.isString(e.body))return\"body: string expected\";if(null!=e.responseBody&&e.hasOwnProperty(\"responseBody\")&&!p.isString(e.responseBody))return\"responseBody: string expected\";if(null!=e.additionalBindings&&e.hasOwnProperty(\"additionalBindings\")){if(!Array.isArray(e.additionalBindings))return\"additionalBindings: array expected\";for(var n,o=0;o<e.additionalBindings.length;++o)if(n=l.google.api.HttpRule.verify(e.additionalBindings[o]))return\"additionalBindings.\"+n}return null},h.fromObject=function(e){if(e instanceof l.google.api.HttpRule)return e;var t=new l.google.api.HttpRule;if(null!=e.selector&&(t.selector=String(e.selector)),null!=e.get&&(t.get=String(e.get)),null!=e.put&&(t.put=String(e.put)),null!=e.post&&(t.post=String(e.post)),null!=e.delete&&(t.delete=String(e.delete)),null!=e.patch&&(t.patch=String(e.patch)),null!=e.custom){if(\"object\"!=typeof e.custom)throw TypeError(\".google.api.HttpRule.custom: object expected\");t.custom=l.google.api.CustomHttpPattern.fromObject(e.custom)}if(null!=e.body&&(t.body=String(e.body)),null!=e.responseBody&&(t.responseBody=String(e.responseBody)),e.additionalBindings){if(!Array.isArray(e.additionalBindings))throw TypeError(\".google.api.HttpRule.additionalBindings: array expected\");t.additionalBindings=[];for(var n=0;n<e.additionalBindings.length;++n){if(\"object\"!=typeof e.additionalBindings[n])throw TypeError(\".google.api.HttpRule.additionalBindings: object expected\");t.additionalBindings[n]=l.google.api.HttpRule.fromObject(e.additionalBindings[n])}}return t},h.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.additionalBindings=[]),t.defaults&&(n.selector=\"\",n.body=\"\",n.responseBody=\"\"),null!=e.selector&&e.hasOwnProperty(\"selector\")&&(n.selector=e.selector),null!=e.get&&e.hasOwnProperty(\"get\")&&(n.get=e.get,t.oneofs)&&(n.pattern=\"get\"),null!=e.put&&e.hasOwnProperty(\"put\")&&(n.put=e.put,t.oneofs)&&(n.pattern=\"put\"),null!=e.post&&e.hasOwnProperty(\"post\")&&(n.post=e.post,t.oneofs)&&(n.pattern=\"post\"),null!=e.delete&&e.hasOwnProperty(\"delete\")&&(n.delete=e.delete,t.oneofs)&&(n.pattern=\"delete\"),null!=e.patch&&e.hasOwnProperty(\"patch\")&&(n.patch=e.patch,t.oneofs)&&(n.pattern=\"patch\"),null!=e.body&&e.hasOwnProperty(\"body\")&&(n.body=e.body),null!=e.custom&&e.hasOwnProperty(\"custom\")&&(n.custom=l.google.api.CustomHttpPattern.toObject(e.custom,t),t.oneofs)&&(n.pattern=\"custom\"),e.additionalBindings&&e.additionalBindings.length){n.additionalBindings=[];for(var o=0;o<e.additionalBindings.length;++o)n.additionalBindings[o]=l.google.api.HttpRule.toObject(e.additionalBindings[o],t)}return null!=e.responseBody&&e.hasOwnProperty(\"responseBody\")&&(n.responseBody=e.responseBody),n},h.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},h),r.CustomHttpPattern=(_.prototype.kind=\"\",_.prototype.path=\"\",_.create=function(e){return new _(e)},_.encode=function(e,t){return t=t||i.create(),null!=e.kind&&Object.hasOwnProperty.call(e,\"kind\")&&t.uint32(10).string(e.kind),null!=e.path&&Object.hasOwnProperty.call(e,\"path\")&&t.uint32(18).string(e.path),t},_.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},_.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.api.CustomHttpPattern;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.kind=e.string();break;case 2:o.path=e.string();break;default:e.skipType(7&r)}}return o},_.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},_.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.kind&&e.hasOwnProperty(\"kind\")&&!p.isString(e.kind)?\"kind: string expected\":null!=e.path&&e.hasOwnProperty(\"path\")&&!p.isString(e.path)?\"path: string expected\":null},_.fromObject=function(e){var t;return e instanceof l.google.api.CustomHttpPattern?e:(t=new l.google.api.CustomHttpPattern,null!=e.kind&&(t.kind=String(e.kind)),null!=e.path&&(t.path=String(e.path)),t)},_.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.kind=\"\",n.path=\"\"),null!=e.kind&&e.hasOwnProperty(\"kind\")&&(n.kind=e.kind),null!=e.path&&e.hasOwnProperty(\"path\")&&(n.path=e.path),n},_.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},_),r.FieldBehavior=(e={},(t=Object.create(e))[e[0]=\"FIELD_BEHAVIOR_UNSPECIFIED\"]=0,t[e[1]=\"OPTIONAL\"]=1,t[e[2]=\"REQUIRED\"]=2,t[e[3]=\"OUTPUT_ONLY\"]=3,t[e[4]=\"INPUT_ONLY\"]=4,t[e[5]=\"IMMUTABLE\"]=5,t),r.ResourceDescriptor=(b.prototype.type=\"\",b.prototype.pattern=p.emptyArray,b.prototype.nameField=\"\",b.prototype.history=0,b.prototype.plural=\"\",b.prototype.singular=\"\",b.create=function(e){return new b(e)},b.encode=function(e,t){if(t=t||i.create(),null!=e.type&&Object.hasOwnProperty.call(e,\"type\")&&t.uint32(10).string(e.type),null!=e.pattern&&e.pattern.length)for(var n=0;n<e.pattern.length;++n)t.uint32(18).string(e.pattern[n]);return null!=e.nameField&&Object.hasOwnProperty.call(e,\"nameField\")&&t.uint32(26).string(e.nameField),null!=e.history&&Object.hasOwnProperty.call(e,\"history\")&&t.uint32(32).int32(e.history),null!=e.plural&&Object.hasOwnProperty.call(e,\"plural\")&&t.uint32(42).string(e.plural),null!=e.singular&&Object.hasOwnProperty.call(e,\"singular\")&&t.uint32(50).string(e.singular),t},b.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},b.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.api.ResourceDescriptor;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.type=e.string();break;case 2:o.pattern&&o.pattern.length||(o.pattern=[]),o.pattern.push(e.string());break;case 3:o.nameField=e.string();break;case 4:o.history=e.int32();break;case 5:o.plural=e.string();break;case 6:o.singular=e.string();break;default:e.skipType(7&r)}}return o},b.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},b.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.type&&e.hasOwnProperty(\"type\")&&!p.isString(e.type))return\"type: string expected\";if(null!=e.pattern&&e.hasOwnProperty(\"pattern\")){if(!Array.isArray(e.pattern))return\"pattern: array expected\";for(var t=0;t<e.pattern.length;++t)if(!p.isString(e.pattern[t]))return\"pattern: string[] expected\"}if(null!=e.nameField&&e.hasOwnProperty(\"nameField\")&&!p.isString(e.nameField))return\"nameField: string expected\";if(null!=e.history&&e.hasOwnProperty(\"history\"))switch(e.history){default:return\"history: enum value expected\";case 0:case 1:case 2:}return null!=e.plural&&e.hasOwnProperty(\"plural\")&&!p.isString(e.plural)?\"plural: string expected\":null!=e.singular&&e.hasOwnProperty(\"singular\")&&!p.isString(e.singular)?\"singular: string expected\":null},b.fromObject=function(e){if(e instanceof l.google.api.ResourceDescriptor)return e;var t=new l.google.api.ResourceDescriptor;if(null!=e.type&&(t.type=String(e.type)),e.pattern){if(!Array.isArray(e.pattern))throw TypeError(\".google.api.ResourceDescriptor.pattern: array expected\");t.pattern=[];for(var n=0;n<e.pattern.length;++n)t.pattern[n]=String(e.pattern[n])}switch(null!=e.nameField&&(t.nameField=String(e.nameField)),e.history){case\"HISTORY_UNSPECIFIED\":case 0:t.history=0;break;case\"ORIGINALLY_SINGLE_PATTERN\":case 1:t.history=1;break;case\"FUTURE_MULTI_PATTERN\":case 2:t.history=2}return null!=e.plural&&(t.plural=String(e.plural)),null!=e.singular&&(t.singular=String(e.singular)),t},b.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.pattern=[]),t.defaults&&(n.type=\"\",n.nameField=\"\",n.history=t.enums===String?\"HISTORY_UNSPECIFIED\":0,n.plural=\"\",n.singular=\"\"),null!=e.type&&e.hasOwnProperty(\"type\")&&(n.type=e.type),e.pattern&&e.pattern.length){n.pattern=[];for(var o=0;o<e.pattern.length;++o)n.pattern[o]=e.pattern[o]}return null!=e.nameField&&e.hasOwnProperty(\"nameField\")&&(n.nameField=e.nameField),null!=e.history&&e.hasOwnProperty(\"history\")&&(n.history=t.enums===String?l.google.api.ResourceDescriptor.History[e.history]:e.history),null!=e.plural&&e.hasOwnProperty(\"plural\")&&(n.plural=e.plural),null!=e.singular&&e.hasOwnProperty(\"singular\")&&(n.singular=e.singular),n},b.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},b.History=(e={},(t=Object.create(e))[e[0]=\"HISTORY_UNSPECIFIED\"]=0,t[e[1]=\"ORIGINALLY_SINGLE_PATTERN\"]=1,t[e[2]=\"FUTURE_MULTI_PATTERN\"]=2,t),b),r.ResourceReference=(H.prototype.type=\"\",H.prototype.childType=\"\",H.create=function(e){return new H(e)},H.encode=function(e,t){return t=t||i.create(),null!=e.type&&Object.hasOwnProperty.call(e,\"type\")&&t.uint32(10).string(e.type),null!=e.childType&&Object.hasOwnProperty.call(e,\"childType\")&&t.uint32(18).string(e.childType),t},H.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},H.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.api.ResourceReference;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.type=e.string();break;case 2:o.childType=e.string();break;default:e.skipType(7&r)}}return o},H.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},H.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.type&&e.hasOwnProperty(\"type\")&&!p.isString(e.type)?\"type: string expected\":null!=e.childType&&e.hasOwnProperty(\"childType\")&&!p.isString(e.childType)?\"childType: string expected\":null},H.fromObject=function(e){var t;return e instanceof l.google.api.ResourceReference?e:(t=new l.google.api.ResourceReference,null!=e.type&&(t.type=String(e.type)),null!=e.childType&&(t.childType=String(e.childType)),t)},H.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.type=\"\",n.childType=\"\"),null!=e.type&&e.hasOwnProperty(\"type\")&&(n.type=e.type),null!=e.childType&&e.hasOwnProperty(\"childType\")&&(n.childType=e.childType),n},H.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},H),r),F.protobuf=((n={}).FileDescriptorSet=(q.prototype.file=p.emptyArray,q.create=function(e){return new q(e)},q.encode=function(e,t){if(t=t||i.create(),null!=e.file&&e.file.length)for(var n=0;n<e.file.length;++n)l.google.protobuf.FileDescriptorProto.encode(e.file[n],t.uint32(10).fork()).ldelim();return t},q.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},q.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.FileDescriptorSet;e.pos<n;){var r=e.uint32();r>>>3==1?(o.file&&o.file.length||(o.file=[]),o.file.push(l.google.protobuf.FileDescriptorProto.decode(e,e.uint32()))):e.skipType(7&r)}return o},q.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},q.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.file&&e.hasOwnProperty(\"file\")){if(!Array.isArray(e.file))return\"file: array expected\";for(var t=0;t<e.file.length;++t){var n=l.google.protobuf.FileDescriptorProto.verify(e.file[t]);if(n)return\"file.\"+n}}return null},q.fromObject=function(e){if(e instanceof l.google.protobuf.FileDescriptorSet)return e;var t=new l.google.protobuf.FileDescriptorSet;if(e.file){if(!Array.isArray(e.file))throw TypeError(\".google.protobuf.FileDescriptorSet.file: array expected\");t.file=[];for(var n=0;n<e.file.length;++n){if(\"object\"!=typeof e.file[n])throw TypeError(\".google.protobuf.FileDescriptorSet.file: object expected\");t.file[n]=l.google.protobuf.FileDescriptorProto.fromObject(e.file[n])}}return t},q.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.file=[]),e.file&&e.file.length){n.file=[];for(var o=0;o<e.file.length;++o)n.file[o]=l.google.protobuf.FileDescriptorProto.toObject(e.file[o],t)}return n},q.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},q),n.FileDescriptorProto=(m.prototype.name=\"\",m.prototype.package=\"\",m.prototype.dependency=p.emptyArray,m.prototype.publicDependency=p.emptyArray,m.prototype.weakDependency=p.emptyArray,m.prototype.messageType=p.emptyArray,m.prototype.enumType=p.emptyArray,m.prototype.service=p.emptyArray,m.prototype.extension=p.emptyArray,m.prototype.options=null,m.prototype.sourceCodeInfo=null,m.prototype.syntax=\"\",m.create=function(e){return new m(e)},m.encode=function(e,t){if(t=t||i.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.package&&Object.hasOwnProperty.call(e,\"package\")&&t.uint32(18).string(e.package),null!=e.dependency&&e.dependency.length)for(var n=0;n<e.dependency.length;++n)t.uint32(26).string(e.dependency[n]);if(null!=e.messageType&&e.messageType.length)for(n=0;n<e.messageType.length;++n)l.google.protobuf.DescriptorProto.encode(e.messageType[n],t.uint32(34).fork()).ldelim();if(null!=e.enumType&&e.enumType.length)for(n=0;n<e.enumType.length;++n)l.google.protobuf.EnumDescriptorProto.encode(e.enumType[n],t.uint32(42).fork()).ldelim();if(null!=e.service&&e.service.length)for(n=0;n<e.service.length;++n)l.google.protobuf.ServiceDescriptorProto.encode(e.service[n],t.uint32(50).fork()).ldelim();if(null!=e.extension&&e.extension.length)for(n=0;n<e.extension.length;++n)l.google.protobuf.FieldDescriptorProto.encode(e.extension[n],t.uint32(58).fork()).ldelim();if(null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&l.google.protobuf.FileOptions.encode(e.options,t.uint32(66).fork()).ldelim(),null!=e.sourceCodeInfo&&Object.hasOwnProperty.call(e,\"sourceCodeInfo\")&&l.google.protobuf.SourceCodeInfo.encode(e.sourceCodeInfo,t.uint32(74).fork()).ldelim(),null!=e.publicDependency&&e.publicDependency.length)for(n=0;n<e.publicDependency.length;++n)t.uint32(80).int32(e.publicDependency[n]);if(null!=e.weakDependency&&e.weakDependency.length)for(n=0;n<e.weakDependency.length;++n)t.uint32(88).int32(e.weakDependency[n]);return null!=e.syntax&&Object.hasOwnProperty.call(e,\"syntax\")&&t.uint32(98).string(e.syntax),t},m.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},m.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.FileDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.package=e.string();break;case 3:o.dependency&&o.dependency.length||(o.dependency=[]),o.dependency.push(e.string());break;case 10:if(o.publicDependency&&o.publicDependency.length||(o.publicDependency=[]),2==(7&r))for(var i=e.uint32()+e.pos;e.pos<i;)o.publicDependency.push(e.int32());else o.publicDependency.push(e.int32());break;case 11:if(o.weakDependency&&o.weakDependency.length||(o.weakDependency=[]),2==(7&r))for(i=e.uint32()+e.pos;e.pos<i;)o.weakDependency.push(e.int32());else o.weakDependency.push(e.int32());break;case 4:o.messageType&&o.messageType.length||(o.messageType=[]),o.messageType.push(l.google.protobuf.DescriptorProto.decode(e,e.uint32()));break;case 5:o.enumType&&o.enumType.length||(o.enumType=[]),o.enumType.push(l.google.protobuf.EnumDescriptorProto.decode(e,e.uint32()));break;case 6:o.service&&o.service.length||(o.service=[]),o.service.push(l.google.protobuf.ServiceDescriptorProto.decode(e,e.uint32()));break;case 7:o.extension&&o.extension.length||(o.extension=[]),o.extension.push(l.google.protobuf.FieldDescriptorProto.decode(e,e.uint32()));break;case 8:o.options=l.google.protobuf.FileOptions.decode(e,e.uint32());break;case 9:o.sourceCodeInfo=l.google.protobuf.SourceCodeInfo.decode(e,e.uint32());break;case 12:o.syntax=e.string();break;default:e.skipType(7&r)}}return o},m.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},m.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!p.isString(e.name))return\"name: string expected\";if(null!=e.package&&e.hasOwnProperty(\"package\")&&!p.isString(e.package))return\"package: string expected\";if(null!=e.dependency&&e.hasOwnProperty(\"dependency\")){if(!Array.isArray(e.dependency))return\"dependency: array expected\";for(var t=0;t<e.dependency.length;++t)if(!p.isString(e.dependency[t]))return\"dependency: string[] expected\"}if(null!=e.publicDependency&&e.hasOwnProperty(\"publicDependency\")){if(!Array.isArray(e.publicDependency))return\"publicDependency: array expected\";for(t=0;t<e.publicDependency.length;++t)if(!p.isInteger(e.publicDependency[t]))return\"publicDependency: integer[] expected\"}if(null!=e.weakDependency&&e.hasOwnProperty(\"weakDependency\")){if(!Array.isArray(e.weakDependency))return\"weakDependency: array expected\";for(t=0;t<e.weakDependency.length;++t)if(!p.isInteger(e.weakDependency[t]))return\"weakDependency: integer[] expected\"}if(null!=e.messageType&&e.hasOwnProperty(\"messageType\")){if(!Array.isArray(e.messageType))return\"messageType: array expected\";for(t=0;t<e.messageType.length;++t)if(n=l.google.protobuf.DescriptorProto.verify(e.messageType[t]))return\"messageType.\"+n}if(null!=e.enumType&&e.hasOwnProperty(\"enumType\")){if(!Array.isArray(e.enumType))return\"enumType: array expected\";for(t=0;t<e.enumType.length;++t)if(n=l.google.protobuf.EnumDescriptorProto.verify(e.enumType[t]))return\"enumType.\"+n}if(null!=e.service&&e.hasOwnProperty(\"service\")){if(!Array.isArray(e.service))return\"service: array expected\";for(t=0;t<e.service.length;++t)if(n=l.google.protobuf.ServiceDescriptorProto.verify(e.service[t]))return\"service.\"+n}if(null!=e.extension&&e.hasOwnProperty(\"extension\")){if(!Array.isArray(e.extension))return\"extension: array expected\";for(t=0;t<e.extension.length;++t)if(n=l.google.protobuf.FieldDescriptorProto.verify(e.extension[t]))return\"extension.\"+n}var n;if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n=l.google.protobuf.FileOptions.verify(e.options)))return\"options.\"+n;if(null!=e.sourceCodeInfo&&e.hasOwnProperty(\"sourceCodeInfo\")&&(n=l.google.protobuf.SourceCodeInfo.verify(e.sourceCodeInfo)))return\"sourceCodeInfo.\"+n;return null!=e.syntax&&e.hasOwnProperty(\"syntax\")&&!p.isString(e.syntax)?\"syntax: string expected\":null},m.fromObject=function(e){if(e instanceof l.google.protobuf.FileDescriptorProto)return e;var t=new l.google.protobuf.FileDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),null!=e.package&&(t.package=String(e.package)),e.dependency){if(!Array.isArray(e.dependency))throw TypeError(\".google.protobuf.FileDescriptorProto.dependency: array expected\");t.dependency=[];for(var n=0;n<e.dependency.length;++n)t.dependency[n]=String(e.dependency[n])}if(e.publicDependency){if(!Array.isArray(e.publicDependency))throw TypeError(\".google.protobuf.FileDescriptorProto.publicDependency: array expected\");t.publicDependency=[];for(n=0;n<e.publicDependency.length;++n)t.publicDependency[n]=0|e.publicDependency[n]}if(e.weakDependency){if(!Array.isArray(e.weakDependency))throw TypeError(\".google.protobuf.FileDescriptorProto.weakDependency: array expected\");t.weakDependency=[];for(n=0;n<e.weakDependency.length;++n)t.weakDependency[n]=0|e.weakDependency[n]}if(e.messageType){if(!Array.isArray(e.messageType))throw TypeError(\".google.protobuf.FileDescriptorProto.messageType: array expected\");t.messageType=[];for(n=0;n<e.messageType.length;++n){if(\"object\"!=typeof e.messageType[n])throw TypeError(\".google.protobuf.FileDescriptorProto.messageType: object expected\");t.messageType[n]=l.google.protobuf.DescriptorProto.fromObject(e.messageType[n])}}if(e.enumType){if(!Array.isArray(e.enumType))throw TypeError(\".google.protobuf.FileDescriptorProto.enumType: array expected\");t.enumType=[];for(n=0;n<e.enumType.length;++n){if(\"object\"!=typeof e.enumType[n])throw TypeError(\".google.protobuf.FileDescriptorProto.enumType: object expected\");t.enumType[n]=l.google.protobuf.EnumDescriptorProto.fromObject(e.enumType[n])}}if(e.service){if(!Array.isArray(e.service))throw TypeError(\".google.protobuf.FileDescriptorProto.service: array expected\");t.service=[];for(n=0;n<e.service.length;++n){if(\"object\"!=typeof e.service[n])throw TypeError(\".google.protobuf.FileDescriptorProto.service: object expected\");t.service[n]=l.google.protobuf.ServiceDescriptorProto.fromObject(e.service[n])}}if(e.extension){if(!Array.isArray(e.extension))throw TypeError(\".google.protobuf.FileDescriptorProto.extension: array expected\");t.extension=[];for(n=0;n<e.extension.length;++n){if(\"object\"!=typeof e.extension[n])throw TypeError(\".google.protobuf.FileDescriptorProto.extension: object expected\");t.extension[n]=l.google.protobuf.FieldDescriptorProto.fromObject(e.extension[n])}}if(null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.FileDescriptorProto.options: object expected\");t.options=l.google.protobuf.FileOptions.fromObject(e.options)}if(null!=e.sourceCodeInfo){if(\"object\"!=typeof e.sourceCodeInfo)throw TypeError(\".google.protobuf.FileDescriptorProto.sourceCodeInfo: object expected\");t.sourceCodeInfo=l.google.protobuf.SourceCodeInfo.fromObject(e.sourceCodeInfo)}return null!=e.syntax&&(t.syntax=String(e.syntax)),t},m.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.dependency=[],n.messageType=[],n.enumType=[],n.service=[],n.extension=[],n.publicDependency=[],n.weakDependency=[]),t.defaults&&(n.name=\"\",n.package=\"\",n.options=null,n.sourceCodeInfo=null,n.syntax=\"\"),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.package&&e.hasOwnProperty(\"package\")&&(n.package=e.package),e.dependency&&e.dependency.length){n.dependency=[];for(var o=0;o<e.dependency.length;++o)n.dependency[o]=e.dependency[o]}if(e.messageType&&e.messageType.length){n.messageType=[];for(o=0;o<e.messageType.length;++o)n.messageType[o]=l.google.protobuf.DescriptorProto.toObject(e.messageType[o],t)}if(e.enumType&&e.enumType.length){n.enumType=[];for(o=0;o<e.enumType.length;++o)n.enumType[o]=l.google.protobuf.EnumDescriptorProto.toObject(e.enumType[o],t)}if(e.service&&e.service.length){n.service=[];for(o=0;o<e.service.length;++o)n.service[o]=l.google.protobuf.ServiceDescriptorProto.toObject(e.service[o],t)}if(e.extension&&e.extension.length){n.extension=[];for(o=0;o<e.extension.length;++o)n.extension[o]=l.google.protobuf.FieldDescriptorProto.toObject(e.extension[o],t)}if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=l.google.protobuf.FileOptions.toObject(e.options,t)),null!=e.sourceCodeInfo&&e.hasOwnProperty(\"sourceCodeInfo\")&&(n.sourceCodeInfo=l.google.protobuf.SourceCodeInfo.toObject(e.sourceCodeInfo,t)),e.publicDependency&&e.publicDependency.length){n.publicDependency=[];for(o=0;o<e.publicDependency.length;++o)n.publicDependency[o]=e.publicDependency[o]}if(e.weakDependency&&e.weakDependency.length){n.weakDependency=[];for(o=0;o<e.weakDependency.length;++o)n.weakDependency[o]=e.weakDependency[o]}return null!=e.syntax&&e.hasOwnProperty(\"syntax\")&&(n.syntax=e.syntax),n},m.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},m),n.DescriptorProto=(O.prototype.name=\"\",O.prototype.field=p.emptyArray,O.prototype.extension=p.emptyArray,O.prototype.nestedType=p.emptyArray,O.prototype.enumType=p.emptyArray,O.prototype.extensionRange=p.emptyArray,O.prototype.oneofDecl=p.emptyArray,O.prototype.options=null,O.prototype.reservedRange=p.emptyArray,O.prototype.reservedName=p.emptyArray,O.create=function(e){return new O(e)},O.encode=function(e,t){if(t=t||i.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.field&&e.field.length)for(var n=0;n<e.field.length;++n)l.google.protobuf.FieldDescriptorProto.encode(e.field[n],t.uint32(18).fork()).ldelim();if(null!=e.nestedType&&e.nestedType.length)for(n=0;n<e.nestedType.length;++n)l.google.protobuf.DescriptorProto.encode(e.nestedType[n],t.uint32(26).fork()).ldelim();if(null!=e.enumType&&e.enumType.length)for(n=0;n<e.enumType.length;++n)l.google.protobuf.EnumDescriptorProto.encode(e.enumType[n],t.uint32(34).fork()).ldelim();if(null!=e.extensionRange&&e.extensionRange.length)for(n=0;n<e.extensionRange.length;++n)l.google.protobuf.DescriptorProto.ExtensionRange.encode(e.extensionRange[n],t.uint32(42).fork()).ldelim();if(null!=e.extension&&e.extension.length)for(n=0;n<e.extension.length;++n)l.google.protobuf.FieldDescriptorProto.encode(e.extension[n],t.uint32(50).fork()).ldelim();if(null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&l.google.protobuf.MessageOptions.encode(e.options,t.uint32(58).fork()).ldelim(),null!=e.oneofDecl&&e.oneofDecl.length)for(n=0;n<e.oneofDecl.length;++n)l.google.protobuf.OneofDescriptorProto.encode(e.oneofDecl[n],t.uint32(66).fork()).ldelim();if(null!=e.reservedRange&&e.reservedRange.length)for(n=0;n<e.reservedRange.length;++n)l.google.protobuf.DescriptorProto.ReservedRange.encode(e.reservedRange[n],t.uint32(74).fork()).ldelim();if(null!=e.reservedName&&e.reservedName.length)for(n=0;n<e.reservedName.length;++n)t.uint32(82).string(e.reservedName[n]);return t},O.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},O.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.DescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.field&&o.field.length||(o.field=[]),o.field.push(l.google.protobuf.FieldDescriptorProto.decode(e,e.uint32()));break;case 6:o.extension&&o.extension.length||(o.extension=[]),o.extension.push(l.google.protobuf.FieldDescriptorProto.decode(e,e.uint32()));break;case 3:o.nestedType&&o.nestedType.length||(o.nestedType=[]),o.nestedType.push(l.google.protobuf.DescriptorProto.decode(e,e.uint32()));break;case 4:o.enumType&&o.enumType.length||(o.enumType=[]),o.enumType.push(l.google.protobuf.EnumDescriptorProto.decode(e,e.uint32()));break;case 5:o.extensionRange&&o.extensionRange.length||(o.extensionRange=[]),o.extensionRange.push(l.google.protobuf.DescriptorProto.ExtensionRange.decode(e,e.uint32()));break;case 8:o.oneofDecl&&o.oneofDecl.length||(o.oneofDecl=[]),o.oneofDecl.push(l.google.protobuf.OneofDescriptorProto.decode(e,e.uint32()));break;case 7:o.options=l.google.protobuf.MessageOptions.decode(e,e.uint32());break;case 9:o.reservedRange&&o.reservedRange.length||(o.reservedRange=[]),o.reservedRange.push(l.google.protobuf.DescriptorProto.ReservedRange.decode(e,e.uint32()));break;case 10:o.reservedName&&o.reservedName.length||(o.reservedName=[]),o.reservedName.push(e.string());break;default:e.skipType(7&r)}}return o},O.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},O.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!p.isString(e.name))return\"name: string expected\";if(null!=e.field&&e.hasOwnProperty(\"field\")){if(!Array.isArray(e.field))return\"field: array expected\";for(var t=0;t<e.field.length;++t)if(n=l.google.protobuf.FieldDescriptorProto.verify(e.field[t]))return\"field.\"+n}if(null!=e.extension&&e.hasOwnProperty(\"extension\")){if(!Array.isArray(e.extension))return\"extension: array expected\";for(t=0;t<e.extension.length;++t)if(n=l.google.protobuf.FieldDescriptorProto.verify(e.extension[t]))return\"extension.\"+n}if(null!=e.nestedType&&e.hasOwnProperty(\"nestedType\")){if(!Array.isArray(e.nestedType))return\"nestedType: array expected\";for(t=0;t<e.nestedType.length;++t)if(n=l.google.protobuf.DescriptorProto.verify(e.nestedType[t]))return\"nestedType.\"+n}if(null!=e.enumType&&e.hasOwnProperty(\"enumType\")){if(!Array.isArray(e.enumType))return\"enumType: array expected\";for(t=0;t<e.enumType.length;++t)if(n=l.google.protobuf.EnumDescriptorProto.verify(e.enumType[t]))return\"enumType.\"+n}if(null!=e.extensionRange&&e.hasOwnProperty(\"extensionRange\")){if(!Array.isArray(e.extensionRange))return\"extensionRange: array expected\";for(t=0;t<e.extensionRange.length;++t)if(n=l.google.protobuf.DescriptorProto.ExtensionRange.verify(e.extensionRange[t]))return\"extensionRange.\"+n}if(null!=e.oneofDecl&&e.hasOwnProperty(\"oneofDecl\")){if(!Array.isArray(e.oneofDecl))return\"oneofDecl: array expected\";for(t=0;t<e.oneofDecl.length;++t)if(n=l.google.protobuf.OneofDescriptorProto.verify(e.oneofDecl[t]))return\"oneofDecl.\"+n}if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n=l.google.protobuf.MessageOptions.verify(e.options)))return\"options.\"+n;if(null!=e.reservedRange&&e.hasOwnProperty(\"reservedRange\")){if(!Array.isArray(e.reservedRange))return\"reservedRange: array expected\";for(var n,t=0;t<e.reservedRange.length;++t)if(n=l.google.protobuf.DescriptorProto.ReservedRange.verify(e.reservedRange[t]))return\"reservedRange.\"+n}if(null!=e.reservedName&&e.hasOwnProperty(\"reservedName\")){if(!Array.isArray(e.reservedName))return\"reservedName: array expected\";for(t=0;t<e.reservedName.length;++t)if(!p.isString(e.reservedName[t]))return\"reservedName: string[] expected\"}return null},O.fromObject=function(e){if(e instanceof l.google.protobuf.DescriptorProto)return e;var t=new l.google.protobuf.DescriptorProto;if(null!=e.name&&(t.name=String(e.name)),e.field){if(!Array.isArray(e.field))throw TypeError(\".google.protobuf.DescriptorProto.field: array expected\");t.field=[];for(var n=0;n<e.field.length;++n){if(\"object\"!=typeof e.field[n])throw TypeError(\".google.protobuf.DescriptorProto.field: object expected\");t.field[n]=l.google.protobuf.FieldDescriptorProto.fromObject(e.field[n])}}if(e.extension){if(!Array.isArray(e.extension))throw TypeError(\".google.protobuf.DescriptorProto.extension: array expected\");t.extension=[];for(n=0;n<e.extension.length;++n){if(\"object\"!=typeof e.extension[n])throw TypeError(\".google.protobuf.DescriptorProto.extension: object expected\");t.extension[n]=l.google.protobuf.FieldDescriptorProto.fromObject(e.extension[n])}}if(e.nestedType){if(!Array.isArray(e.nestedType))throw TypeError(\".google.protobuf.DescriptorProto.nestedType: array expected\");t.nestedType=[];for(n=0;n<e.nestedType.length;++n){if(\"object\"!=typeof e.nestedType[n])throw TypeError(\".google.protobuf.DescriptorProto.nestedType: object expected\");t.nestedType[n]=l.google.protobuf.DescriptorProto.fromObject(e.nestedType[n])}}if(e.enumType){if(!Array.isArray(e.enumType))throw TypeError(\".google.protobuf.DescriptorProto.enumType: array expected\");t.enumType=[];for(n=0;n<e.enumType.length;++n){if(\"object\"!=typeof e.enumType[n])throw TypeError(\".google.protobuf.DescriptorProto.enumType: object expected\");t.enumType[n]=l.google.protobuf.EnumDescriptorProto.fromObject(e.enumType[n])}}if(e.extensionRange){if(!Array.isArray(e.extensionRange))throw TypeError(\".google.protobuf.DescriptorProto.extensionRange: array expected\");t.extensionRange=[];for(n=0;n<e.extensionRange.length;++n){if(\"object\"!=typeof e.extensionRange[n])throw TypeError(\".google.protobuf.DescriptorProto.extensionRange: object expected\");t.extensionRange[n]=l.google.protobuf.DescriptorProto.ExtensionRange.fromObject(e.extensionRange[n])}}if(e.oneofDecl){if(!Array.isArray(e.oneofDecl))throw TypeError(\".google.protobuf.DescriptorProto.oneofDecl: array expected\");t.oneofDecl=[];for(n=0;n<e.oneofDecl.length;++n){if(\"object\"!=typeof e.oneofDecl[n])throw TypeError(\".google.protobuf.DescriptorProto.oneofDecl: object expected\");t.oneofDecl[n]=l.google.protobuf.OneofDescriptorProto.fromObject(e.oneofDecl[n])}}if(null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.DescriptorProto.options: object expected\");t.options=l.google.protobuf.MessageOptions.fromObject(e.options)}if(e.reservedRange){if(!Array.isArray(e.reservedRange))throw TypeError(\".google.protobuf.DescriptorProto.reservedRange: array expected\");t.reservedRange=[];for(n=0;n<e.reservedRange.length;++n){if(\"object\"!=typeof e.reservedRange[n])throw TypeError(\".google.protobuf.DescriptorProto.reservedRange: object expected\");t.reservedRange[n]=l.google.protobuf.DescriptorProto.ReservedRange.fromObject(e.reservedRange[n])}}if(e.reservedName){if(!Array.isArray(e.reservedName))throw TypeError(\".google.protobuf.DescriptorProto.reservedName: array expected\");t.reservedName=[];for(n=0;n<e.reservedName.length;++n)t.reservedName[n]=String(e.reservedName[n])}return t},O.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.field=[],n.nestedType=[],n.enumType=[],n.extensionRange=[],n.extension=[],n.oneofDecl=[],n.reservedRange=[],n.reservedName=[]),t.defaults&&(n.name=\"\",n.options=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),e.field&&e.field.length){n.field=[];for(var o=0;o<e.field.length;++o)n.field[o]=l.google.protobuf.FieldDescriptorProto.toObject(e.field[o],t)}if(e.nestedType&&e.nestedType.length){n.nestedType=[];for(o=0;o<e.nestedType.length;++o)n.nestedType[o]=l.google.protobuf.DescriptorProto.toObject(e.nestedType[o],t)}if(e.enumType&&e.enumType.length){n.enumType=[];for(o=0;o<e.enumType.length;++o)n.enumType[o]=l.google.protobuf.EnumDescriptorProto.toObject(e.enumType[o],t)}if(e.extensionRange&&e.extensionRange.length){n.extensionRange=[];for(o=0;o<e.extensionRange.length;++o)n.extensionRange[o]=l.google.protobuf.DescriptorProto.ExtensionRange.toObject(e.extensionRange[o],t)}if(e.extension&&e.extension.length){n.extension=[];for(o=0;o<e.extension.length;++o)n.extension[o]=l.google.protobuf.FieldDescriptorProto.toObject(e.extension[o],t)}if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=l.google.protobuf.MessageOptions.toObject(e.options,t)),e.oneofDecl&&e.oneofDecl.length){n.oneofDecl=[];for(o=0;o<e.oneofDecl.length;++o)n.oneofDecl[o]=l.google.protobuf.OneofDescriptorProto.toObject(e.oneofDecl[o],t)}if(e.reservedRange&&e.reservedRange.length){n.reservedRange=[];for(o=0;o<e.reservedRange.length;++o)n.reservedRange[o]=l.google.protobuf.DescriptorProto.ReservedRange.toObject(e.reservedRange[o],t)}if(e.reservedName&&e.reservedName.length){n.reservedName=[];for(o=0;o<e.reservedName.length;++o)n.reservedName[o]=e.reservedName[o]}return n},O.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},O.ExtensionRange=(v.prototype.start=0,v.prototype.end=0,v.prototype.options=null,v.create=function(e){return new v(e)},v.encode=function(e,t){return t=t||i.create(),null!=e.start&&Object.hasOwnProperty.call(e,\"start\")&&t.uint32(8).int32(e.start),null!=e.end&&Object.hasOwnProperty.call(e,\"end\")&&t.uint32(16).int32(e.end),null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&l.google.protobuf.ExtensionRangeOptions.encode(e.options,t.uint32(26).fork()).ldelim(),t},v.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},v.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.DescriptorProto.ExtensionRange;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.start=e.int32();break;case 2:o.end=e.int32();break;case 3:o.options=l.google.protobuf.ExtensionRangeOptions.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},v.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},v.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.start&&e.hasOwnProperty(\"start\")&&!p.isInteger(e.start))return\"start: integer expected\";if(null!=e.end&&e.hasOwnProperty(\"end\")&&!p.isInteger(e.end))return\"end: integer expected\";if(null!=e.options&&e.hasOwnProperty(\"options\")){e=l.google.protobuf.ExtensionRangeOptions.verify(e.options);if(e)return\"options.\"+e}return null},v.fromObject=function(e){if(e instanceof l.google.protobuf.DescriptorProto.ExtensionRange)return e;var t=new l.google.protobuf.DescriptorProto.ExtensionRange;if(null!=e.start&&(t.start=0|e.start),null!=e.end&&(t.end=0|e.end),null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.DescriptorProto.ExtensionRange.options: object expected\");t.options=l.google.protobuf.ExtensionRangeOptions.fromObject(e.options)}return t},v.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.start=0,n.end=0,n.options=null),null!=e.start&&e.hasOwnProperty(\"start\")&&(n.start=e.start),null!=e.end&&e.hasOwnProperty(\"end\")&&(n.end=e.end),null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=l.google.protobuf.ExtensionRangeOptions.toObject(e.options,t)),n},v.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},v),O.ReservedRange=(Y.prototype.start=0,Y.prototype.end=0,Y.create=function(e){return new Y(e)},Y.encode=function(e,t){return t=t||i.create(),null!=e.start&&Object.hasOwnProperty.call(e,\"start\")&&t.uint32(8).int32(e.start),null!=e.end&&Object.hasOwnProperty.call(e,\"end\")&&t.uint32(16).int32(e.end),t},Y.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},Y.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.DescriptorProto.ReservedRange;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.start=e.int32();break;case 2:o.end=e.int32();break;default:e.skipType(7&r)}}return o},Y.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},Y.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.start&&e.hasOwnProperty(\"start\")&&!p.isInteger(e.start)?\"start: integer expected\":null!=e.end&&e.hasOwnProperty(\"end\")&&!p.isInteger(e.end)?\"end: integer expected\":null},Y.fromObject=function(e){var t;return e instanceof l.google.protobuf.DescriptorProto.ReservedRange?e:(t=new l.google.protobuf.DescriptorProto.ReservedRange,null!=e.start&&(t.start=0|e.start),null!=e.end&&(t.end=0|e.end),t)},Y.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.start=0,n.end=0),null!=e.start&&e.hasOwnProperty(\"start\")&&(n.start=e.start),null!=e.end&&e.hasOwnProperty(\"end\")&&(n.end=e.end),n},Y.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},Y),O),n.ExtensionRangeOptions=(z.prototype.uninterpretedOption=p.emptyArray,z.create=function(e){return new z(e)},z.encode=function(e,t){if(t=t||i.create(),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)l.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return t},z.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},z.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.ExtensionRangeOptions;e.pos<n;){var r=e.uint32();r>>>3==999?(o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(l.google.protobuf.UninterpretedOption.decode(e,e.uint32()))):e.skipType(7&r)}return o},z.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},z.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=l.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null},z.fromObject=function(e){if(e instanceof l.google.protobuf.ExtensionRangeOptions)return e;var t=new l.google.protobuf.ExtensionRangeOptions;if(e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.ExtensionRangeOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.ExtensionRangeOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=l.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return t},z.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=l.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return n},z.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},z),n.FieldDescriptorProto=(P.prototype.name=\"\",P.prototype.number=0,P.prototype.label=1,P.prototype.type=1,P.prototype.typeName=\"\",P.prototype.extendee=\"\",P.prototype.defaultValue=\"\",P.prototype.oneofIndex=0,P.prototype.jsonName=\"\",P.prototype.options=null,P.prototype.proto3Optional=!1,P.create=function(e){return new P(e)},P.encode=function(e,t){return t=t||i.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.extendee&&Object.hasOwnProperty.call(e,\"extendee\")&&t.uint32(18).string(e.extendee),null!=e.number&&Object.hasOwnProperty.call(e,\"number\")&&t.uint32(24).int32(e.number),null!=e.label&&Object.hasOwnProperty.call(e,\"label\")&&t.uint32(32).int32(e.label),null!=e.type&&Object.hasOwnProperty.call(e,\"type\")&&t.uint32(40).int32(e.type),null!=e.typeName&&Object.hasOwnProperty.call(e,\"typeName\")&&t.uint32(50).string(e.typeName),null!=e.defaultValue&&Object.hasOwnProperty.call(e,\"defaultValue\")&&t.uint32(58).string(e.defaultValue),null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&l.google.protobuf.FieldOptions.encode(e.options,t.uint32(66).fork()).ldelim(),null!=e.oneofIndex&&Object.hasOwnProperty.call(e,\"oneofIndex\")&&t.uint32(72).int32(e.oneofIndex),null!=e.jsonName&&Object.hasOwnProperty.call(e,\"jsonName\")&&t.uint32(82).string(e.jsonName),null!=e.proto3Optional&&Object.hasOwnProperty.call(e,\"proto3Optional\")&&t.uint32(136).bool(e.proto3Optional),t},P.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},P.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.FieldDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 3:o.number=e.int32();break;case 4:o.label=e.int32();break;case 5:o.type=e.int32();break;case 6:o.typeName=e.string();break;case 2:o.extendee=e.string();break;case 7:o.defaultValue=e.string();break;case 9:o.oneofIndex=e.int32();break;case 10:o.jsonName=e.string();break;case 8:o.options=l.google.protobuf.FieldOptions.decode(e,e.uint32());break;case 17:o.proto3Optional=e.bool();break;default:e.skipType(7&r)}}return o},P.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},P.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!p.isString(e.name))return\"name: string expected\";if(null!=e.number&&e.hasOwnProperty(\"number\")&&!p.isInteger(e.number))return\"number: integer expected\";if(null!=e.label&&e.hasOwnProperty(\"label\"))switch(e.label){default:return\"label: enum value expected\";case 1:case 2:case 3:}if(null!=e.type&&e.hasOwnProperty(\"type\"))switch(e.type){default:return\"type: enum value expected\";case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:case 16:case 17:case 18:}if(null!=e.typeName&&e.hasOwnProperty(\"typeName\")&&!p.isString(e.typeName))return\"typeName: string expected\";if(null!=e.extendee&&e.hasOwnProperty(\"extendee\")&&!p.isString(e.extendee))return\"extendee: string expected\";if(null!=e.defaultValue&&e.hasOwnProperty(\"defaultValue\")&&!p.isString(e.defaultValue))return\"defaultValue: string expected\";if(null!=e.oneofIndex&&e.hasOwnProperty(\"oneofIndex\")&&!p.isInteger(e.oneofIndex))return\"oneofIndex: integer expected\";if(null!=e.jsonName&&e.hasOwnProperty(\"jsonName\")&&!p.isString(e.jsonName))return\"jsonName: string expected\";if(null!=e.options&&e.hasOwnProperty(\"options\")){var t=l.google.protobuf.FieldOptions.verify(e.options);if(t)return\"options.\"+t}return null!=e.proto3Optional&&e.hasOwnProperty(\"proto3Optional\")&&\"boolean\"!=typeof e.proto3Optional?\"proto3Optional: boolean expected\":null},P.fromObject=function(e){if(e instanceof l.google.protobuf.FieldDescriptorProto)return e;var t=new l.google.protobuf.FieldDescriptorProto;switch(null!=e.name&&(t.name=String(e.name)),null!=e.number&&(t.number=0|e.number),e.label){case\"LABEL_OPTIONAL\":case 1:t.label=1;break;case\"LABEL_REQUIRED\":case 2:t.label=2;break;case\"LABEL_REPEATED\":case 3:t.label=3}switch(e.type){case\"TYPE_DOUBLE\":case 1:t.type=1;break;case\"TYPE_FLOAT\":case 2:t.type=2;break;case\"TYPE_INT64\":case 3:t.type=3;break;case\"TYPE_UINT64\":case 4:t.type=4;break;case\"TYPE_INT32\":case 5:t.type=5;break;case\"TYPE_FIXED64\":case 6:t.type=6;break;case\"TYPE_FIXED32\":case 7:t.type=7;break;case\"TYPE_BOOL\":case 8:t.type=8;break;case\"TYPE_STRING\":case 9:t.type=9;break;case\"TYPE_GROUP\":case 10:t.type=10;break;case\"TYPE_MESSAGE\":case 11:t.type=11;break;case\"TYPE_BYTES\":case 12:t.type=12;break;case\"TYPE_UINT32\":case 13:t.type=13;break;case\"TYPE_ENUM\":case 14:t.type=14;break;case\"TYPE_SFIXED32\":case 15:t.type=15;break;case\"TYPE_SFIXED64\":case 16:t.type=16;break;case\"TYPE_SINT32\":case 17:t.type=17;break;case\"TYPE_SINT64\":case 18:t.type=18}if(null!=e.typeName&&(t.typeName=String(e.typeName)),null!=e.extendee&&(t.extendee=String(e.extendee)),null!=e.defaultValue&&(t.defaultValue=String(e.defaultValue)),null!=e.oneofIndex&&(t.oneofIndex=0|e.oneofIndex),null!=e.jsonName&&(t.jsonName=String(e.jsonName)),null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.FieldDescriptorProto.options: object expected\");t.options=l.google.protobuf.FieldOptions.fromObject(e.options)}return null!=e.proto3Optional&&(t.proto3Optional=Boolean(e.proto3Optional)),t},P.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\",n.extendee=\"\",n.number=0,n.label=t.enums===String?\"LABEL_OPTIONAL\":1,n.type=t.enums===String?\"TYPE_DOUBLE\":1,n.typeName=\"\",n.defaultValue=\"\",n.options=null,n.oneofIndex=0,n.jsonName=\"\",n.proto3Optional=!1),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.extendee&&e.hasOwnProperty(\"extendee\")&&(n.extendee=e.extendee),null!=e.number&&e.hasOwnProperty(\"number\")&&(n.number=e.number),null!=e.label&&e.hasOwnProperty(\"label\")&&(n.label=t.enums===String?l.google.protobuf.FieldDescriptorProto.Label[e.label]:e.label),null!=e.type&&e.hasOwnProperty(\"type\")&&(n.type=t.enums===String?l.google.protobuf.FieldDescriptorProto.Type[e.type]:e.type),null!=e.typeName&&e.hasOwnProperty(\"typeName\")&&(n.typeName=e.typeName),null!=e.defaultValue&&e.hasOwnProperty(\"defaultValue\")&&(n.defaultValue=e.defaultValue),null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=l.google.protobuf.FieldOptions.toObject(e.options,t)),null!=e.oneofIndex&&e.hasOwnProperty(\"oneofIndex\")&&(n.oneofIndex=e.oneofIndex),null!=e.jsonName&&e.hasOwnProperty(\"jsonName\")&&(n.jsonName=e.jsonName),null!=e.proto3Optional&&e.hasOwnProperty(\"proto3Optional\")&&(n.proto3Optional=e.proto3Optional),n},P.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},P.Type=(e={},(t=Object.create(e))[e[1]=\"TYPE_DOUBLE\"]=1,t[e[2]=\"TYPE_FLOAT\"]=2,t[e[3]=\"TYPE_INT64\"]=3,t[e[4]=\"TYPE_UINT64\"]=4,t[e[5]=\"TYPE_INT32\"]=5,t[e[6]=\"TYPE_FIXED64\"]=6,t[e[7]=\"TYPE_FIXED32\"]=7,t[e[8]=\"TYPE_BOOL\"]=8,t[e[9]=\"TYPE_STRING\"]=9,t[e[10]=\"TYPE_GROUP\"]=10,t[e[11]=\"TYPE_MESSAGE\"]=11,t[e[12]=\"TYPE_BYTES\"]=12,t[e[13]=\"TYPE_UINT32\"]=13,t[e[14]=\"TYPE_ENUM\"]=14,t[e[15]=\"TYPE_SFIXED32\"]=15,t[e[16]=\"TYPE_SFIXED64\"]=16,t[e[17]=\"TYPE_SINT32\"]=17,t[e[18]=\"TYPE_SINT64\"]=18,t),P.Label=(e={},(t=Object.create(e))[e[1]=\"LABEL_OPTIONAL\"]=1,t[e[2]=\"LABEL_REQUIRED\"]=2,t[e[3]=\"LABEL_REPEATED\"]=3,t),P),n.OneofDescriptorProto=(W.prototype.name=\"\",W.prototype.options=null,W.create=function(e){return new W(e)},W.encode=function(e,t){return t=t||i.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&l.google.protobuf.OneofOptions.encode(e.options,t.uint32(18).fork()).ldelim(),t},W.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},W.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.OneofDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.options=l.google.protobuf.OneofOptions.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},W.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},W.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!p.isString(e.name))return\"name: string expected\";if(null!=e.options&&e.hasOwnProperty(\"options\")){e=l.google.protobuf.OneofOptions.verify(e.options);if(e)return\"options.\"+e}return null},W.fromObject=function(e){if(e instanceof l.google.protobuf.OneofDescriptorProto)return e;var t=new l.google.protobuf.OneofDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.OneofDescriptorProto.options: object expected\");t.options=l.google.protobuf.OneofOptions.fromObject(e.options)}return t},W.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\",n.options=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=l.google.protobuf.OneofOptions.toObject(e.options,t)),n},W.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},W),n.EnumDescriptorProto=(w.prototype.name=\"\",w.prototype.value=p.emptyArray,w.prototype.options=null,w.prototype.reservedRange=p.emptyArray,w.prototype.reservedName=p.emptyArray,w.create=function(e){return new w(e)},w.encode=function(e,t){if(t=t||i.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.value&&e.value.length)for(var n=0;n<e.value.length;++n)l.google.protobuf.EnumValueDescriptorProto.encode(e.value[n],t.uint32(18).fork()).ldelim();if(null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&l.google.protobuf.EnumOptions.encode(e.options,t.uint32(26).fork()).ldelim(),null!=e.reservedRange&&e.reservedRange.length)for(n=0;n<e.reservedRange.length;++n)l.google.protobuf.EnumDescriptorProto.EnumReservedRange.encode(e.reservedRange[n],t.uint32(34).fork()).ldelim();if(null!=e.reservedName&&e.reservedName.length)for(n=0;n<e.reservedName.length;++n)t.uint32(42).string(e.reservedName[n]);return t},w.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},w.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.EnumDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.value&&o.value.length||(o.value=[]),o.value.push(l.google.protobuf.EnumValueDescriptorProto.decode(e,e.uint32()));break;case 3:o.options=l.google.protobuf.EnumOptions.decode(e,e.uint32());break;case 4:o.reservedRange&&o.reservedRange.length||(o.reservedRange=[]),o.reservedRange.push(l.google.protobuf.EnumDescriptorProto.EnumReservedRange.decode(e,e.uint32()));break;case 5:o.reservedName&&o.reservedName.length||(o.reservedName=[]),o.reservedName.push(e.string());break;default:e.skipType(7&r)}}return o},w.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},w.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!p.isString(e.name))return\"name: string expected\";if(null!=e.value&&e.hasOwnProperty(\"value\")){if(!Array.isArray(e.value))return\"value: array expected\";for(var t=0;t<e.value.length;++t)if(n=l.google.protobuf.EnumValueDescriptorProto.verify(e.value[t]))return\"value.\"+n}if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n=l.google.protobuf.EnumOptions.verify(e.options)))return\"options.\"+n;if(null!=e.reservedRange&&e.hasOwnProperty(\"reservedRange\")){if(!Array.isArray(e.reservedRange))return\"reservedRange: array expected\";for(var n,t=0;t<e.reservedRange.length;++t)if(n=l.google.protobuf.EnumDescriptorProto.EnumReservedRange.verify(e.reservedRange[t]))return\"reservedRange.\"+n}if(null!=e.reservedName&&e.hasOwnProperty(\"reservedName\")){if(!Array.isArray(e.reservedName))return\"reservedName: array expected\";for(t=0;t<e.reservedName.length;++t)if(!p.isString(e.reservedName[t]))return\"reservedName: string[] expected\"}return null},w.fromObject=function(e){if(e instanceof l.google.protobuf.EnumDescriptorProto)return e;var t=new l.google.protobuf.EnumDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),e.value){if(!Array.isArray(e.value))throw TypeError(\".google.protobuf.EnumDescriptorProto.value: array expected\");t.value=[];for(var n=0;n<e.value.length;++n){if(\"object\"!=typeof e.value[n])throw TypeError(\".google.protobuf.EnumDescriptorProto.value: object expected\");t.value[n]=l.google.protobuf.EnumValueDescriptorProto.fromObject(e.value[n])}}if(null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.EnumDescriptorProto.options: object expected\");t.options=l.google.protobuf.EnumOptions.fromObject(e.options)}if(e.reservedRange){if(!Array.isArray(e.reservedRange))throw TypeError(\".google.protobuf.EnumDescriptorProto.reservedRange: array expected\");t.reservedRange=[];for(n=0;n<e.reservedRange.length;++n){if(\"object\"!=typeof e.reservedRange[n])throw TypeError(\".google.protobuf.EnumDescriptorProto.reservedRange: object expected\");t.reservedRange[n]=l.google.protobuf.EnumDescriptorProto.EnumReservedRange.fromObject(e.reservedRange[n])}}if(e.reservedName){if(!Array.isArray(e.reservedName))throw TypeError(\".google.protobuf.EnumDescriptorProto.reservedName: array expected\");t.reservedName=[];for(n=0;n<e.reservedName.length;++n)t.reservedName[n]=String(e.reservedName[n])}return t},w.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.value=[],n.reservedRange=[],n.reservedName=[]),t.defaults&&(n.name=\"\",n.options=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),e.value&&e.value.length){n.value=[];for(var o=0;o<e.value.length;++o)n.value[o]=l.google.protobuf.EnumValueDescriptorProto.toObject(e.value[o],t)}if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=l.google.protobuf.EnumOptions.toObject(e.options,t)),e.reservedRange&&e.reservedRange.length){n.reservedRange=[];for(o=0;o<e.reservedRange.length;++o)n.reservedRange[o]=l.google.protobuf.EnumDescriptorProto.EnumReservedRange.toObject(e.reservedRange[o],t)}if(e.reservedName&&e.reservedName.length){n.reservedName=[];for(o=0;o<e.reservedName.length;++o)n.reservedName[o]=e.reservedName[o]}return n},w.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},w.EnumReservedRange=(X.prototype.start=0,X.prototype.end=0,X.create=function(e){return new X(e)},X.encode=function(e,t){return t=t||i.create(),null!=e.start&&Object.hasOwnProperty.call(e,\"start\")&&t.uint32(8).int32(e.start),null!=e.end&&Object.hasOwnProperty.call(e,\"end\")&&t.uint32(16).int32(e.end),t},X.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},X.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.EnumDescriptorProto.EnumReservedRange;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.start=e.int32();break;case 2:o.end=e.int32();break;default:e.skipType(7&r)}}return o},X.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},X.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.start&&e.hasOwnProperty(\"start\")&&!p.isInteger(e.start)?\"start: integer expected\":null!=e.end&&e.hasOwnProperty(\"end\")&&!p.isInteger(e.end)?\"end: integer expected\":null},X.fromObject=function(e){var t;return e instanceof l.google.protobuf.EnumDescriptorProto.EnumReservedRange?e:(t=new l.google.protobuf.EnumDescriptorProto.EnumReservedRange,null!=e.start&&(t.start=0|e.start),null!=e.end&&(t.end=0|e.end),t)},X.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.start=0,n.end=0),null!=e.start&&e.hasOwnProperty(\"start\")&&(n.start=e.start),null!=e.end&&e.hasOwnProperty(\"end\")&&(n.end=e.end),n},X.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},X),w),n.EnumValueDescriptorProto=(j.prototype.name=\"\",j.prototype.number=0,j.prototype.options=null,j.create=function(e){return new j(e)},j.encode=function(e,t){return t=t||i.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.number&&Object.hasOwnProperty.call(e,\"number\")&&t.uint32(16).int32(e.number),null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&l.google.protobuf.EnumValueOptions.encode(e.options,t.uint32(26).fork()).ldelim(),t},j.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},j.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.EnumValueDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.number=e.int32();break;case 3:o.options=l.google.protobuf.EnumValueOptions.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},j.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},j.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!p.isString(e.name))return\"name: string expected\";if(null!=e.number&&e.hasOwnProperty(\"number\")&&!p.isInteger(e.number))return\"number: integer expected\";if(null!=e.options&&e.hasOwnProperty(\"options\")){e=l.google.protobuf.EnumValueOptions.verify(e.options);if(e)return\"options.\"+e}return null},j.fromObject=function(e){if(e instanceof l.google.protobuf.EnumValueDescriptorProto)return e;var t=new l.google.protobuf.EnumValueDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),null!=e.number&&(t.number=0|e.number),null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.EnumValueDescriptorProto.options: object expected\");t.options=l.google.protobuf.EnumValueOptions.fromObject(e.options)}return t},j.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\",n.number=0,n.options=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.number&&e.hasOwnProperty(\"number\")&&(n.number=e.number),null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=l.google.protobuf.EnumValueOptions.toObject(e.options,t)),n},j.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},j),n.ServiceDescriptorProto=(D.prototype.name=\"\",D.prototype.method=p.emptyArray,D.prototype.options=null,D.create=function(e){return new D(e)},D.encode=function(e,t){if(t=t||i.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.method&&e.method.length)for(var n=0;n<e.method.length;++n)l.google.protobuf.MethodDescriptorProto.encode(e.method[n],t.uint32(18).fork()).ldelim();return null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&l.google.protobuf.ServiceOptions.encode(e.options,t.uint32(26).fork()).ldelim(),t},D.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},D.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.ServiceDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.method&&o.method.length||(o.method=[]),o.method.push(l.google.protobuf.MethodDescriptorProto.decode(e,e.uint32()));break;case 3:o.options=l.google.protobuf.ServiceOptions.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},D.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},D.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!p.isString(e.name))return\"name: string expected\";if(null!=e.method&&e.hasOwnProperty(\"method\")){if(!Array.isArray(e.method))return\"method: array expected\";for(var t=0;t<e.method.length;++t)if(n=l.google.protobuf.MethodDescriptorProto.verify(e.method[t]))return\"method.\"+n}var n;if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n=l.google.protobuf.ServiceOptions.verify(e.options)))return\"options.\"+n;return null},D.fromObject=function(e){if(e instanceof l.google.protobuf.ServiceDescriptorProto)return e;var t=new l.google.protobuf.ServiceDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),e.method){if(!Array.isArray(e.method))throw TypeError(\".google.protobuf.ServiceDescriptorProto.method: array expected\");t.method=[];for(var n=0;n<e.method.length;++n){if(\"object\"!=typeof e.method[n])throw TypeError(\".google.protobuf.ServiceDescriptorProto.method: object expected\");t.method[n]=l.google.protobuf.MethodDescriptorProto.fromObject(e.method[n])}}if(null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.ServiceDescriptorProto.options: object expected\");t.options=l.google.protobuf.ServiceOptions.fromObject(e.options)}return t},D.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.method=[]),t.defaults&&(n.name=\"\",n.options=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),e.method&&e.method.length){n.method=[];for(var o=0;o<e.method.length;++o)n.method[o]=l.google.protobuf.MethodDescriptorProto.toObject(e.method[o],t)}return null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=l.google.protobuf.ServiceOptions.toObject(e.options,t)),n},D.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},D),n.MethodDescriptorProto=(x.prototype.name=\"\",x.prototype.inputType=\"\",x.prototype.outputType=\"\",x.prototype.options=null,x.prototype.clientStreaming=!1,x.prototype.serverStreaming=!1,x.create=function(e){return new x(e)},x.encode=function(e,t){return t=t||i.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.inputType&&Object.hasOwnProperty.call(e,\"inputType\")&&t.uint32(18).string(e.inputType),null!=e.outputType&&Object.hasOwnProperty.call(e,\"outputType\")&&t.uint32(26).string(e.outputType),null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&l.google.protobuf.MethodOptions.encode(e.options,t.uint32(34).fork()).ldelim(),null!=e.clientStreaming&&Object.hasOwnProperty.call(e,\"clientStreaming\")&&t.uint32(40).bool(e.clientStreaming),null!=e.serverStreaming&&Object.hasOwnProperty.call(e,\"serverStreaming\")&&t.uint32(48).bool(e.serverStreaming),t},x.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},x.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.MethodDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.inputType=e.string();break;case 3:o.outputType=e.string();break;case 4:o.options=l.google.protobuf.MethodOptions.decode(e,e.uint32());break;case 5:o.clientStreaming=e.bool();break;case 6:o.serverStreaming=e.bool();break;default:e.skipType(7&r)}}return o},x.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},x.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!p.isString(e.name))return\"name: string expected\";if(null!=e.inputType&&e.hasOwnProperty(\"inputType\")&&!p.isString(e.inputType))return\"inputType: string expected\";if(null!=e.outputType&&e.hasOwnProperty(\"outputType\")&&!p.isString(e.outputType))return\"outputType: string expected\";if(null!=e.options&&e.hasOwnProperty(\"options\")){var t=l.google.protobuf.MethodOptions.verify(e.options);if(t)return\"options.\"+t}return null!=e.clientStreaming&&e.hasOwnProperty(\"clientStreaming\")&&\"boolean\"!=typeof e.clientStreaming?\"clientStreaming: boolean expected\":null!=e.serverStreaming&&e.hasOwnProperty(\"serverStreaming\")&&\"boolean\"!=typeof e.serverStreaming?\"serverStreaming: boolean expected\":null},x.fromObject=function(e){if(e instanceof l.google.protobuf.MethodDescriptorProto)return e;var t=new l.google.protobuf.MethodDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),null!=e.inputType&&(t.inputType=String(e.inputType)),null!=e.outputType&&(t.outputType=String(e.outputType)),null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.MethodDescriptorProto.options: object expected\");t.options=l.google.protobuf.MethodOptions.fromObject(e.options)}return null!=e.clientStreaming&&(t.clientStreaming=Boolean(e.clientStreaming)),null!=e.serverStreaming&&(t.serverStreaming=Boolean(e.serverStreaming)),t},x.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\",n.inputType=\"\",n.outputType=\"\",n.options=null,n.clientStreaming=!1,n.serverStreaming=!1),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.inputType&&e.hasOwnProperty(\"inputType\")&&(n.inputType=e.inputType),null!=e.outputType&&e.hasOwnProperty(\"outputType\")&&(n.outputType=e.outputType),null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=l.google.protobuf.MethodOptions.toObject(e.options,t)),null!=e.clientStreaming&&e.hasOwnProperty(\"clientStreaming\")&&(n.clientStreaming=e.clientStreaming),null!=e.serverStreaming&&e.hasOwnProperty(\"serverStreaming\")&&(n.serverStreaming=e.serverStreaming),n},x.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},x),n.FileOptions=(S.prototype.javaPackage=\"\",S.prototype.javaOuterClassname=\"\",S.prototype.javaMultipleFiles=!1,S.prototype.javaGenerateEqualsAndHash=!1,S.prototype.javaStringCheckUtf8=!1,S.prototype.optimizeFor=1,S.prototype.goPackage=\"\",S.prototype.ccGenericServices=!1,S.prototype.javaGenericServices=!1,S.prototype.pyGenericServices=!1,S.prototype.phpGenericServices=!1,S.prototype.deprecated=!1,S.prototype.ccEnableArenas=!0,S.prototype.objcClassPrefix=\"\",S.prototype.csharpNamespace=\"\",S.prototype.swiftPrefix=\"\",S.prototype.phpClassPrefix=\"\",S.prototype.phpNamespace=\"\",S.prototype.phpMetadataNamespace=\"\",S.prototype.rubyPackage=\"\",S.prototype.uninterpretedOption=p.emptyArray,S.prototype[\".google.api.resourceDefinition\"]=p.emptyArray,S.create=function(e){return new S(e)},S.encode=function(e,t){if(t=t||i.create(),null!=e.javaPackage&&Object.hasOwnProperty.call(e,\"javaPackage\")&&t.uint32(10).string(e.javaPackage),null!=e.javaOuterClassname&&Object.hasOwnProperty.call(e,\"javaOuterClassname\")&&t.uint32(66).string(e.javaOuterClassname),null!=e.optimizeFor&&Object.hasOwnProperty.call(e,\"optimizeFor\")&&t.uint32(72).int32(e.optimizeFor),null!=e.javaMultipleFiles&&Object.hasOwnProperty.call(e,\"javaMultipleFiles\")&&t.uint32(80).bool(e.javaMultipleFiles),null!=e.goPackage&&Object.hasOwnProperty.call(e,\"goPackage\")&&t.uint32(90).string(e.goPackage),null!=e.ccGenericServices&&Object.hasOwnProperty.call(e,\"ccGenericServices\")&&t.uint32(128).bool(e.ccGenericServices),null!=e.javaGenericServices&&Object.hasOwnProperty.call(e,\"javaGenericServices\")&&t.uint32(136).bool(e.javaGenericServices),null!=e.pyGenericServices&&Object.hasOwnProperty.call(e,\"pyGenericServices\")&&t.uint32(144).bool(e.pyGenericServices),null!=e.javaGenerateEqualsAndHash&&Object.hasOwnProperty.call(e,\"javaGenerateEqualsAndHash\")&&t.uint32(160).bool(e.javaGenerateEqualsAndHash),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(184).bool(e.deprecated),null!=e.javaStringCheckUtf8&&Object.hasOwnProperty.call(e,\"javaStringCheckUtf8\")&&t.uint32(216).bool(e.javaStringCheckUtf8),null!=e.ccEnableArenas&&Object.hasOwnProperty.call(e,\"ccEnableArenas\")&&t.uint32(248).bool(e.ccEnableArenas),null!=e.objcClassPrefix&&Object.hasOwnProperty.call(e,\"objcClassPrefix\")&&t.uint32(290).string(e.objcClassPrefix),null!=e.csharpNamespace&&Object.hasOwnProperty.call(e,\"csharpNamespace\")&&t.uint32(298).string(e.csharpNamespace),null!=e.swiftPrefix&&Object.hasOwnProperty.call(e,\"swiftPrefix\")&&t.uint32(314).string(e.swiftPrefix),null!=e.phpClassPrefix&&Object.hasOwnProperty.call(e,\"phpClassPrefix\")&&t.uint32(322).string(e.phpClassPrefix),null!=e.phpNamespace&&Object.hasOwnProperty.call(e,\"phpNamespace\")&&t.uint32(330).string(e.phpNamespace),null!=e.phpGenericServices&&Object.hasOwnProperty.call(e,\"phpGenericServices\")&&t.uint32(336).bool(e.phpGenericServices),null!=e.phpMetadataNamespace&&Object.hasOwnProperty.call(e,\"phpMetadataNamespace\")&&t.uint32(354).string(e.phpMetadataNamespace),null!=e.rubyPackage&&Object.hasOwnProperty.call(e,\"rubyPackage\")&&t.uint32(362).string(e.rubyPackage),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)l.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();if(null!=e[\".google.api.resourceDefinition\"]&&e[\".google.api.resourceDefinition\"].length)for(n=0;n<e[\".google.api.resourceDefinition\"].length;++n)l.google.api.ResourceDescriptor.encode(e[\".google.api.resourceDefinition\"][n],t.uint32(8426).fork()).ldelim();return t},S.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},S.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.FileOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.javaPackage=e.string();break;case 8:o.javaOuterClassname=e.string();break;case 10:o.javaMultipleFiles=e.bool();break;case 20:o.javaGenerateEqualsAndHash=e.bool();break;case 27:o.javaStringCheckUtf8=e.bool();break;case 9:o.optimizeFor=e.int32();break;case 11:o.goPackage=e.string();break;case 16:o.ccGenericServices=e.bool();break;case 17:o.javaGenericServices=e.bool();break;case 18:o.pyGenericServices=e.bool();break;case 42:o.phpGenericServices=e.bool();break;case 23:o.deprecated=e.bool();break;case 31:o.ccEnableArenas=e.bool();break;case 36:o.objcClassPrefix=e.string();break;case 37:o.csharpNamespace=e.string();break;case 39:o.swiftPrefix=e.string();break;case 40:o.phpClassPrefix=e.string();break;case 41:o.phpNamespace=e.string();break;case 44:o.phpMetadataNamespace=e.string();break;case 45:o.rubyPackage=e.string();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(l.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;case 1053:o[\".google.api.resourceDefinition\"]&&o[\".google.api.resourceDefinition\"].length||(o[\".google.api.resourceDefinition\"]=[]),o[\".google.api.resourceDefinition\"].push(l.google.api.ResourceDescriptor.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return o},S.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},S.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.javaPackage&&e.hasOwnProperty(\"javaPackage\")&&!p.isString(e.javaPackage))return\"javaPackage: string expected\";if(null!=e.javaOuterClassname&&e.hasOwnProperty(\"javaOuterClassname\")&&!p.isString(e.javaOuterClassname))return\"javaOuterClassname: string expected\";if(null!=e.javaMultipleFiles&&e.hasOwnProperty(\"javaMultipleFiles\")&&\"boolean\"!=typeof e.javaMultipleFiles)return\"javaMultipleFiles: boolean expected\";if(null!=e.javaGenerateEqualsAndHash&&e.hasOwnProperty(\"javaGenerateEqualsAndHash\")&&\"boolean\"!=typeof e.javaGenerateEqualsAndHash)return\"javaGenerateEqualsAndHash: boolean expected\";if(null!=e.javaStringCheckUtf8&&e.hasOwnProperty(\"javaStringCheckUtf8\")&&\"boolean\"!=typeof e.javaStringCheckUtf8)return\"javaStringCheckUtf8: boolean expected\";if(null!=e.optimizeFor&&e.hasOwnProperty(\"optimizeFor\"))switch(e.optimizeFor){default:return\"optimizeFor: enum value expected\";case 1:case 2:case 3:}if(null!=e.goPackage&&e.hasOwnProperty(\"goPackage\")&&!p.isString(e.goPackage))return\"goPackage: string expected\";if(null!=e.ccGenericServices&&e.hasOwnProperty(\"ccGenericServices\")&&\"boolean\"!=typeof e.ccGenericServices)return\"ccGenericServices: boolean expected\";if(null!=e.javaGenericServices&&e.hasOwnProperty(\"javaGenericServices\")&&\"boolean\"!=typeof e.javaGenericServices)return\"javaGenericServices: boolean expected\";if(null!=e.pyGenericServices&&e.hasOwnProperty(\"pyGenericServices\")&&\"boolean\"!=typeof e.pyGenericServices)return\"pyGenericServices: boolean expected\";if(null!=e.phpGenericServices&&e.hasOwnProperty(\"phpGenericServices\")&&\"boolean\"!=typeof e.phpGenericServices)return\"phpGenericServices: boolean expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.ccEnableArenas&&e.hasOwnProperty(\"ccEnableArenas\")&&\"boolean\"!=typeof e.ccEnableArenas)return\"ccEnableArenas: boolean expected\";if(null!=e.objcClassPrefix&&e.hasOwnProperty(\"objcClassPrefix\")&&!p.isString(e.objcClassPrefix))return\"objcClassPrefix: string expected\";if(null!=e.csharpNamespace&&e.hasOwnProperty(\"csharpNamespace\")&&!p.isString(e.csharpNamespace))return\"csharpNamespace: string expected\";if(null!=e.swiftPrefix&&e.hasOwnProperty(\"swiftPrefix\")&&!p.isString(e.swiftPrefix))return\"swiftPrefix: string expected\";if(null!=e.phpClassPrefix&&e.hasOwnProperty(\"phpClassPrefix\")&&!p.isString(e.phpClassPrefix))return\"phpClassPrefix: string expected\";if(null!=e.phpNamespace&&e.hasOwnProperty(\"phpNamespace\")&&!p.isString(e.phpNamespace))return\"phpNamespace: string expected\";if(null!=e.phpMetadataNamespace&&e.hasOwnProperty(\"phpMetadataNamespace\")&&!p.isString(e.phpMetadataNamespace))return\"phpMetadataNamespace: string expected\";if(null!=e.rubyPackage&&e.hasOwnProperty(\"rubyPackage\")&&!p.isString(e.rubyPackage))return\"rubyPackage: string expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t)if(n=l.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]))return\"uninterpretedOption.\"+n}if(null!=e[\".google.api.resourceDefinition\"]&&e.hasOwnProperty(\".google.api.resourceDefinition\")){if(!Array.isArray(e[\".google.api.resourceDefinition\"]))return\".google.api.resourceDefinition: array expected\";for(var n,t=0;t<e[\".google.api.resourceDefinition\"].length;++t)if(n=l.google.api.ResourceDescriptor.verify(e[\".google.api.resourceDefinition\"][t]))return\".google.api.resourceDefinition.\"+n}return null},S.fromObject=function(e){if(e instanceof l.google.protobuf.FileOptions)return e;var t=new l.google.protobuf.FileOptions;switch(null!=e.javaPackage&&(t.javaPackage=String(e.javaPackage)),null!=e.javaOuterClassname&&(t.javaOuterClassname=String(e.javaOuterClassname)),null!=e.javaMultipleFiles&&(t.javaMultipleFiles=Boolean(e.javaMultipleFiles)),null!=e.javaGenerateEqualsAndHash&&(t.javaGenerateEqualsAndHash=Boolean(e.javaGenerateEqualsAndHash)),null!=e.javaStringCheckUtf8&&(t.javaStringCheckUtf8=Boolean(e.javaStringCheckUtf8)),e.optimizeFor){case\"SPEED\":case 1:t.optimizeFor=1;break;case\"CODE_SIZE\":case 2:t.optimizeFor=2;break;case\"LITE_RUNTIME\":case 3:t.optimizeFor=3}if(null!=e.goPackage&&(t.goPackage=String(e.goPackage)),null!=e.ccGenericServices&&(t.ccGenericServices=Boolean(e.ccGenericServices)),null!=e.javaGenericServices&&(t.javaGenericServices=Boolean(e.javaGenericServices)),null!=e.pyGenericServices&&(t.pyGenericServices=Boolean(e.pyGenericServices)),null!=e.phpGenericServices&&(t.phpGenericServices=Boolean(e.phpGenericServices)),null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),null!=e.ccEnableArenas&&(t.ccEnableArenas=Boolean(e.ccEnableArenas)),null!=e.objcClassPrefix&&(t.objcClassPrefix=String(e.objcClassPrefix)),null!=e.csharpNamespace&&(t.csharpNamespace=String(e.csharpNamespace)),null!=e.swiftPrefix&&(t.swiftPrefix=String(e.swiftPrefix)),null!=e.phpClassPrefix&&(t.phpClassPrefix=String(e.phpClassPrefix)),null!=e.phpNamespace&&(t.phpNamespace=String(e.phpNamespace)),null!=e.phpMetadataNamespace&&(t.phpMetadataNamespace=String(e.phpMetadataNamespace)),null!=e.rubyPackage&&(t.rubyPackage=String(e.rubyPackage)),e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.FileOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.FileOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=l.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}if(e[\".google.api.resourceDefinition\"]){if(!Array.isArray(e[\".google.api.resourceDefinition\"]))throw TypeError(\".google.protobuf.FileOptions..google.api.resourceDefinition: array expected\");t[\".google.api.resourceDefinition\"]=[];for(n=0;n<e[\".google.api.resourceDefinition\"].length;++n){if(\"object\"!=typeof e[\".google.api.resourceDefinition\"][n])throw TypeError(\".google.protobuf.FileOptions..google.api.resourceDefinition: object expected\");t[\".google.api.resourceDefinition\"][n]=l.google.api.ResourceDescriptor.fromObject(e[\".google.api.resourceDefinition\"][n])}}return t},S.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[],n[\".google.api.resourceDefinition\"]=[]),t.defaults&&(n.javaPackage=\"\",n.javaOuterClassname=\"\",n.optimizeFor=t.enums===String?\"SPEED\":1,n.javaMultipleFiles=!1,n.goPackage=\"\",n.ccGenericServices=!1,n.javaGenericServices=!1,n.pyGenericServices=!1,n.javaGenerateEqualsAndHash=!1,n.deprecated=!1,n.javaStringCheckUtf8=!1,n.ccEnableArenas=!0,n.objcClassPrefix=\"\",n.csharpNamespace=\"\",n.swiftPrefix=\"\",n.phpClassPrefix=\"\",n.phpNamespace=\"\",n.phpGenericServices=!1,n.phpMetadataNamespace=\"\",n.rubyPackage=\"\"),null!=e.javaPackage&&e.hasOwnProperty(\"javaPackage\")&&(n.javaPackage=e.javaPackage),null!=e.javaOuterClassname&&e.hasOwnProperty(\"javaOuterClassname\")&&(n.javaOuterClassname=e.javaOuterClassname),null!=e.optimizeFor&&e.hasOwnProperty(\"optimizeFor\")&&(n.optimizeFor=t.enums===String?l.google.protobuf.FileOptions.OptimizeMode[e.optimizeFor]:e.optimizeFor),null!=e.javaMultipleFiles&&e.hasOwnProperty(\"javaMultipleFiles\")&&(n.javaMultipleFiles=e.javaMultipleFiles),null!=e.goPackage&&e.hasOwnProperty(\"goPackage\")&&(n.goPackage=e.goPackage),null!=e.ccGenericServices&&e.hasOwnProperty(\"ccGenericServices\")&&(n.ccGenericServices=e.ccGenericServices),null!=e.javaGenericServices&&e.hasOwnProperty(\"javaGenericServices\")&&(n.javaGenericServices=e.javaGenericServices),null!=e.pyGenericServices&&e.hasOwnProperty(\"pyGenericServices\")&&(n.pyGenericServices=e.pyGenericServices),null!=e.javaGenerateEqualsAndHash&&e.hasOwnProperty(\"javaGenerateEqualsAndHash\")&&(n.javaGenerateEqualsAndHash=e.javaGenerateEqualsAndHash),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),null!=e.javaStringCheckUtf8&&e.hasOwnProperty(\"javaStringCheckUtf8\")&&(n.javaStringCheckUtf8=e.javaStringCheckUtf8),null!=e.ccEnableArenas&&e.hasOwnProperty(\"ccEnableArenas\")&&(n.ccEnableArenas=e.ccEnableArenas),null!=e.objcClassPrefix&&e.hasOwnProperty(\"objcClassPrefix\")&&(n.objcClassPrefix=e.objcClassPrefix),null!=e.csharpNamespace&&e.hasOwnProperty(\"csharpNamespace\")&&(n.csharpNamespace=e.csharpNamespace),null!=e.swiftPrefix&&e.hasOwnProperty(\"swiftPrefix\")&&(n.swiftPrefix=e.swiftPrefix),null!=e.phpClassPrefix&&e.hasOwnProperty(\"phpClassPrefix\")&&(n.phpClassPrefix=e.phpClassPrefix),null!=e.phpNamespace&&e.hasOwnProperty(\"phpNamespace\")&&(n.phpNamespace=e.phpNamespace),null!=e.phpGenericServices&&e.hasOwnProperty(\"phpGenericServices\")&&(n.phpGenericServices=e.phpGenericServices),null!=e.phpMetadataNamespace&&e.hasOwnProperty(\"phpMetadataNamespace\")&&(n.phpMetadataNamespace=e.phpMetadataNamespace),null!=e.rubyPackage&&e.hasOwnProperty(\"rubyPackage\")&&(n.rubyPackage=e.rubyPackage),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=l.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}if(e[\".google.api.resourceDefinition\"]&&e[\".google.api.resourceDefinition\"].length){n[\".google.api.resourceDefinition\"]=[];for(o=0;o<e[\".google.api.resourceDefinition\"].length;++o)n[\".google.api.resourceDefinition\"][o]=l.google.api.ResourceDescriptor.toObject(e[\".google.api.resourceDefinition\"][o],t)}return n},S.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},S.OptimizeMode=(e={},(t=Object.create(e))[e[1]=\"SPEED\"]=1,t[e[2]=\"CODE_SIZE\"]=2,t[e[3]=\"LITE_RUNTIME\"]=3,t),S),n.MessageOptions=(k.prototype.messageSetWireFormat=!1,k.prototype.noStandardDescriptorAccessor=!1,k.prototype.deprecated=!1,k.prototype.mapEntry=!1,k.prototype.uninterpretedOption=p.emptyArray,k.prototype[\".google.api.resource\"]=null,k.create=function(e){return new k(e)},k.encode=function(e,t){if(t=t||i.create(),null!=e.messageSetWireFormat&&Object.hasOwnProperty.call(e,\"messageSetWireFormat\")&&t.uint32(8).bool(e.messageSetWireFormat),null!=e.noStandardDescriptorAccessor&&Object.hasOwnProperty.call(e,\"noStandardDescriptorAccessor\")&&t.uint32(16).bool(e.noStandardDescriptorAccessor),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(24).bool(e.deprecated),null!=e.mapEntry&&Object.hasOwnProperty.call(e,\"mapEntry\")&&t.uint32(56).bool(e.mapEntry),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)l.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return null!=e[\".google.api.resource\"]&&Object.hasOwnProperty.call(e,\".google.api.resource\")&&l.google.api.ResourceDescriptor.encode(e[\".google.api.resource\"],t.uint32(8426).fork()).ldelim(),t},k.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},k.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.MessageOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.messageSetWireFormat=e.bool();break;case 2:o.noStandardDescriptorAccessor=e.bool();break;case 3:o.deprecated=e.bool();break;case 7:o.mapEntry=e.bool();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(l.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;case 1053:o[\".google.api.resource\"]=l.google.api.ResourceDescriptor.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},k.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},k.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.messageSetWireFormat&&e.hasOwnProperty(\"messageSetWireFormat\")&&\"boolean\"!=typeof e.messageSetWireFormat)return\"messageSetWireFormat: boolean expected\";if(null!=e.noStandardDescriptorAccessor&&e.hasOwnProperty(\"noStandardDescriptorAccessor\")&&\"boolean\"!=typeof e.noStandardDescriptorAccessor)return\"noStandardDescriptorAccessor: boolean expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.mapEntry&&e.hasOwnProperty(\"mapEntry\")&&\"boolean\"!=typeof e.mapEntry)return\"mapEntry: boolean expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t)if(n=l.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]))return\"uninterpretedOption.\"+n}var n;if(null!=e[\".google.api.resource\"]&&e.hasOwnProperty(\".google.api.resource\")&&(n=l.google.api.ResourceDescriptor.verify(e[\".google.api.resource\"])))return\".google.api.resource.\"+n;return null},k.fromObject=function(e){if(e instanceof l.google.protobuf.MessageOptions)return e;var t=new l.google.protobuf.MessageOptions;if(null!=e.messageSetWireFormat&&(t.messageSetWireFormat=Boolean(e.messageSetWireFormat)),null!=e.noStandardDescriptorAccessor&&(t.noStandardDescriptorAccessor=Boolean(e.noStandardDescriptorAccessor)),null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),null!=e.mapEntry&&(t.mapEntry=Boolean(e.mapEntry)),e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.MessageOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.MessageOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=l.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}if(null!=e[\".google.api.resource\"]){if(\"object\"!=typeof e[\".google.api.resource\"])throw TypeError(\".google.protobuf.MessageOptions..google.api.resource: object expected\");t[\".google.api.resource\"]=l.google.api.ResourceDescriptor.fromObject(e[\".google.api.resource\"])}return t},k.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),t.defaults&&(n.messageSetWireFormat=!1,n.noStandardDescriptorAccessor=!1,n.deprecated=!1,n.mapEntry=!1,n[\".google.api.resource\"]=null),null!=e.messageSetWireFormat&&e.hasOwnProperty(\"messageSetWireFormat\")&&(n.messageSetWireFormat=e.messageSetWireFormat),null!=e.noStandardDescriptorAccessor&&e.hasOwnProperty(\"noStandardDescriptorAccessor\")&&(n.noStandardDescriptorAccessor=e.noStandardDescriptorAccessor),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),null!=e.mapEntry&&e.hasOwnProperty(\"mapEntry\")&&(n.mapEntry=e.mapEntry),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=l.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return null!=e[\".google.api.resource\"]&&e.hasOwnProperty(\".google.api.resource\")&&(n[\".google.api.resource\"]=l.google.api.ResourceDescriptor.toObject(e[\".google.api.resource\"],t)),n},k.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},k),n.FieldOptions=(T.prototype.ctype=0,T.prototype.packed=!1,T.prototype.jstype=0,T.prototype.lazy=!1,T.prototype.deprecated=!1,T.prototype.weak=!1,T.prototype.uninterpretedOption=p.emptyArray,T.prototype[\".google.api.fieldBehavior\"]=p.emptyArray,T.prototype[\".google.api.resourceReference\"]=null,T.create=function(e){return new T(e)},T.encode=function(e,t){if(t=t||i.create(),null!=e.ctype&&Object.hasOwnProperty.call(e,\"ctype\")&&t.uint32(8).int32(e.ctype),null!=e.packed&&Object.hasOwnProperty.call(e,\"packed\")&&t.uint32(16).bool(e.packed),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(24).bool(e.deprecated),null!=e.lazy&&Object.hasOwnProperty.call(e,\"lazy\")&&t.uint32(40).bool(e.lazy),null!=e.jstype&&Object.hasOwnProperty.call(e,\"jstype\")&&t.uint32(48).int32(e.jstype),null!=e.weak&&Object.hasOwnProperty.call(e,\"weak\")&&t.uint32(80).bool(e.weak),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)l.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();if(null!=e[\".google.api.fieldBehavior\"]&&e[\".google.api.fieldBehavior\"].length){t.uint32(8418).fork();for(n=0;n<e[\".google.api.fieldBehavior\"].length;++n)t.int32(e[\".google.api.fieldBehavior\"][n]);t.ldelim()}return null!=e[\".google.api.resourceReference\"]&&Object.hasOwnProperty.call(e,\".google.api.resourceReference\")&&l.google.api.ResourceReference.encode(e[\".google.api.resourceReference\"],t.uint32(8442).fork()).ldelim(),t},T.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},T.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.FieldOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.ctype=e.int32();break;case 2:o.packed=e.bool();break;case 6:o.jstype=e.int32();break;case 5:o.lazy=e.bool();break;case 3:o.deprecated=e.bool();break;case 10:o.weak=e.bool();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(l.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;case 1052:if(o[\".google.api.fieldBehavior\"]&&o[\".google.api.fieldBehavior\"].length||(o[\".google.api.fieldBehavior\"]=[]),2==(7&r))for(var i=e.uint32()+e.pos;e.pos<i;)o[\".google.api.fieldBehavior\"].push(e.int32());else o[\".google.api.fieldBehavior\"].push(e.int32());break;case 1055:o[\".google.api.resourceReference\"]=l.google.api.ResourceReference.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},T.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},T.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.ctype&&e.hasOwnProperty(\"ctype\"))switch(e.ctype){default:return\"ctype: enum value expected\";case 0:case 1:case 2:}if(null!=e.packed&&e.hasOwnProperty(\"packed\")&&\"boolean\"!=typeof e.packed)return\"packed: boolean expected\";if(null!=e.jstype&&e.hasOwnProperty(\"jstype\"))switch(e.jstype){default:return\"jstype: enum value expected\";case 0:case 1:case 2:}if(null!=e.lazy&&e.hasOwnProperty(\"lazy\")&&\"boolean\"!=typeof e.lazy)return\"lazy: boolean expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.weak&&e.hasOwnProperty(\"weak\")&&\"boolean\"!=typeof e.weak)return\"weak: boolean expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t)if(n=l.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]))return\"uninterpretedOption.\"+n}if(null!=e[\".google.api.fieldBehavior\"]&&e.hasOwnProperty(\".google.api.fieldBehavior\")){if(!Array.isArray(e[\".google.api.fieldBehavior\"]))return\".google.api.fieldBehavior: array expected\";for(t=0;t<e[\".google.api.fieldBehavior\"].length;++t)switch(e[\".google.api.fieldBehavior\"][t]){default:return\".google.api.fieldBehavior: enum value[] expected\";case 0:case 1:case 2:case 3:case 4:case 5:}}var n;if(null!=e[\".google.api.resourceReference\"]&&e.hasOwnProperty(\".google.api.resourceReference\")&&(n=l.google.api.ResourceReference.verify(e[\".google.api.resourceReference\"])))return\".google.api.resourceReference.\"+n;return null},T.fromObject=function(e){if(e instanceof l.google.protobuf.FieldOptions)return e;var t=new l.google.protobuf.FieldOptions;switch(e.ctype){case\"STRING\":case 0:t.ctype=0;break;case\"CORD\":case 1:t.ctype=1;break;case\"STRING_PIECE\":case 2:t.ctype=2}switch(null!=e.packed&&(t.packed=Boolean(e.packed)),e.jstype){case\"JS_NORMAL\":case 0:t.jstype=0;break;case\"JS_STRING\":case 1:t.jstype=1;break;case\"JS_NUMBER\":case 2:t.jstype=2}if(null!=e.lazy&&(t.lazy=Boolean(e.lazy)),null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),null!=e.weak&&(t.weak=Boolean(e.weak)),e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.FieldOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.FieldOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=l.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}if(e[\".google.api.fieldBehavior\"]){if(!Array.isArray(e[\".google.api.fieldBehavior\"]))throw TypeError(\".google.protobuf.FieldOptions..google.api.fieldBehavior: array expected\");t[\".google.api.fieldBehavior\"]=[];for(n=0;n<e[\".google.api.fieldBehavior\"].length;++n)switch(e[\".google.api.fieldBehavior\"][n]){default:case\"FIELD_BEHAVIOR_UNSPECIFIED\":case 0:t[\".google.api.fieldBehavior\"][n]=0;break;case\"OPTIONAL\":case 1:t[\".google.api.fieldBehavior\"][n]=1;break;case\"REQUIRED\":case 2:t[\".google.api.fieldBehavior\"][n]=2;break;case\"OUTPUT_ONLY\":case 3:t[\".google.api.fieldBehavior\"][n]=3;break;case\"INPUT_ONLY\":case 4:t[\".google.api.fieldBehavior\"][n]=4;break;case\"IMMUTABLE\":case 5:t[\".google.api.fieldBehavior\"][n]=5}}if(null!=e[\".google.api.resourceReference\"]){if(\"object\"!=typeof e[\".google.api.resourceReference\"])throw TypeError(\".google.protobuf.FieldOptions..google.api.resourceReference: object expected\");t[\".google.api.resourceReference\"]=l.google.api.ResourceReference.fromObject(e[\".google.api.resourceReference\"])}return t},T.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[],n[\".google.api.fieldBehavior\"]=[]),t.defaults&&(n.ctype=t.enums===String?\"STRING\":0,n.packed=!1,n.deprecated=!1,n.lazy=!1,n.jstype=t.enums===String?\"JS_NORMAL\":0,n.weak=!1,n[\".google.api.resourceReference\"]=null),null!=e.ctype&&e.hasOwnProperty(\"ctype\")&&(n.ctype=t.enums===String?l.google.protobuf.FieldOptions.CType[e.ctype]:e.ctype),null!=e.packed&&e.hasOwnProperty(\"packed\")&&(n.packed=e.packed),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),null!=e.lazy&&e.hasOwnProperty(\"lazy\")&&(n.lazy=e.lazy),null!=e.jstype&&e.hasOwnProperty(\"jstype\")&&(n.jstype=t.enums===String?l.google.protobuf.FieldOptions.JSType[e.jstype]:e.jstype),null!=e.weak&&e.hasOwnProperty(\"weak\")&&(n.weak=e.weak),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=l.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}if(e[\".google.api.fieldBehavior\"]&&e[\".google.api.fieldBehavior\"].length){n[\".google.api.fieldBehavior\"]=[];for(o=0;o<e[\".google.api.fieldBehavior\"].length;++o)n[\".google.api.fieldBehavior\"][o]=t.enums===String?l.google.api.FieldBehavior[e[\".google.api.fieldBehavior\"][o]]:e[\".google.api.fieldBehavior\"][o]}return null!=e[\".google.api.resourceReference\"]&&e.hasOwnProperty(\".google.api.resourceReference\")&&(n[\".google.api.resourceReference\"]=l.google.api.ResourceReference.toObject(e[\".google.api.resourceReference\"],t)),n},T.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},T.CType=(e={},(t=Object.create(e))[e[0]=\"STRING\"]=0,t[e[1]=\"CORD\"]=1,t[e[2]=\"STRING_PIECE\"]=2,t),T.JSType=(e={},(t=Object.create(e))[e[0]=\"JS_NORMAL\"]=0,t[e[1]=\"JS_STRING\"]=1,t[e[2]=\"JS_NUMBER\"]=2,t),T),n.OneofOptions=(Q.prototype.uninterpretedOption=p.emptyArray,Q.create=function(e){return new Q(e)},Q.encode=function(e,t){if(t=t||i.create(),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)l.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return t},Q.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},Q.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.OneofOptions;e.pos<n;){var r=e.uint32();r>>>3==999?(o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(l.google.protobuf.UninterpretedOption.decode(e,e.uint32()))):e.skipType(7&r)}return o},Q.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},Q.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=l.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null},Q.fromObject=function(e){if(e instanceof l.google.protobuf.OneofOptions)return e;var t=new l.google.protobuf.OneofOptions;if(e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.OneofOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.OneofOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=l.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return t},Q.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=l.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return n},Q.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},Q),n.EnumOptions=(E.prototype.allowAlias=!1,E.prototype.deprecated=!1,E.prototype.uninterpretedOption=p.emptyArray,E.create=function(e){return new E(e)},E.encode=function(e,t){if(t=t||i.create(),null!=e.allowAlias&&Object.hasOwnProperty.call(e,\"allowAlias\")&&t.uint32(16).bool(e.allowAlias),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(24).bool(e.deprecated),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)l.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return t},E.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},E.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.EnumOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 2:o.allowAlias=e.bool();break;case 3:o.deprecated=e.bool();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(l.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return o},E.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},E.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.allowAlias&&e.hasOwnProperty(\"allowAlias\")&&\"boolean\"!=typeof e.allowAlias)return\"allowAlias: boolean expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=l.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null},E.fromObject=function(e){if(e instanceof l.google.protobuf.EnumOptions)return e;var t=new l.google.protobuf.EnumOptions;if(null!=e.allowAlias&&(t.allowAlias=Boolean(e.allowAlias)),null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.EnumOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.EnumOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=l.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return t},E.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),t.defaults&&(n.allowAlias=!1,n.deprecated=!1),null!=e.allowAlias&&e.hasOwnProperty(\"allowAlias\")&&(n.allowAlias=e.allowAlias),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=l.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return n},E.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},E),n.EnumValueOptions=(K.prototype.deprecated=!1,K.prototype.uninterpretedOption=p.emptyArray,K.create=function(e){return new K(e)},K.encode=function(e,t){if(t=t||i.create(),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(8).bool(e.deprecated),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)l.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return t},K.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},K.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.EnumValueOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.deprecated=e.bool();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(l.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return o},K.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},K.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=l.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null},K.fromObject=function(e){if(e instanceof l.google.protobuf.EnumValueOptions)return e;var t=new l.google.protobuf.EnumValueOptions;if(null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.EnumValueOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.EnumValueOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=l.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return t},K.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),t.defaults&&(n.deprecated=!1),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=l.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return n},K.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},K),n.ServiceOptions=(A.prototype.deprecated=!1,A.prototype.uninterpretedOption=p.emptyArray,A.prototype[\".google.api.defaultHost\"]=\"\",A.prototype[\".google.api.oauthScopes\"]=\"\",A.create=function(e){return new A(e)},A.encode=function(e,t){if(t=t||i.create(),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(264).bool(e.deprecated),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)l.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return null!=e[\".google.api.defaultHost\"]&&Object.hasOwnProperty.call(e,\".google.api.defaultHost\")&&t.uint32(8394).string(e[\".google.api.defaultHost\"]),null!=e[\".google.api.oauthScopes\"]&&Object.hasOwnProperty.call(e,\".google.api.oauthScopes\")&&t.uint32(8402).string(e[\".google.api.oauthScopes\"]),t},A.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},A.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.ServiceOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 33:o.deprecated=e.bool();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(l.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;case 1049:o[\".google.api.defaultHost\"]=e.string();break;case 1050:o[\".google.api.oauthScopes\"]=e.string();break;default:e.skipType(7&r)}}return o},A.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},A.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=l.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null!=e[\".google.api.defaultHost\"]&&e.hasOwnProperty(\".google.api.defaultHost\")&&!p.isString(e[\".google.api.defaultHost\"])?\".google.api.defaultHost: string expected\":null!=e[\".google.api.oauthScopes\"]&&e.hasOwnProperty(\".google.api.oauthScopes\")&&!p.isString(e[\".google.api.oauthScopes\"])?\".google.api.oauthScopes: string expected\":null},A.fromObject=function(e){if(e instanceof l.google.protobuf.ServiceOptions)return e;var t=new l.google.protobuf.ServiceOptions;if(null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.ServiceOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.ServiceOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=l.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return null!=e[\".google.api.defaultHost\"]&&(t[\".google.api.defaultHost\"]=String(e[\".google.api.defaultHost\"])),null!=e[\".google.api.oauthScopes\"]&&(t[\".google.api.oauthScopes\"]=String(e[\".google.api.oauthScopes\"])),t},A.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),t.defaults&&(n.deprecated=!1,n[\".google.api.defaultHost\"]=\"\",n[\".google.api.oauthScopes\"]=\"\"),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=l.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return null!=e[\".google.api.defaultHost\"]&&e.hasOwnProperty(\".google.api.defaultHost\")&&(n[\".google.api.defaultHost\"]=e[\".google.api.defaultHost\"]),null!=e[\".google.api.oauthScopes\"]&&e.hasOwnProperty(\".google.api.oauthScopes\")&&(n[\".google.api.oauthScopes\"]=e[\".google.api.oauthScopes\"]),n},A.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},A),n.MethodOptions=(N.prototype.deprecated=!1,N.prototype.idempotencyLevel=0,N.prototype.uninterpretedOption=p.emptyArray,N.prototype[\".google.api.http\"]=null,N.prototype[\".google.api.methodSignature\"]=p.emptyArray,N.create=function(e){return new N(e)},N.encode=function(e,t){if(t=t||i.create(),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(264).bool(e.deprecated),null!=e.idempotencyLevel&&Object.hasOwnProperty.call(e,\"idempotencyLevel\")&&t.uint32(272).int32(e.idempotencyLevel),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)l.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();if(null!=e[\".google.api.methodSignature\"]&&e[\".google.api.methodSignature\"].length)for(n=0;n<e[\".google.api.methodSignature\"].length;++n)t.uint32(8410).string(e[\".google.api.methodSignature\"][n]);return null!=e[\".google.api.http\"]&&Object.hasOwnProperty.call(e,\".google.api.http\")&&l.google.api.HttpRule.encode(e[\".google.api.http\"],t.uint32(578365826).fork()).ldelim(),t},N.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},N.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.MethodOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 33:o.deprecated=e.bool();break;case 34:o.idempotencyLevel=e.int32();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(l.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;case 72295728:o[\".google.api.http\"]=l.google.api.HttpRule.decode(e,e.uint32());break;case 1051:o[\".google.api.methodSignature\"]&&o[\".google.api.methodSignature\"].length||(o[\".google.api.methodSignature\"]=[]),o[\".google.api.methodSignature\"].push(e.string());break;default:e.skipType(7&r)}}return o},N.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},N.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.idempotencyLevel&&e.hasOwnProperty(\"idempotencyLevel\"))switch(e.idempotencyLevel){default:return\"idempotencyLevel: enum value expected\";case 0:case 1:case 2:}if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t)if(n=l.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]))return\"uninterpretedOption.\"+n}var n;if(null!=e[\".google.api.http\"]&&e.hasOwnProperty(\".google.api.http\")&&(n=l.google.api.HttpRule.verify(e[\".google.api.http\"])))return\".google.api.http.\"+n;if(null!=e[\".google.api.methodSignature\"]&&e.hasOwnProperty(\".google.api.methodSignature\")){if(!Array.isArray(e[\".google.api.methodSignature\"]))return\".google.api.methodSignature: array expected\";for(t=0;t<e[\".google.api.methodSignature\"].length;++t)if(!p.isString(e[\".google.api.methodSignature\"][t]))return\".google.api.methodSignature: string[] expected\"}return null},N.fromObject=function(e){if(e instanceof l.google.protobuf.MethodOptions)return e;var t=new l.google.protobuf.MethodOptions;switch(null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),e.idempotencyLevel){case\"IDEMPOTENCY_UNKNOWN\":case 0:t.idempotencyLevel=0;break;case\"NO_SIDE_EFFECTS\":case 1:t.idempotencyLevel=1;break;case\"IDEMPOTENT\":case 2:t.idempotencyLevel=2}if(e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.MethodOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.MethodOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=l.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}if(null!=e[\".google.api.http\"]){if(\"object\"!=typeof e[\".google.api.http\"])throw TypeError(\".google.protobuf.MethodOptions..google.api.http: object expected\");t[\".google.api.http\"]=l.google.api.HttpRule.fromObject(e[\".google.api.http\"])}if(e[\".google.api.methodSignature\"]){if(!Array.isArray(e[\".google.api.methodSignature\"]))throw TypeError(\".google.protobuf.MethodOptions..google.api.methodSignature: array expected\");t[\".google.api.methodSignature\"]=[];for(n=0;n<e[\".google.api.methodSignature\"].length;++n)t[\".google.api.methodSignature\"][n]=String(e[\".google.api.methodSignature\"][n])}return t},N.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[],n[\".google.api.methodSignature\"]=[]),t.defaults&&(n.deprecated=!1,n.idempotencyLevel=t.enums===String?\"IDEMPOTENCY_UNKNOWN\":0,n[\".google.api.http\"]=null),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),null!=e.idempotencyLevel&&e.hasOwnProperty(\"idempotencyLevel\")&&(n.idempotencyLevel=t.enums===String?l.google.protobuf.MethodOptions.IdempotencyLevel[e.idempotencyLevel]:e.idempotencyLevel),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=l.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}if(e[\".google.api.methodSignature\"]&&e[\".google.api.methodSignature\"].length){n[\".google.api.methodSignature\"]=[];for(o=0;o<e[\".google.api.methodSignature\"].length;++o)n[\".google.api.methodSignature\"][o]=e[\".google.api.methodSignature\"][o]}return null!=e[\".google.api.http\"]&&e.hasOwnProperty(\".google.api.http\")&&(n[\".google.api.http\"]=l.google.api.HttpRule.toObject(e[\".google.api.http\"],t)),n},N.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},N.IdempotencyLevel=(e={},(t=Object.create(e))[e[0]=\"IDEMPOTENCY_UNKNOWN\"]=0,t[e[1]=\"NO_SIDE_EFFECTS\"]=1,t[e[2]=\"IDEMPOTENT\"]=2,t),N),n.UninterpretedOption=(R.prototype.name=p.emptyArray,R.prototype.identifierValue=\"\",R.prototype.positiveIntValue=p.Long?p.Long.fromBits(0,0,!0):0,R.prototype.negativeIntValue=p.Long?p.Long.fromBits(0,0,!1):0,R.prototype.doubleValue=0,R.prototype.stringValue=p.newBuffer([]),R.prototype.aggregateValue=\"\",R.create=function(e){return new R(e)},R.encode=function(e,t){if(t=t||i.create(),null!=e.name&&e.name.length)for(var n=0;n<e.name.length;++n)l.google.protobuf.UninterpretedOption.NamePart.encode(e.name[n],t.uint32(18).fork()).ldelim();return null!=e.identifierValue&&Object.hasOwnProperty.call(e,\"identifierValue\")&&t.uint32(26).string(e.identifierValue),null!=e.positiveIntValue&&Object.hasOwnProperty.call(e,\"positiveIntValue\")&&t.uint32(32).uint64(e.positiveIntValue),null!=e.negativeIntValue&&Object.hasOwnProperty.call(e,\"negativeIntValue\")&&t.uint32(40).int64(e.negativeIntValue),null!=e.doubleValue&&Object.hasOwnProperty.call(e,\"doubleValue\")&&t.uint32(49).double(e.doubleValue),null!=e.stringValue&&Object.hasOwnProperty.call(e,\"stringValue\")&&t.uint32(58).bytes(e.stringValue),null!=e.aggregateValue&&Object.hasOwnProperty.call(e,\"aggregateValue\")&&t.uint32(66).string(e.aggregateValue),t},R.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},R.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.UninterpretedOption;e.pos<n;){var r=e.uint32();switch(r>>>3){case 2:o.name&&o.name.length||(o.name=[]),o.name.push(l.google.protobuf.UninterpretedOption.NamePart.decode(e,e.uint32()));break;case 3:o.identifierValue=e.string();break;case 4:o.positiveIntValue=e.uint64();break;case 5:o.negativeIntValue=e.int64();break;case 6:o.doubleValue=e.double();break;case 7:o.stringValue=e.bytes();break;case 8:o.aggregateValue=e.string();break;default:e.skipType(7&r)}}return o},R.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},R.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")){if(!Array.isArray(e.name))return\"name: array expected\";for(var t=0;t<e.name.length;++t){var n=l.google.protobuf.UninterpretedOption.NamePart.verify(e.name[t]);if(n)return\"name.\"+n}}return null!=e.identifierValue&&e.hasOwnProperty(\"identifierValue\")&&!p.isString(e.identifierValue)?\"identifierValue: string expected\":null!=e.positiveIntValue&&e.hasOwnProperty(\"positiveIntValue\")&&!(p.isInteger(e.positiveIntValue)||e.positiveIntValue&&p.isInteger(e.positiveIntValue.low)&&p.isInteger(e.positiveIntValue.high))?\"positiveIntValue: integer|Long expected\":null!=e.negativeIntValue&&e.hasOwnProperty(\"negativeIntValue\")&&!(p.isInteger(e.negativeIntValue)||e.negativeIntValue&&p.isInteger(e.negativeIntValue.low)&&p.isInteger(e.negativeIntValue.high))?\"negativeIntValue: integer|Long expected\":null!=e.doubleValue&&e.hasOwnProperty(\"doubleValue\")&&\"number\"!=typeof e.doubleValue?\"doubleValue: number expected\":null!=e.stringValue&&e.hasOwnProperty(\"stringValue\")&&!(e.stringValue&&\"number\"==typeof e.stringValue.length||p.isString(e.stringValue))?\"stringValue: buffer expected\":null!=e.aggregateValue&&e.hasOwnProperty(\"aggregateValue\")&&!p.isString(e.aggregateValue)?\"aggregateValue: string expected\":null},R.fromObject=function(e){if(e instanceof l.google.protobuf.UninterpretedOption)return e;var t=new l.google.protobuf.UninterpretedOption;if(e.name){if(!Array.isArray(e.name))throw TypeError(\".google.protobuf.UninterpretedOption.name: array expected\");t.name=[];for(var n=0;n<e.name.length;++n){if(\"object\"!=typeof e.name[n])throw TypeError(\".google.protobuf.UninterpretedOption.name: object expected\");t.name[n]=l.google.protobuf.UninterpretedOption.NamePart.fromObject(e.name[n])}}return null!=e.identifierValue&&(t.identifierValue=String(e.identifierValue)),null!=e.positiveIntValue&&(p.Long?(t.positiveIntValue=p.Long.fromValue(e.positiveIntValue)).unsigned=!0:\"string\"==typeof e.positiveIntValue?t.positiveIntValue=parseInt(e.positiveIntValue,10):\"number\"==typeof e.positiveIntValue?t.positiveIntValue=e.positiveIntValue:\"object\"==typeof e.positiveIntValue&&(t.positiveIntValue=new p.LongBits(e.positiveIntValue.low>>>0,e.positiveIntValue.high>>>0).toNumber(!0))),null!=e.negativeIntValue&&(p.Long?(t.negativeIntValue=p.Long.fromValue(e.negativeIntValue)).unsigned=!1:\"string\"==typeof e.negativeIntValue?t.negativeIntValue=parseInt(e.negativeIntValue,10):\"number\"==typeof e.negativeIntValue?t.negativeIntValue=e.negativeIntValue:\"object\"==typeof e.negativeIntValue&&(t.negativeIntValue=new p.LongBits(e.negativeIntValue.low>>>0,e.negativeIntValue.high>>>0).toNumber())),null!=e.doubleValue&&(t.doubleValue=Number(e.doubleValue)),null!=e.stringValue&&(\"string\"==typeof e.stringValue?p.base64.decode(e.stringValue,t.stringValue=p.newBuffer(p.base64.length(e.stringValue)),0):e.stringValue.length&&(t.stringValue=e.stringValue)),null!=e.aggregateValue&&(t.aggregateValue=String(e.aggregateValue)),t},R.toObject=function(e,t){var n,o={};if(((t=t||{}).arrays||t.defaults)&&(o.name=[]),t.defaults&&(o.identifierValue=\"\",p.Long?(n=new p.Long(0,0,!0),o.positiveIntValue=t.longs===String?n.toString():t.longs===Number?n.toNumber():n):o.positiveIntValue=t.longs===String?\"0\":0,p.Long?(n=new p.Long(0,0,!1),o.negativeIntValue=t.longs===String?n.toString():t.longs===Number?n.toNumber():n):o.negativeIntValue=t.longs===String?\"0\":0,o.doubleValue=0,t.bytes===String?o.stringValue=\"\":(o.stringValue=[],t.bytes!==Array&&(o.stringValue=p.newBuffer(o.stringValue))),o.aggregateValue=\"\"),e.name&&e.name.length){o.name=[];for(var r=0;r<e.name.length;++r)o.name[r]=l.google.protobuf.UninterpretedOption.NamePart.toObject(e.name[r],t)}return null!=e.identifierValue&&e.hasOwnProperty(\"identifierValue\")&&(o.identifierValue=e.identifierValue),null!=e.positiveIntValue&&e.hasOwnProperty(\"positiveIntValue\")&&(\"number\"==typeof e.positiveIntValue?o.positiveIntValue=t.longs===String?String(e.positiveIntValue):e.positiveIntValue:o.positiveIntValue=t.longs===String?p.Long.prototype.toString.call(e.positiveIntValue):t.longs===Number?new p.LongBits(e.positiveIntValue.low>>>0,e.positiveIntValue.high>>>0).toNumber(!0):e.positiveIntValue),null!=e.negativeIntValue&&e.hasOwnProperty(\"negativeIntValue\")&&(\"number\"==typeof e.negativeIntValue?o.negativeIntValue=t.longs===String?String(e.negativeIntValue):e.negativeIntValue:o.negativeIntValue=t.longs===String?p.Long.prototype.toString.call(e.negativeIntValue):t.longs===Number?new p.LongBits(e.negativeIntValue.low>>>0,e.negativeIntValue.high>>>0).toNumber():e.negativeIntValue),null!=e.doubleValue&&e.hasOwnProperty(\"doubleValue\")&&(o.doubleValue=t.json&&!isFinite(e.doubleValue)?String(e.doubleValue):e.doubleValue),null!=e.stringValue&&e.hasOwnProperty(\"stringValue\")&&(o.stringValue=t.bytes===String?p.base64.encode(e.stringValue,0,e.stringValue.length):t.bytes===Array?Array.prototype.slice.call(e.stringValue):e.stringValue),null!=e.aggregateValue&&e.hasOwnProperty(\"aggregateValue\")&&(o.aggregateValue=e.aggregateValue),o},R.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},R.NamePart=(Z.prototype.namePart=\"\",Z.prototype.isExtension=!1,Z.create=function(e){return new Z(e)},Z.encode=function(e,t){return(t=t||i.create()).uint32(10).string(e.namePart),t.uint32(16).bool(e.isExtension),t},Z.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},Z.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.UninterpretedOption.NamePart;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.namePart=e.string();break;case 2:o.isExtension=e.bool();break;default:e.skipType(7&r)}}if(!o.hasOwnProperty(\"namePart\"))throw p.ProtocolError(\"missing required 'namePart'\",{instance:o});if(o.hasOwnProperty(\"isExtension\"))return o;throw p.ProtocolError(\"missing required 'isExtension'\",{instance:o})},Z.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},Z.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":p.isString(e.namePart)?\"boolean\"!=typeof e.isExtension?\"isExtension: boolean expected\":null:\"namePart: string expected\"},Z.fromObject=function(e){var t;return e instanceof l.google.protobuf.UninterpretedOption.NamePart?e:(t=new l.google.protobuf.UninterpretedOption.NamePart,null!=e.namePart&&(t.namePart=String(e.namePart)),null!=e.isExtension&&(t.isExtension=Boolean(e.isExtension)),t)},Z.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.namePart=\"\",n.isExtension=!1),null!=e.namePart&&e.hasOwnProperty(\"namePart\")&&(n.namePart=e.namePart),null!=e.isExtension&&e.hasOwnProperty(\"isExtension\")&&(n.isExtension=e.isExtension),n},Z.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},Z),R),n.SourceCodeInfo=($.prototype.location=p.emptyArray,$.create=function(e){return new $(e)},$.encode=function(e,t){if(t=t||i.create(),null!=e.location&&e.location.length)for(var n=0;n<e.location.length;++n)l.google.protobuf.SourceCodeInfo.Location.encode(e.location[n],t.uint32(10).fork()).ldelim();return t},$.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},$.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.SourceCodeInfo;e.pos<n;){var r=e.uint32();r>>>3==1?(o.location&&o.location.length||(o.location=[]),o.location.push(l.google.protobuf.SourceCodeInfo.Location.decode(e,e.uint32()))):e.skipType(7&r)}return o},$.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},$.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.location&&e.hasOwnProperty(\"location\")){if(!Array.isArray(e.location))return\"location: array expected\";for(var t=0;t<e.location.length;++t){var n=l.google.protobuf.SourceCodeInfo.Location.verify(e.location[t]);if(n)return\"location.\"+n}}return null},$.fromObject=function(e){if(e instanceof l.google.protobuf.SourceCodeInfo)return e;var t=new l.google.protobuf.SourceCodeInfo;if(e.location){if(!Array.isArray(e.location))throw TypeError(\".google.protobuf.SourceCodeInfo.location: array expected\");t.location=[];for(var n=0;n<e.location.length;++n){if(\"object\"!=typeof e.location[n])throw TypeError(\".google.protobuf.SourceCodeInfo.location: object expected\");t.location[n]=l.google.protobuf.SourceCodeInfo.Location.fromObject(e.location[n])}}return t},$.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.location=[]),e.location&&e.location.length){n.location=[];for(var o=0;o<e.location.length;++o)n.location[o]=l.google.protobuf.SourceCodeInfo.Location.toObject(e.location[o],t)}return n},$.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},$.Location=(I.prototype.path=p.emptyArray,I.prototype.span=p.emptyArray,I.prototype.leadingComments=\"\",I.prototype.trailingComments=\"\",I.prototype.leadingDetachedComments=p.emptyArray,I.create=function(e){return new I(e)},I.encode=function(e,t){if(t=t||i.create(),null!=e.path&&e.path.length){t.uint32(10).fork();for(var n=0;n<e.path.length;++n)t.int32(e.path[n]);t.ldelim()}if(null!=e.span&&e.span.length){t.uint32(18).fork();for(n=0;n<e.span.length;++n)t.int32(e.span[n]);t.ldelim()}if(null!=e.leadingComments&&Object.hasOwnProperty.call(e,\"leadingComments\")&&t.uint32(26).string(e.leadingComments),null!=e.trailingComments&&Object.hasOwnProperty.call(e,\"trailingComments\")&&t.uint32(34).string(e.trailingComments),null!=e.leadingDetachedComments&&e.leadingDetachedComments.length)for(n=0;n<e.leadingDetachedComments.length;++n)t.uint32(50).string(e.leadingDetachedComments[n]);return t},I.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},I.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.SourceCodeInfo.Location;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:if(o.path&&o.path.length||(o.path=[]),2==(7&r))for(var i=e.uint32()+e.pos;e.pos<i;)o.path.push(e.int32());else o.path.push(e.int32());break;case 2:if(o.span&&o.span.length||(o.span=[]),2==(7&r))for(i=e.uint32()+e.pos;e.pos<i;)o.span.push(e.int32());else o.span.push(e.int32());break;case 3:o.leadingComments=e.string();break;case 4:o.trailingComments=e.string();break;case 6:o.leadingDetachedComments&&o.leadingDetachedComments.length||(o.leadingDetachedComments=[]),o.leadingDetachedComments.push(e.string());break;default:e.skipType(7&r)}}return o},I.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},I.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.path&&e.hasOwnProperty(\"path\")){if(!Array.isArray(e.path))return\"path: array expected\";for(var t=0;t<e.path.length;++t)if(!p.isInteger(e.path[t]))return\"path: integer[] expected\"}if(null!=e.span&&e.hasOwnProperty(\"span\")){if(!Array.isArray(e.span))return\"span: array expected\";for(t=0;t<e.span.length;++t)if(!p.isInteger(e.span[t]))return\"span: integer[] expected\"}if(null!=e.leadingComments&&e.hasOwnProperty(\"leadingComments\")&&!p.isString(e.leadingComments))return\"leadingComments: string expected\";if(null!=e.trailingComments&&e.hasOwnProperty(\"trailingComments\")&&!p.isString(e.trailingComments))return\"trailingComments: string expected\";if(null!=e.leadingDetachedComments&&e.hasOwnProperty(\"leadingDetachedComments\")){if(!Array.isArray(e.leadingDetachedComments))return\"leadingDetachedComments: array expected\";for(t=0;t<e.leadingDetachedComments.length;++t)if(!p.isString(e.leadingDetachedComments[t]))return\"leadingDetachedComments: string[] expected\"}return null},I.fromObject=function(e){if(e instanceof l.google.protobuf.SourceCodeInfo.Location)return e;var t=new l.google.protobuf.SourceCodeInfo.Location;if(e.path){if(!Array.isArray(e.path))throw TypeError(\".google.protobuf.SourceCodeInfo.Location.path: array expected\");t.path=[];for(var n=0;n<e.path.length;++n)t.path[n]=0|e.path[n]}if(e.span){if(!Array.isArray(e.span))throw TypeError(\".google.protobuf.SourceCodeInfo.Location.span: array expected\");t.span=[];for(n=0;n<e.span.length;++n)t.span[n]=0|e.span[n]}if(null!=e.leadingComments&&(t.leadingComments=String(e.leadingComments)),null!=e.trailingComments&&(t.trailingComments=String(e.trailingComments)),e.leadingDetachedComments){if(!Array.isArray(e.leadingDetachedComments))throw TypeError(\".google.protobuf.SourceCodeInfo.Location.leadingDetachedComments: array expected\");t.leadingDetachedComments=[];for(n=0;n<e.leadingDetachedComments.length;++n)t.leadingDetachedComments[n]=String(e.leadingDetachedComments[n])}return t},I.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.path=[],n.span=[],n.leadingDetachedComments=[]),t.defaults&&(n.leadingComments=\"\",n.trailingComments=\"\"),e.path&&e.path.length){n.path=[];for(var o=0;o<e.path.length;++o)n.path[o]=e.path[o]}if(e.span&&e.span.length){n.span=[];for(o=0;o<e.span.length;++o)n.span[o]=e.span[o]}if(null!=e.leadingComments&&e.hasOwnProperty(\"leadingComments\")&&(n.leadingComments=e.leadingComments),null!=e.trailingComments&&e.hasOwnProperty(\"trailingComments\")&&(n.trailingComments=e.trailingComments),e.leadingDetachedComments&&e.leadingDetachedComments.length){n.leadingDetachedComments=[];for(o=0;o<e.leadingDetachedComments.length;++o)n.leadingDetachedComments[o]=e.leadingDetachedComments[o]}return n},I.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},I),$),n.GeneratedCodeInfo=(ee.prototype.annotation=p.emptyArray,ee.create=function(e){return new ee(e)},ee.encode=function(e,t){if(t=t||i.create(),null!=e.annotation&&e.annotation.length)for(var n=0;n<e.annotation.length;++n)l.google.protobuf.GeneratedCodeInfo.Annotation.encode(e.annotation[n],t.uint32(10).fork()).ldelim();return t},ee.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},ee.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.GeneratedCodeInfo;e.pos<n;){var r=e.uint32();r>>>3==1?(o.annotation&&o.annotation.length||(o.annotation=[]),o.annotation.push(l.google.protobuf.GeneratedCodeInfo.Annotation.decode(e,e.uint32()))):e.skipType(7&r)}return o},ee.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},ee.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.annotation&&e.hasOwnProperty(\"annotation\")){if(!Array.isArray(e.annotation))return\"annotation: array expected\";for(var t=0;t<e.annotation.length;++t){var n=l.google.protobuf.GeneratedCodeInfo.Annotation.verify(e.annotation[t]);if(n)return\"annotation.\"+n}}return null},ee.fromObject=function(e){if(e instanceof l.google.protobuf.GeneratedCodeInfo)return e;var t=new l.google.protobuf.GeneratedCodeInfo;if(e.annotation){if(!Array.isArray(e.annotation))throw TypeError(\".google.protobuf.GeneratedCodeInfo.annotation: array expected\");t.annotation=[];for(var n=0;n<e.annotation.length;++n){if(\"object\"!=typeof e.annotation[n])throw TypeError(\".google.protobuf.GeneratedCodeInfo.annotation: object expected\");t.annotation[n]=l.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(e.annotation[n])}}return t},ee.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.annotation=[]),e.annotation&&e.annotation.length){n.annotation=[];for(var o=0;o<e.annotation.length;++o)n.annotation[o]=l.google.protobuf.GeneratedCodeInfo.Annotation.toObject(e.annotation[o],t)}return n},ee.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},ee.Annotation=(C.prototype.path=p.emptyArray,C.prototype.sourceFile=\"\",C.prototype.begin=0,C.prototype.end=0,C.create=function(e){return new C(e)},C.encode=function(e,t){if(t=t||i.create(),null!=e.path&&e.path.length){t.uint32(10).fork();for(var n=0;n<e.path.length;++n)t.int32(e.path[n]);t.ldelim()}return null!=e.sourceFile&&Object.hasOwnProperty.call(e,\"sourceFile\")&&t.uint32(18).string(e.sourceFile),null!=e.begin&&Object.hasOwnProperty.call(e,\"begin\")&&t.uint32(24).int32(e.begin),null!=e.end&&Object.hasOwnProperty.call(e,\"end\")&&t.uint32(32).int32(e.end),t},C.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},C.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.protobuf.GeneratedCodeInfo.Annotation;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:if(o.path&&o.path.length||(o.path=[]),2==(7&r))for(var i=e.uint32()+e.pos;e.pos<i;)o.path.push(e.int32());else o.path.push(e.int32());break;case 2:o.sourceFile=e.string();break;case 3:o.begin=e.int32();break;case 4:o.end=e.int32();break;default:e.skipType(7&r)}}return o},C.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},C.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.path&&e.hasOwnProperty(\"path\")){if(!Array.isArray(e.path))return\"path: array expected\";for(var t=0;t<e.path.length;++t)if(!p.isInteger(e.path[t]))return\"path: integer[] expected\"}return null!=e.sourceFile&&e.hasOwnProperty(\"sourceFile\")&&!p.isString(e.sourceFile)?\"sourceFile: string expected\":null!=e.begin&&e.hasOwnProperty(\"begin\")&&!p.isInteger(e.begin)?\"begin: integer expected\":null!=e.end&&e.hasOwnProperty(\"end\")&&!p.isInteger(e.end)?\"end: integer expected\":null},C.fromObject=function(e){if(e instanceof l.google.protobuf.GeneratedCodeInfo.Annotation)return e;var t=new l.google.protobuf.GeneratedCodeInfo.Annotation;if(e.path){if(!Array.isArray(e.path))throw TypeError(\".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected\");t.path=[];for(var n=0;n<e.path.length;++n)t.path[n]=0|e.path[n]}return null!=e.sourceFile&&(t.sourceFile=String(e.sourceFile)),null!=e.begin&&(t.begin=0|e.begin),null!=e.end&&(t.end=0|e.end),t},C.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.path=[]),t.defaults&&(n.sourceFile=\"\",n.begin=0,n.end=0),e.path&&e.path.length){n.path=[];for(var o=0;o<e.path.length;++o)n.path[o]=e.path[o]}return null!=e.sourceFile&&e.hasOwnProperty(\"sourceFile\")&&(n.sourceFile=e.sourceFile),null!=e.begin&&e.hasOwnProperty(\"begin\")&&(n.begin=e.begin),null!=e.end&&e.hasOwnProperty(\"end\")&&(n.end=e.end),n},C.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},C),ee),n),F.type=((r={}).Expr=(V.prototype.expression=\"\",V.prototype.title=\"\",V.prototype.description=\"\",V.prototype.location=\"\",V.create=function(e){return new V(e)},V.encode=function(e,t){return t=t||i.create(),null!=e.expression&&Object.hasOwnProperty.call(e,\"expression\")&&t.uint32(10).string(e.expression),null!=e.title&&Object.hasOwnProperty.call(e,\"title\")&&t.uint32(18).string(e.title),null!=e.description&&Object.hasOwnProperty.call(e,\"description\")&&t.uint32(26).string(e.description),null!=e.location&&Object.hasOwnProperty.call(e,\"location\")&&t.uint32(34).string(e.location),t},V.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},V.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new l.google.type.Expr;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.expression=e.string();break;case 2:o.title=e.string();break;case 3:o.description=e.string();break;case 4:o.location=e.string();break;default:e.skipType(7&r)}}return o},V.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},V.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.expression&&e.hasOwnProperty(\"expression\")&&!p.isString(e.expression)?\"expression: string expected\":null!=e.title&&e.hasOwnProperty(\"title\")&&!p.isString(e.title)?\"title: string expected\":null!=e.description&&e.hasOwnProperty(\"description\")&&!p.isString(e.description)?\"description: string expected\":null!=e.location&&e.hasOwnProperty(\"location\")&&!p.isString(e.location)?\"location: string expected\":null},V.fromObject=function(e){var t;return e instanceof l.google.type.Expr?e:(t=new l.google.type.Expr,null!=e.expression&&(t.expression=String(e.expression)),null!=e.title&&(t.title=String(e.title)),null!=e.description&&(t.description=String(e.description)),null!=e.location&&(t.location=String(e.location)),t)},V.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.expression=\"\",n.title=\"\",n.description=\"\",n.location=\"\"),null!=e.expression&&e.hasOwnProperty(\"expression\")&&(n.expression=e.expression),null!=e.title&&e.hasOwnProperty(\"title\")&&(n.title=e.title),null!=e.description&&e.hasOwnProperty(\"description\")&&(n.description=e.description),null!=e.location&&e.hasOwnProperty(\"location\")&&(n.location=e.location),n},V.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},V),r),F),l});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/protos/iam_service.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/protos/locations.js":
/*!***********************************************************!*\
  !*** ./node_modules/google-gax/build/protos/locations.js ***!
  \***********************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(e=>{ true?!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! protobufjs/minimal */ \"(rsc)/./node_modules/protobufjs/minimal.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (e),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)):0})(function(o){var e,t,n,F,s=o.Reader,r=o.Writer,u=o.util,c=o.roots.locations_protos||(o.roots.locations_protos={});function L(e,t,n){o.rpc.Service.call(this,e,t,n)}function i(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function a(e){if(this.locations=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function G(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function p(e){if(this.labels={},e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function l(e){if(this.rules=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function d(e){if(this.additionalBindings=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function g(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function B(e){if(this.file=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function f(e){if(this.dependency=[],this.publicDependency=[],this.weakDependency=[],this.messageType=[],this.enumType=[],this.service=[],this.extension=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function y(e){if(this.field=[],this.extension=[],this.nestedType=[],this.enumType=[],this.extensionRange=[],this.oneofDecl=[],this.reservedRange=[],this.reservedName=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function h(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function b(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function U(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function O(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function m(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function v(e){if(this.value=[],this.reservedRange=[],this.reservedName=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function P(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function w(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function j(e){if(this.method=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function x(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function S(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function k(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function D(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function M(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function T(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function E(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function A(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function N(e){if(this.uninterpretedOption=[],this[\".google.api.methodSignature\"]=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function I(e){if(this.name=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function R(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function _(e){if(this.location=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function C(e){if(this.path=[],this.span=[],this.leadingDetachedComments=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function J(e){if(this.annotation=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function V(e){if(this.path=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function H(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return c.google=((F={}).cloud=((n={}).location=((e={}).Locations=(((L.prototype=Object.create(o.rpc.Service.prototype)).constructor=L).create=function(e,t,n){return new this(e,t,n)},Object.defineProperty(L.prototype.listLocations=function e(t,n){return this.rpcCall(e,c.google.cloud.location.ListLocationsRequest,c.google.cloud.location.ListLocationsResponse,t,n)},\"name\",{value:\"ListLocations\"}),Object.defineProperty(L.prototype.getLocation=function e(t,n){return this.rpcCall(e,c.google.cloud.location.GetLocationRequest,c.google.cloud.location.Location,t,n)},\"name\",{value:\"GetLocation\"}),L),e.ListLocationsRequest=(i.prototype.name=\"\",i.prototype.filter=\"\",i.prototype.pageSize=0,i.prototype.pageToken=\"\",i.create=function(e){return new i(e)},i.encode=function(e,t){return t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.filter&&Object.hasOwnProperty.call(e,\"filter\")&&t.uint32(18).string(e.filter),null!=e.pageSize&&Object.hasOwnProperty.call(e,\"pageSize\")&&t.uint32(24).int32(e.pageSize),null!=e.pageToken&&Object.hasOwnProperty.call(e,\"pageToken\")&&t.uint32(34).string(e.pageToken),t},i.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},i.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.cloud.location.ListLocationsRequest;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.filter=e.string();break;case 3:o.pageSize=e.int32();break;case 4:o.pageToken=e.string();break;default:e.skipType(7&r)}}return o},i.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},i.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.name&&e.hasOwnProperty(\"name\")&&!u.isString(e.name)?\"name: string expected\":null!=e.filter&&e.hasOwnProperty(\"filter\")&&!u.isString(e.filter)?\"filter: string expected\":null!=e.pageSize&&e.hasOwnProperty(\"pageSize\")&&!u.isInteger(e.pageSize)?\"pageSize: integer expected\":null!=e.pageToken&&e.hasOwnProperty(\"pageToken\")&&!u.isString(e.pageToken)?\"pageToken: string expected\":null},i.fromObject=function(e){var t;return e instanceof c.google.cloud.location.ListLocationsRequest?e:(t=new c.google.cloud.location.ListLocationsRequest,null!=e.name&&(t.name=String(e.name)),null!=e.filter&&(t.filter=String(e.filter)),null!=e.pageSize&&(t.pageSize=0|e.pageSize),null!=e.pageToken&&(t.pageToken=String(e.pageToken)),t)},i.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\",n.filter=\"\",n.pageSize=0,n.pageToken=\"\"),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.filter&&e.hasOwnProperty(\"filter\")&&(n.filter=e.filter),null!=e.pageSize&&e.hasOwnProperty(\"pageSize\")&&(n.pageSize=e.pageSize),null!=e.pageToken&&e.hasOwnProperty(\"pageToken\")&&(n.pageToken=e.pageToken),n},i.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},i),e.ListLocationsResponse=(a.prototype.locations=u.emptyArray,a.prototype.nextPageToken=\"\",a.create=function(e){return new a(e)},a.encode=function(e,t){if(t=t||r.create(),null!=e.locations&&e.locations.length)for(var n=0;n<e.locations.length;++n)c.google.cloud.location.Location.encode(e.locations[n],t.uint32(10).fork()).ldelim();return null!=e.nextPageToken&&Object.hasOwnProperty.call(e,\"nextPageToken\")&&t.uint32(18).string(e.nextPageToken),t},a.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},a.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.cloud.location.ListLocationsResponse;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.locations&&o.locations.length||(o.locations=[]),o.locations.push(c.google.cloud.location.Location.decode(e,e.uint32()));break;case 2:o.nextPageToken=e.string();break;default:e.skipType(7&r)}}return o},a.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},a.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.locations&&e.hasOwnProperty(\"locations\")){if(!Array.isArray(e.locations))return\"locations: array expected\";for(var t=0;t<e.locations.length;++t){var n=c.google.cloud.location.Location.verify(e.locations[t]);if(n)return\"locations.\"+n}}return null!=e.nextPageToken&&e.hasOwnProperty(\"nextPageToken\")&&!u.isString(e.nextPageToken)?\"nextPageToken: string expected\":null},a.fromObject=function(e){if(e instanceof c.google.cloud.location.ListLocationsResponse)return e;var t=new c.google.cloud.location.ListLocationsResponse;if(e.locations){if(!Array.isArray(e.locations))throw TypeError(\".google.cloud.location.ListLocationsResponse.locations: array expected\");t.locations=[];for(var n=0;n<e.locations.length;++n){if(\"object\"!=typeof e.locations[n])throw TypeError(\".google.cloud.location.ListLocationsResponse.locations: object expected\");t.locations[n]=c.google.cloud.location.Location.fromObject(e.locations[n])}}return null!=e.nextPageToken&&(t.nextPageToken=String(e.nextPageToken)),t},a.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.locations=[]),t.defaults&&(n.nextPageToken=\"\"),e.locations&&e.locations.length){n.locations=[];for(var o=0;o<e.locations.length;++o)n.locations[o]=c.google.cloud.location.Location.toObject(e.locations[o],t)}return null!=e.nextPageToken&&e.hasOwnProperty(\"nextPageToken\")&&(n.nextPageToken=e.nextPageToken),n},a.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},a),e.GetLocationRequest=(G.prototype.name=\"\",G.create=function(e){return new G(e)},G.encode=function(e,t){return t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),t},G.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},G.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.cloud.location.GetLocationRequest;e.pos<n;){var r=e.uint32();r>>>3==1?o.name=e.string():e.skipType(7&r)}return o},G.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},G.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.name&&e.hasOwnProperty(\"name\")&&!u.isString(e.name)?\"name: string expected\":null},G.fromObject=function(e){var t;return e instanceof c.google.cloud.location.GetLocationRequest?e:(t=new c.google.cloud.location.GetLocationRequest,null!=e.name&&(t.name=String(e.name)),t)},G.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\"),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),n},G.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},G),e.Location=(p.prototype.name=\"\",p.prototype.locationId=\"\",p.prototype.displayName=\"\",p.prototype.labels=u.emptyObject,p.prototype.metadata=null,p.create=function(e){return new p(e)},p.encode=function(e,t){if(t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.labels&&Object.hasOwnProperty.call(e,\"labels\"))for(var n=Object.keys(e.labels),o=0;o<n.length;++o)t.uint32(18).fork().uint32(10).string(n[o]).uint32(18).string(e.labels[n[o]]).ldelim();return null!=e.metadata&&Object.hasOwnProperty.call(e,\"metadata\")&&c.google.protobuf.Any.encode(e.metadata,t.uint32(26).fork()).ldelim(),null!=e.locationId&&Object.hasOwnProperty.call(e,\"locationId\")&&t.uint32(34).string(e.locationId),null!=e.displayName&&Object.hasOwnProperty.call(e,\"displayName\")&&t.uint32(42).string(e.displayName),t},p.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},p.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.cloud.location.Location;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 4:o.locationId=e.string();break;case 5:o.displayName=e.string();break;case 2:o.labels===u.emptyObject&&(o.labels={});for(var i=e.uint32()+e.pos,a=\"\",p=\"\";e.pos<i;){var l=e.uint32();switch(l>>>3){case 1:a=e.string();break;case 2:p=e.string();break;default:e.skipType(7&l)}}o.labels[a]=p;break;case 3:o.metadata=c.google.protobuf.Any.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},p.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},p.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!u.isString(e.name))return\"name: string expected\";if(null!=e.locationId&&e.hasOwnProperty(\"locationId\")&&!u.isString(e.locationId))return\"locationId: string expected\";if(null!=e.displayName&&e.hasOwnProperty(\"displayName\")&&!u.isString(e.displayName))return\"displayName: string expected\";if(null!=e.labels&&e.hasOwnProperty(\"labels\")){if(!u.isObject(e.labels))return\"labels: object expected\";for(var t=Object.keys(e.labels),n=0;n<t.length;++n)if(!u.isString(e.labels[t[n]]))return\"labels: string{k:string} expected\"}if(null!=e.metadata&&e.hasOwnProperty(\"metadata\")){var o=c.google.protobuf.Any.verify(e.metadata);if(o)return\"metadata.\"+o}return null},p.fromObject=function(e){if(e instanceof c.google.cloud.location.Location)return e;var t=new c.google.cloud.location.Location;if(null!=e.name&&(t.name=String(e.name)),null!=e.locationId&&(t.locationId=String(e.locationId)),null!=e.displayName&&(t.displayName=String(e.displayName)),e.labels){if(\"object\"!=typeof e.labels)throw TypeError(\".google.cloud.location.Location.labels: object expected\");t.labels={};for(var n=Object.keys(e.labels),o=0;o<n.length;++o)t.labels[n[o]]=String(e.labels[n[o]])}if(null!=e.metadata){if(\"object\"!=typeof e.metadata)throw TypeError(\".google.cloud.location.Location.metadata: object expected\");t.metadata=c.google.protobuf.Any.fromObject(e.metadata)}return t},p.toObject=function(e,t){var n,o={};if(((t=t||{}).objects||t.defaults)&&(o.labels={}),t.defaults&&(o.name=\"\",o.metadata=null,o.locationId=\"\",o.displayName=\"\"),null!=e.name&&e.hasOwnProperty(\"name\")&&(o.name=e.name),e.labels&&(n=Object.keys(e.labels)).length){o.labels={};for(var r=0;r<n.length;++r)o.labels[n[r]]=e.labels[n[r]]}return null!=e.metadata&&e.hasOwnProperty(\"metadata\")&&(o.metadata=c.google.protobuf.Any.toObject(e.metadata,t)),null!=e.locationId&&e.hasOwnProperty(\"locationId\")&&(o.locationId=e.locationId),null!=e.displayName&&e.hasOwnProperty(\"displayName\")&&(o.displayName=e.displayName),o},p.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},p),e),n),F.api=((e={}).Http=(l.prototype.rules=u.emptyArray,l.prototype.fullyDecodeReservedExpansion=!1,l.create=function(e){return new l(e)},l.encode=function(e,t){if(t=t||r.create(),null!=e.rules&&e.rules.length)for(var n=0;n<e.rules.length;++n)c.google.api.HttpRule.encode(e.rules[n],t.uint32(10).fork()).ldelim();return null!=e.fullyDecodeReservedExpansion&&Object.hasOwnProperty.call(e,\"fullyDecodeReservedExpansion\")&&t.uint32(16).bool(e.fullyDecodeReservedExpansion),t},l.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},l.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.api.Http;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.rules&&o.rules.length||(o.rules=[]),o.rules.push(c.google.api.HttpRule.decode(e,e.uint32()));break;case 2:o.fullyDecodeReservedExpansion=e.bool();break;default:e.skipType(7&r)}}return o},l.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},l.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.rules&&e.hasOwnProperty(\"rules\")){if(!Array.isArray(e.rules))return\"rules: array expected\";for(var t=0;t<e.rules.length;++t){var n=c.google.api.HttpRule.verify(e.rules[t]);if(n)return\"rules.\"+n}}return null!=e.fullyDecodeReservedExpansion&&e.hasOwnProperty(\"fullyDecodeReservedExpansion\")&&\"boolean\"!=typeof e.fullyDecodeReservedExpansion?\"fullyDecodeReservedExpansion: boolean expected\":null},l.fromObject=function(e){if(e instanceof c.google.api.Http)return e;var t=new c.google.api.Http;if(e.rules){if(!Array.isArray(e.rules))throw TypeError(\".google.api.Http.rules: array expected\");t.rules=[];for(var n=0;n<e.rules.length;++n){if(\"object\"!=typeof e.rules[n])throw TypeError(\".google.api.Http.rules: object expected\");t.rules[n]=c.google.api.HttpRule.fromObject(e.rules[n])}}return null!=e.fullyDecodeReservedExpansion&&(t.fullyDecodeReservedExpansion=Boolean(e.fullyDecodeReservedExpansion)),t},l.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.rules=[]),t.defaults&&(n.fullyDecodeReservedExpansion=!1),e.rules&&e.rules.length){n.rules=[];for(var o=0;o<e.rules.length;++o)n.rules[o]=c.google.api.HttpRule.toObject(e.rules[o],t)}return null!=e.fullyDecodeReservedExpansion&&e.hasOwnProperty(\"fullyDecodeReservedExpansion\")&&(n.fullyDecodeReservedExpansion=e.fullyDecodeReservedExpansion),n},l.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},l),e.HttpRule=(d.prototype.selector=\"\",d.prototype.get=null,d.prototype.put=null,d.prototype.post=null,d.prototype.delete=null,d.prototype.patch=null,d.prototype.custom=null,d.prototype.body=\"\",d.prototype.responseBody=\"\",d.prototype.additionalBindings=u.emptyArray,Object.defineProperty(d.prototype,\"pattern\",{get:u.oneOfGetter(n=[\"get\",\"put\",\"post\",\"delete\",\"patch\",\"custom\"]),set:u.oneOfSetter(n)}),d.create=function(e){return new d(e)},d.encode=function(e,t){if(t=t||r.create(),null!=e.selector&&Object.hasOwnProperty.call(e,\"selector\")&&t.uint32(10).string(e.selector),null!=e.get&&Object.hasOwnProperty.call(e,\"get\")&&t.uint32(18).string(e.get),null!=e.put&&Object.hasOwnProperty.call(e,\"put\")&&t.uint32(26).string(e.put),null!=e.post&&Object.hasOwnProperty.call(e,\"post\")&&t.uint32(34).string(e.post),null!=e.delete&&Object.hasOwnProperty.call(e,\"delete\")&&t.uint32(42).string(e.delete),null!=e.patch&&Object.hasOwnProperty.call(e,\"patch\")&&t.uint32(50).string(e.patch),null!=e.body&&Object.hasOwnProperty.call(e,\"body\")&&t.uint32(58).string(e.body),null!=e.custom&&Object.hasOwnProperty.call(e,\"custom\")&&c.google.api.CustomHttpPattern.encode(e.custom,t.uint32(66).fork()).ldelim(),null!=e.additionalBindings&&e.additionalBindings.length)for(var n=0;n<e.additionalBindings.length;++n)c.google.api.HttpRule.encode(e.additionalBindings[n],t.uint32(90).fork()).ldelim();return null!=e.responseBody&&Object.hasOwnProperty.call(e,\"responseBody\")&&t.uint32(98).string(e.responseBody),t},d.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},d.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.api.HttpRule;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.selector=e.string();break;case 2:o.get=e.string();break;case 3:o.put=e.string();break;case 4:o.post=e.string();break;case 5:o.delete=e.string();break;case 6:o.patch=e.string();break;case 8:o.custom=c.google.api.CustomHttpPattern.decode(e,e.uint32());break;case 7:o.body=e.string();break;case 12:o.responseBody=e.string();break;case 11:o.additionalBindings&&o.additionalBindings.length||(o.additionalBindings=[]),o.additionalBindings.push(c.google.api.HttpRule.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return o},d.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},d.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";var t={};if(null!=e.selector&&e.hasOwnProperty(\"selector\")&&!u.isString(e.selector))return\"selector: string expected\";if(null!=e.get&&e.hasOwnProperty(\"get\")&&(t.pattern=1,!u.isString(e.get)))return\"get: string expected\";if(null!=e.put&&e.hasOwnProperty(\"put\")){if(1===t.pattern)return\"pattern: multiple values\";if(t.pattern=1,!u.isString(e.put))return\"put: string expected\"}if(null!=e.post&&e.hasOwnProperty(\"post\")){if(1===t.pattern)return\"pattern: multiple values\";if(t.pattern=1,!u.isString(e.post))return\"post: string expected\"}if(null!=e.delete&&e.hasOwnProperty(\"delete\")){if(1===t.pattern)return\"pattern: multiple values\";if(t.pattern=1,!u.isString(e.delete))return\"delete: string expected\"}if(null!=e.patch&&e.hasOwnProperty(\"patch\")){if(1===t.pattern)return\"pattern: multiple values\";if(t.pattern=1,!u.isString(e.patch))return\"patch: string expected\"}if(null!=e.custom&&e.hasOwnProperty(\"custom\")){if(1===t.pattern)return\"pattern: multiple values\";if(t.pattern=1,n=c.google.api.CustomHttpPattern.verify(e.custom))return\"custom.\"+n}if(null!=e.body&&e.hasOwnProperty(\"body\")&&!u.isString(e.body))return\"body: string expected\";if(null!=e.responseBody&&e.hasOwnProperty(\"responseBody\")&&!u.isString(e.responseBody))return\"responseBody: string expected\";if(null!=e.additionalBindings&&e.hasOwnProperty(\"additionalBindings\")){if(!Array.isArray(e.additionalBindings))return\"additionalBindings: array expected\";for(var n,o=0;o<e.additionalBindings.length;++o)if(n=c.google.api.HttpRule.verify(e.additionalBindings[o]))return\"additionalBindings.\"+n}return null},d.fromObject=function(e){if(e instanceof c.google.api.HttpRule)return e;var t=new c.google.api.HttpRule;if(null!=e.selector&&(t.selector=String(e.selector)),null!=e.get&&(t.get=String(e.get)),null!=e.put&&(t.put=String(e.put)),null!=e.post&&(t.post=String(e.post)),null!=e.delete&&(t.delete=String(e.delete)),null!=e.patch&&(t.patch=String(e.patch)),null!=e.custom){if(\"object\"!=typeof e.custom)throw TypeError(\".google.api.HttpRule.custom: object expected\");t.custom=c.google.api.CustomHttpPattern.fromObject(e.custom)}if(null!=e.body&&(t.body=String(e.body)),null!=e.responseBody&&(t.responseBody=String(e.responseBody)),e.additionalBindings){if(!Array.isArray(e.additionalBindings))throw TypeError(\".google.api.HttpRule.additionalBindings: array expected\");t.additionalBindings=[];for(var n=0;n<e.additionalBindings.length;++n){if(\"object\"!=typeof e.additionalBindings[n])throw TypeError(\".google.api.HttpRule.additionalBindings: object expected\");t.additionalBindings[n]=c.google.api.HttpRule.fromObject(e.additionalBindings[n])}}return t},d.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.additionalBindings=[]),t.defaults&&(n.selector=\"\",n.body=\"\",n.responseBody=\"\"),null!=e.selector&&e.hasOwnProperty(\"selector\")&&(n.selector=e.selector),null!=e.get&&e.hasOwnProperty(\"get\")&&(n.get=e.get,t.oneofs)&&(n.pattern=\"get\"),null!=e.put&&e.hasOwnProperty(\"put\")&&(n.put=e.put,t.oneofs)&&(n.pattern=\"put\"),null!=e.post&&e.hasOwnProperty(\"post\")&&(n.post=e.post,t.oneofs)&&(n.pattern=\"post\"),null!=e.delete&&e.hasOwnProperty(\"delete\")&&(n.delete=e.delete,t.oneofs)&&(n.pattern=\"delete\"),null!=e.patch&&e.hasOwnProperty(\"patch\")&&(n.patch=e.patch,t.oneofs)&&(n.pattern=\"patch\"),null!=e.body&&e.hasOwnProperty(\"body\")&&(n.body=e.body),null!=e.custom&&e.hasOwnProperty(\"custom\")&&(n.custom=c.google.api.CustomHttpPattern.toObject(e.custom,t),t.oneofs)&&(n.pattern=\"custom\"),e.additionalBindings&&e.additionalBindings.length){n.additionalBindings=[];for(var o=0;o<e.additionalBindings.length;++o)n.additionalBindings[o]=c.google.api.HttpRule.toObject(e.additionalBindings[o],t)}return null!=e.responseBody&&e.hasOwnProperty(\"responseBody\")&&(n.responseBody=e.responseBody),n},d.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},d),e.CustomHttpPattern=(g.prototype.kind=\"\",g.prototype.path=\"\",g.create=function(e){return new g(e)},g.encode=function(e,t){return t=t||r.create(),null!=e.kind&&Object.hasOwnProperty.call(e,\"kind\")&&t.uint32(10).string(e.kind),null!=e.path&&Object.hasOwnProperty.call(e,\"path\")&&t.uint32(18).string(e.path),t},g.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},g.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.api.CustomHttpPattern;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.kind=e.string();break;case 2:o.path=e.string();break;default:e.skipType(7&r)}}return o},g.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},g.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.kind&&e.hasOwnProperty(\"kind\")&&!u.isString(e.kind)?\"kind: string expected\":null!=e.path&&e.hasOwnProperty(\"path\")&&!u.isString(e.path)?\"path: string expected\":null},g.fromObject=function(e){var t;return e instanceof c.google.api.CustomHttpPattern?e:(t=new c.google.api.CustomHttpPattern,null!=e.kind&&(t.kind=String(e.kind)),null!=e.path&&(t.path=String(e.path)),t)},g.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.kind=\"\",n.path=\"\"),null!=e.kind&&e.hasOwnProperty(\"kind\")&&(n.kind=e.kind),null!=e.path&&e.hasOwnProperty(\"path\")&&(n.path=e.path),n},g.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},g),e),F.protobuf=((n={}).FileDescriptorSet=(B.prototype.file=u.emptyArray,B.create=function(e){return new B(e)},B.encode=function(e,t){if(t=t||r.create(),null!=e.file&&e.file.length)for(var n=0;n<e.file.length;++n)c.google.protobuf.FileDescriptorProto.encode(e.file[n],t.uint32(10).fork()).ldelim();return t},B.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},B.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.FileDescriptorSet;e.pos<n;){var r=e.uint32();r>>>3==1?(o.file&&o.file.length||(o.file=[]),o.file.push(c.google.protobuf.FileDescriptorProto.decode(e,e.uint32()))):e.skipType(7&r)}return o},B.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},B.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.file&&e.hasOwnProperty(\"file\")){if(!Array.isArray(e.file))return\"file: array expected\";for(var t=0;t<e.file.length;++t){var n=c.google.protobuf.FileDescriptorProto.verify(e.file[t]);if(n)return\"file.\"+n}}return null},B.fromObject=function(e){if(e instanceof c.google.protobuf.FileDescriptorSet)return e;var t=new c.google.protobuf.FileDescriptorSet;if(e.file){if(!Array.isArray(e.file))throw TypeError(\".google.protobuf.FileDescriptorSet.file: array expected\");t.file=[];for(var n=0;n<e.file.length;++n){if(\"object\"!=typeof e.file[n])throw TypeError(\".google.protobuf.FileDescriptorSet.file: object expected\");t.file[n]=c.google.protobuf.FileDescriptorProto.fromObject(e.file[n])}}return t},B.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.file=[]),e.file&&e.file.length){n.file=[];for(var o=0;o<e.file.length;++o)n.file[o]=c.google.protobuf.FileDescriptorProto.toObject(e.file[o],t)}return n},B.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},B),n.FileDescriptorProto=(f.prototype.name=\"\",f.prototype.package=\"\",f.prototype.dependency=u.emptyArray,f.prototype.publicDependency=u.emptyArray,f.prototype.weakDependency=u.emptyArray,f.prototype.messageType=u.emptyArray,f.prototype.enumType=u.emptyArray,f.prototype.service=u.emptyArray,f.prototype.extension=u.emptyArray,f.prototype.options=null,f.prototype.sourceCodeInfo=null,f.prototype.syntax=\"\",f.create=function(e){return new f(e)},f.encode=function(e,t){if(t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.package&&Object.hasOwnProperty.call(e,\"package\")&&t.uint32(18).string(e.package),null!=e.dependency&&e.dependency.length)for(var n=0;n<e.dependency.length;++n)t.uint32(26).string(e.dependency[n]);if(null!=e.messageType&&e.messageType.length)for(n=0;n<e.messageType.length;++n)c.google.protobuf.DescriptorProto.encode(e.messageType[n],t.uint32(34).fork()).ldelim();if(null!=e.enumType&&e.enumType.length)for(n=0;n<e.enumType.length;++n)c.google.protobuf.EnumDescriptorProto.encode(e.enumType[n],t.uint32(42).fork()).ldelim();if(null!=e.service&&e.service.length)for(n=0;n<e.service.length;++n)c.google.protobuf.ServiceDescriptorProto.encode(e.service[n],t.uint32(50).fork()).ldelim();if(null!=e.extension&&e.extension.length)for(n=0;n<e.extension.length;++n)c.google.protobuf.FieldDescriptorProto.encode(e.extension[n],t.uint32(58).fork()).ldelim();if(null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&c.google.protobuf.FileOptions.encode(e.options,t.uint32(66).fork()).ldelim(),null!=e.sourceCodeInfo&&Object.hasOwnProperty.call(e,\"sourceCodeInfo\")&&c.google.protobuf.SourceCodeInfo.encode(e.sourceCodeInfo,t.uint32(74).fork()).ldelim(),null!=e.publicDependency&&e.publicDependency.length)for(n=0;n<e.publicDependency.length;++n)t.uint32(80).int32(e.publicDependency[n]);if(null!=e.weakDependency&&e.weakDependency.length)for(n=0;n<e.weakDependency.length;++n)t.uint32(88).int32(e.weakDependency[n]);return null!=e.syntax&&Object.hasOwnProperty.call(e,\"syntax\")&&t.uint32(98).string(e.syntax),t},f.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},f.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.FileDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.package=e.string();break;case 3:o.dependency&&o.dependency.length||(o.dependency=[]),o.dependency.push(e.string());break;case 10:if(o.publicDependency&&o.publicDependency.length||(o.publicDependency=[]),2==(7&r))for(var i=e.uint32()+e.pos;e.pos<i;)o.publicDependency.push(e.int32());else o.publicDependency.push(e.int32());break;case 11:if(o.weakDependency&&o.weakDependency.length||(o.weakDependency=[]),2==(7&r))for(i=e.uint32()+e.pos;e.pos<i;)o.weakDependency.push(e.int32());else o.weakDependency.push(e.int32());break;case 4:o.messageType&&o.messageType.length||(o.messageType=[]),o.messageType.push(c.google.protobuf.DescriptorProto.decode(e,e.uint32()));break;case 5:o.enumType&&o.enumType.length||(o.enumType=[]),o.enumType.push(c.google.protobuf.EnumDescriptorProto.decode(e,e.uint32()));break;case 6:o.service&&o.service.length||(o.service=[]),o.service.push(c.google.protobuf.ServiceDescriptorProto.decode(e,e.uint32()));break;case 7:o.extension&&o.extension.length||(o.extension=[]),o.extension.push(c.google.protobuf.FieldDescriptorProto.decode(e,e.uint32()));break;case 8:o.options=c.google.protobuf.FileOptions.decode(e,e.uint32());break;case 9:o.sourceCodeInfo=c.google.protobuf.SourceCodeInfo.decode(e,e.uint32());break;case 12:o.syntax=e.string();break;default:e.skipType(7&r)}}return o},f.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},f.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!u.isString(e.name))return\"name: string expected\";if(null!=e.package&&e.hasOwnProperty(\"package\")&&!u.isString(e.package))return\"package: string expected\";if(null!=e.dependency&&e.hasOwnProperty(\"dependency\")){if(!Array.isArray(e.dependency))return\"dependency: array expected\";for(var t=0;t<e.dependency.length;++t)if(!u.isString(e.dependency[t]))return\"dependency: string[] expected\"}if(null!=e.publicDependency&&e.hasOwnProperty(\"publicDependency\")){if(!Array.isArray(e.publicDependency))return\"publicDependency: array expected\";for(t=0;t<e.publicDependency.length;++t)if(!u.isInteger(e.publicDependency[t]))return\"publicDependency: integer[] expected\"}if(null!=e.weakDependency&&e.hasOwnProperty(\"weakDependency\")){if(!Array.isArray(e.weakDependency))return\"weakDependency: array expected\";for(t=0;t<e.weakDependency.length;++t)if(!u.isInteger(e.weakDependency[t]))return\"weakDependency: integer[] expected\"}if(null!=e.messageType&&e.hasOwnProperty(\"messageType\")){if(!Array.isArray(e.messageType))return\"messageType: array expected\";for(t=0;t<e.messageType.length;++t)if(n=c.google.protobuf.DescriptorProto.verify(e.messageType[t]))return\"messageType.\"+n}if(null!=e.enumType&&e.hasOwnProperty(\"enumType\")){if(!Array.isArray(e.enumType))return\"enumType: array expected\";for(t=0;t<e.enumType.length;++t)if(n=c.google.protobuf.EnumDescriptorProto.verify(e.enumType[t]))return\"enumType.\"+n}if(null!=e.service&&e.hasOwnProperty(\"service\")){if(!Array.isArray(e.service))return\"service: array expected\";for(t=0;t<e.service.length;++t)if(n=c.google.protobuf.ServiceDescriptorProto.verify(e.service[t]))return\"service.\"+n}if(null!=e.extension&&e.hasOwnProperty(\"extension\")){if(!Array.isArray(e.extension))return\"extension: array expected\";for(t=0;t<e.extension.length;++t)if(n=c.google.protobuf.FieldDescriptorProto.verify(e.extension[t]))return\"extension.\"+n}var n;if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n=c.google.protobuf.FileOptions.verify(e.options)))return\"options.\"+n;if(null!=e.sourceCodeInfo&&e.hasOwnProperty(\"sourceCodeInfo\")&&(n=c.google.protobuf.SourceCodeInfo.verify(e.sourceCodeInfo)))return\"sourceCodeInfo.\"+n;return null!=e.syntax&&e.hasOwnProperty(\"syntax\")&&!u.isString(e.syntax)?\"syntax: string expected\":null},f.fromObject=function(e){if(e instanceof c.google.protobuf.FileDescriptorProto)return e;var t=new c.google.protobuf.FileDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),null!=e.package&&(t.package=String(e.package)),e.dependency){if(!Array.isArray(e.dependency))throw TypeError(\".google.protobuf.FileDescriptorProto.dependency: array expected\");t.dependency=[];for(var n=0;n<e.dependency.length;++n)t.dependency[n]=String(e.dependency[n])}if(e.publicDependency){if(!Array.isArray(e.publicDependency))throw TypeError(\".google.protobuf.FileDescriptorProto.publicDependency: array expected\");t.publicDependency=[];for(n=0;n<e.publicDependency.length;++n)t.publicDependency[n]=0|e.publicDependency[n]}if(e.weakDependency){if(!Array.isArray(e.weakDependency))throw TypeError(\".google.protobuf.FileDescriptorProto.weakDependency: array expected\");t.weakDependency=[];for(n=0;n<e.weakDependency.length;++n)t.weakDependency[n]=0|e.weakDependency[n]}if(e.messageType){if(!Array.isArray(e.messageType))throw TypeError(\".google.protobuf.FileDescriptorProto.messageType: array expected\");t.messageType=[];for(n=0;n<e.messageType.length;++n){if(\"object\"!=typeof e.messageType[n])throw TypeError(\".google.protobuf.FileDescriptorProto.messageType: object expected\");t.messageType[n]=c.google.protobuf.DescriptorProto.fromObject(e.messageType[n])}}if(e.enumType){if(!Array.isArray(e.enumType))throw TypeError(\".google.protobuf.FileDescriptorProto.enumType: array expected\");t.enumType=[];for(n=0;n<e.enumType.length;++n){if(\"object\"!=typeof e.enumType[n])throw TypeError(\".google.protobuf.FileDescriptorProto.enumType: object expected\");t.enumType[n]=c.google.protobuf.EnumDescriptorProto.fromObject(e.enumType[n])}}if(e.service){if(!Array.isArray(e.service))throw TypeError(\".google.protobuf.FileDescriptorProto.service: array expected\");t.service=[];for(n=0;n<e.service.length;++n){if(\"object\"!=typeof e.service[n])throw TypeError(\".google.protobuf.FileDescriptorProto.service: object expected\");t.service[n]=c.google.protobuf.ServiceDescriptorProto.fromObject(e.service[n])}}if(e.extension){if(!Array.isArray(e.extension))throw TypeError(\".google.protobuf.FileDescriptorProto.extension: array expected\");t.extension=[];for(n=0;n<e.extension.length;++n){if(\"object\"!=typeof e.extension[n])throw TypeError(\".google.protobuf.FileDescriptorProto.extension: object expected\");t.extension[n]=c.google.protobuf.FieldDescriptorProto.fromObject(e.extension[n])}}if(null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.FileDescriptorProto.options: object expected\");t.options=c.google.protobuf.FileOptions.fromObject(e.options)}if(null!=e.sourceCodeInfo){if(\"object\"!=typeof e.sourceCodeInfo)throw TypeError(\".google.protobuf.FileDescriptorProto.sourceCodeInfo: object expected\");t.sourceCodeInfo=c.google.protobuf.SourceCodeInfo.fromObject(e.sourceCodeInfo)}return null!=e.syntax&&(t.syntax=String(e.syntax)),t},f.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.dependency=[],n.messageType=[],n.enumType=[],n.service=[],n.extension=[],n.publicDependency=[],n.weakDependency=[]),t.defaults&&(n.name=\"\",n.package=\"\",n.options=null,n.sourceCodeInfo=null,n.syntax=\"\"),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.package&&e.hasOwnProperty(\"package\")&&(n.package=e.package),e.dependency&&e.dependency.length){n.dependency=[];for(var o=0;o<e.dependency.length;++o)n.dependency[o]=e.dependency[o]}if(e.messageType&&e.messageType.length){n.messageType=[];for(o=0;o<e.messageType.length;++o)n.messageType[o]=c.google.protobuf.DescriptorProto.toObject(e.messageType[o],t)}if(e.enumType&&e.enumType.length){n.enumType=[];for(o=0;o<e.enumType.length;++o)n.enumType[o]=c.google.protobuf.EnumDescriptorProto.toObject(e.enumType[o],t)}if(e.service&&e.service.length){n.service=[];for(o=0;o<e.service.length;++o)n.service[o]=c.google.protobuf.ServiceDescriptorProto.toObject(e.service[o],t)}if(e.extension&&e.extension.length){n.extension=[];for(o=0;o<e.extension.length;++o)n.extension[o]=c.google.protobuf.FieldDescriptorProto.toObject(e.extension[o],t)}if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=c.google.protobuf.FileOptions.toObject(e.options,t)),null!=e.sourceCodeInfo&&e.hasOwnProperty(\"sourceCodeInfo\")&&(n.sourceCodeInfo=c.google.protobuf.SourceCodeInfo.toObject(e.sourceCodeInfo,t)),e.publicDependency&&e.publicDependency.length){n.publicDependency=[];for(o=0;o<e.publicDependency.length;++o)n.publicDependency[o]=e.publicDependency[o]}if(e.weakDependency&&e.weakDependency.length){n.weakDependency=[];for(o=0;o<e.weakDependency.length;++o)n.weakDependency[o]=e.weakDependency[o]}return null!=e.syntax&&e.hasOwnProperty(\"syntax\")&&(n.syntax=e.syntax),n},f.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},f),n.DescriptorProto=(y.prototype.name=\"\",y.prototype.field=u.emptyArray,y.prototype.extension=u.emptyArray,y.prototype.nestedType=u.emptyArray,y.prototype.enumType=u.emptyArray,y.prototype.extensionRange=u.emptyArray,y.prototype.oneofDecl=u.emptyArray,y.prototype.options=null,y.prototype.reservedRange=u.emptyArray,y.prototype.reservedName=u.emptyArray,y.create=function(e){return new y(e)},y.encode=function(e,t){if(t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.field&&e.field.length)for(var n=0;n<e.field.length;++n)c.google.protobuf.FieldDescriptorProto.encode(e.field[n],t.uint32(18).fork()).ldelim();if(null!=e.nestedType&&e.nestedType.length)for(n=0;n<e.nestedType.length;++n)c.google.protobuf.DescriptorProto.encode(e.nestedType[n],t.uint32(26).fork()).ldelim();if(null!=e.enumType&&e.enumType.length)for(n=0;n<e.enumType.length;++n)c.google.protobuf.EnumDescriptorProto.encode(e.enumType[n],t.uint32(34).fork()).ldelim();if(null!=e.extensionRange&&e.extensionRange.length)for(n=0;n<e.extensionRange.length;++n)c.google.protobuf.DescriptorProto.ExtensionRange.encode(e.extensionRange[n],t.uint32(42).fork()).ldelim();if(null!=e.extension&&e.extension.length)for(n=0;n<e.extension.length;++n)c.google.protobuf.FieldDescriptorProto.encode(e.extension[n],t.uint32(50).fork()).ldelim();if(null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&c.google.protobuf.MessageOptions.encode(e.options,t.uint32(58).fork()).ldelim(),null!=e.oneofDecl&&e.oneofDecl.length)for(n=0;n<e.oneofDecl.length;++n)c.google.protobuf.OneofDescriptorProto.encode(e.oneofDecl[n],t.uint32(66).fork()).ldelim();if(null!=e.reservedRange&&e.reservedRange.length)for(n=0;n<e.reservedRange.length;++n)c.google.protobuf.DescriptorProto.ReservedRange.encode(e.reservedRange[n],t.uint32(74).fork()).ldelim();if(null!=e.reservedName&&e.reservedName.length)for(n=0;n<e.reservedName.length;++n)t.uint32(82).string(e.reservedName[n]);return t},y.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},y.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.DescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.field&&o.field.length||(o.field=[]),o.field.push(c.google.protobuf.FieldDescriptorProto.decode(e,e.uint32()));break;case 6:o.extension&&o.extension.length||(o.extension=[]),o.extension.push(c.google.protobuf.FieldDescriptorProto.decode(e,e.uint32()));break;case 3:o.nestedType&&o.nestedType.length||(o.nestedType=[]),o.nestedType.push(c.google.protobuf.DescriptorProto.decode(e,e.uint32()));break;case 4:o.enumType&&o.enumType.length||(o.enumType=[]),o.enumType.push(c.google.protobuf.EnumDescriptorProto.decode(e,e.uint32()));break;case 5:o.extensionRange&&o.extensionRange.length||(o.extensionRange=[]),o.extensionRange.push(c.google.protobuf.DescriptorProto.ExtensionRange.decode(e,e.uint32()));break;case 8:o.oneofDecl&&o.oneofDecl.length||(o.oneofDecl=[]),o.oneofDecl.push(c.google.protobuf.OneofDescriptorProto.decode(e,e.uint32()));break;case 7:o.options=c.google.protobuf.MessageOptions.decode(e,e.uint32());break;case 9:o.reservedRange&&o.reservedRange.length||(o.reservedRange=[]),o.reservedRange.push(c.google.protobuf.DescriptorProto.ReservedRange.decode(e,e.uint32()));break;case 10:o.reservedName&&o.reservedName.length||(o.reservedName=[]),o.reservedName.push(e.string());break;default:e.skipType(7&r)}}return o},y.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},y.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!u.isString(e.name))return\"name: string expected\";if(null!=e.field&&e.hasOwnProperty(\"field\")){if(!Array.isArray(e.field))return\"field: array expected\";for(var t=0;t<e.field.length;++t)if(n=c.google.protobuf.FieldDescriptorProto.verify(e.field[t]))return\"field.\"+n}if(null!=e.extension&&e.hasOwnProperty(\"extension\")){if(!Array.isArray(e.extension))return\"extension: array expected\";for(t=0;t<e.extension.length;++t)if(n=c.google.protobuf.FieldDescriptorProto.verify(e.extension[t]))return\"extension.\"+n}if(null!=e.nestedType&&e.hasOwnProperty(\"nestedType\")){if(!Array.isArray(e.nestedType))return\"nestedType: array expected\";for(t=0;t<e.nestedType.length;++t)if(n=c.google.protobuf.DescriptorProto.verify(e.nestedType[t]))return\"nestedType.\"+n}if(null!=e.enumType&&e.hasOwnProperty(\"enumType\")){if(!Array.isArray(e.enumType))return\"enumType: array expected\";for(t=0;t<e.enumType.length;++t)if(n=c.google.protobuf.EnumDescriptorProto.verify(e.enumType[t]))return\"enumType.\"+n}if(null!=e.extensionRange&&e.hasOwnProperty(\"extensionRange\")){if(!Array.isArray(e.extensionRange))return\"extensionRange: array expected\";for(t=0;t<e.extensionRange.length;++t)if(n=c.google.protobuf.DescriptorProto.ExtensionRange.verify(e.extensionRange[t]))return\"extensionRange.\"+n}if(null!=e.oneofDecl&&e.hasOwnProperty(\"oneofDecl\")){if(!Array.isArray(e.oneofDecl))return\"oneofDecl: array expected\";for(t=0;t<e.oneofDecl.length;++t)if(n=c.google.protobuf.OneofDescriptorProto.verify(e.oneofDecl[t]))return\"oneofDecl.\"+n}if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n=c.google.protobuf.MessageOptions.verify(e.options)))return\"options.\"+n;if(null!=e.reservedRange&&e.hasOwnProperty(\"reservedRange\")){if(!Array.isArray(e.reservedRange))return\"reservedRange: array expected\";for(var n,t=0;t<e.reservedRange.length;++t)if(n=c.google.protobuf.DescriptorProto.ReservedRange.verify(e.reservedRange[t]))return\"reservedRange.\"+n}if(null!=e.reservedName&&e.hasOwnProperty(\"reservedName\")){if(!Array.isArray(e.reservedName))return\"reservedName: array expected\";for(t=0;t<e.reservedName.length;++t)if(!u.isString(e.reservedName[t]))return\"reservedName: string[] expected\"}return null},y.fromObject=function(e){if(e instanceof c.google.protobuf.DescriptorProto)return e;var t=new c.google.protobuf.DescriptorProto;if(null!=e.name&&(t.name=String(e.name)),e.field){if(!Array.isArray(e.field))throw TypeError(\".google.protobuf.DescriptorProto.field: array expected\");t.field=[];for(var n=0;n<e.field.length;++n){if(\"object\"!=typeof e.field[n])throw TypeError(\".google.protobuf.DescriptorProto.field: object expected\");t.field[n]=c.google.protobuf.FieldDescriptorProto.fromObject(e.field[n])}}if(e.extension){if(!Array.isArray(e.extension))throw TypeError(\".google.protobuf.DescriptorProto.extension: array expected\");t.extension=[];for(n=0;n<e.extension.length;++n){if(\"object\"!=typeof e.extension[n])throw TypeError(\".google.protobuf.DescriptorProto.extension: object expected\");t.extension[n]=c.google.protobuf.FieldDescriptorProto.fromObject(e.extension[n])}}if(e.nestedType){if(!Array.isArray(e.nestedType))throw TypeError(\".google.protobuf.DescriptorProto.nestedType: array expected\");t.nestedType=[];for(n=0;n<e.nestedType.length;++n){if(\"object\"!=typeof e.nestedType[n])throw TypeError(\".google.protobuf.DescriptorProto.nestedType: object expected\");t.nestedType[n]=c.google.protobuf.DescriptorProto.fromObject(e.nestedType[n])}}if(e.enumType){if(!Array.isArray(e.enumType))throw TypeError(\".google.protobuf.DescriptorProto.enumType: array expected\");t.enumType=[];for(n=0;n<e.enumType.length;++n){if(\"object\"!=typeof e.enumType[n])throw TypeError(\".google.protobuf.DescriptorProto.enumType: object expected\");t.enumType[n]=c.google.protobuf.EnumDescriptorProto.fromObject(e.enumType[n])}}if(e.extensionRange){if(!Array.isArray(e.extensionRange))throw TypeError(\".google.protobuf.DescriptorProto.extensionRange: array expected\");t.extensionRange=[];for(n=0;n<e.extensionRange.length;++n){if(\"object\"!=typeof e.extensionRange[n])throw TypeError(\".google.protobuf.DescriptorProto.extensionRange: object expected\");t.extensionRange[n]=c.google.protobuf.DescriptorProto.ExtensionRange.fromObject(e.extensionRange[n])}}if(e.oneofDecl){if(!Array.isArray(e.oneofDecl))throw TypeError(\".google.protobuf.DescriptorProto.oneofDecl: array expected\");t.oneofDecl=[];for(n=0;n<e.oneofDecl.length;++n){if(\"object\"!=typeof e.oneofDecl[n])throw TypeError(\".google.protobuf.DescriptorProto.oneofDecl: object expected\");t.oneofDecl[n]=c.google.protobuf.OneofDescriptorProto.fromObject(e.oneofDecl[n])}}if(null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.DescriptorProto.options: object expected\");t.options=c.google.protobuf.MessageOptions.fromObject(e.options)}if(e.reservedRange){if(!Array.isArray(e.reservedRange))throw TypeError(\".google.protobuf.DescriptorProto.reservedRange: array expected\");t.reservedRange=[];for(n=0;n<e.reservedRange.length;++n){if(\"object\"!=typeof e.reservedRange[n])throw TypeError(\".google.protobuf.DescriptorProto.reservedRange: object expected\");t.reservedRange[n]=c.google.protobuf.DescriptorProto.ReservedRange.fromObject(e.reservedRange[n])}}if(e.reservedName){if(!Array.isArray(e.reservedName))throw TypeError(\".google.protobuf.DescriptorProto.reservedName: array expected\");t.reservedName=[];for(n=0;n<e.reservedName.length;++n)t.reservedName[n]=String(e.reservedName[n])}return t},y.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.field=[],n.nestedType=[],n.enumType=[],n.extensionRange=[],n.extension=[],n.oneofDecl=[],n.reservedRange=[],n.reservedName=[]),t.defaults&&(n.name=\"\",n.options=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),e.field&&e.field.length){n.field=[];for(var o=0;o<e.field.length;++o)n.field[o]=c.google.protobuf.FieldDescriptorProto.toObject(e.field[o],t)}if(e.nestedType&&e.nestedType.length){n.nestedType=[];for(o=0;o<e.nestedType.length;++o)n.nestedType[o]=c.google.protobuf.DescriptorProto.toObject(e.nestedType[o],t)}if(e.enumType&&e.enumType.length){n.enumType=[];for(o=0;o<e.enumType.length;++o)n.enumType[o]=c.google.protobuf.EnumDescriptorProto.toObject(e.enumType[o],t)}if(e.extensionRange&&e.extensionRange.length){n.extensionRange=[];for(o=0;o<e.extensionRange.length;++o)n.extensionRange[o]=c.google.protobuf.DescriptorProto.ExtensionRange.toObject(e.extensionRange[o],t)}if(e.extension&&e.extension.length){n.extension=[];for(o=0;o<e.extension.length;++o)n.extension[o]=c.google.protobuf.FieldDescriptorProto.toObject(e.extension[o],t)}if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=c.google.protobuf.MessageOptions.toObject(e.options,t)),e.oneofDecl&&e.oneofDecl.length){n.oneofDecl=[];for(o=0;o<e.oneofDecl.length;++o)n.oneofDecl[o]=c.google.protobuf.OneofDescriptorProto.toObject(e.oneofDecl[o],t)}if(e.reservedRange&&e.reservedRange.length){n.reservedRange=[];for(o=0;o<e.reservedRange.length;++o)n.reservedRange[o]=c.google.protobuf.DescriptorProto.ReservedRange.toObject(e.reservedRange[o],t)}if(e.reservedName&&e.reservedName.length){n.reservedName=[];for(o=0;o<e.reservedName.length;++o)n.reservedName[o]=e.reservedName[o]}return n},y.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},y.ExtensionRange=(h.prototype.start=0,h.prototype.end=0,h.prototype.options=null,h.create=function(e){return new h(e)},h.encode=function(e,t){return t=t||r.create(),null!=e.start&&Object.hasOwnProperty.call(e,\"start\")&&t.uint32(8).int32(e.start),null!=e.end&&Object.hasOwnProperty.call(e,\"end\")&&t.uint32(16).int32(e.end),null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&c.google.protobuf.ExtensionRangeOptions.encode(e.options,t.uint32(26).fork()).ldelim(),t},h.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},h.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.DescriptorProto.ExtensionRange;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.start=e.int32();break;case 2:o.end=e.int32();break;case 3:o.options=c.google.protobuf.ExtensionRangeOptions.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},h.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},h.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.start&&e.hasOwnProperty(\"start\")&&!u.isInteger(e.start))return\"start: integer expected\";if(null!=e.end&&e.hasOwnProperty(\"end\")&&!u.isInteger(e.end))return\"end: integer expected\";if(null!=e.options&&e.hasOwnProperty(\"options\")){e=c.google.protobuf.ExtensionRangeOptions.verify(e.options);if(e)return\"options.\"+e}return null},h.fromObject=function(e){if(e instanceof c.google.protobuf.DescriptorProto.ExtensionRange)return e;var t=new c.google.protobuf.DescriptorProto.ExtensionRange;if(null!=e.start&&(t.start=0|e.start),null!=e.end&&(t.end=0|e.end),null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.DescriptorProto.ExtensionRange.options: object expected\");t.options=c.google.protobuf.ExtensionRangeOptions.fromObject(e.options)}return t},h.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.start=0,n.end=0,n.options=null),null!=e.start&&e.hasOwnProperty(\"start\")&&(n.start=e.start),null!=e.end&&e.hasOwnProperty(\"end\")&&(n.end=e.end),null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=c.google.protobuf.ExtensionRangeOptions.toObject(e.options,t)),n},h.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},h),y.ReservedRange=(b.prototype.start=0,b.prototype.end=0,b.create=function(e){return new b(e)},b.encode=function(e,t){return t=t||r.create(),null!=e.start&&Object.hasOwnProperty.call(e,\"start\")&&t.uint32(8).int32(e.start),null!=e.end&&Object.hasOwnProperty.call(e,\"end\")&&t.uint32(16).int32(e.end),t},b.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},b.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.DescriptorProto.ReservedRange;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.start=e.int32();break;case 2:o.end=e.int32();break;default:e.skipType(7&r)}}return o},b.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},b.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.start&&e.hasOwnProperty(\"start\")&&!u.isInteger(e.start)?\"start: integer expected\":null!=e.end&&e.hasOwnProperty(\"end\")&&!u.isInteger(e.end)?\"end: integer expected\":null},b.fromObject=function(e){var t;return e instanceof c.google.protobuf.DescriptorProto.ReservedRange?e:(t=new c.google.protobuf.DescriptorProto.ReservedRange,null!=e.start&&(t.start=0|e.start),null!=e.end&&(t.end=0|e.end),t)},b.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.start=0,n.end=0),null!=e.start&&e.hasOwnProperty(\"start\")&&(n.start=e.start),null!=e.end&&e.hasOwnProperty(\"end\")&&(n.end=e.end),n},b.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},b),y),n.ExtensionRangeOptions=(U.prototype.uninterpretedOption=u.emptyArray,U.create=function(e){return new U(e)},U.encode=function(e,t){if(t=t||r.create(),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)c.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return t},U.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},U.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.ExtensionRangeOptions;e.pos<n;){var r=e.uint32();r>>>3==999?(o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(c.google.protobuf.UninterpretedOption.decode(e,e.uint32()))):e.skipType(7&r)}return o},U.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},U.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=c.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null},U.fromObject=function(e){if(e instanceof c.google.protobuf.ExtensionRangeOptions)return e;var t=new c.google.protobuf.ExtensionRangeOptions;if(e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.ExtensionRangeOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.ExtensionRangeOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=c.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return t},U.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=c.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return n},U.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},U),n.FieldDescriptorProto=(O.prototype.name=\"\",O.prototype.number=0,O.prototype.label=1,O.prototype.type=1,O.prototype.typeName=\"\",O.prototype.extendee=\"\",O.prototype.defaultValue=\"\",O.prototype.oneofIndex=0,O.prototype.jsonName=\"\",O.prototype.options=null,O.prototype.proto3Optional=!1,O.create=function(e){return new O(e)},O.encode=function(e,t){return t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.extendee&&Object.hasOwnProperty.call(e,\"extendee\")&&t.uint32(18).string(e.extendee),null!=e.number&&Object.hasOwnProperty.call(e,\"number\")&&t.uint32(24).int32(e.number),null!=e.label&&Object.hasOwnProperty.call(e,\"label\")&&t.uint32(32).int32(e.label),null!=e.type&&Object.hasOwnProperty.call(e,\"type\")&&t.uint32(40).int32(e.type),null!=e.typeName&&Object.hasOwnProperty.call(e,\"typeName\")&&t.uint32(50).string(e.typeName),null!=e.defaultValue&&Object.hasOwnProperty.call(e,\"defaultValue\")&&t.uint32(58).string(e.defaultValue),null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&c.google.protobuf.FieldOptions.encode(e.options,t.uint32(66).fork()).ldelim(),null!=e.oneofIndex&&Object.hasOwnProperty.call(e,\"oneofIndex\")&&t.uint32(72).int32(e.oneofIndex),null!=e.jsonName&&Object.hasOwnProperty.call(e,\"jsonName\")&&t.uint32(82).string(e.jsonName),null!=e.proto3Optional&&Object.hasOwnProperty.call(e,\"proto3Optional\")&&t.uint32(136).bool(e.proto3Optional),t},O.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},O.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.FieldDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 3:o.number=e.int32();break;case 4:o.label=e.int32();break;case 5:o.type=e.int32();break;case 6:o.typeName=e.string();break;case 2:o.extendee=e.string();break;case 7:o.defaultValue=e.string();break;case 9:o.oneofIndex=e.int32();break;case 10:o.jsonName=e.string();break;case 8:o.options=c.google.protobuf.FieldOptions.decode(e,e.uint32());break;case 17:o.proto3Optional=e.bool();break;default:e.skipType(7&r)}}return o},O.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},O.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!u.isString(e.name))return\"name: string expected\";if(null!=e.number&&e.hasOwnProperty(\"number\")&&!u.isInteger(e.number))return\"number: integer expected\";if(null!=e.label&&e.hasOwnProperty(\"label\"))switch(e.label){default:return\"label: enum value expected\";case 1:case 2:case 3:}if(null!=e.type&&e.hasOwnProperty(\"type\"))switch(e.type){default:return\"type: enum value expected\";case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:case 16:case 17:case 18:}if(null!=e.typeName&&e.hasOwnProperty(\"typeName\")&&!u.isString(e.typeName))return\"typeName: string expected\";if(null!=e.extendee&&e.hasOwnProperty(\"extendee\")&&!u.isString(e.extendee))return\"extendee: string expected\";if(null!=e.defaultValue&&e.hasOwnProperty(\"defaultValue\")&&!u.isString(e.defaultValue))return\"defaultValue: string expected\";if(null!=e.oneofIndex&&e.hasOwnProperty(\"oneofIndex\")&&!u.isInteger(e.oneofIndex))return\"oneofIndex: integer expected\";if(null!=e.jsonName&&e.hasOwnProperty(\"jsonName\")&&!u.isString(e.jsonName))return\"jsonName: string expected\";if(null!=e.options&&e.hasOwnProperty(\"options\")){var t=c.google.protobuf.FieldOptions.verify(e.options);if(t)return\"options.\"+t}return null!=e.proto3Optional&&e.hasOwnProperty(\"proto3Optional\")&&\"boolean\"!=typeof e.proto3Optional?\"proto3Optional: boolean expected\":null},O.fromObject=function(e){if(e instanceof c.google.protobuf.FieldDescriptorProto)return e;var t=new c.google.protobuf.FieldDescriptorProto;switch(null!=e.name&&(t.name=String(e.name)),null!=e.number&&(t.number=0|e.number),e.label){case\"LABEL_OPTIONAL\":case 1:t.label=1;break;case\"LABEL_REQUIRED\":case 2:t.label=2;break;case\"LABEL_REPEATED\":case 3:t.label=3}switch(e.type){case\"TYPE_DOUBLE\":case 1:t.type=1;break;case\"TYPE_FLOAT\":case 2:t.type=2;break;case\"TYPE_INT64\":case 3:t.type=3;break;case\"TYPE_UINT64\":case 4:t.type=4;break;case\"TYPE_INT32\":case 5:t.type=5;break;case\"TYPE_FIXED64\":case 6:t.type=6;break;case\"TYPE_FIXED32\":case 7:t.type=7;break;case\"TYPE_BOOL\":case 8:t.type=8;break;case\"TYPE_STRING\":case 9:t.type=9;break;case\"TYPE_GROUP\":case 10:t.type=10;break;case\"TYPE_MESSAGE\":case 11:t.type=11;break;case\"TYPE_BYTES\":case 12:t.type=12;break;case\"TYPE_UINT32\":case 13:t.type=13;break;case\"TYPE_ENUM\":case 14:t.type=14;break;case\"TYPE_SFIXED32\":case 15:t.type=15;break;case\"TYPE_SFIXED64\":case 16:t.type=16;break;case\"TYPE_SINT32\":case 17:t.type=17;break;case\"TYPE_SINT64\":case 18:t.type=18}if(null!=e.typeName&&(t.typeName=String(e.typeName)),null!=e.extendee&&(t.extendee=String(e.extendee)),null!=e.defaultValue&&(t.defaultValue=String(e.defaultValue)),null!=e.oneofIndex&&(t.oneofIndex=0|e.oneofIndex),null!=e.jsonName&&(t.jsonName=String(e.jsonName)),null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.FieldDescriptorProto.options: object expected\");t.options=c.google.protobuf.FieldOptions.fromObject(e.options)}return null!=e.proto3Optional&&(t.proto3Optional=Boolean(e.proto3Optional)),t},O.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\",n.extendee=\"\",n.number=0,n.label=t.enums===String?\"LABEL_OPTIONAL\":1,n.type=t.enums===String?\"TYPE_DOUBLE\":1,n.typeName=\"\",n.defaultValue=\"\",n.options=null,n.oneofIndex=0,n.jsonName=\"\",n.proto3Optional=!1),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.extendee&&e.hasOwnProperty(\"extendee\")&&(n.extendee=e.extendee),null!=e.number&&e.hasOwnProperty(\"number\")&&(n.number=e.number),null!=e.label&&e.hasOwnProperty(\"label\")&&(n.label=t.enums===String?c.google.protobuf.FieldDescriptorProto.Label[e.label]:e.label),null!=e.type&&e.hasOwnProperty(\"type\")&&(n.type=t.enums===String?c.google.protobuf.FieldDescriptorProto.Type[e.type]:e.type),null!=e.typeName&&e.hasOwnProperty(\"typeName\")&&(n.typeName=e.typeName),null!=e.defaultValue&&e.hasOwnProperty(\"defaultValue\")&&(n.defaultValue=e.defaultValue),null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=c.google.protobuf.FieldOptions.toObject(e.options,t)),null!=e.oneofIndex&&e.hasOwnProperty(\"oneofIndex\")&&(n.oneofIndex=e.oneofIndex),null!=e.jsonName&&e.hasOwnProperty(\"jsonName\")&&(n.jsonName=e.jsonName),null!=e.proto3Optional&&e.hasOwnProperty(\"proto3Optional\")&&(n.proto3Optional=e.proto3Optional),n},O.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},O.Type=(e={},(t=Object.create(e))[e[1]=\"TYPE_DOUBLE\"]=1,t[e[2]=\"TYPE_FLOAT\"]=2,t[e[3]=\"TYPE_INT64\"]=3,t[e[4]=\"TYPE_UINT64\"]=4,t[e[5]=\"TYPE_INT32\"]=5,t[e[6]=\"TYPE_FIXED64\"]=6,t[e[7]=\"TYPE_FIXED32\"]=7,t[e[8]=\"TYPE_BOOL\"]=8,t[e[9]=\"TYPE_STRING\"]=9,t[e[10]=\"TYPE_GROUP\"]=10,t[e[11]=\"TYPE_MESSAGE\"]=11,t[e[12]=\"TYPE_BYTES\"]=12,t[e[13]=\"TYPE_UINT32\"]=13,t[e[14]=\"TYPE_ENUM\"]=14,t[e[15]=\"TYPE_SFIXED32\"]=15,t[e[16]=\"TYPE_SFIXED64\"]=16,t[e[17]=\"TYPE_SINT32\"]=17,t[e[18]=\"TYPE_SINT64\"]=18,t),O.Label=(e={},(t=Object.create(e))[e[1]=\"LABEL_OPTIONAL\"]=1,t[e[2]=\"LABEL_REQUIRED\"]=2,t[e[3]=\"LABEL_REPEATED\"]=3,t),O),n.OneofDescriptorProto=(m.prototype.name=\"\",m.prototype.options=null,m.create=function(e){return new m(e)},m.encode=function(e,t){return t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&c.google.protobuf.OneofOptions.encode(e.options,t.uint32(18).fork()).ldelim(),t},m.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},m.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.OneofDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.options=c.google.protobuf.OneofOptions.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},m.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},m.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!u.isString(e.name))return\"name: string expected\";if(null!=e.options&&e.hasOwnProperty(\"options\")){e=c.google.protobuf.OneofOptions.verify(e.options);if(e)return\"options.\"+e}return null},m.fromObject=function(e){if(e instanceof c.google.protobuf.OneofDescriptorProto)return e;var t=new c.google.protobuf.OneofDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.OneofDescriptorProto.options: object expected\");t.options=c.google.protobuf.OneofOptions.fromObject(e.options)}return t},m.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\",n.options=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=c.google.protobuf.OneofOptions.toObject(e.options,t)),n},m.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},m),n.EnumDescriptorProto=(v.prototype.name=\"\",v.prototype.value=u.emptyArray,v.prototype.options=null,v.prototype.reservedRange=u.emptyArray,v.prototype.reservedName=u.emptyArray,v.create=function(e){return new v(e)},v.encode=function(e,t){if(t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.value&&e.value.length)for(var n=0;n<e.value.length;++n)c.google.protobuf.EnumValueDescriptorProto.encode(e.value[n],t.uint32(18).fork()).ldelim();if(null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&c.google.protobuf.EnumOptions.encode(e.options,t.uint32(26).fork()).ldelim(),null!=e.reservedRange&&e.reservedRange.length)for(n=0;n<e.reservedRange.length;++n)c.google.protobuf.EnumDescriptorProto.EnumReservedRange.encode(e.reservedRange[n],t.uint32(34).fork()).ldelim();if(null!=e.reservedName&&e.reservedName.length)for(n=0;n<e.reservedName.length;++n)t.uint32(42).string(e.reservedName[n]);return t},v.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},v.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.EnumDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.value&&o.value.length||(o.value=[]),o.value.push(c.google.protobuf.EnumValueDescriptorProto.decode(e,e.uint32()));break;case 3:o.options=c.google.protobuf.EnumOptions.decode(e,e.uint32());break;case 4:o.reservedRange&&o.reservedRange.length||(o.reservedRange=[]),o.reservedRange.push(c.google.protobuf.EnumDescriptorProto.EnumReservedRange.decode(e,e.uint32()));break;case 5:o.reservedName&&o.reservedName.length||(o.reservedName=[]),o.reservedName.push(e.string());break;default:e.skipType(7&r)}}return o},v.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},v.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!u.isString(e.name))return\"name: string expected\";if(null!=e.value&&e.hasOwnProperty(\"value\")){if(!Array.isArray(e.value))return\"value: array expected\";for(var t=0;t<e.value.length;++t)if(n=c.google.protobuf.EnumValueDescriptorProto.verify(e.value[t]))return\"value.\"+n}if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n=c.google.protobuf.EnumOptions.verify(e.options)))return\"options.\"+n;if(null!=e.reservedRange&&e.hasOwnProperty(\"reservedRange\")){if(!Array.isArray(e.reservedRange))return\"reservedRange: array expected\";for(var n,t=0;t<e.reservedRange.length;++t)if(n=c.google.protobuf.EnumDescriptorProto.EnumReservedRange.verify(e.reservedRange[t]))return\"reservedRange.\"+n}if(null!=e.reservedName&&e.hasOwnProperty(\"reservedName\")){if(!Array.isArray(e.reservedName))return\"reservedName: array expected\";for(t=0;t<e.reservedName.length;++t)if(!u.isString(e.reservedName[t]))return\"reservedName: string[] expected\"}return null},v.fromObject=function(e){if(e instanceof c.google.protobuf.EnumDescriptorProto)return e;var t=new c.google.protobuf.EnumDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),e.value){if(!Array.isArray(e.value))throw TypeError(\".google.protobuf.EnumDescriptorProto.value: array expected\");t.value=[];for(var n=0;n<e.value.length;++n){if(\"object\"!=typeof e.value[n])throw TypeError(\".google.protobuf.EnumDescriptorProto.value: object expected\");t.value[n]=c.google.protobuf.EnumValueDescriptorProto.fromObject(e.value[n])}}if(null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.EnumDescriptorProto.options: object expected\");t.options=c.google.protobuf.EnumOptions.fromObject(e.options)}if(e.reservedRange){if(!Array.isArray(e.reservedRange))throw TypeError(\".google.protobuf.EnumDescriptorProto.reservedRange: array expected\");t.reservedRange=[];for(n=0;n<e.reservedRange.length;++n){if(\"object\"!=typeof e.reservedRange[n])throw TypeError(\".google.protobuf.EnumDescriptorProto.reservedRange: object expected\");t.reservedRange[n]=c.google.protobuf.EnumDescriptorProto.EnumReservedRange.fromObject(e.reservedRange[n])}}if(e.reservedName){if(!Array.isArray(e.reservedName))throw TypeError(\".google.protobuf.EnumDescriptorProto.reservedName: array expected\");t.reservedName=[];for(n=0;n<e.reservedName.length;++n)t.reservedName[n]=String(e.reservedName[n])}return t},v.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.value=[],n.reservedRange=[],n.reservedName=[]),t.defaults&&(n.name=\"\",n.options=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),e.value&&e.value.length){n.value=[];for(var o=0;o<e.value.length;++o)n.value[o]=c.google.protobuf.EnumValueDescriptorProto.toObject(e.value[o],t)}if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=c.google.protobuf.EnumOptions.toObject(e.options,t)),e.reservedRange&&e.reservedRange.length){n.reservedRange=[];for(o=0;o<e.reservedRange.length;++o)n.reservedRange[o]=c.google.protobuf.EnumDescriptorProto.EnumReservedRange.toObject(e.reservedRange[o],t)}if(e.reservedName&&e.reservedName.length){n.reservedName=[];for(o=0;o<e.reservedName.length;++o)n.reservedName[o]=e.reservedName[o]}return n},v.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},v.EnumReservedRange=(P.prototype.start=0,P.prototype.end=0,P.create=function(e){return new P(e)},P.encode=function(e,t){return t=t||r.create(),null!=e.start&&Object.hasOwnProperty.call(e,\"start\")&&t.uint32(8).int32(e.start),null!=e.end&&Object.hasOwnProperty.call(e,\"end\")&&t.uint32(16).int32(e.end),t},P.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},P.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.EnumDescriptorProto.EnumReservedRange;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.start=e.int32();break;case 2:o.end=e.int32();break;default:e.skipType(7&r)}}return o},P.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},P.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.start&&e.hasOwnProperty(\"start\")&&!u.isInteger(e.start)?\"start: integer expected\":null!=e.end&&e.hasOwnProperty(\"end\")&&!u.isInteger(e.end)?\"end: integer expected\":null},P.fromObject=function(e){var t;return e instanceof c.google.protobuf.EnumDescriptorProto.EnumReservedRange?e:(t=new c.google.protobuf.EnumDescriptorProto.EnumReservedRange,null!=e.start&&(t.start=0|e.start),null!=e.end&&(t.end=0|e.end),t)},P.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.start=0,n.end=0),null!=e.start&&e.hasOwnProperty(\"start\")&&(n.start=e.start),null!=e.end&&e.hasOwnProperty(\"end\")&&(n.end=e.end),n},P.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},P),v),n.EnumValueDescriptorProto=(w.prototype.name=\"\",w.prototype.number=0,w.prototype.options=null,w.create=function(e){return new w(e)},w.encode=function(e,t){return t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.number&&Object.hasOwnProperty.call(e,\"number\")&&t.uint32(16).int32(e.number),null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&c.google.protobuf.EnumValueOptions.encode(e.options,t.uint32(26).fork()).ldelim(),t},w.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},w.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.EnumValueDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.number=e.int32();break;case 3:o.options=c.google.protobuf.EnumValueOptions.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},w.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},w.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!u.isString(e.name))return\"name: string expected\";if(null!=e.number&&e.hasOwnProperty(\"number\")&&!u.isInteger(e.number))return\"number: integer expected\";if(null!=e.options&&e.hasOwnProperty(\"options\")){e=c.google.protobuf.EnumValueOptions.verify(e.options);if(e)return\"options.\"+e}return null},w.fromObject=function(e){if(e instanceof c.google.protobuf.EnumValueDescriptorProto)return e;var t=new c.google.protobuf.EnumValueDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),null!=e.number&&(t.number=0|e.number),null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.EnumValueDescriptorProto.options: object expected\");t.options=c.google.protobuf.EnumValueOptions.fromObject(e.options)}return t},w.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\",n.number=0,n.options=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.number&&e.hasOwnProperty(\"number\")&&(n.number=e.number),null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=c.google.protobuf.EnumValueOptions.toObject(e.options,t)),n},w.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},w),n.ServiceDescriptorProto=(j.prototype.name=\"\",j.prototype.method=u.emptyArray,j.prototype.options=null,j.create=function(e){return new j(e)},j.encode=function(e,t){if(t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.method&&e.method.length)for(var n=0;n<e.method.length;++n)c.google.protobuf.MethodDescriptorProto.encode(e.method[n],t.uint32(18).fork()).ldelim();return null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&c.google.protobuf.ServiceOptions.encode(e.options,t.uint32(26).fork()).ldelim(),t},j.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},j.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.ServiceDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.method&&o.method.length||(o.method=[]),o.method.push(c.google.protobuf.MethodDescriptorProto.decode(e,e.uint32()));break;case 3:o.options=c.google.protobuf.ServiceOptions.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},j.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},j.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!u.isString(e.name))return\"name: string expected\";if(null!=e.method&&e.hasOwnProperty(\"method\")){if(!Array.isArray(e.method))return\"method: array expected\";for(var t=0;t<e.method.length;++t)if(n=c.google.protobuf.MethodDescriptorProto.verify(e.method[t]))return\"method.\"+n}var n;if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n=c.google.protobuf.ServiceOptions.verify(e.options)))return\"options.\"+n;return null},j.fromObject=function(e){if(e instanceof c.google.protobuf.ServiceDescriptorProto)return e;var t=new c.google.protobuf.ServiceDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),e.method){if(!Array.isArray(e.method))throw TypeError(\".google.protobuf.ServiceDescriptorProto.method: array expected\");t.method=[];for(var n=0;n<e.method.length;++n){if(\"object\"!=typeof e.method[n])throw TypeError(\".google.protobuf.ServiceDescriptorProto.method: object expected\");t.method[n]=c.google.protobuf.MethodDescriptorProto.fromObject(e.method[n])}}if(null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.ServiceDescriptorProto.options: object expected\");t.options=c.google.protobuf.ServiceOptions.fromObject(e.options)}return t},j.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.method=[]),t.defaults&&(n.name=\"\",n.options=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),e.method&&e.method.length){n.method=[];for(var o=0;o<e.method.length;++o)n.method[o]=c.google.protobuf.MethodDescriptorProto.toObject(e.method[o],t)}return null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=c.google.protobuf.ServiceOptions.toObject(e.options,t)),n},j.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},j),n.MethodDescriptorProto=(x.prototype.name=\"\",x.prototype.inputType=\"\",x.prototype.outputType=\"\",x.prototype.options=null,x.prototype.clientStreaming=!1,x.prototype.serverStreaming=!1,x.create=function(e){return new x(e)},x.encode=function(e,t){return t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.inputType&&Object.hasOwnProperty.call(e,\"inputType\")&&t.uint32(18).string(e.inputType),null!=e.outputType&&Object.hasOwnProperty.call(e,\"outputType\")&&t.uint32(26).string(e.outputType),null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&c.google.protobuf.MethodOptions.encode(e.options,t.uint32(34).fork()).ldelim(),null!=e.clientStreaming&&Object.hasOwnProperty.call(e,\"clientStreaming\")&&t.uint32(40).bool(e.clientStreaming),null!=e.serverStreaming&&Object.hasOwnProperty.call(e,\"serverStreaming\")&&t.uint32(48).bool(e.serverStreaming),t},x.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},x.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.MethodDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.inputType=e.string();break;case 3:o.outputType=e.string();break;case 4:o.options=c.google.protobuf.MethodOptions.decode(e,e.uint32());break;case 5:o.clientStreaming=e.bool();break;case 6:o.serverStreaming=e.bool();break;default:e.skipType(7&r)}}return o},x.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},x.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!u.isString(e.name))return\"name: string expected\";if(null!=e.inputType&&e.hasOwnProperty(\"inputType\")&&!u.isString(e.inputType))return\"inputType: string expected\";if(null!=e.outputType&&e.hasOwnProperty(\"outputType\")&&!u.isString(e.outputType))return\"outputType: string expected\";if(null!=e.options&&e.hasOwnProperty(\"options\")){var t=c.google.protobuf.MethodOptions.verify(e.options);if(t)return\"options.\"+t}return null!=e.clientStreaming&&e.hasOwnProperty(\"clientStreaming\")&&\"boolean\"!=typeof e.clientStreaming?\"clientStreaming: boolean expected\":null!=e.serverStreaming&&e.hasOwnProperty(\"serverStreaming\")&&\"boolean\"!=typeof e.serverStreaming?\"serverStreaming: boolean expected\":null},x.fromObject=function(e){if(e instanceof c.google.protobuf.MethodDescriptorProto)return e;var t=new c.google.protobuf.MethodDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),null!=e.inputType&&(t.inputType=String(e.inputType)),null!=e.outputType&&(t.outputType=String(e.outputType)),null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.MethodDescriptorProto.options: object expected\");t.options=c.google.protobuf.MethodOptions.fromObject(e.options)}return null!=e.clientStreaming&&(t.clientStreaming=Boolean(e.clientStreaming)),null!=e.serverStreaming&&(t.serverStreaming=Boolean(e.serverStreaming)),t},x.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\",n.inputType=\"\",n.outputType=\"\",n.options=null,n.clientStreaming=!1,n.serverStreaming=!1),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.inputType&&e.hasOwnProperty(\"inputType\")&&(n.inputType=e.inputType),null!=e.outputType&&e.hasOwnProperty(\"outputType\")&&(n.outputType=e.outputType),null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=c.google.protobuf.MethodOptions.toObject(e.options,t)),null!=e.clientStreaming&&e.hasOwnProperty(\"clientStreaming\")&&(n.clientStreaming=e.clientStreaming),null!=e.serverStreaming&&e.hasOwnProperty(\"serverStreaming\")&&(n.serverStreaming=e.serverStreaming),n},x.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},x),n.FileOptions=(S.prototype.javaPackage=\"\",S.prototype.javaOuterClassname=\"\",S.prototype.javaMultipleFiles=!1,S.prototype.javaGenerateEqualsAndHash=!1,S.prototype.javaStringCheckUtf8=!1,S.prototype.optimizeFor=1,S.prototype.goPackage=\"\",S.prototype.ccGenericServices=!1,S.prototype.javaGenericServices=!1,S.prototype.pyGenericServices=!1,S.prototype.phpGenericServices=!1,S.prototype.deprecated=!1,S.prototype.ccEnableArenas=!0,S.prototype.objcClassPrefix=\"\",S.prototype.csharpNamespace=\"\",S.prototype.swiftPrefix=\"\",S.prototype.phpClassPrefix=\"\",S.prototype.phpNamespace=\"\",S.prototype.phpMetadataNamespace=\"\",S.prototype.rubyPackage=\"\",S.prototype.uninterpretedOption=u.emptyArray,S.create=function(e){return new S(e)},S.encode=function(e,t){if(t=t||r.create(),null!=e.javaPackage&&Object.hasOwnProperty.call(e,\"javaPackage\")&&t.uint32(10).string(e.javaPackage),null!=e.javaOuterClassname&&Object.hasOwnProperty.call(e,\"javaOuterClassname\")&&t.uint32(66).string(e.javaOuterClassname),null!=e.optimizeFor&&Object.hasOwnProperty.call(e,\"optimizeFor\")&&t.uint32(72).int32(e.optimizeFor),null!=e.javaMultipleFiles&&Object.hasOwnProperty.call(e,\"javaMultipleFiles\")&&t.uint32(80).bool(e.javaMultipleFiles),null!=e.goPackage&&Object.hasOwnProperty.call(e,\"goPackage\")&&t.uint32(90).string(e.goPackage),null!=e.ccGenericServices&&Object.hasOwnProperty.call(e,\"ccGenericServices\")&&t.uint32(128).bool(e.ccGenericServices),null!=e.javaGenericServices&&Object.hasOwnProperty.call(e,\"javaGenericServices\")&&t.uint32(136).bool(e.javaGenericServices),null!=e.pyGenericServices&&Object.hasOwnProperty.call(e,\"pyGenericServices\")&&t.uint32(144).bool(e.pyGenericServices),null!=e.javaGenerateEqualsAndHash&&Object.hasOwnProperty.call(e,\"javaGenerateEqualsAndHash\")&&t.uint32(160).bool(e.javaGenerateEqualsAndHash),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(184).bool(e.deprecated),null!=e.javaStringCheckUtf8&&Object.hasOwnProperty.call(e,\"javaStringCheckUtf8\")&&t.uint32(216).bool(e.javaStringCheckUtf8),null!=e.ccEnableArenas&&Object.hasOwnProperty.call(e,\"ccEnableArenas\")&&t.uint32(248).bool(e.ccEnableArenas),null!=e.objcClassPrefix&&Object.hasOwnProperty.call(e,\"objcClassPrefix\")&&t.uint32(290).string(e.objcClassPrefix),null!=e.csharpNamespace&&Object.hasOwnProperty.call(e,\"csharpNamespace\")&&t.uint32(298).string(e.csharpNamespace),null!=e.swiftPrefix&&Object.hasOwnProperty.call(e,\"swiftPrefix\")&&t.uint32(314).string(e.swiftPrefix),null!=e.phpClassPrefix&&Object.hasOwnProperty.call(e,\"phpClassPrefix\")&&t.uint32(322).string(e.phpClassPrefix),null!=e.phpNamespace&&Object.hasOwnProperty.call(e,\"phpNamespace\")&&t.uint32(330).string(e.phpNamespace),null!=e.phpGenericServices&&Object.hasOwnProperty.call(e,\"phpGenericServices\")&&t.uint32(336).bool(e.phpGenericServices),null!=e.phpMetadataNamespace&&Object.hasOwnProperty.call(e,\"phpMetadataNamespace\")&&t.uint32(354).string(e.phpMetadataNamespace),null!=e.rubyPackage&&Object.hasOwnProperty.call(e,\"rubyPackage\")&&t.uint32(362).string(e.rubyPackage),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)c.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return t},S.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},S.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.FileOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.javaPackage=e.string();break;case 8:o.javaOuterClassname=e.string();break;case 10:o.javaMultipleFiles=e.bool();break;case 20:o.javaGenerateEqualsAndHash=e.bool();break;case 27:o.javaStringCheckUtf8=e.bool();break;case 9:o.optimizeFor=e.int32();break;case 11:o.goPackage=e.string();break;case 16:o.ccGenericServices=e.bool();break;case 17:o.javaGenericServices=e.bool();break;case 18:o.pyGenericServices=e.bool();break;case 42:o.phpGenericServices=e.bool();break;case 23:o.deprecated=e.bool();break;case 31:o.ccEnableArenas=e.bool();break;case 36:o.objcClassPrefix=e.string();break;case 37:o.csharpNamespace=e.string();break;case 39:o.swiftPrefix=e.string();break;case 40:o.phpClassPrefix=e.string();break;case 41:o.phpNamespace=e.string();break;case 44:o.phpMetadataNamespace=e.string();break;case 45:o.rubyPackage=e.string();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(c.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return o},S.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},S.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.javaPackage&&e.hasOwnProperty(\"javaPackage\")&&!u.isString(e.javaPackage))return\"javaPackage: string expected\";if(null!=e.javaOuterClassname&&e.hasOwnProperty(\"javaOuterClassname\")&&!u.isString(e.javaOuterClassname))return\"javaOuterClassname: string expected\";if(null!=e.javaMultipleFiles&&e.hasOwnProperty(\"javaMultipleFiles\")&&\"boolean\"!=typeof e.javaMultipleFiles)return\"javaMultipleFiles: boolean expected\";if(null!=e.javaGenerateEqualsAndHash&&e.hasOwnProperty(\"javaGenerateEqualsAndHash\")&&\"boolean\"!=typeof e.javaGenerateEqualsAndHash)return\"javaGenerateEqualsAndHash: boolean expected\";if(null!=e.javaStringCheckUtf8&&e.hasOwnProperty(\"javaStringCheckUtf8\")&&\"boolean\"!=typeof e.javaStringCheckUtf8)return\"javaStringCheckUtf8: boolean expected\";if(null!=e.optimizeFor&&e.hasOwnProperty(\"optimizeFor\"))switch(e.optimizeFor){default:return\"optimizeFor: enum value expected\";case 1:case 2:case 3:}if(null!=e.goPackage&&e.hasOwnProperty(\"goPackage\")&&!u.isString(e.goPackage))return\"goPackage: string expected\";if(null!=e.ccGenericServices&&e.hasOwnProperty(\"ccGenericServices\")&&\"boolean\"!=typeof e.ccGenericServices)return\"ccGenericServices: boolean expected\";if(null!=e.javaGenericServices&&e.hasOwnProperty(\"javaGenericServices\")&&\"boolean\"!=typeof e.javaGenericServices)return\"javaGenericServices: boolean expected\";if(null!=e.pyGenericServices&&e.hasOwnProperty(\"pyGenericServices\")&&\"boolean\"!=typeof e.pyGenericServices)return\"pyGenericServices: boolean expected\";if(null!=e.phpGenericServices&&e.hasOwnProperty(\"phpGenericServices\")&&\"boolean\"!=typeof e.phpGenericServices)return\"phpGenericServices: boolean expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.ccEnableArenas&&e.hasOwnProperty(\"ccEnableArenas\")&&\"boolean\"!=typeof e.ccEnableArenas)return\"ccEnableArenas: boolean expected\";if(null!=e.objcClassPrefix&&e.hasOwnProperty(\"objcClassPrefix\")&&!u.isString(e.objcClassPrefix))return\"objcClassPrefix: string expected\";if(null!=e.csharpNamespace&&e.hasOwnProperty(\"csharpNamespace\")&&!u.isString(e.csharpNamespace))return\"csharpNamespace: string expected\";if(null!=e.swiftPrefix&&e.hasOwnProperty(\"swiftPrefix\")&&!u.isString(e.swiftPrefix))return\"swiftPrefix: string expected\";if(null!=e.phpClassPrefix&&e.hasOwnProperty(\"phpClassPrefix\")&&!u.isString(e.phpClassPrefix))return\"phpClassPrefix: string expected\";if(null!=e.phpNamespace&&e.hasOwnProperty(\"phpNamespace\")&&!u.isString(e.phpNamespace))return\"phpNamespace: string expected\";if(null!=e.phpMetadataNamespace&&e.hasOwnProperty(\"phpMetadataNamespace\")&&!u.isString(e.phpMetadataNamespace))return\"phpMetadataNamespace: string expected\";if(null!=e.rubyPackage&&e.hasOwnProperty(\"rubyPackage\")&&!u.isString(e.rubyPackage))return\"rubyPackage: string expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=c.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null},S.fromObject=function(e){if(e instanceof c.google.protobuf.FileOptions)return e;var t=new c.google.protobuf.FileOptions;switch(null!=e.javaPackage&&(t.javaPackage=String(e.javaPackage)),null!=e.javaOuterClassname&&(t.javaOuterClassname=String(e.javaOuterClassname)),null!=e.javaMultipleFiles&&(t.javaMultipleFiles=Boolean(e.javaMultipleFiles)),null!=e.javaGenerateEqualsAndHash&&(t.javaGenerateEqualsAndHash=Boolean(e.javaGenerateEqualsAndHash)),null!=e.javaStringCheckUtf8&&(t.javaStringCheckUtf8=Boolean(e.javaStringCheckUtf8)),e.optimizeFor){case\"SPEED\":case 1:t.optimizeFor=1;break;case\"CODE_SIZE\":case 2:t.optimizeFor=2;break;case\"LITE_RUNTIME\":case 3:t.optimizeFor=3}if(null!=e.goPackage&&(t.goPackage=String(e.goPackage)),null!=e.ccGenericServices&&(t.ccGenericServices=Boolean(e.ccGenericServices)),null!=e.javaGenericServices&&(t.javaGenericServices=Boolean(e.javaGenericServices)),null!=e.pyGenericServices&&(t.pyGenericServices=Boolean(e.pyGenericServices)),null!=e.phpGenericServices&&(t.phpGenericServices=Boolean(e.phpGenericServices)),null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),null!=e.ccEnableArenas&&(t.ccEnableArenas=Boolean(e.ccEnableArenas)),null!=e.objcClassPrefix&&(t.objcClassPrefix=String(e.objcClassPrefix)),null!=e.csharpNamespace&&(t.csharpNamespace=String(e.csharpNamespace)),null!=e.swiftPrefix&&(t.swiftPrefix=String(e.swiftPrefix)),null!=e.phpClassPrefix&&(t.phpClassPrefix=String(e.phpClassPrefix)),null!=e.phpNamespace&&(t.phpNamespace=String(e.phpNamespace)),null!=e.phpMetadataNamespace&&(t.phpMetadataNamespace=String(e.phpMetadataNamespace)),null!=e.rubyPackage&&(t.rubyPackage=String(e.rubyPackage)),e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.FileOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.FileOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=c.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return t},S.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),t.defaults&&(n.javaPackage=\"\",n.javaOuterClassname=\"\",n.optimizeFor=t.enums===String?\"SPEED\":1,n.javaMultipleFiles=!1,n.goPackage=\"\",n.ccGenericServices=!1,n.javaGenericServices=!1,n.pyGenericServices=!1,n.javaGenerateEqualsAndHash=!1,n.deprecated=!1,n.javaStringCheckUtf8=!1,n.ccEnableArenas=!0,n.objcClassPrefix=\"\",n.csharpNamespace=\"\",n.swiftPrefix=\"\",n.phpClassPrefix=\"\",n.phpNamespace=\"\",n.phpGenericServices=!1,n.phpMetadataNamespace=\"\",n.rubyPackage=\"\"),null!=e.javaPackage&&e.hasOwnProperty(\"javaPackage\")&&(n.javaPackage=e.javaPackage),null!=e.javaOuterClassname&&e.hasOwnProperty(\"javaOuterClassname\")&&(n.javaOuterClassname=e.javaOuterClassname),null!=e.optimizeFor&&e.hasOwnProperty(\"optimizeFor\")&&(n.optimizeFor=t.enums===String?c.google.protobuf.FileOptions.OptimizeMode[e.optimizeFor]:e.optimizeFor),null!=e.javaMultipleFiles&&e.hasOwnProperty(\"javaMultipleFiles\")&&(n.javaMultipleFiles=e.javaMultipleFiles),null!=e.goPackage&&e.hasOwnProperty(\"goPackage\")&&(n.goPackage=e.goPackage),null!=e.ccGenericServices&&e.hasOwnProperty(\"ccGenericServices\")&&(n.ccGenericServices=e.ccGenericServices),null!=e.javaGenericServices&&e.hasOwnProperty(\"javaGenericServices\")&&(n.javaGenericServices=e.javaGenericServices),null!=e.pyGenericServices&&e.hasOwnProperty(\"pyGenericServices\")&&(n.pyGenericServices=e.pyGenericServices),null!=e.javaGenerateEqualsAndHash&&e.hasOwnProperty(\"javaGenerateEqualsAndHash\")&&(n.javaGenerateEqualsAndHash=e.javaGenerateEqualsAndHash),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),null!=e.javaStringCheckUtf8&&e.hasOwnProperty(\"javaStringCheckUtf8\")&&(n.javaStringCheckUtf8=e.javaStringCheckUtf8),null!=e.ccEnableArenas&&e.hasOwnProperty(\"ccEnableArenas\")&&(n.ccEnableArenas=e.ccEnableArenas),null!=e.objcClassPrefix&&e.hasOwnProperty(\"objcClassPrefix\")&&(n.objcClassPrefix=e.objcClassPrefix),null!=e.csharpNamespace&&e.hasOwnProperty(\"csharpNamespace\")&&(n.csharpNamespace=e.csharpNamespace),null!=e.swiftPrefix&&e.hasOwnProperty(\"swiftPrefix\")&&(n.swiftPrefix=e.swiftPrefix),null!=e.phpClassPrefix&&e.hasOwnProperty(\"phpClassPrefix\")&&(n.phpClassPrefix=e.phpClassPrefix),null!=e.phpNamespace&&e.hasOwnProperty(\"phpNamespace\")&&(n.phpNamespace=e.phpNamespace),null!=e.phpGenericServices&&e.hasOwnProperty(\"phpGenericServices\")&&(n.phpGenericServices=e.phpGenericServices),null!=e.phpMetadataNamespace&&e.hasOwnProperty(\"phpMetadataNamespace\")&&(n.phpMetadataNamespace=e.phpMetadataNamespace),null!=e.rubyPackage&&e.hasOwnProperty(\"rubyPackage\")&&(n.rubyPackage=e.rubyPackage),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=c.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return n},S.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},S.OptimizeMode=(e={},(t=Object.create(e))[e[1]=\"SPEED\"]=1,t[e[2]=\"CODE_SIZE\"]=2,t[e[3]=\"LITE_RUNTIME\"]=3,t),S),n.MessageOptions=(k.prototype.messageSetWireFormat=!1,k.prototype.noStandardDescriptorAccessor=!1,k.prototype.deprecated=!1,k.prototype.mapEntry=!1,k.prototype.uninterpretedOption=u.emptyArray,k.create=function(e){return new k(e)},k.encode=function(e,t){if(t=t||r.create(),null!=e.messageSetWireFormat&&Object.hasOwnProperty.call(e,\"messageSetWireFormat\")&&t.uint32(8).bool(e.messageSetWireFormat),null!=e.noStandardDescriptorAccessor&&Object.hasOwnProperty.call(e,\"noStandardDescriptorAccessor\")&&t.uint32(16).bool(e.noStandardDescriptorAccessor),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(24).bool(e.deprecated),null!=e.mapEntry&&Object.hasOwnProperty.call(e,\"mapEntry\")&&t.uint32(56).bool(e.mapEntry),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)c.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return t},k.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},k.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.MessageOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.messageSetWireFormat=e.bool();break;case 2:o.noStandardDescriptorAccessor=e.bool();break;case 3:o.deprecated=e.bool();break;case 7:o.mapEntry=e.bool();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(c.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return o},k.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},k.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.messageSetWireFormat&&e.hasOwnProperty(\"messageSetWireFormat\")&&\"boolean\"!=typeof e.messageSetWireFormat)return\"messageSetWireFormat: boolean expected\";if(null!=e.noStandardDescriptorAccessor&&e.hasOwnProperty(\"noStandardDescriptorAccessor\")&&\"boolean\"!=typeof e.noStandardDescriptorAccessor)return\"noStandardDescriptorAccessor: boolean expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.mapEntry&&e.hasOwnProperty(\"mapEntry\")&&\"boolean\"!=typeof e.mapEntry)return\"mapEntry: boolean expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=c.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null},k.fromObject=function(e){if(e instanceof c.google.protobuf.MessageOptions)return e;var t=new c.google.protobuf.MessageOptions;if(null!=e.messageSetWireFormat&&(t.messageSetWireFormat=Boolean(e.messageSetWireFormat)),null!=e.noStandardDescriptorAccessor&&(t.noStandardDescriptorAccessor=Boolean(e.noStandardDescriptorAccessor)),null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),null!=e.mapEntry&&(t.mapEntry=Boolean(e.mapEntry)),e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.MessageOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.MessageOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=c.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return t},k.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),t.defaults&&(n.messageSetWireFormat=!1,n.noStandardDescriptorAccessor=!1,n.deprecated=!1,n.mapEntry=!1),null!=e.messageSetWireFormat&&e.hasOwnProperty(\"messageSetWireFormat\")&&(n.messageSetWireFormat=e.messageSetWireFormat),null!=e.noStandardDescriptorAccessor&&e.hasOwnProperty(\"noStandardDescriptorAccessor\")&&(n.noStandardDescriptorAccessor=e.noStandardDescriptorAccessor),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),null!=e.mapEntry&&e.hasOwnProperty(\"mapEntry\")&&(n.mapEntry=e.mapEntry),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=c.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return n},k.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},k),n.FieldOptions=(D.prototype.ctype=0,D.prototype.packed=!1,D.prototype.jstype=0,D.prototype.lazy=!1,D.prototype.deprecated=!1,D.prototype.weak=!1,D.prototype.uninterpretedOption=u.emptyArray,D.create=function(e){return new D(e)},D.encode=function(e,t){if(t=t||r.create(),null!=e.ctype&&Object.hasOwnProperty.call(e,\"ctype\")&&t.uint32(8).int32(e.ctype),null!=e.packed&&Object.hasOwnProperty.call(e,\"packed\")&&t.uint32(16).bool(e.packed),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(24).bool(e.deprecated),null!=e.lazy&&Object.hasOwnProperty.call(e,\"lazy\")&&t.uint32(40).bool(e.lazy),null!=e.jstype&&Object.hasOwnProperty.call(e,\"jstype\")&&t.uint32(48).int32(e.jstype),null!=e.weak&&Object.hasOwnProperty.call(e,\"weak\")&&t.uint32(80).bool(e.weak),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)c.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return t},D.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},D.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.FieldOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.ctype=e.int32();break;case 2:o.packed=e.bool();break;case 6:o.jstype=e.int32();break;case 5:o.lazy=e.bool();break;case 3:o.deprecated=e.bool();break;case 10:o.weak=e.bool();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(c.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return o},D.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},D.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.ctype&&e.hasOwnProperty(\"ctype\"))switch(e.ctype){default:return\"ctype: enum value expected\";case 0:case 1:case 2:}if(null!=e.packed&&e.hasOwnProperty(\"packed\")&&\"boolean\"!=typeof e.packed)return\"packed: boolean expected\";if(null!=e.jstype&&e.hasOwnProperty(\"jstype\"))switch(e.jstype){default:return\"jstype: enum value expected\";case 0:case 1:case 2:}if(null!=e.lazy&&e.hasOwnProperty(\"lazy\")&&\"boolean\"!=typeof e.lazy)return\"lazy: boolean expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.weak&&e.hasOwnProperty(\"weak\")&&\"boolean\"!=typeof e.weak)return\"weak: boolean expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=c.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null},D.fromObject=function(e){if(e instanceof c.google.protobuf.FieldOptions)return e;var t=new c.google.protobuf.FieldOptions;switch(e.ctype){case\"STRING\":case 0:t.ctype=0;break;case\"CORD\":case 1:t.ctype=1;break;case\"STRING_PIECE\":case 2:t.ctype=2}switch(null!=e.packed&&(t.packed=Boolean(e.packed)),e.jstype){case\"JS_NORMAL\":case 0:t.jstype=0;break;case\"JS_STRING\":case 1:t.jstype=1;break;case\"JS_NUMBER\":case 2:t.jstype=2}if(null!=e.lazy&&(t.lazy=Boolean(e.lazy)),null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),null!=e.weak&&(t.weak=Boolean(e.weak)),e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.FieldOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.FieldOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=c.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return t},D.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),t.defaults&&(n.ctype=t.enums===String?\"STRING\":0,n.packed=!1,n.deprecated=!1,n.lazy=!1,n.jstype=t.enums===String?\"JS_NORMAL\":0,n.weak=!1),null!=e.ctype&&e.hasOwnProperty(\"ctype\")&&(n.ctype=t.enums===String?c.google.protobuf.FieldOptions.CType[e.ctype]:e.ctype),null!=e.packed&&e.hasOwnProperty(\"packed\")&&(n.packed=e.packed),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),null!=e.lazy&&e.hasOwnProperty(\"lazy\")&&(n.lazy=e.lazy),null!=e.jstype&&e.hasOwnProperty(\"jstype\")&&(n.jstype=t.enums===String?c.google.protobuf.FieldOptions.JSType[e.jstype]:e.jstype),null!=e.weak&&e.hasOwnProperty(\"weak\")&&(n.weak=e.weak),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=c.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return n},D.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},D.CType=(e={},(t=Object.create(e))[e[0]=\"STRING\"]=0,t[e[1]=\"CORD\"]=1,t[e[2]=\"STRING_PIECE\"]=2,t),D.JSType=(e={},(t=Object.create(e))[e[0]=\"JS_NORMAL\"]=0,t[e[1]=\"JS_STRING\"]=1,t[e[2]=\"JS_NUMBER\"]=2,t),D),n.OneofOptions=(M.prototype.uninterpretedOption=u.emptyArray,M.create=function(e){return new M(e)},M.encode=function(e,t){if(t=t||r.create(),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)c.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return t},M.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},M.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.OneofOptions;e.pos<n;){var r=e.uint32();r>>>3==999?(o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(c.google.protobuf.UninterpretedOption.decode(e,e.uint32()))):e.skipType(7&r)}return o},M.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},M.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=c.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null},M.fromObject=function(e){if(e instanceof c.google.protobuf.OneofOptions)return e;var t=new c.google.protobuf.OneofOptions;if(e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.OneofOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.OneofOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=c.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return t},M.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=c.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return n},M.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},M),n.EnumOptions=(T.prototype.allowAlias=!1,T.prototype.deprecated=!1,T.prototype.uninterpretedOption=u.emptyArray,T.create=function(e){return new T(e)},T.encode=function(e,t){if(t=t||r.create(),null!=e.allowAlias&&Object.hasOwnProperty.call(e,\"allowAlias\")&&t.uint32(16).bool(e.allowAlias),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(24).bool(e.deprecated),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)c.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return t},T.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},T.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.EnumOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 2:o.allowAlias=e.bool();break;case 3:o.deprecated=e.bool();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(c.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return o},T.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},T.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.allowAlias&&e.hasOwnProperty(\"allowAlias\")&&\"boolean\"!=typeof e.allowAlias)return\"allowAlias: boolean expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=c.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null},T.fromObject=function(e){if(e instanceof c.google.protobuf.EnumOptions)return e;var t=new c.google.protobuf.EnumOptions;if(null!=e.allowAlias&&(t.allowAlias=Boolean(e.allowAlias)),null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.EnumOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.EnumOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=c.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return t},T.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),t.defaults&&(n.allowAlias=!1,n.deprecated=!1),null!=e.allowAlias&&e.hasOwnProperty(\"allowAlias\")&&(n.allowAlias=e.allowAlias),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=c.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return n},T.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},T),n.EnumValueOptions=(E.prototype.deprecated=!1,E.prototype.uninterpretedOption=u.emptyArray,E.create=function(e){return new E(e)},E.encode=function(e,t){if(t=t||r.create(),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(8).bool(e.deprecated),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)c.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return t},E.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},E.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.EnumValueOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.deprecated=e.bool();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(c.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return o},E.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},E.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=c.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null},E.fromObject=function(e){if(e instanceof c.google.protobuf.EnumValueOptions)return e;var t=new c.google.protobuf.EnumValueOptions;if(null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.EnumValueOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.EnumValueOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=c.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return t},E.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),t.defaults&&(n.deprecated=!1),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=c.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return n},E.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},E),n.ServiceOptions=(A.prototype.deprecated=!1,A.prototype.uninterpretedOption=u.emptyArray,A.prototype[\".google.api.defaultHost\"]=\"\",A.prototype[\".google.api.oauthScopes\"]=\"\",A.create=function(e){return new A(e)},A.encode=function(e,t){if(t=t||r.create(),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(264).bool(e.deprecated),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)c.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return null!=e[\".google.api.defaultHost\"]&&Object.hasOwnProperty.call(e,\".google.api.defaultHost\")&&t.uint32(8394).string(e[\".google.api.defaultHost\"]),null!=e[\".google.api.oauthScopes\"]&&Object.hasOwnProperty.call(e,\".google.api.oauthScopes\")&&t.uint32(8402).string(e[\".google.api.oauthScopes\"]),t},A.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},A.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.ServiceOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 33:o.deprecated=e.bool();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(c.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;case 1049:o[\".google.api.defaultHost\"]=e.string();break;case 1050:o[\".google.api.oauthScopes\"]=e.string();break;default:e.skipType(7&r)}}return o},A.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},A.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=c.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null!=e[\".google.api.defaultHost\"]&&e.hasOwnProperty(\".google.api.defaultHost\")&&!u.isString(e[\".google.api.defaultHost\"])?\".google.api.defaultHost: string expected\":null!=e[\".google.api.oauthScopes\"]&&e.hasOwnProperty(\".google.api.oauthScopes\")&&!u.isString(e[\".google.api.oauthScopes\"])?\".google.api.oauthScopes: string expected\":null},A.fromObject=function(e){if(e instanceof c.google.protobuf.ServiceOptions)return e;var t=new c.google.protobuf.ServiceOptions;if(null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.ServiceOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.ServiceOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=c.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return null!=e[\".google.api.defaultHost\"]&&(t[\".google.api.defaultHost\"]=String(e[\".google.api.defaultHost\"])),null!=e[\".google.api.oauthScopes\"]&&(t[\".google.api.oauthScopes\"]=String(e[\".google.api.oauthScopes\"])),t},A.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),t.defaults&&(n.deprecated=!1,n[\".google.api.defaultHost\"]=\"\",n[\".google.api.oauthScopes\"]=\"\"),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=c.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return null!=e[\".google.api.defaultHost\"]&&e.hasOwnProperty(\".google.api.defaultHost\")&&(n[\".google.api.defaultHost\"]=e[\".google.api.defaultHost\"]),null!=e[\".google.api.oauthScopes\"]&&e.hasOwnProperty(\".google.api.oauthScopes\")&&(n[\".google.api.oauthScopes\"]=e[\".google.api.oauthScopes\"]),n},A.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},A),n.MethodOptions=(N.prototype.deprecated=!1,N.prototype.idempotencyLevel=0,N.prototype.uninterpretedOption=u.emptyArray,N.prototype[\".google.api.http\"]=null,N.prototype[\".google.api.methodSignature\"]=u.emptyArray,N.create=function(e){return new N(e)},N.encode=function(e,t){if(t=t||r.create(),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(264).bool(e.deprecated),null!=e.idempotencyLevel&&Object.hasOwnProperty.call(e,\"idempotencyLevel\")&&t.uint32(272).int32(e.idempotencyLevel),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)c.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();if(null!=e[\".google.api.methodSignature\"]&&e[\".google.api.methodSignature\"].length)for(n=0;n<e[\".google.api.methodSignature\"].length;++n)t.uint32(8410).string(e[\".google.api.methodSignature\"][n]);return null!=e[\".google.api.http\"]&&Object.hasOwnProperty.call(e,\".google.api.http\")&&c.google.api.HttpRule.encode(e[\".google.api.http\"],t.uint32(578365826).fork()).ldelim(),t},N.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},N.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.MethodOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 33:o.deprecated=e.bool();break;case 34:o.idempotencyLevel=e.int32();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(c.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;case 72295728:o[\".google.api.http\"]=c.google.api.HttpRule.decode(e,e.uint32());break;case 1051:o[\".google.api.methodSignature\"]&&o[\".google.api.methodSignature\"].length||(o[\".google.api.methodSignature\"]=[]),o[\".google.api.methodSignature\"].push(e.string());break;default:e.skipType(7&r)}}return o},N.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},N.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.idempotencyLevel&&e.hasOwnProperty(\"idempotencyLevel\"))switch(e.idempotencyLevel){default:return\"idempotencyLevel: enum value expected\";case 0:case 1:case 2:}if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t)if(n=c.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]))return\"uninterpretedOption.\"+n}var n;if(null!=e[\".google.api.http\"]&&e.hasOwnProperty(\".google.api.http\")&&(n=c.google.api.HttpRule.verify(e[\".google.api.http\"])))return\".google.api.http.\"+n;if(null!=e[\".google.api.methodSignature\"]&&e.hasOwnProperty(\".google.api.methodSignature\")){if(!Array.isArray(e[\".google.api.methodSignature\"]))return\".google.api.methodSignature: array expected\";for(t=0;t<e[\".google.api.methodSignature\"].length;++t)if(!u.isString(e[\".google.api.methodSignature\"][t]))return\".google.api.methodSignature: string[] expected\"}return null},N.fromObject=function(e){if(e instanceof c.google.protobuf.MethodOptions)return e;var t=new c.google.protobuf.MethodOptions;switch(null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),e.idempotencyLevel){case\"IDEMPOTENCY_UNKNOWN\":case 0:t.idempotencyLevel=0;break;case\"NO_SIDE_EFFECTS\":case 1:t.idempotencyLevel=1;break;case\"IDEMPOTENT\":case 2:t.idempotencyLevel=2}if(e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.MethodOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.MethodOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=c.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}if(null!=e[\".google.api.http\"]){if(\"object\"!=typeof e[\".google.api.http\"])throw TypeError(\".google.protobuf.MethodOptions..google.api.http: object expected\");t[\".google.api.http\"]=c.google.api.HttpRule.fromObject(e[\".google.api.http\"])}if(e[\".google.api.methodSignature\"]){if(!Array.isArray(e[\".google.api.methodSignature\"]))throw TypeError(\".google.protobuf.MethodOptions..google.api.methodSignature: array expected\");t[\".google.api.methodSignature\"]=[];for(n=0;n<e[\".google.api.methodSignature\"].length;++n)t[\".google.api.methodSignature\"][n]=String(e[\".google.api.methodSignature\"][n])}return t},N.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[],n[\".google.api.methodSignature\"]=[]),t.defaults&&(n.deprecated=!1,n.idempotencyLevel=t.enums===String?\"IDEMPOTENCY_UNKNOWN\":0,n[\".google.api.http\"]=null),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),null!=e.idempotencyLevel&&e.hasOwnProperty(\"idempotencyLevel\")&&(n.idempotencyLevel=t.enums===String?c.google.protobuf.MethodOptions.IdempotencyLevel[e.idempotencyLevel]:e.idempotencyLevel),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=c.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}if(e[\".google.api.methodSignature\"]&&e[\".google.api.methodSignature\"].length){n[\".google.api.methodSignature\"]=[];for(o=0;o<e[\".google.api.methodSignature\"].length;++o)n[\".google.api.methodSignature\"][o]=e[\".google.api.methodSignature\"][o]}return null!=e[\".google.api.http\"]&&e.hasOwnProperty(\".google.api.http\")&&(n[\".google.api.http\"]=c.google.api.HttpRule.toObject(e[\".google.api.http\"],t)),n},N.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},N.IdempotencyLevel=(e={},(t=Object.create(e))[e[0]=\"IDEMPOTENCY_UNKNOWN\"]=0,t[e[1]=\"NO_SIDE_EFFECTS\"]=1,t[e[2]=\"IDEMPOTENT\"]=2,t),N),n.UninterpretedOption=(I.prototype.name=u.emptyArray,I.prototype.identifierValue=\"\",I.prototype.positiveIntValue=u.Long?u.Long.fromBits(0,0,!0):0,I.prototype.negativeIntValue=u.Long?u.Long.fromBits(0,0,!1):0,I.prototype.doubleValue=0,I.prototype.stringValue=u.newBuffer([]),I.prototype.aggregateValue=\"\",I.create=function(e){return new I(e)},I.encode=function(e,t){if(t=t||r.create(),null!=e.name&&e.name.length)for(var n=0;n<e.name.length;++n)c.google.protobuf.UninterpretedOption.NamePart.encode(e.name[n],t.uint32(18).fork()).ldelim();return null!=e.identifierValue&&Object.hasOwnProperty.call(e,\"identifierValue\")&&t.uint32(26).string(e.identifierValue),null!=e.positiveIntValue&&Object.hasOwnProperty.call(e,\"positiveIntValue\")&&t.uint32(32).uint64(e.positiveIntValue),null!=e.negativeIntValue&&Object.hasOwnProperty.call(e,\"negativeIntValue\")&&t.uint32(40).int64(e.negativeIntValue),null!=e.doubleValue&&Object.hasOwnProperty.call(e,\"doubleValue\")&&t.uint32(49).double(e.doubleValue),null!=e.stringValue&&Object.hasOwnProperty.call(e,\"stringValue\")&&t.uint32(58).bytes(e.stringValue),null!=e.aggregateValue&&Object.hasOwnProperty.call(e,\"aggregateValue\")&&t.uint32(66).string(e.aggregateValue),t},I.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},I.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.UninterpretedOption;e.pos<n;){var r=e.uint32();switch(r>>>3){case 2:o.name&&o.name.length||(o.name=[]),o.name.push(c.google.protobuf.UninterpretedOption.NamePart.decode(e,e.uint32()));break;case 3:o.identifierValue=e.string();break;case 4:o.positiveIntValue=e.uint64();break;case 5:o.negativeIntValue=e.int64();break;case 6:o.doubleValue=e.double();break;case 7:o.stringValue=e.bytes();break;case 8:o.aggregateValue=e.string();break;default:e.skipType(7&r)}}return o},I.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},I.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")){if(!Array.isArray(e.name))return\"name: array expected\";for(var t=0;t<e.name.length;++t){var n=c.google.protobuf.UninterpretedOption.NamePart.verify(e.name[t]);if(n)return\"name.\"+n}}return null!=e.identifierValue&&e.hasOwnProperty(\"identifierValue\")&&!u.isString(e.identifierValue)?\"identifierValue: string expected\":null!=e.positiveIntValue&&e.hasOwnProperty(\"positiveIntValue\")&&!(u.isInteger(e.positiveIntValue)||e.positiveIntValue&&u.isInteger(e.positiveIntValue.low)&&u.isInteger(e.positiveIntValue.high))?\"positiveIntValue: integer|Long expected\":null!=e.negativeIntValue&&e.hasOwnProperty(\"negativeIntValue\")&&!(u.isInteger(e.negativeIntValue)||e.negativeIntValue&&u.isInteger(e.negativeIntValue.low)&&u.isInteger(e.negativeIntValue.high))?\"negativeIntValue: integer|Long expected\":null!=e.doubleValue&&e.hasOwnProperty(\"doubleValue\")&&\"number\"!=typeof e.doubleValue?\"doubleValue: number expected\":null!=e.stringValue&&e.hasOwnProperty(\"stringValue\")&&!(e.stringValue&&\"number\"==typeof e.stringValue.length||u.isString(e.stringValue))?\"stringValue: buffer expected\":null!=e.aggregateValue&&e.hasOwnProperty(\"aggregateValue\")&&!u.isString(e.aggregateValue)?\"aggregateValue: string expected\":null},I.fromObject=function(e){if(e instanceof c.google.protobuf.UninterpretedOption)return e;var t=new c.google.protobuf.UninterpretedOption;if(e.name){if(!Array.isArray(e.name))throw TypeError(\".google.protobuf.UninterpretedOption.name: array expected\");t.name=[];for(var n=0;n<e.name.length;++n){if(\"object\"!=typeof e.name[n])throw TypeError(\".google.protobuf.UninterpretedOption.name: object expected\");t.name[n]=c.google.protobuf.UninterpretedOption.NamePart.fromObject(e.name[n])}}return null!=e.identifierValue&&(t.identifierValue=String(e.identifierValue)),null!=e.positiveIntValue&&(u.Long?(t.positiveIntValue=u.Long.fromValue(e.positiveIntValue)).unsigned=!0:\"string\"==typeof e.positiveIntValue?t.positiveIntValue=parseInt(e.positiveIntValue,10):\"number\"==typeof e.positiveIntValue?t.positiveIntValue=e.positiveIntValue:\"object\"==typeof e.positiveIntValue&&(t.positiveIntValue=new u.LongBits(e.positiveIntValue.low>>>0,e.positiveIntValue.high>>>0).toNumber(!0))),null!=e.negativeIntValue&&(u.Long?(t.negativeIntValue=u.Long.fromValue(e.negativeIntValue)).unsigned=!1:\"string\"==typeof e.negativeIntValue?t.negativeIntValue=parseInt(e.negativeIntValue,10):\"number\"==typeof e.negativeIntValue?t.negativeIntValue=e.negativeIntValue:\"object\"==typeof e.negativeIntValue&&(t.negativeIntValue=new u.LongBits(e.negativeIntValue.low>>>0,e.negativeIntValue.high>>>0).toNumber())),null!=e.doubleValue&&(t.doubleValue=Number(e.doubleValue)),null!=e.stringValue&&(\"string\"==typeof e.stringValue?u.base64.decode(e.stringValue,t.stringValue=u.newBuffer(u.base64.length(e.stringValue)),0):e.stringValue.length&&(t.stringValue=e.stringValue)),null!=e.aggregateValue&&(t.aggregateValue=String(e.aggregateValue)),t},I.toObject=function(e,t){var n,o={};if(((t=t||{}).arrays||t.defaults)&&(o.name=[]),t.defaults&&(o.identifierValue=\"\",u.Long?(n=new u.Long(0,0,!0),o.positiveIntValue=t.longs===String?n.toString():t.longs===Number?n.toNumber():n):o.positiveIntValue=t.longs===String?\"0\":0,u.Long?(n=new u.Long(0,0,!1),o.negativeIntValue=t.longs===String?n.toString():t.longs===Number?n.toNumber():n):o.negativeIntValue=t.longs===String?\"0\":0,o.doubleValue=0,t.bytes===String?o.stringValue=\"\":(o.stringValue=[],t.bytes!==Array&&(o.stringValue=u.newBuffer(o.stringValue))),o.aggregateValue=\"\"),e.name&&e.name.length){o.name=[];for(var r=0;r<e.name.length;++r)o.name[r]=c.google.protobuf.UninterpretedOption.NamePart.toObject(e.name[r],t)}return null!=e.identifierValue&&e.hasOwnProperty(\"identifierValue\")&&(o.identifierValue=e.identifierValue),null!=e.positiveIntValue&&e.hasOwnProperty(\"positiveIntValue\")&&(\"number\"==typeof e.positiveIntValue?o.positiveIntValue=t.longs===String?String(e.positiveIntValue):e.positiveIntValue:o.positiveIntValue=t.longs===String?u.Long.prototype.toString.call(e.positiveIntValue):t.longs===Number?new u.LongBits(e.positiveIntValue.low>>>0,e.positiveIntValue.high>>>0).toNumber(!0):e.positiveIntValue),null!=e.negativeIntValue&&e.hasOwnProperty(\"negativeIntValue\")&&(\"number\"==typeof e.negativeIntValue?o.negativeIntValue=t.longs===String?String(e.negativeIntValue):e.negativeIntValue:o.negativeIntValue=t.longs===String?u.Long.prototype.toString.call(e.negativeIntValue):t.longs===Number?new u.LongBits(e.negativeIntValue.low>>>0,e.negativeIntValue.high>>>0).toNumber():e.negativeIntValue),null!=e.doubleValue&&e.hasOwnProperty(\"doubleValue\")&&(o.doubleValue=t.json&&!isFinite(e.doubleValue)?String(e.doubleValue):e.doubleValue),null!=e.stringValue&&e.hasOwnProperty(\"stringValue\")&&(o.stringValue=t.bytes===String?u.base64.encode(e.stringValue,0,e.stringValue.length):t.bytes===Array?Array.prototype.slice.call(e.stringValue):e.stringValue),null!=e.aggregateValue&&e.hasOwnProperty(\"aggregateValue\")&&(o.aggregateValue=e.aggregateValue),o},I.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},I.NamePart=(R.prototype.namePart=\"\",R.prototype.isExtension=!1,R.create=function(e){return new R(e)},R.encode=function(e,t){return(t=t||r.create()).uint32(10).string(e.namePart),t.uint32(16).bool(e.isExtension),t},R.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},R.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.UninterpretedOption.NamePart;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.namePart=e.string();break;case 2:o.isExtension=e.bool();break;default:e.skipType(7&r)}}if(!o.hasOwnProperty(\"namePart\"))throw u.ProtocolError(\"missing required 'namePart'\",{instance:o});if(o.hasOwnProperty(\"isExtension\"))return o;throw u.ProtocolError(\"missing required 'isExtension'\",{instance:o})},R.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},R.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":u.isString(e.namePart)?\"boolean\"!=typeof e.isExtension?\"isExtension: boolean expected\":null:\"namePart: string expected\"},R.fromObject=function(e){var t;return e instanceof c.google.protobuf.UninterpretedOption.NamePart?e:(t=new c.google.protobuf.UninterpretedOption.NamePart,null!=e.namePart&&(t.namePart=String(e.namePart)),null!=e.isExtension&&(t.isExtension=Boolean(e.isExtension)),t)},R.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.namePart=\"\",n.isExtension=!1),null!=e.namePart&&e.hasOwnProperty(\"namePart\")&&(n.namePart=e.namePart),null!=e.isExtension&&e.hasOwnProperty(\"isExtension\")&&(n.isExtension=e.isExtension),n},R.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},R),I),n.SourceCodeInfo=(_.prototype.location=u.emptyArray,_.create=function(e){return new _(e)},_.encode=function(e,t){if(t=t||r.create(),null!=e.location&&e.location.length)for(var n=0;n<e.location.length;++n)c.google.protobuf.SourceCodeInfo.Location.encode(e.location[n],t.uint32(10).fork()).ldelim();return t},_.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},_.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.SourceCodeInfo;e.pos<n;){var r=e.uint32();r>>>3==1?(o.location&&o.location.length||(o.location=[]),o.location.push(c.google.protobuf.SourceCodeInfo.Location.decode(e,e.uint32()))):e.skipType(7&r)}return o},_.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},_.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.location&&e.hasOwnProperty(\"location\")){if(!Array.isArray(e.location))return\"location: array expected\";for(var t=0;t<e.location.length;++t){var n=c.google.protobuf.SourceCodeInfo.Location.verify(e.location[t]);if(n)return\"location.\"+n}}return null},_.fromObject=function(e){if(e instanceof c.google.protobuf.SourceCodeInfo)return e;var t=new c.google.protobuf.SourceCodeInfo;if(e.location){if(!Array.isArray(e.location))throw TypeError(\".google.protobuf.SourceCodeInfo.location: array expected\");t.location=[];for(var n=0;n<e.location.length;++n){if(\"object\"!=typeof e.location[n])throw TypeError(\".google.protobuf.SourceCodeInfo.location: object expected\");t.location[n]=c.google.protobuf.SourceCodeInfo.Location.fromObject(e.location[n])}}return t},_.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.location=[]),e.location&&e.location.length){n.location=[];for(var o=0;o<e.location.length;++o)n.location[o]=c.google.protobuf.SourceCodeInfo.Location.toObject(e.location[o],t)}return n},_.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},_.Location=(C.prototype.path=u.emptyArray,C.prototype.span=u.emptyArray,C.prototype.leadingComments=\"\",C.prototype.trailingComments=\"\",C.prototype.leadingDetachedComments=u.emptyArray,C.create=function(e){return new C(e)},C.encode=function(e,t){if(t=t||r.create(),null!=e.path&&e.path.length){t.uint32(10).fork();for(var n=0;n<e.path.length;++n)t.int32(e.path[n]);t.ldelim()}if(null!=e.span&&e.span.length){t.uint32(18).fork();for(n=0;n<e.span.length;++n)t.int32(e.span[n]);t.ldelim()}if(null!=e.leadingComments&&Object.hasOwnProperty.call(e,\"leadingComments\")&&t.uint32(26).string(e.leadingComments),null!=e.trailingComments&&Object.hasOwnProperty.call(e,\"trailingComments\")&&t.uint32(34).string(e.trailingComments),null!=e.leadingDetachedComments&&e.leadingDetachedComments.length)for(n=0;n<e.leadingDetachedComments.length;++n)t.uint32(50).string(e.leadingDetachedComments[n]);return t},C.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},C.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.SourceCodeInfo.Location;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:if(o.path&&o.path.length||(o.path=[]),2==(7&r))for(var i=e.uint32()+e.pos;e.pos<i;)o.path.push(e.int32());else o.path.push(e.int32());break;case 2:if(o.span&&o.span.length||(o.span=[]),2==(7&r))for(i=e.uint32()+e.pos;e.pos<i;)o.span.push(e.int32());else o.span.push(e.int32());break;case 3:o.leadingComments=e.string();break;case 4:o.trailingComments=e.string();break;case 6:o.leadingDetachedComments&&o.leadingDetachedComments.length||(o.leadingDetachedComments=[]),o.leadingDetachedComments.push(e.string());break;default:e.skipType(7&r)}}return o},C.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},C.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.path&&e.hasOwnProperty(\"path\")){if(!Array.isArray(e.path))return\"path: array expected\";for(var t=0;t<e.path.length;++t)if(!u.isInteger(e.path[t]))return\"path: integer[] expected\"}if(null!=e.span&&e.hasOwnProperty(\"span\")){if(!Array.isArray(e.span))return\"span: array expected\";for(t=0;t<e.span.length;++t)if(!u.isInteger(e.span[t]))return\"span: integer[] expected\"}if(null!=e.leadingComments&&e.hasOwnProperty(\"leadingComments\")&&!u.isString(e.leadingComments))return\"leadingComments: string expected\";if(null!=e.trailingComments&&e.hasOwnProperty(\"trailingComments\")&&!u.isString(e.trailingComments))return\"trailingComments: string expected\";if(null!=e.leadingDetachedComments&&e.hasOwnProperty(\"leadingDetachedComments\")){if(!Array.isArray(e.leadingDetachedComments))return\"leadingDetachedComments: array expected\";for(t=0;t<e.leadingDetachedComments.length;++t)if(!u.isString(e.leadingDetachedComments[t]))return\"leadingDetachedComments: string[] expected\"}return null},C.fromObject=function(e){if(e instanceof c.google.protobuf.SourceCodeInfo.Location)return e;var t=new c.google.protobuf.SourceCodeInfo.Location;if(e.path){if(!Array.isArray(e.path))throw TypeError(\".google.protobuf.SourceCodeInfo.Location.path: array expected\");t.path=[];for(var n=0;n<e.path.length;++n)t.path[n]=0|e.path[n]}if(e.span){if(!Array.isArray(e.span))throw TypeError(\".google.protobuf.SourceCodeInfo.Location.span: array expected\");t.span=[];for(n=0;n<e.span.length;++n)t.span[n]=0|e.span[n]}if(null!=e.leadingComments&&(t.leadingComments=String(e.leadingComments)),null!=e.trailingComments&&(t.trailingComments=String(e.trailingComments)),e.leadingDetachedComments){if(!Array.isArray(e.leadingDetachedComments))throw TypeError(\".google.protobuf.SourceCodeInfo.Location.leadingDetachedComments: array expected\");t.leadingDetachedComments=[];for(n=0;n<e.leadingDetachedComments.length;++n)t.leadingDetachedComments[n]=String(e.leadingDetachedComments[n])}return t},C.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.path=[],n.span=[],n.leadingDetachedComments=[]),t.defaults&&(n.leadingComments=\"\",n.trailingComments=\"\"),e.path&&e.path.length){n.path=[];for(var o=0;o<e.path.length;++o)n.path[o]=e.path[o]}if(e.span&&e.span.length){n.span=[];for(o=0;o<e.span.length;++o)n.span[o]=e.span[o]}if(null!=e.leadingComments&&e.hasOwnProperty(\"leadingComments\")&&(n.leadingComments=e.leadingComments),null!=e.trailingComments&&e.hasOwnProperty(\"trailingComments\")&&(n.trailingComments=e.trailingComments),e.leadingDetachedComments&&e.leadingDetachedComments.length){n.leadingDetachedComments=[];for(o=0;o<e.leadingDetachedComments.length;++o)n.leadingDetachedComments[o]=e.leadingDetachedComments[o]}return n},C.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},C),_),n.GeneratedCodeInfo=(J.prototype.annotation=u.emptyArray,J.create=function(e){return new J(e)},J.encode=function(e,t){if(t=t||r.create(),null!=e.annotation&&e.annotation.length)for(var n=0;n<e.annotation.length;++n)c.google.protobuf.GeneratedCodeInfo.Annotation.encode(e.annotation[n],t.uint32(10).fork()).ldelim();return t},J.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},J.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.GeneratedCodeInfo;e.pos<n;){var r=e.uint32();r>>>3==1?(o.annotation&&o.annotation.length||(o.annotation=[]),o.annotation.push(c.google.protobuf.GeneratedCodeInfo.Annotation.decode(e,e.uint32()))):e.skipType(7&r)}return o},J.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},J.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.annotation&&e.hasOwnProperty(\"annotation\")){if(!Array.isArray(e.annotation))return\"annotation: array expected\";for(var t=0;t<e.annotation.length;++t){var n=c.google.protobuf.GeneratedCodeInfo.Annotation.verify(e.annotation[t]);if(n)return\"annotation.\"+n}}return null},J.fromObject=function(e){if(e instanceof c.google.protobuf.GeneratedCodeInfo)return e;var t=new c.google.protobuf.GeneratedCodeInfo;if(e.annotation){if(!Array.isArray(e.annotation))throw TypeError(\".google.protobuf.GeneratedCodeInfo.annotation: array expected\");t.annotation=[];for(var n=0;n<e.annotation.length;++n){if(\"object\"!=typeof e.annotation[n])throw TypeError(\".google.protobuf.GeneratedCodeInfo.annotation: object expected\");t.annotation[n]=c.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(e.annotation[n])}}return t},J.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.annotation=[]),e.annotation&&e.annotation.length){n.annotation=[];for(var o=0;o<e.annotation.length;++o)n.annotation[o]=c.google.protobuf.GeneratedCodeInfo.Annotation.toObject(e.annotation[o],t)}return n},J.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},J.Annotation=(V.prototype.path=u.emptyArray,V.prototype.sourceFile=\"\",V.prototype.begin=0,V.prototype.end=0,V.create=function(e){return new V(e)},V.encode=function(e,t){if(t=t||r.create(),null!=e.path&&e.path.length){t.uint32(10).fork();for(var n=0;n<e.path.length;++n)t.int32(e.path[n]);t.ldelim()}return null!=e.sourceFile&&Object.hasOwnProperty.call(e,\"sourceFile\")&&t.uint32(18).string(e.sourceFile),null!=e.begin&&Object.hasOwnProperty.call(e,\"begin\")&&t.uint32(24).int32(e.begin),null!=e.end&&Object.hasOwnProperty.call(e,\"end\")&&t.uint32(32).int32(e.end),t},V.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},V.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.GeneratedCodeInfo.Annotation;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:if(o.path&&o.path.length||(o.path=[]),2==(7&r))for(var i=e.uint32()+e.pos;e.pos<i;)o.path.push(e.int32());else o.path.push(e.int32());break;case 2:o.sourceFile=e.string();break;case 3:o.begin=e.int32();break;case 4:o.end=e.int32();break;default:e.skipType(7&r)}}return o},V.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},V.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.path&&e.hasOwnProperty(\"path\")){if(!Array.isArray(e.path))return\"path: array expected\";for(var t=0;t<e.path.length;++t)if(!u.isInteger(e.path[t]))return\"path: integer[] expected\"}return null!=e.sourceFile&&e.hasOwnProperty(\"sourceFile\")&&!u.isString(e.sourceFile)?\"sourceFile: string expected\":null!=e.begin&&e.hasOwnProperty(\"begin\")&&!u.isInteger(e.begin)?\"begin: integer expected\":null!=e.end&&e.hasOwnProperty(\"end\")&&!u.isInteger(e.end)?\"end: integer expected\":null},V.fromObject=function(e){if(e instanceof c.google.protobuf.GeneratedCodeInfo.Annotation)return e;var t=new c.google.protobuf.GeneratedCodeInfo.Annotation;if(e.path){if(!Array.isArray(e.path))throw TypeError(\".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected\");t.path=[];for(var n=0;n<e.path.length;++n)t.path[n]=0|e.path[n]}return null!=e.sourceFile&&(t.sourceFile=String(e.sourceFile)),null!=e.begin&&(t.begin=0|e.begin),null!=e.end&&(t.end=0|e.end),t},V.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.path=[]),t.defaults&&(n.sourceFile=\"\",n.begin=0,n.end=0),e.path&&e.path.length){n.path=[];for(var o=0;o<e.path.length;++o)n.path[o]=e.path[o]}return null!=e.sourceFile&&e.hasOwnProperty(\"sourceFile\")&&(n.sourceFile=e.sourceFile),null!=e.begin&&e.hasOwnProperty(\"begin\")&&(n.begin=e.begin),null!=e.end&&e.hasOwnProperty(\"end\")&&(n.end=e.end),n},V.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},V),J),n.Any=(H.prototype.type_url=\"\",H.prototype.value=u.newBuffer([]),H.create=function(e){return new H(e)},H.encode=function(e,t){return t=t||r.create(),null!=e.type_url&&Object.hasOwnProperty.call(e,\"type_url\")&&t.uint32(10).string(e.type_url),null!=e.value&&Object.hasOwnProperty.call(e,\"value\")&&t.uint32(18).bytes(e.value),t},H.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},H.decode=function(e,t){e instanceof s||(e=s.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new c.google.protobuf.Any;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.type_url=e.string();break;case 2:o.value=e.bytes();break;default:e.skipType(7&r)}}return o},H.decodeDelimited=function(e){return e instanceof s||(e=new s(e)),this.decode(e,e.uint32())},H.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.type_url&&e.hasOwnProperty(\"type_url\")&&!u.isString(e.type_url)?\"type_url: string expected\":null!=e.value&&e.hasOwnProperty(\"value\")&&!(e.value&&\"number\"==typeof e.value.length||u.isString(e.value))?\"value: buffer expected\":null},H.fromObject=function(e){var t;return e instanceof c.google.protobuf.Any?e:(t=new c.google.protobuf.Any,null!=e.type_url&&(t.type_url=String(e.type_url)),null!=e.value&&(\"string\"==typeof e.value?u.base64.decode(e.value,t.value=u.newBuffer(u.base64.length(e.value)),0):e.value.length&&(t.value=e.value)),t)},H.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.type_url=\"\",t.bytes===String?n.value=\"\":(n.value=[],t.bytes!==Array&&(n.value=u.newBuffer(n.value)))),null!=e.type_url&&e.hasOwnProperty(\"type_url\")&&(n.type_url=e.type_url),null!=e.value&&e.hasOwnProperty(\"value\")&&(n.value=t.bytes===String?u.base64.encode(e.value,0,e.value.length):t.bytes===Array?Array.prototype.slice.call(e.value):e.value),n},H.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},H),n),F),c});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/protos/locations.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/protos/operations.js":
/*!************************************************************!*\
  !*** ./node_modules/google-gax/build/protos/operations.js ***!
  \************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(e=>{ true?!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! protobufjs/minimal */ \"(rsc)/./node_modules/protobufjs/minimal.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (e),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)):0})(function(o){var e,t,n,F,a=o.Reader,r=o.Writer,i=o.util,p=o.roots.operations_protos||(o.roots.operations_protos={});function G(e,t,n){o.rpc.Service.call(this,e,t,n)}function l(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function B(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function s(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function u(e){if(this.operations=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function L(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function U(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function c(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function d(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function g(e){if(this.rules=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function f(e){if(this.additionalBindings=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function y(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function J(e){if(this.file=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function h(e){if(this.dependency=[],this.publicDependency=[],this.weakDependency=[],this.messageType=[],this.enumType=[],this.service=[],this.extension=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function O(e){if(this.field=[],this.extension=[],this.nestedType=[],this.enumType=[],this.extensionRange=[],this.oneofDecl=[],this.reservedRange=[],this.reservedName=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function b(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function m(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function M(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function v(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function w(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function P(e){if(this.value=[],this.reservedRange=[],this.reservedName=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function _(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function j(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function S(e){if(this.method=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function x(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function k(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function D(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function T(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function H(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function E(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function z(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function A(e){if(this.uninterpretedOption=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function N(e){if(this.uninterpretedOption=[],this[\".google.api.methodSignature\"]=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function I(e){if(this.name=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function q(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function Y(e){if(this.location=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function R(e){if(this.path=[],this.span=[],this.leadingDetachedComments=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function W(e){if(this.annotation=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function C(e){if(this.path=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function X(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function K(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function Q(e){if(e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}function V(e){if(this.details=[],e)for(var t=Object.keys(e),n=0;n<t.length;++n)null!=e[t[n]]&&(this[t[n]]=e[t[n]])}return p.google=((F={}).longrunning=((t={}).Operations=(((G.prototype=Object.create(o.rpc.Service.prototype)).constructor=G).create=function(e,t,n){return new this(e,t,n)},Object.defineProperty(G.prototype.listOperations=function e(t,n){return this.rpcCall(e,p.google.longrunning.ListOperationsRequest,p.google.longrunning.ListOperationsResponse,t,n)},\"name\",{value:\"ListOperations\"}),Object.defineProperty(G.prototype.getOperation=function e(t,n){return this.rpcCall(e,p.google.longrunning.GetOperationRequest,p.google.longrunning.Operation,t,n)},\"name\",{value:\"GetOperation\"}),Object.defineProperty(G.prototype.deleteOperation=function e(t,n){return this.rpcCall(e,p.google.longrunning.DeleteOperationRequest,p.google.protobuf.Empty,t,n)},\"name\",{value:\"DeleteOperation\"}),Object.defineProperty(G.prototype.cancelOperation=function e(t,n){return this.rpcCall(e,p.google.longrunning.CancelOperationRequest,p.google.protobuf.Empty,t,n)},\"name\",{value:\"CancelOperation\"}),Object.defineProperty(G.prototype.waitOperation=function e(t,n){return this.rpcCall(e,p.google.longrunning.WaitOperationRequest,p.google.longrunning.Operation,t,n)},\"name\",{value:\"WaitOperation\"}),G),t.Operation=(l.prototype.name=\"\",l.prototype.metadata=null,l.prototype.done=!1,l.prototype.error=null,l.prototype.response=null,Object.defineProperty(l.prototype,\"result\",{get:i.oneOfGetter(n=[\"error\",\"response\"]),set:i.oneOfSetter(n)}),l.create=function(e){return new l(e)},l.encode=function(e,t){return t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.metadata&&Object.hasOwnProperty.call(e,\"metadata\")&&p.google.protobuf.Any.encode(e.metadata,t.uint32(18).fork()).ldelim(),null!=e.done&&Object.hasOwnProperty.call(e,\"done\")&&t.uint32(24).bool(e.done),null!=e.error&&Object.hasOwnProperty.call(e,\"error\")&&p.google.rpc.Status.encode(e.error,t.uint32(34).fork()).ldelim(),null!=e.response&&Object.hasOwnProperty.call(e,\"response\")&&p.google.protobuf.Any.encode(e.response,t.uint32(42).fork()).ldelim(),t},l.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},l.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.longrunning.Operation;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.metadata=p.google.protobuf.Any.decode(e,e.uint32());break;case 3:o.done=e.bool();break;case 4:o.error=p.google.rpc.Status.decode(e,e.uint32());break;case 5:o.response=p.google.protobuf.Any.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},l.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},l.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";var t,n={};if(null!=e.name&&e.hasOwnProperty(\"name\")&&!i.isString(e.name))return\"name: string expected\";if(null!=e.metadata&&e.hasOwnProperty(\"metadata\")&&(t=p.google.protobuf.Any.verify(e.metadata)))return\"metadata.\"+t;if(null!=e.done&&e.hasOwnProperty(\"done\")&&\"boolean\"!=typeof e.done)return\"done: boolean expected\";if(null!=e.error&&e.hasOwnProperty(\"error\")&&(n.result=1,t=p.google.rpc.Status.verify(e.error)))return\"error.\"+t;if(null!=e.response&&e.hasOwnProperty(\"response\")){if(1===n.result)return\"result: multiple values\";if(n.result=1,t=p.google.protobuf.Any.verify(e.response))return\"response.\"+t}return null},l.fromObject=function(e){if(e instanceof p.google.longrunning.Operation)return e;var t=new p.google.longrunning.Operation;if(null!=e.name&&(t.name=String(e.name)),null!=e.metadata){if(\"object\"!=typeof e.metadata)throw TypeError(\".google.longrunning.Operation.metadata: object expected\");t.metadata=p.google.protobuf.Any.fromObject(e.metadata)}if(null!=e.done&&(t.done=Boolean(e.done)),null!=e.error){if(\"object\"!=typeof e.error)throw TypeError(\".google.longrunning.Operation.error: object expected\");t.error=p.google.rpc.Status.fromObject(e.error)}if(null!=e.response){if(\"object\"!=typeof e.response)throw TypeError(\".google.longrunning.Operation.response: object expected\");t.response=p.google.protobuf.Any.fromObject(e.response)}return t},l.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\",n.metadata=null,n.done=!1),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.metadata&&e.hasOwnProperty(\"metadata\")&&(n.metadata=p.google.protobuf.Any.toObject(e.metadata,t)),null!=e.done&&e.hasOwnProperty(\"done\")&&(n.done=e.done),null!=e.error&&e.hasOwnProperty(\"error\")&&(n.error=p.google.rpc.Status.toObject(e.error,t),t.oneofs)&&(n.result=\"error\"),null!=e.response&&e.hasOwnProperty(\"response\")&&(n.response=p.google.protobuf.Any.toObject(e.response,t),t.oneofs)&&(n.result=\"response\"),n},l.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},l),t.GetOperationRequest=(B.prototype.name=\"\",B.create=function(e){return new B(e)},B.encode=function(e,t){return t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),t},B.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},B.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.longrunning.GetOperationRequest;e.pos<n;){var r=e.uint32();r>>>3==1?o.name=e.string():e.skipType(7&r)}return o},B.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},B.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.name&&e.hasOwnProperty(\"name\")&&!i.isString(e.name)?\"name: string expected\":null},B.fromObject=function(e){var t;return e instanceof p.google.longrunning.GetOperationRequest?e:(t=new p.google.longrunning.GetOperationRequest,null!=e.name&&(t.name=String(e.name)),t)},B.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\"),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),n},B.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},B),t.ListOperationsRequest=(s.prototype.name=\"\",s.prototype.filter=\"\",s.prototype.pageSize=0,s.prototype.pageToken=\"\",s.create=function(e){return new s(e)},s.encode=function(e,t){return t=t||r.create(),null!=e.filter&&Object.hasOwnProperty.call(e,\"filter\")&&t.uint32(10).string(e.filter),null!=e.pageSize&&Object.hasOwnProperty.call(e,\"pageSize\")&&t.uint32(16).int32(e.pageSize),null!=e.pageToken&&Object.hasOwnProperty.call(e,\"pageToken\")&&t.uint32(26).string(e.pageToken),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(34).string(e.name),t},s.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},s.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.longrunning.ListOperationsRequest;e.pos<n;){var r=e.uint32();switch(r>>>3){case 4:o.name=e.string();break;case 1:o.filter=e.string();break;case 2:o.pageSize=e.int32();break;case 3:o.pageToken=e.string();break;default:e.skipType(7&r)}}return o},s.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},s.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.name&&e.hasOwnProperty(\"name\")&&!i.isString(e.name)?\"name: string expected\":null!=e.filter&&e.hasOwnProperty(\"filter\")&&!i.isString(e.filter)?\"filter: string expected\":null!=e.pageSize&&e.hasOwnProperty(\"pageSize\")&&!i.isInteger(e.pageSize)?\"pageSize: integer expected\":null!=e.pageToken&&e.hasOwnProperty(\"pageToken\")&&!i.isString(e.pageToken)?\"pageToken: string expected\":null},s.fromObject=function(e){var t;return e instanceof p.google.longrunning.ListOperationsRequest?e:(t=new p.google.longrunning.ListOperationsRequest,null!=e.name&&(t.name=String(e.name)),null!=e.filter&&(t.filter=String(e.filter)),null!=e.pageSize&&(t.pageSize=0|e.pageSize),null!=e.pageToken&&(t.pageToken=String(e.pageToken)),t)},s.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.filter=\"\",n.pageSize=0,n.pageToken=\"\",n.name=\"\"),null!=e.filter&&e.hasOwnProperty(\"filter\")&&(n.filter=e.filter),null!=e.pageSize&&e.hasOwnProperty(\"pageSize\")&&(n.pageSize=e.pageSize),null!=e.pageToken&&e.hasOwnProperty(\"pageToken\")&&(n.pageToken=e.pageToken),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),n},s.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},s),t.ListOperationsResponse=(u.prototype.operations=i.emptyArray,u.prototype.nextPageToken=\"\",u.create=function(e){return new u(e)},u.encode=function(e,t){if(t=t||r.create(),null!=e.operations&&e.operations.length)for(var n=0;n<e.operations.length;++n)p.google.longrunning.Operation.encode(e.operations[n],t.uint32(10).fork()).ldelim();return null!=e.nextPageToken&&Object.hasOwnProperty.call(e,\"nextPageToken\")&&t.uint32(18).string(e.nextPageToken),t},u.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},u.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.longrunning.ListOperationsResponse;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.operations&&o.operations.length||(o.operations=[]),o.operations.push(p.google.longrunning.Operation.decode(e,e.uint32()));break;case 2:o.nextPageToken=e.string();break;default:e.skipType(7&r)}}return o},u.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},u.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.operations&&e.hasOwnProperty(\"operations\")){if(!Array.isArray(e.operations))return\"operations: array expected\";for(var t=0;t<e.operations.length;++t){var n=p.google.longrunning.Operation.verify(e.operations[t]);if(n)return\"operations.\"+n}}return null!=e.nextPageToken&&e.hasOwnProperty(\"nextPageToken\")&&!i.isString(e.nextPageToken)?\"nextPageToken: string expected\":null},u.fromObject=function(e){if(e instanceof p.google.longrunning.ListOperationsResponse)return e;var t=new p.google.longrunning.ListOperationsResponse;if(e.operations){if(!Array.isArray(e.operations))throw TypeError(\".google.longrunning.ListOperationsResponse.operations: array expected\");t.operations=[];for(var n=0;n<e.operations.length;++n){if(\"object\"!=typeof e.operations[n])throw TypeError(\".google.longrunning.ListOperationsResponse.operations: object expected\");t.operations[n]=p.google.longrunning.Operation.fromObject(e.operations[n])}}return null!=e.nextPageToken&&(t.nextPageToken=String(e.nextPageToken)),t},u.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.operations=[]),t.defaults&&(n.nextPageToken=\"\"),e.operations&&e.operations.length){n.operations=[];for(var o=0;o<e.operations.length;++o)n.operations[o]=p.google.longrunning.Operation.toObject(e.operations[o],t)}return null!=e.nextPageToken&&e.hasOwnProperty(\"nextPageToken\")&&(n.nextPageToken=e.nextPageToken),n},u.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},u),t.CancelOperationRequest=(L.prototype.name=\"\",L.create=function(e){return new L(e)},L.encode=function(e,t){return t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),t},L.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},L.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.longrunning.CancelOperationRequest;e.pos<n;){var r=e.uint32();r>>>3==1?o.name=e.string():e.skipType(7&r)}return o},L.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},L.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.name&&e.hasOwnProperty(\"name\")&&!i.isString(e.name)?\"name: string expected\":null},L.fromObject=function(e){var t;return e instanceof p.google.longrunning.CancelOperationRequest?e:(t=new p.google.longrunning.CancelOperationRequest,null!=e.name&&(t.name=String(e.name)),t)},L.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\"),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),n},L.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},L),t.DeleteOperationRequest=(U.prototype.name=\"\",U.create=function(e){return new U(e)},U.encode=function(e,t){return t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),t},U.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},U.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.longrunning.DeleteOperationRequest;e.pos<n;){var r=e.uint32();r>>>3==1?o.name=e.string():e.skipType(7&r)}return o},U.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},U.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.name&&e.hasOwnProperty(\"name\")&&!i.isString(e.name)?\"name: string expected\":null},U.fromObject=function(e){var t;return e instanceof p.google.longrunning.DeleteOperationRequest?e:(t=new p.google.longrunning.DeleteOperationRequest,null!=e.name&&(t.name=String(e.name)),t)},U.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\"),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),n},U.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},U),t.WaitOperationRequest=(c.prototype.name=\"\",c.prototype.timeout=null,c.create=function(e){return new c(e)},c.encode=function(e,t){return t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.timeout&&Object.hasOwnProperty.call(e,\"timeout\")&&p.google.protobuf.Duration.encode(e.timeout,t.uint32(18).fork()).ldelim(),t},c.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},c.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.longrunning.WaitOperationRequest;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.timeout=p.google.protobuf.Duration.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},c.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},c.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!i.isString(e.name))return\"name: string expected\";if(null!=e.timeout&&e.hasOwnProperty(\"timeout\")){e=p.google.protobuf.Duration.verify(e.timeout);if(e)return\"timeout.\"+e}return null},c.fromObject=function(e){if(e instanceof p.google.longrunning.WaitOperationRequest)return e;var t=new p.google.longrunning.WaitOperationRequest;if(null!=e.name&&(t.name=String(e.name)),null!=e.timeout){if(\"object\"!=typeof e.timeout)throw TypeError(\".google.longrunning.WaitOperationRequest.timeout: object expected\");t.timeout=p.google.protobuf.Duration.fromObject(e.timeout)}return t},c.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\",n.timeout=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.timeout&&e.hasOwnProperty(\"timeout\")&&(n.timeout=p.google.protobuf.Duration.toObject(e.timeout,t)),n},c.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},c),t.OperationInfo=(d.prototype.responseType=\"\",d.prototype.metadataType=\"\",d.create=function(e){return new d(e)},d.encode=function(e,t){return t=t||r.create(),null!=e.responseType&&Object.hasOwnProperty.call(e,\"responseType\")&&t.uint32(10).string(e.responseType),null!=e.metadataType&&Object.hasOwnProperty.call(e,\"metadataType\")&&t.uint32(18).string(e.metadataType),t},d.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},d.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.longrunning.OperationInfo;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.responseType=e.string();break;case 2:o.metadataType=e.string();break;default:e.skipType(7&r)}}return o},d.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},d.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.responseType&&e.hasOwnProperty(\"responseType\")&&!i.isString(e.responseType)?\"responseType: string expected\":null!=e.metadataType&&e.hasOwnProperty(\"metadataType\")&&!i.isString(e.metadataType)?\"metadataType: string expected\":null},d.fromObject=function(e){var t;return e instanceof p.google.longrunning.OperationInfo?e:(t=new p.google.longrunning.OperationInfo,null!=e.responseType&&(t.responseType=String(e.responseType)),null!=e.metadataType&&(t.metadataType=String(e.metadataType)),t)},d.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.responseType=\"\",n.metadataType=\"\"),null!=e.responseType&&e.hasOwnProperty(\"responseType\")&&(n.responseType=e.responseType),null!=e.metadataType&&e.hasOwnProperty(\"metadataType\")&&(n.metadataType=e.metadataType),n},d.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},d),t),F.api=((n={}).Http=(g.prototype.rules=i.emptyArray,g.prototype.fullyDecodeReservedExpansion=!1,g.create=function(e){return new g(e)},g.encode=function(e,t){if(t=t||r.create(),null!=e.rules&&e.rules.length)for(var n=0;n<e.rules.length;++n)p.google.api.HttpRule.encode(e.rules[n],t.uint32(10).fork()).ldelim();return null!=e.fullyDecodeReservedExpansion&&Object.hasOwnProperty.call(e,\"fullyDecodeReservedExpansion\")&&t.uint32(16).bool(e.fullyDecodeReservedExpansion),t},g.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},g.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.api.Http;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.rules&&o.rules.length||(o.rules=[]),o.rules.push(p.google.api.HttpRule.decode(e,e.uint32()));break;case 2:o.fullyDecodeReservedExpansion=e.bool();break;default:e.skipType(7&r)}}return o},g.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},g.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.rules&&e.hasOwnProperty(\"rules\")){if(!Array.isArray(e.rules))return\"rules: array expected\";for(var t=0;t<e.rules.length;++t){var n=p.google.api.HttpRule.verify(e.rules[t]);if(n)return\"rules.\"+n}}return null!=e.fullyDecodeReservedExpansion&&e.hasOwnProperty(\"fullyDecodeReservedExpansion\")&&\"boolean\"!=typeof e.fullyDecodeReservedExpansion?\"fullyDecodeReservedExpansion: boolean expected\":null},g.fromObject=function(e){if(e instanceof p.google.api.Http)return e;var t=new p.google.api.Http;if(e.rules){if(!Array.isArray(e.rules))throw TypeError(\".google.api.Http.rules: array expected\");t.rules=[];for(var n=0;n<e.rules.length;++n){if(\"object\"!=typeof e.rules[n])throw TypeError(\".google.api.Http.rules: object expected\");t.rules[n]=p.google.api.HttpRule.fromObject(e.rules[n])}}return null!=e.fullyDecodeReservedExpansion&&(t.fullyDecodeReservedExpansion=Boolean(e.fullyDecodeReservedExpansion)),t},g.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.rules=[]),t.defaults&&(n.fullyDecodeReservedExpansion=!1),e.rules&&e.rules.length){n.rules=[];for(var o=0;o<e.rules.length;++o)n.rules[o]=p.google.api.HttpRule.toObject(e.rules[o],t)}return null!=e.fullyDecodeReservedExpansion&&e.hasOwnProperty(\"fullyDecodeReservedExpansion\")&&(n.fullyDecodeReservedExpansion=e.fullyDecodeReservedExpansion),n},g.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},g),n.HttpRule=(f.prototype.selector=\"\",f.prototype.get=\"\",f.prototype.put=\"\",f.prototype.post=\"\",f.prototype.delete=\"\",f.prototype.patch=\"\",f.prototype.custom=null,f.prototype.body=\"\",f.prototype.responseBody=\"\",f.prototype.additionalBindings=i.emptyArray,Object.defineProperty(f.prototype,\"pattern\",{get:i.oneOfGetter(t=[\"get\",\"put\",\"post\",\"delete\",\"patch\",\"custom\"]),set:i.oneOfSetter(t)}),f.create=function(e){return new f(e)},f.encode=function(e,t){if(t=t||r.create(),null!=e.selector&&Object.hasOwnProperty.call(e,\"selector\")&&t.uint32(10).string(e.selector),null!=e.get&&Object.hasOwnProperty.call(e,\"get\")&&t.uint32(18).string(e.get),null!=e.put&&Object.hasOwnProperty.call(e,\"put\")&&t.uint32(26).string(e.put),null!=e.post&&Object.hasOwnProperty.call(e,\"post\")&&t.uint32(34).string(e.post),null!=e.delete&&Object.hasOwnProperty.call(e,\"delete\")&&t.uint32(42).string(e.delete),null!=e.patch&&Object.hasOwnProperty.call(e,\"patch\")&&t.uint32(50).string(e.patch),null!=e.body&&Object.hasOwnProperty.call(e,\"body\")&&t.uint32(58).string(e.body),null!=e.custom&&Object.hasOwnProperty.call(e,\"custom\")&&p.google.api.CustomHttpPattern.encode(e.custom,t.uint32(66).fork()).ldelim(),null!=e.additionalBindings&&e.additionalBindings.length)for(var n=0;n<e.additionalBindings.length;++n)p.google.api.HttpRule.encode(e.additionalBindings[n],t.uint32(90).fork()).ldelim();return null!=e.responseBody&&Object.hasOwnProperty.call(e,\"responseBody\")&&t.uint32(98).string(e.responseBody),t},f.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},f.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.api.HttpRule;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.selector=e.string();break;case 2:o.get=e.string();break;case 3:o.put=e.string();break;case 4:o.post=e.string();break;case 5:o.delete=e.string();break;case 6:o.patch=e.string();break;case 8:o.custom=p.google.api.CustomHttpPattern.decode(e,e.uint32());break;case 7:o.body=e.string();break;case 12:o.responseBody=e.string();break;case 11:o.additionalBindings&&o.additionalBindings.length||(o.additionalBindings=[]),o.additionalBindings.push(p.google.api.HttpRule.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return o},f.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},f.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";var t={};if(null!=e.selector&&e.hasOwnProperty(\"selector\")&&!i.isString(e.selector))return\"selector: string expected\";if(null!=e.get&&e.hasOwnProperty(\"get\")&&(t.pattern=1,!i.isString(e.get)))return\"get: string expected\";if(null!=e.put&&e.hasOwnProperty(\"put\")){if(1===t.pattern)return\"pattern: multiple values\";if(t.pattern=1,!i.isString(e.put))return\"put: string expected\"}if(null!=e.post&&e.hasOwnProperty(\"post\")){if(1===t.pattern)return\"pattern: multiple values\";if(t.pattern=1,!i.isString(e.post))return\"post: string expected\"}if(null!=e.delete&&e.hasOwnProperty(\"delete\")){if(1===t.pattern)return\"pattern: multiple values\";if(t.pattern=1,!i.isString(e.delete))return\"delete: string expected\"}if(null!=e.patch&&e.hasOwnProperty(\"patch\")){if(1===t.pattern)return\"pattern: multiple values\";if(t.pattern=1,!i.isString(e.patch))return\"patch: string expected\"}if(null!=e.custom&&e.hasOwnProperty(\"custom\")){if(1===t.pattern)return\"pattern: multiple values\";if(t.pattern=1,n=p.google.api.CustomHttpPattern.verify(e.custom))return\"custom.\"+n}if(null!=e.body&&e.hasOwnProperty(\"body\")&&!i.isString(e.body))return\"body: string expected\";if(null!=e.responseBody&&e.hasOwnProperty(\"responseBody\")&&!i.isString(e.responseBody))return\"responseBody: string expected\";if(null!=e.additionalBindings&&e.hasOwnProperty(\"additionalBindings\")){if(!Array.isArray(e.additionalBindings))return\"additionalBindings: array expected\";for(var n,o=0;o<e.additionalBindings.length;++o)if(n=p.google.api.HttpRule.verify(e.additionalBindings[o]))return\"additionalBindings.\"+n}return null},f.fromObject=function(e){if(e instanceof p.google.api.HttpRule)return e;var t=new p.google.api.HttpRule;if(null!=e.selector&&(t.selector=String(e.selector)),null!=e.get&&(t.get=String(e.get)),null!=e.put&&(t.put=String(e.put)),null!=e.post&&(t.post=String(e.post)),null!=e.delete&&(t.delete=String(e.delete)),null!=e.patch&&(t.patch=String(e.patch)),null!=e.custom){if(\"object\"!=typeof e.custom)throw TypeError(\".google.api.HttpRule.custom: object expected\");t.custom=p.google.api.CustomHttpPattern.fromObject(e.custom)}if(null!=e.body&&(t.body=String(e.body)),null!=e.responseBody&&(t.responseBody=String(e.responseBody)),e.additionalBindings){if(!Array.isArray(e.additionalBindings))throw TypeError(\".google.api.HttpRule.additionalBindings: array expected\");t.additionalBindings=[];for(var n=0;n<e.additionalBindings.length;++n){if(\"object\"!=typeof e.additionalBindings[n])throw TypeError(\".google.api.HttpRule.additionalBindings: object expected\");t.additionalBindings[n]=p.google.api.HttpRule.fromObject(e.additionalBindings[n])}}return t},f.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.additionalBindings=[]),t.defaults&&(n.selector=\"\",n.body=\"\",n.responseBody=\"\"),null!=e.selector&&e.hasOwnProperty(\"selector\")&&(n.selector=e.selector),null!=e.get&&e.hasOwnProperty(\"get\")&&(n.get=e.get,t.oneofs)&&(n.pattern=\"get\"),null!=e.put&&e.hasOwnProperty(\"put\")&&(n.put=e.put,t.oneofs)&&(n.pattern=\"put\"),null!=e.post&&e.hasOwnProperty(\"post\")&&(n.post=e.post,t.oneofs)&&(n.pattern=\"post\"),null!=e.delete&&e.hasOwnProperty(\"delete\")&&(n.delete=e.delete,t.oneofs)&&(n.pattern=\"delete\"),null!=e.patch&&e.hasOwnProperty(\"patch\")&&(n.patch=e.patch,t.oneofs)&&(n.pattern=\"patch\"),null!=e.body&&e.hasOwnProperty(\"body\")&&(n.body=e.body),null!=e.custom&&e.hasOwnProperty(\"custom\")&&(n.custom=p.google.api.CustomHttpPattern.toObject(e.custom,t),t.oneofs)&&(n.pattern=\"custom\"),e.additionalBindings&&e.additionalBindings.length){n.additionalBindings=[];for(var o=0;o<e.additionalBindings.length;++o)n.additionalBindings[o]=p.google.api.HttpRule.toObject(e.additionalBindings[o],t)}return null!=e.responseBody&&e.hasOwnProperty(\"responseBody\")&&(n.responseBody=e.responseBody),n},f.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},f),n.CustomHttpPattern=(y.prototype.kind=\"\",y.prototype.path=\"\",y.create=function(e){return new y(e)},y.encode=function(e,t){return t=t||r.create(),null!=e.kind&&Object.hasOwnProperty.call(e,\"kind\")&&t.uint32(10).string(e.kind),null!=e.path&&Object.hasOwnProperty.call(e,\"path\")&&t.uint32(18).string(e.path),t},y.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},y.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.api.CustomHttpPattern;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.kind=e.string();break;case 2:o.path=e.string();break;default:e.skipType(7&r)}}return o},y.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},y.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.kind&&e.hasOwnProperty(\"kind\")&&!i.isString(e.kind)?\"kind: string expected\":null!=e.path&&e.hasOwnProperty(\"path\")&&!i.isString(e.path)?\"path: string expected\":null},y.fromObject=function(e){var t;return e instanceof p.google.api.CustomHttpPattern?e:(t=new p.google.api.CustomHttpPattern,null!=e.kind&&(t.kind=String(e.kind)),null!=e.path&&(t.path=String(e.path)),t)},y.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.kind=\"\",n.path=\"\"),null!=e.kind&&e.hasOwnProperty(\"kind\")&&(n.kind=e.kind),null!=e.path&&e.hasOwnProperty(\"path\")&&(n.path=e.path),n},y.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},y),n),F.protobuf=((t={}).FileDescriptorSet=(J.prototype.file=i.emptyArray,J.create=function(e){return new J(e)},J.encode=function(e,t){if(t=t||r.create(),null!=e.file&&e.file.length)for(var n=0;n<e.file.length;++n)p.google.protobuf.FileDescriptorProto.encode(e.file[n],t.uint32(10).fork()).ldelim();return t},J.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},J.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.FileDescriptorSet;e.pos<n;){var r=e.uint32();r>>>3==1?(o.file&&o.file.length||(o.file=[]),o.file.push(p.google.protobuf.FileDescriptorProto.decode(e,e.uint32()))):e.skipType(7&r)}return o},J.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},J.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.file&&e.hasOwnProperty(\"file\")){if(!Array.isArray(e.file))return\"file: array expected\";for(var t=0;t<e.file.length;++t){var n=p.google.protobuf.FileDescriptorProto.verify(e.file[t]);if(n)return\"file.\"+n}}return null},J.fromObject=function(e){if(e instanceof p.google.protobuf.FileDescriptorSet)return e;var t=new p.google.protobuf.FileDescriptorSet;if(e.file){if(!Array.isArray(e.file))throw TypeError(\".google.protobuf.FileDescriptorSet.file: array expected\");t.file=[];for(var n=0;n<e.file.length;++n){if(\"object\"!=typeof e.file[n])throw TypeError(\".google.protobuf.FileDescriptorSet.file: object expected\");t.file[n]=p.google.protobuf.FileDescriptorProto.fromObject(e.file[n])}}return t},J.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.file=[]),e.file&&e.file.length){n.file=[];for(var o=0;o<e.file.length;++o)n.file[o]=p.google.protobuf.FileDescriptorProto.toObject(e.file[o],t)}return n},J.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},J),t.FileDescriptorProto=(h.prototype.name=\"\",h.prototype.package=\"\",h.prototype.dependency=i.emptyArray,h.prototype.publicDependency=i.emptyArray,h.prototype.weakDependency=i.emptyArray,h.prototype.messageType=i.emptyArray,h.prototype.enumType=i.emptyArray,h.prototype.service=i.emptyArray,h.prototype.extension=i.emptyArray,h.prototype.options=null,h.prototype.sourceCodeInfo=null,h.prototype.syntax=\"\",h.create=function(e){return new h(e)},h.encode=function(e,t){if(t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.package&&Object.hasOwnProperty.call(e,\"package\")&&t.uint32(18).string(e.package),null!=e.dependency&&e.dependency.length)for(var n=0;n<e.dependency.length;++n)t.uint32(26).string(e.dependency[n]);if(null!=e.messageType&&e.messageType.length)for(n=0;n<e.messageType.length;++n)p.google.protobuf.DescriptorProto.encode(e.messageType[n],t.uint32(34).fork()).ldelim();if(null!=e.enumType&&e.enumType.length)for(n=0;n<e.enumType.length;++n)p.google.protobuf.EnumDescriptorProto.encode(e.enumType[n],t.uint32(42).fork()).ldelim();if(null!=e.service&&e.service.length)for(n=0;n<e.service.length;++n)p.google.protobuf.ServiceDescriptorProto.encode(e.service[n],t.uint32(50).fork()).ldelim();if(null!=e.extension&&e.extension.length)for(n=0;n<e.extension.length;++n)p.google.protobuf.FieldDescriptorProto.encode(e.extension[n],t.uint32(58).fork()).ldelim();if(null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&p.google.protobuf.FileOptions.encode(e.options,t.uint32(66).fork()).ldelim(),null!=e.sourceCodeInfo&&Object.hasOwnProperty.call(e,\"sourceCodeInfo\")&&p.google.protobuf.SourceCodeInfo.encode(e.sourceCodeInfo,t.uint32(74).fork()).ldelim(),null!=e.publicDependency&&e.publicDependency.length)for(n=0;n<e.publicDependency.length;++n)t.uint32(80).int32(e.publicDependency[n]);if(null!=e.weakDependency&&e.weakDependency.length)for(n=0;n<e.weakDependency.length;++n)t.uint32(88).int32(e.weakDependency[n]);return null!=e.syntax&&Object.hasOwnProperty.call(e,\"syntax\")&&t.uint32(98).string(e.syntax),t},h.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},h.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.FileDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.package=e.string();break;case 3:o.dependency&&o.dependency.length||(o.dependency=[]),o.dependency.push(e.string());break;case 10:if(o.publicDependency&&o.publicDependency.length||(o.publicDependency=[]),2==(7&r))for(var i=e.uint32()+e.pos;e.pos<i;)o.publicDependency.push(e.int32());else o.publicDependency.push(e.int32());break;case 11:if(o.weakDependency&&o.weakDependency.length||(o.weakDependency=[]),2==(7&r))for(i=e.uint32()+e.pos;e.pos<i;)o.weakDependency.push(e.int32());else o.weakDependency.push(e.int32());break;case 4:o.messageType&&o.messageType.length||(o.messageType=[]),o.messageType.push(p.google.protobuf.DescriptorProto.decode(e,e.uint32()));break;case 5:o.enumType&&o.enumType.length||(o.enumType=[]),o.enumType.push(p.google.protobuf.EnumDescriptorProto.decode(e,e.uint32()));break;case 6:o.service&&o.service.length||(o.service=[]),o.service.push(p.google.protobuf.ServiceDescriptorProto.decode(e,e.uint32()));break;case 7:o.extension&&o.extension.length||(o.extension=[]),o.extension.push(p.google.protobuf.FieldDescriptorProto.decode(e,e.uint32()));break;case 8:o.options=p.google.protobuf.FileOptions.decode(e,e.uint32());break;case 9:o.sourceCodeInfo=p.google.protobuf.SourceCodeInfo.decode(e,e.uint32());break;case 12:o.syntax=e.string();break;default:e.skipType(7&r)}}return o},h.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},h.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!i.isString(e.name))return\"name: string expected\";if(null!=e.package&&e.hasOwnProperty(\"package\")&&!i.isString(e.package))return\"package: string expected\";if(null!=e.dependency&&e.hasOwnProperty(\"dependency\")){if(!Array.isArray(e.dependency))return\"dependency: array expected\";for(var t=0;t<e.dependency.length;++t)if(!i.isString(e.dependency[t]))return\"dependency: string[] expected\"}if(null!=e.publicDependency&&e.hasOwnProperty(\"publicDependency\")){if(!Array.isArray(e.publicDependency))return\"publicDependency: array expected\";for(t=0;t<e.publicDependency.length;++t)if(!i.isInteger(e.publicDependency[t]))return\"publicDependency: integer[] expected\"}if(null!=e.weakDependency&&e.hasOwnProperty(\"weakDependency\")){if(!Array.isArray(e.weakDependency))return\"weakDependency: array expected\";for(t=0;t<e.weakDependency.length;++t)if(!i.isInteger(e.weakDependency[t]))return\"weakDependency: integer[] expected\"}if(null!=e.messageType&&e.hasOwnProperty(\"messageType\")){if(!Array.isArray(e.messageType))return\"messageType: array expected\";for(t=0;t<e.messageType.length;++t)if(n=p.google.protobuf.DescriptorProto.verify(e.messageType[t]))return\"messageType.\"+n}if(null!=e.enumType&&e.hasOwnProperty(\"enumType\")){if(!Array.isArray(e.enumType))return\"enumType: array expected\";for(t=0;t<e.enumType.length;++t)if(n=p.google.protobuf.EnumDescriptorProto.verify(e.enumType[t]))return\"enumType.\"+n}if(null!=e.service&&e.hasOwnProperty(\"service\")){if(!Array.isArray(e.service))return\"service: array expected\";for(t=0;t<e.service.length;++t)if(n=p.google.protobuf.ServiceDescriptorProto.verify(e.service[t]))return\"service.\"+n}if(null!=e.extension&&e.hasOwnProperty(\"extension\")){if(!Array.isArray(e.extension))return\"extension: array expected\";for(t=0;t<e.extension.length;++t)if(n=p.google.protobuf.FieldDescriptorProto.verify(e.extension[t]))return\"extension.\"+n}var n;if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n=p.google.protobuf.FileOptions.verify(e.options)))return\"options.\"+n;if(null!=e.sourceCodeInfo&&e.hasOwnProperty(\"sourceCodeInfo\")&&(n=p.google.protobuf.SourceCodeInfo.verify(e.sourceCodeInfo)))return\"sourceCodeInfo.\"+n;return null!=e.syntax&&e.hasOwnProperty(\"syntax\")&&!i.isString(e.syntax)?\"syntax: string expected\":null},h.fromObject=function(e){if(e instanceof p.google.protobuf.FileDescriptorProto)return e;var t=new p.google.protobuf.FileDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),null!=e.package&&(t.package=String(e.package)),e.dependency){if(!Array.isArray(e.dependency))throw TypeError(\".google.protobuf.FileDescriptorProto.dependency: array expected\");t.dependency=[];for(var n=0;n<e.dependency.length;++n)t.dependency[n]=String(e.dependency[n])}if(e.publicDependency){if(!Array.isArray(e.publicDependency))throw TypeError(\".google.protobuf.FileDescriptorProto.publicDependency: array expected\");t.publicDependency=[];for(n=0;n<e.publicDependency.length;++n)t.publicDependency[n]=0|e.publicDependency[n]}if(e.weakDependency){if(!Array.isArray(e.weakDependency))throw TypeError(\".google.protobuf.FileDescriptorProto.weakDependency: array expected\");t.weakDependency=[];for(n=0;n<e.weakDependency.length;++n)t.weakDependency[n]=0|e.weakDependency[n]}if(e.messageType){if(!Array.isArray(e.messageType))throw TypeError(\".google.protobuf.FileDescriptorProto.messageType: array expected\");t.messageType=[];for(n=0;n<e.messageType.length;++n){if(\"object\"!=typeof e.messageType[n])throw TypeError(\".google.protobuf.FileDescriptorProto.messageType: object expected\");t.messageType[n]=p.google.protobuf.DescriptorProto.fromObject(e.messageType[n])}}if(e.enumType){if(!Array.isArray(e.enumType))throw TypeError(\".google.protobuf.FileDescriptorProto.enumType: array expected\");t.enumType=[];for(n=0;n<e.enumType.length;++n){if(\"object\"!=typeof e.enumType[n])throw TypeError(\".google.protobuf.FileDescriptorProto.enumType: object expected\");t.enumType[n]=p.google.protobuf.EnumDescriptorProto.fromObject(e.enumType[n])}}if(e.service){if(!Array.isArray(e.service))throw TypeError(\".google.protobuf.FileDescriptorProto.service: array expected\");t.service=[];for(n=0;n<e.service.length;++n){if(\"object\"!=typeof e.service[n])throw TypeError(\".google.protobuf.FileDescriptorProto.service: object expected\");t.service[n]=p.google.protobuf.ServiceDescriptorProto.fromObject(e.service[n])}}if(e.extension){if(!Array.isArray(e.extension))throw TypeError(\".google.protobuf.FileDescriptorProto.extension: array expected\");t.extension=[];for(n=0;n<e.extension.length;++n){if(\"object\"!=typeof e.extension[n])throw TypeError(\".google.protobuf.FileDescriptorProto.extension: object expected\");t.extension[n]=p.google.protobuf.FieldDescriptorProto.fromObject(e.extension[n])}}if(null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.FileDescriptorProto.options: object expected\");t.options=p.google.protobuf.FileOptions.fromObject(e.options)}if(null!=e.sourceCodeInfo){if(\"object\"!=typeof e.sourceCodeInfo)throw TypeError(\".google.protobuf.FileDescriptorProto.sourceCodeInfo: object expected\");t.sourceCodeInfo=p.google.protobuf.SourceCodeInfo.fromObject(e.sourceCodeInfo)}return null!=e.syntax&&(t.syntax=String(e.syntax)),t},h.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.dependency=[],n.messageType=[],n.enumType=[],n.service=[],n.extension=[],n.publicDependency=[],n.weakDependency=[]),t.defaults&&(n.name=\"\",n.package=\"\",n.options=null,n.sourceCodeInfo=null,n.syntax=\"\"),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.package&&e.hasOwnProperty(\"package\")&&(n.package=e.package),e.dependency&&e.dependency.length){n.dependency=[];for(var o=0;o<e.dependency.length;++o)n.dependency[o]=e.dependency[o]}if(e.messageType&&e.messageType.length){n.messageType=[];for(o=0;o<e.messageType.length;++o)n.messageType[o]=p.google.protobuf.DescriptorProto.toObject(e.messageType[o],t)}if(e.enumType&&e.enumType.length){n.enumType=[];for(o=0;o<e.enumType.length;++o)n.enumType[o]=p.google.protobuf.EnumDescriptorProto.toObject(e.enumType[o],t)}if(e.service&&e.service.length){n.service=[];for(o=0;o<e.service.length;++o)n.service[o]=p.google.protobuf.ServiceDescriptorProto.toObject(e.service[o],t)}if(e.extension&&e.extension.length){n.extension=[];for(o=0;o<e.extension.length;++o)n.extension[o]=p.google.protobuf.FieldDescriptorProto.toObject(e.extension[o],t)}if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=p.google.protobuf.FileOptions.toObject(e.options,t)),null!=e.sourceCodeInfo&&e.hasOwnProperty(\"sourceCodeInfo\")&&(n.sourceCodeInfo=p.google.protobuf.SourceCodeInfo.toObject(e.sourceCodeInfo,t)),e.publicDependency&&e.publicDependency.length){n.publicDependency=[];for(o=0;o<e.publicDependency.length;++o)n.publicDependency[o]=e.publicDependency[o]}if(e.weakDependency&&e.weakDependency.length){n.weakDependency=[];for(o=0;o<e.weakDependency.length;++o)n.weakDependency[o]=e.weakDependency[o]}return null!=e.syntax&&e.hasOwnProperty(\"syntax\")&&(n.syntax=e.syntax),n},h.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},h),t.DescriptorProto=(O.prototype.name=\"\",O.prototype.field=i.emptyArray,O.prototype.extension=i.emptyArray,O.prototype.nestedType=i.emptyArray,O.prototype.enumType=i.emptyArray,O.prototype.extensionRange=i.emptyArray,O.prototype.oneofDecl=i.emptyArray,O.prototype.options=null,O.prototype.reservedRange=i.emptyArray,O.prototype.reservedName=i.emptyArray,O.create=function(e){return new O(e)},O.encode=function(e,t){if(t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.field&&e.field.length)for(var n=0;n<e.field.length;++n)p.google.protobuf.FieldDescriptorProto.encode(e.field[n],t.uint32(18).fork()).ldelim();if(null!=e.nestedType&&e.nestedType.length)for(n=0;n<e.nestedType.length;++n)p.google.protobuf.DescriptorProto.encode(e.nestedType[n],t.uint32(26).fork()).ldelim();if(null!=e.enumType&&e.enumType.length)for(n=0;n<e.enumType.length;++n)p.google.protobuf.EnumDescriptorProto.encode(e.enumType[n],t.uint32(34).fork()).ldelim();if(null!=e.extensionRange&&e.extensionRange.length)for(n=0;n<e.extensionRange.length;++n)p.google.protobuf.DescriptorProto.ExtensionRange.encode(e.extensionRange[n],t.uint32(42).fork()).ldelim();if(null!=e.extension&&e.extension.length)for(n=0;n<e.extension.length;++n)p.google.protobuf.FieldDescriptorProto.encode(e.extension[n],t.uint32(50).fork()).ldelim();if(null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&p.google.protobuf.MessageOptions.encode(e.options,t.uint32(58).fork()).ldelim(),null!=e.oneofDecl&&e.oneofDecl.length)for(n=0;n<e.oneofDecl.length;++n)p.google.protobuf.OneofDescriptorProto.encode(e.oneofDecl[n],t.uint32(66).fork()).ldelim();if(null!=e.reservedRange&&e.reservedRange.length)for(n=0;n<e.reservedRange.length;++n)p.google.protobuf.DescriptorProto.ReservedRange.encode(e.reservedRange[n],t.uint32(74).fork()).ldelim();if(null!=e.reservedName&&e.reservedName.length)for(n=0;n<e.reservedName.length;++n)t.uint32(82).string(e.reservedName[n]);return t},O.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},O.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.DescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.field&&o.field.length||(o.field=[]),o.field.push(p.google.protobuf.FieldDescriptorProto.decode(e,e.uint32()));break;case 6:o.extension&&o.extension.length||(o.extension=[]),o.extension.push(p.google.protobuf.FieldDescriptorProto.decode(e,e.uint32()));break;case 3:o.nestedType&&o.nestedType.length||(o.nestedType=[]),o.nestedType.push(p.google.protobuf.DescriptorProto.decode(e,e.uint32()));break;case 4:o.enumType&&o.enumType.length||(o.enumType=[]),o.enumType.push(p.google.protobuf.EnumDescriptorProto.decode(e,e.uint32()));break;case 5:o.extensionRange&&o.extensionRange.length||(o.extensionRange=[]),o.extensionRange.push(p.google.protobuf.DescriptorProto.ExtensionRange.decode(e,e.uint32()));break;case 8:o.oneofDecl&&o.oneofDecl.length||(o.oneofDecl=[]),o.oneofDecl.push(p.google.protobuf.OneofDescriptorProto.decode(e,e.uint32()));break;case 7:o.options=p.google.protobuf.MessageOptions.decode(e,e.uint32());break;case 9:o.reservedRange&&o.reservedRange.length||(o.reservedRange=[]),o.reservedRange.push(p.google.protobuf.DescriptorProto.ReservedRange.decode(e,e.uint32()));break;case 10:o.reservedName&&o.reservedName.length||(o.reservedName=[]),o.reservedName.push(e.string());break;default:e.skipType(7&r)}}return o},O.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},O.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!i.isString(e.name))return\"name: string expected\";if(null!=e.field&&e.hasOwnProperty(\"field\")){if(!Array.isArray(e.field))return\"field: array expected\";for(var t=0;t<e.field.length;++t)if(n=p.google.protobuf.FieldDescriptorProto.verify(e.field[t]))return\"field.\"+n}if(null!=e.extension&&e.hasOwnProperty(\"extension\")){if(!Array.isArray(e.extension))return\"extension: array expected\";for(t=0;t<e.extension.length;++t)if(n=p.google.protobuf.FieldDescriptorProto.verify(e.extension[t]))return\"extension.\"+n}if(null!=e.nestedType&&e.hasOwnProperty(\"nestedType\")){if(!Array.isArray(e.nestedType))return\"nestedType: array expected\";for(t=0;t<e.nestedType.length;++t)if(n=p.google.protobuf.DescriptorProto.verify(e.nestedType[t]))return\"nestedType.\"+n}if(null!=e.enumType&&e.hasOwnProperty(\"enumType\")){if(!Array.isArray(e.enumType))return\"enumType: array expected\";for(t=0;t<e.enumType.length;++t)if(n=p.google.protobuf.EnumDescriptorProto.verify(e.enumType[t]))return\"enumType.\"+n}if(null!=e.extensionRange&&e.hasOwnProperty(\"extensionRange\")){if(!Array.isArray(e.extensionRange))return\"extensionRange: array expected\";for(t=0;t<e.extensionRange.length;++t)if(n=p.google.protobuf.DescriptorProto.ExtensionRange.verify(e.extensionRange[t]))return\"extensionRange.\"+n}if(null!=e.oneofDecl&&e.hasOwnProperty(\"oneofDecl\")){if(!Array.isArray(e.oneofDecl))return\"oneofDecl: array expected\";for(t=0;t<e.oneofDecl.length;++t)if(n=p.google.protobuf.OneofDescriptorProto.verify(e.oneofDecl[t]))return\"oneofDecl.\"+n}if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n=p.google.protobuf.MessageOptions.verify(e.options)))return\"options.\"+n;if(null!=e.reservedRange&&e.hasOwnProperty(\"reservedRange\")){if(!Array.isArray(e.reservedRange))return\"reservedRange: array expected\";for(var n,t=0;t<e.reservedRange.length;++t)if(n=p.google.protobuf.DescriptorProto.ReservedRange.verify(e.reservedRange[t]))return\"reservedRange.\"+n}if(null!=e.reservedName&&e.hasOwnProperty(\"reservedName\")){if(!Array.isArray(e.reservedName))return\"reservedName: array expected\";for(t=0;t<e.reservedName.length;++t)if(!i.isString(e.reservedName[t]))return\"reservedName: string[] expected\"}return null},O.fromObject=function(e){if(e instanceof p.google.protobuf.DescriptorProto)return e;var t=new p.google.protobuf.DescriptorProto;if(null!=e.name&&(t.name=String(e.name)),e.field){if(!Array.isArray(e.field))throw TypeError(\".google.protobuf.DescriptorProto.field: array expected\");t.field=[];for(var n=0;n<e.field.length;++n){if(\"object\"!=typeof e.field[n])throw TypeError(\".google.protobuf.DescriptorProto.field: object expected\");t.field[n]=p.google.protobuf.FieldDescriptorProto.fromObject(e.field[n])}}if(e.extension){if(!Array.isArray(e.extension))throw TypeError(\".google.protobuf.DescriptorProto.extension: array expected\");t.extension=[];for(n=0;n<e.extension.length;++n){if(\"object\"!=typeof e.extension[n])throw TypeError(\".google.protobuf.DescriptorProto.extension: object expected\");t.extension[n]=p.google.protobuf.FieldDescriptorProto.fromObject(e.extension[n])}}if(e.nestedType){if(!Array.isArray(e.nestedType))throw TypeError(\".google.protobuf.DescriptorProto.nestedType: array expected\");t.nestedType=[];for(n=0;n<e.nestedType.length;++n){if(\"object\"!=typeof e.nestedType[n])throw TypeError(\".google.protobuf.DescriptorProto.nestedType: object expected\");t.nestedType[n]=p.google.protobuf.DescriptorProto.fromObject(e.nestedType[n])}}if(e.enumType){if(!Array.isArray(e.enumType))throw TypeError(\".google.protobuf.DescriptorProto.enumType: array expected\");t.enumType=[];for(n=0;n<e.enumType.length;++n){if(\"object\"!=typeof e.enumType[n])throw TypeError(\".google.protobuf.DescriptorProto.enumType: object expected\");t.enumType[n]=p.google.protobuf.EnumDescriptorProto.fromObject(e.enumType[n])}}if(e.extensionRange){if(!Array.isArray(e.extensionRange))throw TypeError(\".google.protobuf.DescriptorProto.extensionRange: array expected\");t.extensionRange=[];for(n=0;n<e.extensionRange.length;++n){if(\"object\"!=typeof e.extensionRange[n])throw TypeError(\".google.protobuf.DescriptorProto.extensionRange: object expected\");t.extensionRange[n]=p.google.protobuf.DescriptorProto.ExtensionRange.fromObject(e.extensionRange[n])}}if(e.oneofDecl){if(!Array.isArray(e.oneofDecl))throw TypeError(\".google.protobuf.DescriptorProto.oneofDecl: array expected\");t.oneofDecl=[];for(n=0;n<e.oneofDecl.length;++n){if(\"object\"!=typeof e.oneofDecl[n])throw TypeError(\".google.protobuf.DescriptorProto.oneofDecl: object expected\");t.oneofDecl[n]=p.google.protobuf.OneofDescriptorProto.fromObject(e.oneofDecl[n])}}if(null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.DescriptorProto.options: object expected\");t.options=p.google.protobuf.MessageOptions.fromObject(e.options)}if(e.reservedRange){if(!Array.isArray(e.reservedRange))throw TypeError(\".google.protobuf.DescriptorProto.reservedRange: array expected\");t.reservedRange=[];for(n=0;n<e.reservedRange.length;++n){if(\"object\"!=typeof e.reservedRange[n])throw TypeError(\".google.protobuf.DescriptorProto.reservedRange: object expected\");t.reservedRange[n]=p.google.protobuf.DescriptorProto.ReservedRange.fromObject(e.reservedRange[n])}}if(e.reservedName){if(!Array.isArray(e.reservedName))throw TypeError(\".google.protobuf.DescriptorProto.reservedName: array expected\");t.reservedName=[];for(n=0;n<e.reservedName.length;++n)t.reservedName[n]=String(e.reservedName[n])}return t},O.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.field=[],n.nestedType=[],n.enumType=[],n.extensionRange=[],n.extension=[],n.oneofDecl=[],n.reservedRange=[],n.reservedName=[]),t.defaults&&(n.name=\"\",n.options=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),e.field&&e.field.length){n.field=[];for(var o=0;o<e.field.length;++o)n.field[o]=p.google.protobuf.FieldDescriptorProto.toObject(e.field[o],t)}if(e.nestedType&&e.nestedType.length){n.nestedType=[];for(o=0;o<e.nestedType.length;++o)n.nestedType[o]=p.google.protobuf.DescriptorProto.toObject(e.nestedType[o],t)}if(e.enumType&&e.enumType.length){n.enumType=[];for(o=0;o<e.enumType.length;++o)n.enumType[o]=p.google.protobuf.EnumDescriptorProto.toObject(e.enumType[o],t)}if(e.extensionRange&&e.extensionRange.length){n.extensionRange=[];for(o=0;o<e.extensionRange.length;++o)n.extensionRange[o]=p.google.protobuf.DescriptorProto.ExtensionRange.toObject(e.extensionRange[o],t)}if(e.extension&&e.extension.length){n.extension=[];for(o=0;o<e.extension.length;++o)n.extension[o]=p.google.protobuf.FieldDescriptorProto.toObject(e.extension[o],t)}if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=p.google.protobuf.MessageOptions.toObject(e.options,t)),e.oneofDecl&&e.oneofDecl.length){n.oneofDecl=[];for(o=0;o<e.oneofDecl.length;++o)n.oneofDecl[o]=p.google.protobuf.OneofDescriptorProto.toObject(e.oneofDecl[o],t)}if(e.reservedRange&&e.reservedRange.length){n.reservedRange=[];for(o=0;o<e.reservedRange.length;++o)n.reservedRange[o]=p.google.protobuf.DescriptorProto.ReservedRange.toObject(e.reservedRange[o],t)}if(e.reservedName&&e.reservedName.length){n.reservedName=[];for(o=0;o<e.reservedName.length;++o)n.reservedName[o]=e.reservedName[o]}return n},O.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},O.ExtensionRange=(b.prototype.start=0,b.prototype.end=0,b.prototype.options=null,b.create=function(e){return new b(e)},b.encode=function(e,t){return t=t||r.create(),null!=e.start&&Object.hasOwnProperty.call(e,\"start\")&&t.uint32(8).int32(e.start),null!=e.end&&Object.hasOwnProperty.call(e,\"end\")&&t.uint32(16).int32(e.end),null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&p.google.protobuf.ExtensionRangeOptions.encode(e.options,t.uint32(26).fork()).ldelim(),t},b.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},b.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.DescriptorProto.ExtensionRange;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.start=e.int32();break;case 2:o.end=e.int32();break;case 3:o.options=p.google.protobuf.ExtensionRangeOptions.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},b.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},b.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.start&&e.hasOwnProperty(\"start\")&&!i.isInteger(e.start))return\"start: integer expected\";if(null!=e.end&&e.hasOwnProperty(\"end\")&&!i.isInteger(e.end))return\"end: integer expected\";if(null!=e.options&&e.hasOwnProperty(\"options\")){e=p.google.protobuf.ExtensionRangeOptions.verify(e.options);if(e)return\"options.\"+e}return null},b.fromObject=function(e){if(e instanceof p.google.protobuf.DescriptorProto.ExtensionRange)return e;var t=new p.google.protobuf.DescriptorProto.ExtensionRange;if(null!=e.start&&(t.start=0|e.start),null!=e.end&&(t.end=0|e.end),null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.DescriptorProto.ExtensionRange.options: object expected\");t.options=p.google.protobuf.ExtensionRangeOptions.fromObject(e.options)}return t},b.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.start=0,n.end=0,n.options=null),null!=e.start&&e.hasOwnProperty(\"start\")&&(n.start=e.start),null!=e.end&&e.hasOwnProperty(\"end\")&&(n.end=e.end),null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=p.google.protobuf.ExtensionRangeOptions.toObject(e.options,t)),n},b.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},b),O.ReservedRange=(m.prototype.start=0,m.prototype.end=0,m.create=function(e){return new m(e)},m.encode=function(e,t){return t=t||r.create(),null!=e.start&&Object.hasOwnProperty.call(e,\"start\")&&t.uint32(8).int32(e.start),null!=e.end&&Object.hasOwnProperty.call(e,\"end\")&&t.uint32(16).int32(e.end),t},m.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},m.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.DescriptorProto.ReservedRange;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.start=e.int32();break;case 2:o.end=e.int32();break;default:e.skipType(7&r)}}return o},m.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},m.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.start&&e.hasOwnProperty(\"start\")&&!i.isInteger(e.start)?\"start: integer expected\":null!=e.end&&e.hasOwnProperty(\"end\")&&!i.isInteger(e.end)?\"end: integer expected\":null},m.fromObject=function(e){var t;return e instanceof p.google.protobuf.DescriptorProto.ReservedRange?e:(t=new p.google.protobuf.DescriptorProto.ReservedRange,null!=e.start&&(t.start=0|e.start),null!=e.end&&(t.end=0|e.end),t)},m.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.start=0,n.end=0),null!=e.start&&e.hasOwnProperty(\"start\")&&(n.start=e.start),null!=e.end&&e.hasOwnProperty(\"end\")&&(n.end=e.end),n},m.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},m),O),t.ExtensionRangeOptions=(M.prototype.uninterpretedOption=i.emptyArray,M.create=function(e){return new M(e)},M.encode=function(e,t){if(t=t||r.create(),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)p.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return t},M.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},M.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.ExtensionRangeOptions;e.pos<n;){var r=e.uint32();r>>>3==999?(o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(p.google.protobuf.UninterpretedOption.decode(e,e.uint32()))):e.skipType(7&r)}return o},M.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},M.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=p.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null},M.fromObject=function(e){if(e instanceof p.google.protobuf.ExtensionRangeOptions)return e;var t=new p.google.protobuf.ExtensionRangeOptions;if(e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.ExtensionRangeOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.ExtensionRangeOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=p.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return t},M.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=p.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return n},M.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},M),t.FieldDescriptorProto=(v.prototype.name=\"\",v.prototype.number=0,v.prototype.label=1,v.prototype.type=1,v.prototype.typeName=\"\",v.prototype.extendee=\"\",v.prototype.defaultValue=\"\",v.prototype.oneofIndex=0,v.prototype.jsonName=\"\",v.prototype.options=null,v.prototype.proto3Optional=!1,v.create=function(e){return new v(e)},v.encode=function(e,t){return t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.extendee&&Object.hasOwnProperty.call(e,\"extendee\")&&t.uint32(18).string(e.extendee),null!=e.number&&Object.hasOwnProperty.call(e,\"number\")&&t.uint32(24).int32(e.number),null!=e.label&&Object.hasOwnProperty.call(e,\"label\")&&t.uint32(32).int32(e.label),null!=e.type&&Object.hasOwnProperty.call(e,\"type\")&&t.uint32(40).int32(e.type),null!=e.typeName&&Object.hasOwnProperty.call(e,\"typeName\")&&t.uint32(50).string(e.typeName),null!=e.defaultValue&&Object.hasOwnProperty.call(e,\"defaultValue\")&&t.uint32(58).string(e.defaultValue),null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&p.google.protobuf.FieldOptions.encode(e.options,t.uint32(66).fork()).ldelim(),null!=e.oneofIndex&&Object.hasOwnProperty.call(e,\"oneofIndex\")&&t.uint32(72).int32(e.oneofIndex),null!=e.jsonName&&Object.hasOwnProperty.call(e,\"jsonName\")&&t.uint32(82).string(e.jsonName),null!=e.proto3Optional&&Object.hasOwnProperty.call(e,\"proto3Optional\")&&t.uint32(136).bool(e.proto3Optional),t},v.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},v.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.FieldDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 3:o.number=e.int32();break;case 4:o.label=e.int32();break;case 5:o.type=e.int32();break;case 6:o.typeName=e.string();break;case 2:o.extendee=e.string();break;case 7:o.defaultValue=e.string();break;case 9:o.oneofIndex=e.int32();break;case 10:o.jsonName=e.string();break;case 8:o.options=p.google.protobuf.FieldOptions.decode(e,e.uint32());break;case 17:o.proto3Optional=e.bool();break;default:e.skipType(7&r)}}return o},v.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},v.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!i.isString(e.name))return\"name: string expected\";if(null!=e.number&&e.hasOwnProperty(\"number\")&&!i.isInteger(e.number))return\"number: integer expected\";if(null!=e.label&&e.hasOwnProperty(\"label\"))switch(e.label){default:return\"label: enum value expected\";case 1:case 2:case 3:}if(null!=e.type&&e.hasOwnProperty(\"type\"))switch(e.type){default:return\"type: enum value expected\";case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:case 16:case 17:case 18:}if(null!=e.typeName&&e.hasOwnProperty(\"typeName\")&&!i.isString(e.typeName))return\"typeName: string expected\";if(null!=e.extendee&&e.hasOwnProperty(\"extendee\")&&!i.isString(e.extendee))return\"extendee: string expected\";if(null!=e.defaultValue&&e.hasOwnProperty(\"defaultValue\")&&!i.isString(e.defaultValue))return\"defaultValue: string expected\";if(null!=e.oneofIndex&&e.hasOwnProperty(\"oneofIndex\")&&!i.isInteger(e.oneofIndex))return\"oneofIndex: integer expected\";if(null!=e.jsonName&&e.hasOwnProperty(\"jsonName\")&&!i.isString(e.jsonName))return\"jsonName: string expected\";if(null!=e.options&&e.hasOwnProperty(\"options\")){var t=p.google.protobuf.FieldOptions.verify(e.options);if(t)return\"options.\"+t}return null!=e.proto3Optional&&e.hasOwnProperty(\"proto3Optional\")&&\"boolean\"!=typeof e.proto3Optional?\"proto3Optional: boolean expected\":null},v.fromObject=function(e){if(e instanceof p.google.protobuf.FieldDescriptorProto)return e;var t=new p.google.protobuf.FieldDescriptorProto;switch(null!=e.name&&(t.name=String(e.name)),null!=e.number&&(t.number=0|e.number),e.label){case\"LABEL_OPTIONAL\":case 1:t.label=1;break;case\"LABEL_REQUIRED\":case 2:t.label=2;break;case\"LABEL_REPEATED\":case 3:t.label=3}switch(e.type){case\"TYPE_DOUBLE\":case 1:t.type=1;break;case\"TYPE_FLOAT\":case 2:t.type=2;break;case\"TYPE_INT64\":case 3:t.type=3;break;case\"TYPE_UINT64\":case 4:t.type=4;break;case\"TYPE_INT32\":case 5:t.type=5;break;case\"TYPE_FIXED64\":case 6:t.type=6;break;case\"TYPE_FIXED32\":case 7:t.type=7;break;case\"TYPE_BOOL\":case 8:t.type=8;break;case\"TYPE_STRING\":case 9:t.type=9;break;case\"TYPE_GROUP\":case 10:t.type=10;break;case\"TYPE_MESSAGE\":case 11:t.type=11;break;case\"TYPE_BYTES\":case 12:t.type=12;break;case\"TYPE_UINT32\":case 13:t.type=13;break;case\"TYPE_ENUM\":case 14:t.type=14;break;case\"TYPE_SFIXED32\":case 15:t.type=15;break;case\"TYPE_SFIXED64\":case 16:t.type=16;break;case\"TYPE_SINT32\":case 17:t.type=17;break;case\"TYPE_SINT64\":case 18:t.type=18}if(null!=e.typeName&&(t.typeName=String(e.typeName)),null!=e.extendee&&(t.extendee=String(e.extendee)),null!=e.defaultValue&&(t.defaultValue=String(e.defaultValue)),null!=e.oneofIndex&&(t.oneofIndex=0|e.oneofIndex),null!=e.jsonName&&(t.jsonName=String(e.jsonName)),null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.FieldDescriptorProto.options: object expected\");t.options=p.google.protobuf.FieldOptions.fromObject(e.options)}return null!=e.proto3Optional&&(t.proto3Optional=Boolean(e.proto3Optional)),t},v.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\",n.extendee=\"\",n.number=0,n.label=t.enums===String?\"LABEL_OPTIONAL\":1,n.type=t.enums===String?\"TYPE_DOUBLE\":1,n.typeName=\"\",n.defaultValue=\"\",n.options=null,n.oneofIndex=0,n.jsonName=\"\",n.proto3Optional=!1),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.extendee&&e.hasOwnProperty(\"extendee\")&&(n.extendee=e.extendee),null!=e.number&&e.hasOwnProperty(\"number\")&&(n.number=e.number),null!=e.label&&e.hasOwnProperty(\"label\")&&(n.label=t.enums===String?p.google.protobuf.FieldDescriptorProto.Label[e.label]:e.label),null!=e.type&&e.hasOwnProperty(\"type\")&&(n.type=t.enums===String?p.google.protobuf.FieldDescriptorProto.Type[e.type]:e.type),null!=e.typeName&&e.hasOwnProperty(\"typeName\")&&(n.typeName=e.typeName),null!=e.defaultValue&&e.hasOwnProperty(\"defaultValue\")&&(n.defaultValue=e.defaultValue),null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=p.google.protobuf.FieldOptions.toObject(e.options,t)),null!=e.oneofIndex&&e.hasOwnProperty(\"oneofIndex\")&&(n.oneofIndex=e.oneofIndex),null!=e.jsonName&&e.hasOwnProperty(\"jsonName\")&&(n.jsonName=e.jsonName),null!=e.proto3Optional&&e.hasOwnProperty(\"proto3Optional\")&&(n.proto3Optional=e.proto3Optional),n},v.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},v.Type=(n={},(e=Object.create(n))[n[1]=\"TYPE_DOUBLE\"]=1,e[n[2]=\"TYPE_FLOAT\"]=2,e[n[3]=\"TYPE_INT64\"]=3,e[n[4]=\"TYPE_UINT64\"]=4,e[n[5]=\"TYPE_INT32\"]=5,e[n[6]=\"TYPE_FIXED64\"]=6,e[n[7]=\"TYPE_FIXED32\"]=7,e[n[8]=\"TYPE_BOOL\"]=8,e[n[9]=\"TYPE_STRING\"]=9,e[n[10]=\"TYPE_GROUP\"]=10,e[n[11]=\"TYPE_MESSAGE\"]=11,e[n[12]=\"TYPE_BYTES\"]=12,e[n[13]=\"TYPE_UINT32\"]=13,e[n[14]=\"TYPE_ENUM\"]=14,e[n[15]=\"TYPE_SFIXED32\"]=15,e[n[16]=\"TYPE_SFIXED64\"]=16,e[n[17]=\"TYPE_SINT32\"]=17,e[n[18]=\"TYPE_SINT64\"]=18,e),v.Label=(n={},(e=Object.create(n))[n[1]=\"LABEL_OPTIONAL\"]=1,e[n[2]=\"LABEL_REQUIRED\"]=2,e[n[3]=\"LABEL_REPEATED\"]=3,e),v),t.OneofDescriptorProto=(w.prototype.name=\"\",w.prototype.options=null,w.create=function(e){return new w(e)},w.encode=function(e,t){return t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&p.google.protobuf.OneofOptions.encode(e.options,t.uint32(18).fork()).ldelim(),t},w.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},w.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.OneofDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.options=p.google.protobuf.OneofOptions.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},w.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},w.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!i.isString(e.name))return\"name: string expected\";if(null!=e.options&&e.hasOwnProperty(\"options\")){e=p.google.protobuf.OneofOptions.verify(e.options);if(e)return\"options.\"+e}return null},w.fromObject=function(e){if(e instanceof p.google.protobuf.OneofDescriptorProto)return e;var t=new p.google.protobuf.OneofDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.OneofDescriptorProto.options: object expected\");t.options=p.google.protobuf.OneofOptions.fromObject(e.options)}return t},w.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\",n.options=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=p.google.protobuf.OneofOptions.toObject(e.options,t)),n},w.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},w),t.EnumDescriptorProto=(P.prototype.name=\"\",P.prototype.value=i.emptyArray,P.prototype.options=null,P.prototype.reservedRange=i.emptyArray,P.prototype.reservedName=i.emptyArray,P.create=function(e){return new P(e)},P.encode=function(e,t){if(t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.value&&e.value.length)for(var n=0;n<e.value.length;++n)p.google.protobuf.EnumValueDescriptorProto.encode(e.value[n],t.uint32(18).fork()).ldelim();if(null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&p.google.protobuf.EnumOptions.encode(e.options,t.uint32(26).fork()).ldelim(),null!=e.reservedRange&&e.reservedRange.length)for(n=0;n<e.reservedRange.length;++n)p.google.protobuf.EnumDescriptorProto.EnumReservedRange.encode(e.reservedRange[n],t.uint32(34).fork()).ldelim();if(null!=e.reservedName&&e.reservedName.length)for(n=0;n<e.reservedName.length;++n)t.uint32(42).string(e.reservedName[n]);return t},P.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},P.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.EnumDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.value&&o.value.length||(o.value=[]),o.value.push(p.google.protobuf.EnumValueDescriptorProto.decode(e,e.uint32()));break;case 3:o.options=p.google.protobuf.EnumOptions.decode(e,e.uint32());break;case 4:o.reservedRange&&o.reservedRange.length||(o.reservedRange=[]),o.reservedRange.push(p.google.protobuf.EnumDescriptorProto.EnumReservedRange.decode(e,e.uint32()));break;case 5:o.reservedName&&o.reservedName.length||(o.reservedName=[]),o.reservedName.push(e.string());break;default:e.skipType(7&r)}}return o},P.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},P.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!i.isString(e.name))return\"name: string expected\";if(null!=e.value&&e.hasOwnProperty(\"value\")){if(!Array.isArray(e.value))return\"value: array expected\";for(var t=0;t<e.value.length;++t)if(n=p.google.protobuf.EnumValueDescriptorProto.verify(e.value[t]))return\"value.\"+n}if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n=p.google.protobuf.EnumOptions.verify(e.options)))return\"options.\"+n;if(null!=e.reservedRange&&e.hasOwnProperty(\"reservedRange\")){if(!Array.isArray(e.reservedRange))return\"reservedRange: array expected\";for(var n,t=0;t<e.reservedRange.length;++t)if(n=p.google.protobuf.EnumDescriptorProto.EnumReservedRange.verify(e.reservedRange[t]))return\"reservedRange.\"+n}if(null!=e.reservedName&&e.hasOwnProperty(\"reservedName\")){if(!Array.isArray(e.reservedName))return\"reservedName: array expected\";for(t=0;t<e.reservedName.length;++t)if(!i.isString(e.reservedName[t]))return\"reservedName: string[] expected\"}return null},P.fromObject=function(e){if(e instanceof p.google.protobuf.EnumDescriptorProto)return e;var t=new p.google.protobuf.EnumDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),e.value){if(!Array.isArray(e.value))throw TypeError(\".google.protobuf.EnumDescriptorProto.value: array expected\");t.value=[];for(var n=0;n<e.value.length;++n){if(\"object\"!=typeof e.value[n])throw TypeError(\".google.protobuf.EnumDescriptorProto.value: object expected\");t.value[n]=p.google.protobuf.EnumValueDescriptorProto.fromObject(e.value[n])}}if(null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.EnumDescriptorProto.options: object expected\");t.options=p.google.protobuf.EnumOptions.fromObject(e.options)}if(e.reservedRange){if(!Array.isArray(e.reservedRange))throw TypeError(\".google.protobuf.EnumDescriptorProto.reservedRange: array expected\");t.reservedRange=[];for(n=0;n<e.reservedRange.length;++n){if(\"object\"!=typeof e.reservedRange[n])throw TypeError(\".google.protobuf.EnumDescriptorProto.reservedRange: object expected\");t.reservedRange[n]=p.google.protobuf.EnumDescriptorProto.EnumReservedRange.fromObject(e.reservedRange[n])}}if(e.reservedName){if(!Array.isArray(e.reservedName))throw TypeError(\".google.protobuf.EnumDescriptorProto.reservedName: array expected\");t.reservedName=[];for(n=0;n<e.reservedName.length;++n)t.reservedName[n]=String(e.reservedName[n])}return t},P.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.value=[],n.reservedRange=[],n.reservedName=[]),t.defaults&&(n.name=\"\",n.options=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),e.value&&e.value.length){n.value=[];for(var o=0;o<e.value.length;++o)n.value[o]=p.google.protobuf.EnumValueDescriptorProto.toObject(e.value[o],t)}if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=p.google.protobuf.EnumOptions.toObject(e.options,t)),e.reservedRange&&e.reservedRange.length){n.reservedRange=[];for(o=0;o<e.reservedRange.length;++o)n.reservedRange[o]=p.google.protobuf.EnumDescriptorProto.EnumReservedRange.toObject(e.reservedRange[o],t)}if(e.reservedName&&e.reservedName.length){n.reservedName=[];for(o=0;o<e.reservedName.length;++o)n.reservedName[o]=e.reservedName[o]}return n},P.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},P.EnumReservedRange=(_.prototype.start=0,_.prototype.end=0,_.create=function(e){return new _(e)},_.encode=function(e,t){return t=t||r.create(),null!=e.start&&Object.hasOwnProperty.call(e,\"start\")&&t.uint32(8).int32(e.start),null!=e.end&&Object.hasOwnProperty.call(e,\"end\")&&t.uint32(16).int32(e.end),t},_.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},_.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.EnumDescriptorProto.EnumReservedRange;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.start=e.int32();break;case 2:o.end=e.int32();break;default:e.skipType(7&r)}}return o},_.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},_.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.start&&e.hasOwnProperty(\"start\")&&!i.isInteger(e.start)?\"start: integer expected\":null!=e.end&&e.hasOwnProperty(\"end\")&&!i.isInteger(e.end)?\"end: integer expected\":null},_.fromObject=function(e){var t;return e instanceof p.google.protobuf.EnumDescriptorProto.EnumReservedRange?e:(t=new p.google.protobuf.EnumDescriptorProto.EnumReservedRange,null!=e.start&&(t.start=0|e.start),null!=e.end&&(t.end=0|e.end),t)},_.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.start=0,n.end=0),null!=e.start&&e.hasOwnProperty(\"start\")&&(n.start=e.start),null!=e.end&&e.hasOwnProperty(\"end\")&&(n.end=e.end),n},_.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},_),P),t.EnumValueDescriptorProto=(j.prototype.name=\"\",j.prototype.number=0,j.prototype.options=null,j.create=function(e){return new j(e)},j.encode=function(e,t){return t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.number&&Object.hasOwnProperty.call(e,\"number\")&&t.uint32(16).int32(e.number),null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&p.google.protobuf.EnumValueOptions.encode(e.options,t.uint32(26).fork()).ldelim(),t},j.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},j.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.EnumValueDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.number=e.int32();break;case 3:o.options=p.google.protobuf.EnumValueOptions.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},j.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},j.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!i.isString(e.name))return\"name: string expected\";if(null!=e.number&&e.hasOwnProperty(\"number\")&&!i.isInteger(e.number))return\"number: integer expected\";if(null!=e.options&&e.hasOwnProperty(\"options\")){e=p.google.protobuf.EnumValueOptions.verify(e.options);if(e)return\"options.\"+e}return null},j.fromObject=function(e){if(e instanceof p.google.protobuf.EnumValueDescriptorProto)return e;var t=new p.google.protobuf.EnumValueDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),null!=e.number&&(t.number=0|e.number),null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.EnumValueDescriptorProto.options: object expected\");t.options=p.google.protobuf.EnumValueOptions.fromObject(e.options)}return t},j.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\",n.number=0,n.options=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.number&&e.hasOwnProperty(\"number\")&&(n.number=e.number),null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=p.google.protobuf.EnumValueOptions.toObject(e.options,t)),n},j.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},j),t.ServiceDescriptorProto=(S.prototype.name=\"\",S.prototype.method=i.emptyArray,S.prototype.options=null,S.create=function(e){return new S(e)},S.encode=function(e,t){if(t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.method&&e.method.length)for(var n=0;n<e.method.length;++n)p.google.protobuf.MethodDescriptorProto.encode(e.method[n],t.uint32(18).fork()).ldelim();return null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&p.google.protobuf.ServiceOptions.encode(e.options,t.uint32(26).fork()).ldelim(),t},S.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},S.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.ServiceDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.method&&o.method.length||(o.method=[]),o.method.push(p.google.protobuf.MethodDescriptorProto.decode(e,e.uint32()));break;case 3:o.options=p.google.protobuf.ServiceOptions.decode(e,e.uint32());break;default:e.skipType(7&r)}}return o},S.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},S.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!i.isString(e.name))return\"name: string expected\";if(null!=e.method&&e.hasOwnProperty(\"method\")){if(!Array.isArray(e.method))return\"method: array expected\";for(var t=0;t<e.method.length;++t)if(n=p.google.protobuf.MethodDescriptorProto.verify(e.method[t]))return\"method.\"+n}var n;if(null!=e.options&&e.hasOwnProperty(\"options\")&&(n=p.google.protobuf.ServiceOptions.verify(e.options)))return\"options.\"+n;return null},S.fromObject=function(e){if(e instanceof p.google.protobuf.ServiceDescriptorProto)return e;var t=new p.google.protobuf.ServiceDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),e.method){if(!Array.isArray(e.method))throw TypeError(\".google.protobuf.ServiceDescriptorProto.method: array expected\");t.method=[];for(var n=0;n<e.method.length;++n){if(\"object\"!=typeof e.method[n])throw TypeError(\".google.protobuf.ServiceDescriptorProto.method: object expected\");t.method[n]=p.google.protobuf.MethodDescriptorProto.fromObject(e.method[n])}}if(null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.ServiceDescriptorProto.options: object expected\");t.options=p.google.protobuf.ServiceOptions.fromObject(e.options)}return t},S.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.method=[]),t.defaults&&(n.name=\"\",n.options=null),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),e.method&&e.method.length){n.method=[];for(var o=0;o<e.method.length;++o)n.method[o]=p.google.protobuf.MethodDescriptorProto.toObject(e.method[o],t)}return null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=p.google.protobuf.ServiceOptions.toObject(e.options,t)),n},S.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},S),t.MethodDescriptorProto=(x.prototype.name=\"\",x.prototype.inputType=\"\",x.prototype.outputType=\"\",x.prototype.options=null,x.prototype.clientStreaming=!1,x.prototype.serverStreaming=!1,x.create=function(e){return new x(e)},x.encode=function(e,t){return t=t||r.create(),null!=e.name&&Object.hasOwnProperty.call(e,\"name\")&&t.uint32(10).string(e.name),null!=e.inputType&&Object.hasOwnProperty.call(e,\"inputType\")&&t.uint32(18).string(e.inputType),null!=e.outputType&&Object.hasOwnProperty.call(e,\"outputType\")&&t.uint32(26).string(e.outputType),null!=e.options&&Object.hasOwnProperty.call(e,\"options\")&&p.google.protobuf.MethodOptions.encode(e.options,t.uint32(34).fork()).ldelim(),null!=e.clientStreaming&&Object.hasOwnProperty.call(e,\"clientStreaming\")&&t.uint32(40).bool(e.clientStreaming),null!=e.serverStreaming&&Object.hasOwnProperty.call(e,\"serverStreaming\")&&t.uint32(48).bool(e.serverStreaming),t},x.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},x.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.MethodDescriptorProto;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.name=e.string();break;case 2:o.inputType=e.string();break;case 3:o.outputType=e.string();break;case 4:o.options=p.google.protobuf.MethodOptions.decode(e,e.uint32());break;case 5:o.clientStreaming=e.bool();break;case 6:o.serverStreaming=e.bool();break;default:e.skipType(7&r)}}return o},x.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},x.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")&&!i.isString(e.name))return\"name: string expected\";if(null!=e.inputType&&e.hasOwnProperty(\"inputType\")&&!i.isString(e.inputType))return\"inputType: string expected\";if(null!=e.outputType&&e.hasOwnProperty(\"outputType\")&&!i.isString(e.outputType))return\"outputType: string expected\";if(null!=e.options&&e.hasOwnProperty(\"options\")){var t=p.google.protobuf.MethodOptions.verify(e.options);if(t)return\"options.\"+t}return null!=e.clientStreaming&&e.hasOwnProperty(\"clientStreaming\")&&\"boolean\"!=typeof e.clientStreaming?\"clientStreaming: boolean expected\":null!=e.serverStreaming&&e.hasOwnProperty(\"serverStreaming\")&&\"boolean\"!=typeof e.serverStreaming?\"serverStreaming: boolean expected\":null},x.fromObject=function(e){if(e instanceof p.google.protobuf.MethodDescriptorProto)return e;var t=new p.google.protobuf.MethodDescriptorProto;if(null!=e.name&&(t.name=String(e.name)),null!=e.inputType&&(t.inputType=String(e.inputType)),null!=e.outputType&&(t.outputType=String(e.outputType)),null!=e.options){if(\"object\"!=typeof e.options)throw TypeError(\".google.protobuf.MethodDescriptorProto.options: object expected\");t.options=p.google.protobuf.MethodOptions.fromObject(e.options)}return null!=e.clientStreaming&&(t.clientStreaming=Boolean(e.clientStreaming)),null!=e.serverStreaming&&(t.serverStreaming=Boolean(e.serverStreaming)),t},x.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.name=\"\",n.inputType=\"\",n.outputType=\"\",n.options=null,n.clientStreaming=!1,n.serverStreaming=!1),null!=e.name&&e.hasOwnProperty(\"name\")&&(n.name=e.name),null!=e.inputType&&e.hasOwnProperty(\"inputType\")&&(n.inputType=e.inputType),null!=e.outputType&&e.hasOwnProperty(\"outputType\")&&(n.outputType=e.outputType),null!=e.options&&e.hasOwnProperty(\"options\")&&(n.options=p.google.protobuf.MethodOptions.toObject(e.options,t)),null!=e.clientStreaming&&e.hasOwnProperty(\"clientStreaming\")&&(n.clientStreaming=e.clientStreaming),null!=e.serverStreaming&&e.hasOwnProperty(\"serverStreaming\")&&(n.serverStreaming=e.serverStreaming),n},x.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},x),t.FileOptions=(k.prototype.javaPackage=\"\",k.prototype.javaOuterClassname=\"\",k.prototype.javaMultipleFiles=!1,k.prototype.javaGenerateEqualsAndHash=!1,k.prototype.javaStringCheckUtf8=!1,k.prototype.optimizeFor=1,k.prototype.goPackage=\"\",k.prototype.ccGenericServices=!1,k.prototype.javaGenericServices=!1,k.prototype.pyGenericServices=!1,k.prototype.phpGenericServices=!1,k.prototype.deprecated=!1,k.prototype.ccEnableArenas=!0,k.prototype.objcClassPrefix=\"\",k.prototype.csharpNamespace=\"\",k.prototype.swiftPrefix=\"\",k.prototype.phpClassPrefix=\"\",k.prototype.phpNamespace=\"\",k.prototype.phpMetadataNamespace=\"\",k.prototype.rubyPackage=\"\",k.prototype.uninterpretedOption=i.emptyArray,k.create=function(e){return new k(e)},k.encode=function(e,t){if(t=t||r.create(),null!=e.javaPackage&&Object.hasOwnProperty.call(e,\"javaPackage\")&&t.uint32(10).string(e.javaPackage),null!=e.javaOuterClassname&&Object.hasOwnProperty.call(e,\"javaOuterClassname\")&&t.uint32(66).string(e.javaOuterClassname),null!=e.optimizeFor&&Object.hasOwnProperty.call(e,\"optimizeFor\")&&t.uint32(72).int32(e.optimizeFor),null!=e.javaMultipleFiles&&Object.hasOwnProperty.call(e,\"javaMultipleFiles\")&&t.uint32(80).bool(e.javaMultipleFiles),null!=e.goPackage&&Object.hasOwnProperty.call(e,\"goPackage\")&&t.uint32(90).string(e.goPackage),null!=e.ccGenericServices&&Object.hasOwnProperty.call(e,\"ccGenericServices\")&&t.uint32(128).bool(e.ccGenericServices),null!=e.javaGenericServices&&Object.hasOwnProperty.call(e,\"javaGenericServices\")&&t.uint32(136).bool(e.javaGenericServices),null!=e.pyGenericServices&&Object.hasOwnProperty.call(e,\"pyGenericServices\")&&t.uint32(144).bool(e.pyGenericServices),null!=e.javaGenerateEqualsAndHash&&Object.hasOwnProperty.call(e,\"javaGenerateEqualsAndHash\")&&t.uint32(160).bool(e.javaGenerateEqualsAndHash),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(184).bool(e.deprecated),null!=e.javaStringCheckUtf8&&Object.hasOwnProperty.call(e,\"javaStringCheckUtf8\")&&t.uint32(216).bool(e.javaStringCheckUtf8),null!=e.ccEnableArenas&&Object.hasOwnProperty.call(e,\"ccEnableArenas\")&&t.uint32(248).bool(e.ccEnableArenas),null!=e.objcClassPrefix&&Object.hasOwnProperty.call(e,\"objcClassPrefix\")&&t.uint32(290).string(e.objcClassPrefix),null!=e.csharpNamespace&&Object.hasOwnProperty.call(e,\"csharpNamespace\")&&t.uint32(298).string(e.csharpNamespace),null!=e.swiftPrefix&&Object.hasOwnProperty.call(e,\"swiftPrefix\")&&t.uint32(314).string(e.swiftPrefix),null!=e.phpClassPrefix&&Object.hasOwnProperty.call(e,\"phpClassPrefix\")&&t.uint32(322).string(e.phpClassPrefix),null!=e.phpNamespace&&Object.hasOwnProperty.call(e,\"phpNamespace\")&&t.uint32(330).string(e.phpNamespace),null!=e.phpGenericServices&&Object.hasOwnProperty.call(e,\"phpGenericServices\")&&t.uint32(336).bool(e.phpGenericServices),null!=e.phpMetadataNamespace&&Object.hasOwnProperty.call(e,\"phpMetadataNamespace\")&&t.uint32(354).string(e.phpMetadataNamespace),null!=e.rubyPackage&&Object.hasOwnProperty.call(e,\"rubyPackage\")&&t.uint32(362).string(e.rubyPackage),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)p.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return t},k.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},k.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.FileOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.javaPackage=e.string();break;case 8:o.javaOuterClassname=e.string();break;case 10:o.javaMultipleFiles=e.bool();break;case 20:o.javaGenerateEqualsAndHash=e.bool();break;case 27:o.javaStringCheckUtf8=e.bool();break;case 9:o.optimizeFor=e.int32();break;case 11:o.goPackage=e.string();break;case 16:o.ccGenericServices=e.bool();break;case 17:o.javaGenericServices=e.bool();break;case 18:o.pyGenericServices=e.bool();break;case 42:o.phpGenericServices=e.bool();break;case 23:o.deprecated=e.bool();break;case 31:o.ccEnableArenas=e.bool();break;case 36:o.objcClassPrefix=e.string();break;case 37:o.csharpNamespace=e.string();break;case 39:o.swiftPrefix=e.string();break;case 40:o.phpClassPrefix=e.string();break;case 41:o.phpNamespace=e.string();break;case 44:o.phpMetadataNamespace=e.string();break;case 45:o.rubyPackage=e.string();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(p.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return o},k.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},k.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.javaPackage&&e.hasOwnProperty(\"javaPackage\")&&!i.isString(e.javaPackage))return\"javaPackage: string expected\";if(null!=e.javaOuterClassname&&e.hasOwnProperty(\"javaOuterClassname\")&&!i.isString(e.javaOuterClassname))return\"javaOuterClassname: string expected\";if(null!=e.javaMultipleFiles&&e.hasOwnProperty(\"javaMultipleFiles\")&&\"boolean\"!=typeof e.javaMultipleFiles)return\"javaMultipleFiles: boolean expected\";if(null!=e.javaGenerateEqualsAndHash&&e.hasOwnProperty(\"javaGenerateEqualsAndHash\")&&\"boolean\"!=typeof e.javaGenerateEqualsAndHash)return\"javaGenerateEqualsAndHash: boolean expected\";if(null!=e.javaStringCheckUtf8&&e.hasOwnProperty(\"javaStringCheckUtf8\")&&\"boolean\"!=typeof e.javaStringCheckUtf8)return\"javaStringCheckUtf8: boolean expected\";if(null!=e.optimizeFor&&e.hasOwnProperty(\"optimizeFor\"))switch(e.optimizeFor){default:return\"optimizeFor: enum value expected\";case 1:case 2:case 3:}if(null!=e.goPackage&&e.hasOwnProperty(\"goPackage\")&&!i.isString(e.goPackage))return\"goPackage: string expected\";if(null!=e.ccGenericServices&&e.hasOwnProperty(\"ccGenericServices\")&&\"boolean\"!=typeof e.ccGenericServices)return\"ccGenericServices: boolean expected\";if(null!=e.javaGenericServices&&e.hasOwnProperty(\"javaGenericServices\")&&\"boolean\"!=typeof e.javaGenericServices)return\"javaGenericServices: boolean expected\";if(null!=e.pyGenericServices&&e.hasOwnProperty(\"pyGenericServices\")&&\"boolean\"!=typeof e.pyGenericServices)return\"pyGenericServices: boolean expected\";if(null!=e.phpGenericServices&&e.hasOwnProperty(\"phpGenericServices\")&&\"boolean\"!=typeof e.phpGenericServices)return\"phpGenericServices: boolean expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.ccEnableArenas&&e.hasOwnProperty(\"ccEnableArenas\")&&\"boolean\"!=typeof e.ccEnableArenas)return\"ccEnableArenas: boolean expected\";if(null!=e.objcClassPrefix&&e.hasOwnProperty(\"objcClassPrefix\")&&!i.isString(e.objcClassPrefix))return\"objcClassPrefix: string expected\";if(null!=e.csharpNamespace&&e.hasOwnProperty(\"csharpNamespace\")&&!i.isString(e.csharpNamespace))return\"csharpNamespace: string expected\";if(null!=e.swiftPrefix&&e.hasOwnProperty(\"swiftPrefix\")&&!i.isString(e.swiftPrefix))return\"swiftPrefix: string expected\";if(null!=e.phpClassPrefix&&e.hasOwnProperty(\"phpClassPrefix\")&&!i.isString(e.phpClassPrefix))return\"phpClassPrefix: string expected\";if(null!=e.phpNamespace&&e.hasOwnProperty(\"phpNamespace\")&&!i.isString(e.phpNamespace))return\"phpNamespace: string expected\";if(null!=e.phpMetadataNamespace&&e.hasOwnProperty(\"phpMetadataNamespace\")&&!i.isString(e.phpMetadataNamespace))return\"phpMetadataNamespace: string expected\";if(null!=e.rubyPackage&&e.hasOwnProperty(\"rubyPackage\")&&!i.isString(e.rubyPackage))return\"rubyPackage: string expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=p.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null},k.fromObject=function(e){if(e instanceof p.google.protobuf.FileOptions)return e;var t=new p.google.protobuf.FileOptions;switch(null!=e.javaPackage&&(t.javaPackage=String(e.javaPackage)),null!=e.javaOuterClassname&&(t.javaOuterClassname=String(e.javaOuterClassname)),null!=e.javaMultipleFiles&&(t.javaMultipleFiles=Boolean(e.javaMultipleFiles)),null!=e.javaGenerateEqualsAndHash&&(t.javaGenerateEqualsAndHash=Boolean(e.javaGenerateEqualsAndHash)),null!=e.javaStringCheckUtf8&&(t.javaStringCheckUtf8=Boolean(e.javaStringCheckUtf8)),e.optimizeFor){case\"SPEED\":case 1:t.optimizeFor=1;break;case\"CODE_SIZE\":case 2:t.optimizeFor=2;break;case\"LITE_RUNTIME\":case 3:t.optimizeFor=3}if(null!=e.goPackage&&(t.goPackage=String(e.goPackage)),null!=e.ccGenericServices&&(t.ccGenericServices=Boolean(e.ccGenericServices)),null!=e.javaGenericServices&&(t.javaGenericServices=Boolean(e.javaGenericServices)),null!=e.pyGenericServices&&(t.pyGenericServices=Boolean(e.pyGenericServices)),null!=e.phpGenericServices&&(t.phpGenericServices=Boolean(e.phpGenericServices)),null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),null!=e.ccEnableArenas&&(t.ccEnableArenas=Boolean(e.ccEnableArenas)),null!=e.objcClassPrefix&&(t.objcClassPrefix=String(e.objcClassPrefix)),null!=e.csharpNamespace&&(t.csharpNamespace=String(e.csharpNamespace)),null!=e.swiftPrefix&&(t.swiftPrefix=String(e.swiftPrefix)),null!=e.phpClassPrefix&&(t.phpClassPrefix=String(e.phpClassPrefix)),null!=e.phpNamespace&&(t.phpNamespace=String(e.phpNamespace)),null!=e.phpMetadataNamespace&&(t.phpMetadataNamespace=String(e.phpMetadataNamespace)),null!=e.rubyPackage&&(t.rubyPackage=String(e.rubyPackage)),e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.FileOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.FileOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=p.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return t},k.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),t.defaults&&(n.javaPackage=\"\",n.javaOuterClassname=\"\",n.optimizeFor=t.enums===String?\"SPEED\":1,n.javaMultipleFiles=!1,n.goPackage=\"\",n.ccGenericServices=!1,n.javaGenericServices=!1,n.pyGenericServices=!1,n.javaGenerateEqualsAndHash=!1,n.deprecated=!1,n.javaStringCheckUtf8=!1,n.ccEnableArenas=!0,n.objcClassPrefix=\"\",n.csharpNamespace=\"\",n.swiftPrefix=\"\",n.phpClassPrefix=\"\",n.phpNamespace=\"\",n.phpGenericServices=!1,n.phpMetadataNamespace=\"\",n.rubyPackage=\"\"),null!=e.javaPackage&&e.hasOwnProperty(\"javaPackage\")&&(n.javaPackage=e.javaPackage),null!=e.javaOuterClassname&&e.hasOwnProperty(\"javaOuterClassname\")&&(n.javaOuterClassname=e.javaOuterClassname),null!=e.optimizeFor&&e.hasOwnProperty(\"optimizeFor\")&&(n.optimizeFor=t.enums===String?p.google.protobuf.FileOptions.OptimizeMode[e.optimizeFor]:e.optimizeFor),null!=e.javaMultipleFiles&&e.hasOwnProperty(\"javaMultipleFiles\")&&(n.javaMultipleFiles=e.javaMultipleFiles),null!=e.goPackage&&e.hasOwnProperty(\"goPackage\")&&(n.goPackage=e.goPackage),null!=e.ccGenericServices&&e.hasOwnProperty(\"ccGenericServices\")&&(n.ccGenericServices=e.ccGenericServices),null!=e.javaGenericServices&&e.hasOwnProperty(\"javaGenericServices\")&&(n.javaGenericServices=e.javaGenericServices),null!=e.pyGenericServices&&e.hasOwnProperty(\"pyGenericServices\")&&(n.pyGenericServices=e.pyGenericServices),null!=e.javaGenerateEqualsAndHash&&e.hasOwnProperty(\"javaGenerateEqualsAndHash\")&&(n.javaGenerateEqualsAndHash=e.javaGenerateEqualsAndHash),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),null!=e.javaStringCheckUtf8&&e.hasOwnProperty(\"javaStringCheckUtf8\")&&(n.javaStringCheckUtf8=e.javaStringCheckUtf8),null!=e.ccEnableArenas&&e.hasOwnProperty(\"ccEnableArenas\")&&(n.ccEnableArenas=e.ccEnableArenas),null!=e.objcClassPrefix&&e.hasOwnProperty(\"objcClassPrefix\")&&(n.objcClassPrefix=e.objcClassPrefix),null!=e.csharpNamespace&&e.hasOwnProperty(\"csharpNamespace\")&&(n.csharpNamespace=e.csharpNamespace),null!=e.swiftPrefix&&e.hasOwnProperty(\"swiftPrefix\")&&(n.swiftPrefix=e.swiftPrefix),null!=e.phpClassPrefix&&e.hasOwnProperty(\"phpClassPrefix\")&&(n.phpClassPrefix=e.phpClassPrefix),null!=e.phpNamespace&&e.hasOwnProperty(\"phpNamespace\")&&(n.phpNamespace=e.phpNamespace),null!=e.phpGenericServices&&e.hasOwnProperty(\"phpGenericServices\")&&(n.phpGenericServices=e.phpGenericServices),null!=e.phpMetadataNamespace&&e.hasOwnProperty(\"phpMetadataNamespace\")&&(n.phpMetadataNamespace=e.phpMetadataNamespace),null!=e.rubyPackage&&e.hasOwnProperty(\"rubyPackage\")&&(n.rubyPackage=e.rubyPackage),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=p.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return n},k.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},k.OptimizeMode=(n={},(e=Object.create(n))[n[1]=\"SPEED\"]=1,e[n[2]=\"CODE_SIZE\"]=2,e[n[3]=\"LITE_RUNTIME\"]=3,e),k),t.MessageOptions=(D.prototype.messageSetWireFormat=!1,D.prototype.noStandardDescriptorAccessor=!1,D.prototype.deprecated=!1,D.prototype.mapEntry=!1,D.prototype.uninterpretedOption=i.emptyArray,D.create=function(e){return new D(e)},D.encode=function(e,t){if(t=t||r.create(),null!=e.messageSetWireFormat&&Object.hasOwnProperty.call(e,\"messageSetWireFormat\")&&t.uint32(8).bool(e.messageSetWireFormat),null!=e.noStandardDescriptorAccessor&&Object.hasOwnProperty.call(e,\"noStandardDescriptorAccessor\")&&t.uint32(16).bool(e.noStandardDescriptorAccessor),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(24).bool(e.deprecated),null!=e.mapEntry&&Object.hasOwnProperty.call(e,\"mapEntry\")&&t.uint32(56).bool(e.mapEntry),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)p.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return t},D.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},D.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.MessageOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.messageSetWireFormat=e.bool();break;case 2:o.noStandardDescriptorAccessor=e.bool();break;case 3:o.deprecated=e.bool();break;case 7:o.mapEntry=e.bool();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(p.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return o},D.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},D.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.messageSetWireFormat&&e.hasOwnProperty(\"messageSetWireFormat\")&&\"boolean\"!=typeof e.messageSetWireFormat)return\"messageSetWireFormat: boolean expected\";if(null!=e.noStandardDescriptorAccessor&&e.hasOwnProperty(\"noStandardDescriptorAccessor\")&&\"boolean\"!=typeof e.noStandardDescriptorAccessor)return\"noStandardDescriptorAccessor: boolean expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.mapEntry&&e.hasOwnProperty(\"mapEntry\")&&\"boolean\"!=typeof e.mapEntry)return\"mapEntry: boolean expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=p.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null},D.fromObject=function(e){if(e instanceof p.google.protobuf.MessageOptions)return e;var t=new p.google.protobuf.MessageOptions;if(null!=e.messageSetWireFormat&&(t.messageSetWireFormat=Boolean(e.messageSetWireFormat)),null!=e.noStandardDescriptorAccessor&&(t.noStandardDescriptorAccessor=Boolean(e.noStandardDescriptorAccessor)),null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),null!=e.mapEntry&&(t.mapEntry=Boolean(e.mapEntry)),e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.MessageOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.MessageOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=p.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return t},D.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),t.defaults&&(n.messageSetWireFormat=!1,n.noStandardDescriptorAccessor=!1,n.deprecated=!1,n.mapEntry=!1),null!=e.messageSetWireFormat&&e.hasOwnProperty(\"messageSetWireFormat\")&&(n.messageSetWireFormat=e.messageSetWireFormat),null!=e.noStandardDescriptorAccessor&&e.hasOwnProperty(\"noStandardDescriptorAccessor\")&&(n.noStandardDescriptorAccessor=e.noStandardDescriptorAccessor),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),null!=e.mapEntry&&e.hasOwnProperty(\"mapEntry\")&&(n.mapEntry=e.mapEntry),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=p.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return n},D.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},D),t.FieldOptions=(T.prototype.ctype=0,T.prototype.packed=!1,T.prototype.jstype=0,T.prototype.lazy=!1,T.prototype.deprecated=!1,T.prototype.weak=!1,T.prototype.uninterpretedOption=i.emptyArray,T.create=function(e){return new T(e)},T.encode=function(e,t){if(t=t||r.create(),null!=e.ctype&&Object.hasOwnProperty.call(e,\"ctype\")&&t.uint32(8).int32(e.ctype),null!=e.packed&&Object.hasOwnProperty.call(e,\"packed\")&&t.uint32(16).bool(e.packed),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(24).bool(e.deprecated),null!=e.lazy&&Object.hasOwnProperty.call(e,\"lazy\")&&t.uint32(40).bool(e.lazy),null!=e.jstype&&Object.hasOwnProperty.call(e,\"jstype\")&&t.uint32(48).int32(e.jstype),null!=e.weak&&Object.hasOwnProperty.call(e,\"weak\")&&t.uint32(80).bool(e.weak),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)p.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return t},T.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},T.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.FieldOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.ctype=e.int32();break;case 2:o.packed=e.bool();break;case 6:o.jstype=e.int32();break;case 5:o.lazy=e.bool();break;case 3:o.deprecated=e.bool();break;case 10:o.weak=e.bool();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(p.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return o},T.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},T.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.ctype&&e.hasOwnProperty(\"ctype\"))switch(e.ctype){default:return\"ctype: enum value expected\";case 0:case 1:case 2:}if(null!=e.packed&&e.hasOwnProperty(\"packed\")&&\"boolean\"!=typeof e.packed)return\"packed: boolean expected\";if(null!=e.jstype&&e.hasOwnProperty(\"jstype\"))switch(e.jstype){default:return\"jstype: enum value expected\";case 0:case 1:case 2:}if(null!=e.lazy&&e.hasOwnProperty(\"lazy\")&&\"boolean\"!=typeof e.lazy)return\"lazy: boolean expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.weak&&e.hasOwnProperty(\"weak\")&&\"boolean\"!=typeof e.weak)return\"weak: boolean expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=p.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null},T.fromObject=function(e){if(e instanceof p.google.protobuf.FieldOptions)return e;var t=new p.google.protobuf.FieldOptions;switch(e.ctype){case\"STRING\":case 0:t.ctype=0;break;case\"CORD\":case 1:t.ctype=1;break;case\"STRING_PIECE\":case 2:t.ctype=2}switch(null!=e.packed&&(t.packed=Boolean(e.packed)),e.jstype){case\"JS_NORMAL\":case 0:t.jstype=0;break;case\"JS_STRING\":case 1:t.jstype=1;break;case\"JS_NUMBER\":case 2:t.jstype=2}if(null!=e.lazy&&(t.lazy=Boolean(e.lazy)),null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),null!=e.weak&&(t.weak=Boolean(e.weak)),e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.FieldOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.FieldOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=p.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return t},T.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),t.defaults&&(n.ctype=t.enums===String?\"STRING\":0,n.packed=!1,n.deprecated=!1,n.lazy=!1,n.jstype=t.enums===String?\"JS_NORMAL\":0,n.weak=!1),null!=e.ctype&&e.hasOwnProperty(\"ctype\")&&(n.ctype=t.enums===String?p.google.protobuf.FieldOptions.CType[e.ctype]:e.ctype),null!=e.packed&&e.hasOwnProperty(\"packed\")&&(n.packed=e.packed),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),null!=e.lazy&&e.hasOwnProperty(\"lazy\")&&(n.lazy=e.lazy),null!=e.jstype&&e.hasOwnProperty(\"jstype\")&&(n.jstype=t.enums===String?p.google.protobuf.FieldOptions.JSType[e.jstype]:e.jstype),null!=e.weak&&e.hasOwnProperty(\"weak\")&&(n.weak=e.weak),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=p.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return n},T.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},T.CType=(n={},(e=Object.create(n))[n[0]=\"STRING\"]=0,e[n[1]=\"CORD\"]=1,e[n[2]=\"STRING_PIECE\"]=2,e),T.JSType=(n={},(e=Object.create(n))[n[0]=\"JS_NORMAL\"]=0,e[n[1]=\"JS_STRING\"]=1,e[n[2]=\"JS_NUMBER\"]=2,e),T),t.OneofOptions=(H.prototype.uninterpretedOption=i.emptyArray,H.create=function(e){return new H(e)},H.encode=function(e,t){if(t=t||r.create(),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)p.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return t},H.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},H.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.OneofOptions;e.pos<n;){var r=e.uint32();r>>>3==999?(o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(p.google.protobuf.UninterpretedOption.decode(e,e.uint32()))):e.skipType(7&r)}return o},H.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},H.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=p.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null},H.fromObject=function(e){if(e instanceof p.google.protobuf.OneofOptions)return e;var t=new p.google.protobuf.OneofOptions;if(e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.OneofOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.OneofOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=p.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return t},H.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=p.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return n},H.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},H),t.EnumOptions=(E.prototype.allowAlias=!1,E.prototype.deprecated=!1,E.prototype.uninterpretedOption=i.emptyArray,E.create=function(e){return new E(e)},E.encode=function(e,t){if(t=t||r.create(),null!=e.allowAlias&&Object.hasOwnProperty.call(e,\"allowAlias\")&&t.uint32(16).bool(e.allowAlias),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(24).bool(e.deprecated),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)p.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return t},E.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},E.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.EnumOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 2:o.allowAlias=e.bool();break;case 3:o.deprecated=e.bool();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(p.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return o},E.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},E.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.allowAlias&&e.hasOwnProperty(\"allowAlias\")&&\"boolean\"!=typeof e.allowAlias)return\"allowAlias: boolean expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=p.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null},E.fromObject=function(e){if(e instanceof p.google.protobuf.EnumOptions)return e;var t=new p.google.protobuf.EnumOptions;if(null!=e.allowAlias&&(t.allowAlias=Boolean(e.allowAlias)),null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.EnumOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.EnumOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=p.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return t},E.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),t.defaults&&(n.allowAlias=!1,n.deprecated=!1),null!=e.allowAlias&&e.hasOwnProperty(\"allowAlias\")&&(n.allowAlias=e.allowAlias),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=p.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return n},E.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},E),t.EnumValueOptions=(z.prototype.deprecated=!1,z.prototype.uninterpretedOption=i.emptyArray,z.create=function(e){return new z(e)},z.encode=function(e,t){if(t=t||r.create(),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(8).bool(e.deprecated),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)p.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return t},z.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},z.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.EnumValueOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.deprecated=e.bool();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(p.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return o},z.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},z.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=p.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null},z.fromObject=function(e){if(e instanceof p.google.protobuf.EnumValueOptions)return e;var t=new p.google.protobuf.EnumValueOptions;if(null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.EnumValueOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.EnumValueOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=p.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return t},z.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),t.defaults&&(n.deprecated=!1),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=p.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return n},z.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},z),t.ServiceOptions=(A.prototype.deprecated=!1,A.prototype.uninterpretedOption=i.emptyArray,A.prototype[\".google.api.defaultHost\"]=\"\",A.prototype[\".google.api.oauthScopes\"]=\"\",A.create=function(e){return new A(e)},A.encode=function(e,t){if(t=t||r.create(),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(264).bool(e.deprecated),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)p.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();return null!=e[\".google.api.defaultHost\"]&&Object.hasOwnProperty.call(e,\".google.api.defaultHost\")&&t.uint32(8394).string(e[\".google.api.defaultHost\"]),null!=e[\".google.api.oauthScopes\"]&&Object.hasOwnProperty.call(e,\".google.api.oauthScopes\")&&t.uint32(8402).string(e[\".google.api.oauthScopes\"]),t},A.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},A.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.ServiceOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 33:o.deprecated=e.bool();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(p.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;case 1049:o[\".google.api.defaultHost\"]=e.string();break;case 1050:o[\".google.api.oauthScopes\"]=e.string();break;default:e.skipType(7&r)}}return o},A.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},A.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t){var n=p.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]);if(n)return\"uninterpretedOption.\"+n}}return null!=e[\".google.api.defaultHost\"]&&e.hasOwnProperty(\".google.api.defaultHost\")&&!i.isString(e[\".google.api.defaultHost\"])?\".google.api.defaultHost: string expected\":null!=e[\".google.api.oauthScopes\"]&&e.hasOwnProperty(\".google.api.oauthScopes\")&&!i.isString(e[\".google.api.oauthScopes\"])?\".google.api.oauthScopes: string expected\":null},A.fromObject=function(e){if(e instanceof p.google.protobuf.ServiceOptions)return e;var t=new p.google.protobuf.ServiceOptions;if(null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.ServiceOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.ServiceOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=p.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}return null!=e[\".google.api.defaultHost\"]&&(t[\".google.api.defaultHost\"]=String(e[\".google.api.defaultHost\"])),null!=e[\".google.api.oauthScopes\"]&&(t[\".google.api.oauthScopes\"]=String(e[\".google.api.oauthScopes\"])),t},A.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[]),t.defaults&&(n.deprecated=!1,n[\".google.api.defaultHost\"]=\"\",n[\".google.api.oauthScopes\"]=\"\"),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=p.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}return null!=e[\".google.api.defaultHost\"]&&e.hasOwnProperty(\".google.api.defaultHost\")&&(n[\".google.api.defaultHost\"]=e[\".google.api.defaultHost\"]),null!=e[\".google.api.oauthScopes\"]&&e.hasOwnProperty(\".google.api.oauthScopes\")&&(n[\".google.api.oauthScopes\"]=e[\".google.api.oauthScopes\"]),n},A.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},A),t.MethodOptions=(N.prototype.deprecated=!1,N.prototype.idempotencyLevel=0,N.prototype.uninterpretedOption=i.emptyArray,N.prototype[\".google.longrunning.operationInfo\"]=null,N.prototype[\".google.api.http\"]=null,N.prototype[\".google.api.methodSignature\"]=i.emptyArray,N.create=function(e){return new N(e)},N.encode=function(e,t){if(t=t||r.create(),null!=e.deprecated&&Object.hasOwnProperty.call(e,\"deprecated\")&&t.uint32(264).bool(e.deprecated),null!=e.idempotencyLevel&&Object.hasOwnProperty.call(e,\"idempotencyLevel\")&&t.uint32(272).int32(e.idempotencyLevel),null!=e.uninterpretedOption&&e.uninterpretedOption.length)for(var n=0;n<e.uninterpretedOption.length;++n)p.google.protobuf.UninterpretedOption.encode(e.uninterpretedOption[n],t.uint32(7994).fork()).ldelim();if(null!=e[\".google.longrunning.operationInfo\"]&&Object.hasOwnProperty.call(e,\".google.longrunning.operationInfo\")&&p.google.longrunning.OperationInfo.encode(e[\".google.longrunning.operationInfo\"],t.uint32(8394).fork()).ldelim(),null!=e[\".google.api.methodSignature\"]&&e[\".google.api.methodSignature\"].length)for(n=0;n<e[\".google.api.methodSignature\"].length;++n)t.uint32(8410).string(e[\".google.api.methodSignature\"][n]);return null!=e[\".google.api.http\"]&&Object.hasOwnProperty.call(e,\".google.api.http\")&&p.google.api.HttpRule.encode(e[\".google.api.http\"],t.uint32(578365826).fork()).ldelim(),t},N.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},N.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.MethodOptions;e.pos<n;){var r=e.uint32();switch(r>>>3){case 33:o.deprecated=e.bool();break;case 34:o.idempotencyLevel=e.int32();break;case 999:o.uninterpretedOption&&o.uninterpretedOption.length||(o.uninterpretedOption=[]),o.uninterpretedOption.push(p.google.protobuf.UninterpretedOption.decode(e,e.uint32()));break;case 1049:o[\".google.longrunning.operationInfo\"]=p.google.longrunning.OperationInfo.decode(e,e.uint32());break;case 72295728:o[\".google.api.http\"]=p.google.api.HttpRule.decode(e,e.uint32());break;case 1051:o[\".google.api.methodSignature\"]&&o[\".google.api.methodSignature\"].length||(o[\".google.api.methodSignature\"]=[]),o[\".google.api.methodSignature\"].push(e.string());break;default:e.skipType(7&r)}}return o},N.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},N.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&\"boolean\"!=typeof e.deprecated)return\"deprecated: boolean expected\";if(null!=e.idempotencyLevel&&e.hasOwnProperty(\"idempotencyLevel\"))switch(e.idempotencyLevel){default:return\"idempotencyLevel: enum value expected\";case 0:case 1:case 2:}if(null!=e.uninterpretedOption&&e.hasOwnProperty(\"uninterpretedOption\")){if(!Array.isArray(e.uninterpretedOption))return\"uninterpretedOption: array expected\";for(var t=0;t<e.uninterpretedOption.length;++t)if(n=p.google.protobuf.UninterpretedOption.verify(e.uninterpretedOption[t]))return\"uninterpretedOption.\"+n}var n;if(null!=e[\".google.longrunning.operationInfo\"]&&e.hasOwnProperty(\".google.longrunning.operationInfo\")&&(n=p.google.longrunning.OperationInfo.verify(e[\".google.longrunning.operationInfo\"])))return\".google.longrunning.operationInfo.\"+n;if(null!=e[\".google.api.http\"]&&e.hasOwnProperty(\".google.api.http\")&&(n=p.google.api.HttpRule.verify(e[\".google.api.http\"])))return\".google.api.http.\"+n;if(null!=e[\".google.api.methodSignature\"]&&e.hasOwnProperty(\".google.api.methodSignature\")){if(!Array.isArray(e[\".google.api.methodSignature\"]))return\".google.api.methodSignature: array expected\";for(t=0;t<e[\".google.api.methodSignature\"].length;++t)if(!i.isString(e[\".google.api.methodSignature\"][t]))return\".google.api.methodSignature: string[] expected\"}return null},N.fromObject=function(e){if(e instanceof p.google.protobuf.MethodOptions)return e;var t=new p.google.protobuf.MethodOptions;switch(null!=e.deprecated&&(t.deprecated=Boolean(e.deprecated)),e.idempotencyLevel){case\"IDEMPOTENCY_UNKNOWN\":case 0:t.idempotencyLevel=0;break;case\"NO_SIDE_EFFECTS\":case 1:t.idempotencyLevel=1;break;case\"IDEMPOTENT\":case 2:t.idempotencyLevel=2}if(e.uninterpretedOption){if(!Array.isArray(e.uninterpretedOption))throw TypeError(\".google.protobuf.MethodOptions.uninterpretedOption: array expected\");t.uninterpretedOption=[];for(var n=0;n<e.uninterpretedOption.length;++n){if(\"object\"!=typeof e.uninterpretedOption[n])throw TypeError(\".google.protobuf.MethodOptions.uninterpretedOption: object expected\");t.uninterpretedOption[n]=p.google.protobuf.UninterpretedOption.fromObject(e.uninterpretedOption[n])}}if(null!=e[\".google.longrunning.operationInfo\"]){if(\"object\"!=typeof e[\".google.longrunning.operationInfo\"])throw TypeError(\".google.protobuf.MethodOptions..google.longrunning.operationInfo: object expected\");t[\".google.longrunning.operationInfo\"]=p.google.longrunning.OperationInfo.fromObject(e[\".google.longrunning.operationInfo\"])}if(null!=e[\".google.api.http\"]){if(\"object\"!=typeof e[\".google.api.http\"])throw TypeError(\".google.protobuf.MethodOptions..google.api.http: object expected\");t[\".google.api.http\"]=p.google.api.HttpRule.fromObject(e[\".google.api.http\"])}if(e[\".google.api.methodSignature\"]){if(!Array.isArray(e[\".google.api.methodSignature\"]))throw TypeError(\".google.protobuf.MethodOptions..google.api.methodSignature: array expected\");t[\".google.api.methodSignature\"]=[];for(n=0;n<e[\".google.api.methodSignature\"].length;++n)t[\".google.api.methodSignature\"][n]=String(e[\".google.api.methodSignature\"][n])}return t},N.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.uninterpretedOption=[],n[\".google.api.methodSignature\"]=[]),t.defaults&&(n.deprecated=!1,n.idempotencyLevel=t.enums===String?\"IDEMPOTENCY_UNKNOWN\":0,n[\".google.longrunning.operationInfo\"]=null,n[\".google.api.http\"]=null),null!=e.deprecated&&e.hasOwnProperty(\"deprecated\")&&(n.deprecated=e.deprecated),null!=e.idempotencyLevel&&e.hasOwnProperty(\"idempotencyLevel\")&&(n.idempotencyLevel=t.enums===String?p.google.protobuf.MethodOptions.IdempotencyLevel[e.idempotencyLevel]:e.idempotencyLevel),e.uninterpretedOption&&e.uninterpretedOption.length){n.uninterpretedOption=[];for(var o=0;o<e.uninterpretedOption.length;++o)n.uninterpretedOption[o]=p.google.protobuf.UninterpretedOption.toObject(e.uninterpretedOption[o],t)}if(null!=e[\".google.longrunning.operationInfo\"]&&e.hasOwnProperty(\".google.longrunning.operationInfo\")&&(n[\".google.longrunning.operationInfo\"]=p.google.longrunning.OperationInfo.toObject(e[\".google.longrunning.operationInfo\"],t)),e[\".google.api.methodSignature\"]&&e[\".google.api.methodSignature\"].length){n[\".google.api.methodSignature\"]=[];for(o=0;o<e[\".google.api.methodSignature\"].length;++o)n[\".google.api.methodSignature\"][o]=e[\".google.api.methodSignature\"][o]}return null!=e[\".google.api.http\"]&&e.hasOwnProperty(\".google.api.http\")&&(n[\".google.api.http\"]=p.google.api.HttpRule.toObject(e[\".google.api.http\"],t)),n},N.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},N.IdempotencyLevel=(n={},(e=Object.create(n))[n[0]=\"IDEMPOTENCY_UNKNOWN\"]=0,e[n[1]=\"NO_SIDE_EFFECTS\"]=1,e[n[2]=\"IDEMPOTENT\"]=2,e),N),t.UninterpretedOption=(I.prototype.name=i.emptyArray,I.prototype.identifierValue=\"\",I.prototype.positiveIntValue=i.Long?i.Long.fromBits(0,0,!0):0,I.prototype.negativeIntValue=i.Long?i.Long.fromBits(0,0,!1):0,I.prototype.doubleValue=0,I.prototype.stringValue=i.newBuffer([]),I.prototype.aggregateValue=\"\",I.create=function(e){return new I(e)},I.encode=function(e,t){if(t=t||r.create(),null!=e.name&&e.name.length)for(var n=0;n<e.name.length;++n)p.google.protobuf.UninterpretedOption.NamePart.encode(e.name[n],t.uint32(18).fork()).ldelim();return null!=e.identifierValue&&Object.hasOwnProperty.call(e,\"identifierValue\")&&t.uint32(26).string(e.identifierValue),null!=e.positiveIntValue&&Object.hasOwnProperty.call(e,\"positiveIntValue\")&&t.uint32(32).uint64(e.positiveIntValue),null!=e.negativeIntValue&&Object.hasOwnProperty.call(e,\"negativeIntValue\")&&t.uint32(40).int64(e.negativeIntValue),null!=e.doubleValue&&Object.hasOwnProperty.call(e,\"doubleValue\")&&t.uint32(49).double(e.doubleValue),null!=e.stringValue&&Object.hasOwnProperty.call(e,\"stringValue\")&&t.uint32(58).bytes(e.stringValue),null!=e.aggregateValue&&Object.hasOwnProperty.call(e,\"aggregateValue\")&&t.uint32(66).string(e.aggregateValue),t},I.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},I.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.UninterpretedOption;e.pos<n;){var r=e.uint32();switch(r>>>3){case 2:o.name&&o.name.length||(o.name=[]),o.name.push(p.google.protobuf.UninterpretedOption.NamePart.decode(e,e.uint32()));break;case 3:o.identifierValue=e.string();break;case 4:o.positiveIntValue=e.uint64();break;case 5:o.negativeIntValue=e.int64();break;case 6:o.doubleValue=e.double();break;case 7:o.stringValue=e.bytes();break;case 8:o.aggregateValue=e.string();break;default:e.skipType(7&r)}}return o},I.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},I.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.name&&e.hasOwnProperty(\"name\")){if(!Array.isArray(e.name))return\"name: array expected\";for(var t=0;t<e.name.length;++t){var n=p.google.protobuf.UninterpretedOption.NamePart.verify(e.name[t]);if(n)return\"name.\"+n}}return null!=e.identifierValue&&e.hasOwnProperty(\"identifierValue\")&&!i.isString(e.identifierValue)?\"identifierValue: string expected\":null!=e.positiveIntValue&&e.hasOwnProperty(\"positiveIntValue\")&&!(i.isInteger(e.positiveIntValue)||e.positiveIntValue&&i.isInteger(e.positiveIntValue.low)&&i.isInteger(e.positiveIntValue.high))?\"positiveIntValue: integer|Long expected\":null!=e.negativeIntValue&&e.hasOwnProperty(\"negativeIntValue\")&&!(i.isInteger(e.negativeIntValue)||e.negativeIntValue&&i.isInteger(e.negativeIntValue.low)&&i.isInteger(e.negativeIntValue.high))?\"negativeIntValue: integer|Long expected\":null!=e.doubleValue&&e.hasOwnProperty(\"doubleValue\")&&\"number\"!=typeof e.doubleValue?\"doubleValue: number expected\":null!=e.stringValue&&e.hasOwnProperty(\"stringValue\")&&!(e.stringValue&&\"number\"==typeof e.stringValue.length||i.isString(e.stringValue))?\"stringValue: buffer expected\":null!=e.aggregateValue&&e.hasOwnProperty(\"aggregateValue\")&&!i.isString(e.aggregateValue)?\"aggregateValue: string expected\":null},I.fromObject=function(e){if(e instanceof p.google.protobuf.UninterpretedOption)return e;var t=new p.google.protobuf.UninterpretedOption;if(e.name){if(!Array.isArray(e.name))throw TypeError(\".google.protobuf.UninterpretedOption.name: array expected\");t.name=[];for(var n=0;n<e.name.length;++n){if(\"object\"!=typeof e.name[n])throw TypeError(\".google.protobuf.UninterpretedOption.name: object expected\");t.name[n]=p.google.protobuf.UninterpretedOption.NamePart.fromObject(e.name[n])}}return null!=e.identifierValue&&(t.identifierValue=String(e.identifierValue)),null!=e.positiveIntValue&&(i.Long?(t.positiveIntValue=i.Long.fromValue(e.positiveIntValue)).unsigned=!0:\"string\"==typeof e.positiveIntValue?t.positiveIntValue=parseInt(e.positiveIntValue,10):\"number\"==typeof e.positiveIntValue?t.positiveIntValue=e.positiveIntValue:\"object\"==typeof e.positiveIntValue&&(t.positiveIntValue=new i.LongBits(e.positiveIntValue.low>>>0,e.positiveIntValue.high>>>0).toNumber(!0))),null!=e.negativeIntValue&&(i.Long?(t.negativeIntValue=i.Long.fromValue(e.negativeIntValue)).unsigned=!1:\"string\"==typeof e.negativeIntValue?t.negativeIntValue=parseInt(e.negativeIntValue,10):\"number\"==typeof e.negativeIntValue?t.negativeIntValue=e.negativeIntValue:\"object\"==typeof e.negativeIntValue&&(t.negativeIntValue=new i.LongBits(e.negativeIntValue.low>>>0,e.negativeIntValue.high>>>0).toNumber())),null!=e.doubleValue&&(t.doubleValue=Number(e.doubleValue)),null!=e.stringValue&&(\"string\"==typeof e.stringValue?i.base64.decode(e.stringValue,t.stringValue=i.newBuffer(i.base64.length(e.stringValue)),0):e.stringValue.length&&(t.stringValue=e.stringValue)),null!=e.aggregateValue&&(t.aggregateValue=String(e.aggregateValue)),t},I.toObject=function(e,t){var n,o={};if(((t=t||{}).arrays||t.defaults)&&(o.name=[]),t.defaults&&(o.identifierValue=\"\",i.Long?(n=new i.Long(0,0,!0),o.positiveIntValue=t.longs===String?n.toString():t.longs===Number?n.toNumber():n):o.positiveIntValue=t.longs===String?\"0\":0,i.Long?(n=new i.Long(0,0,!1),o.negativeIntValue=t.longs===String?n.toString():t.longs===Number?n.toNumber():n):o.negativeIntValue=t.longs===String?\"0\":0,o.doubleValue=0,t.bytes===String?o.stringValue=\"\":(o.stringValue=[],t.bytes!==Array&&(o.stringValue=i.newBuffer(o.stringValue))),o.aggregateValue=\"\"),e.name&&e.name.length){o.name=[];for(var r=0;r<e.name.length;++r)o.name[r]=p.google.protobuf.UninterpretedOption.NamePart.toObject(e.name[r],t)}return null!=e.identifierValue&&e.hasOwnProperty(\"identifierValue\")&&(o.identifierValue=e.identifierValue),null!=e.positiveIntValue&&e.hasOwnProperty(\"positiveIntValue\")&&(\"number\"==typeof e.positiveIntValue?o.positiveIntValue=t.longs===String?String(e.positiveIntValue):e.positiveIntValue:o.positiveIntValue=t.longs===String?i.Long.prototype.toString.call(e.positiveIntValue):t.longs===Number?new i.LongBits(e.positiveIntValue.low>>>0,e.positiveIntValue.high>>>0).toNumber(!0):e.positiveIntValue),null!=e.negativeIntValue&&e.hasOwnProperty(\"negativeIntValue\")&&(\"number\"==typeof e.negativeIntValue?o.negativeIntValue=t.longs===String?String(e.negativeIntValue):e.negativeIntValue:o.negativeIntValue=t.longs===String?i.Long.prototype.toString.call(e.negativeIntValue):t.longs===Number?new i.LongBits(e.negativeIntValue.low>>>0,e.negativeIntValue.high>>>0).toNumber():e.negativeIntValue),null!=e.doubleValue&&e.hasOwnProperty(\"doubleValue\")&&(o.doubleValue=t.json&&!isFinite(e.doubleValue)?String(e.doubleValue):e.doubleValue),null!=e.stringValue&&e.hasOwnProperty(\"stringValue\")&&(o.stringValue=t.bytes===String?i.base64.encode(e.stringValue,0,e.stringValue.length):t.bytes===Array?Array.prototype.slice.call(e.stringValue):e.stringValue),null!=e.aggregateValue&&e.hasOwnProperty(\"aggregateValue\")&&(o.aggregateValue=e.aggregateValue),o},I.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},I.NamePart=(q.prototype.namePart=\"\",q.prototype.isExtension=!1,q.create=function(e){return new q(e)},q.encode=function(e,t){return(t=t||r.create()).uint32(10).string(e.namePart),t.uint32(16).bool(e.isExtension),t},q.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},q.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.UninterpretedOption.NamePart;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.namePart=e.string();break;case 2:o.isExtension=e.bool();break;default:e.skipType(7&r)}}if(!o.hasOwnProperty(\"namePart\"))throw i.ProtocolError(\"missing required 'namePart'\",{instance:o});if(o.hasOwnProperty(\"isExtension\"))return o;throw i.ProtocolError(\"missing required 'isExtension'\",{instance:o})},q.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},q.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":i.isString(e.namePart)?\"boolean\"!=typeof e.isExtension?\"isExtension: boolean expected\":null:\"namePart: string expected\"},q.fromObject=function(e){var t;return e instanceof p.google.protobuf.UninterpretedOption.NamePart?e:(t=new p.google.protobuf.UninterpretedOption.NamePart,null!=e.namePart&&(t.namePart=String(e.namePart)),null!=e.isExtension&&(t.isExtension=Boolean(e.isExtension)),t)},q.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.namePart=\"\",n.isExtension=!1),null!=e.namePart&&e.hasOwnProperty(\"namePart\")&&(n.namePart=e.namePart),null!=e.isExtension&&e.hasOwnProperty(\"isExtension\")&&(n.isExtension=e.isExtension),n},q.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},q),I),t.SourceCodeInfo=(Y.prototype.location=i.emptyArray,Y.create=function(e){return new Y(e)},Y.encode=function(e,t){if(t=t||r.create(),null!=e.location&&e.location.length)for(var n=0;n<e.location.length;++n)p.google.protobuf.SourceCodeInfo.Location.encode(e.location[n],t.uint32(10).fork()).ldelim();return t},Y.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},Y.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.SourceCodeInfo;e.pos<n;){var r=e.uint32();r>>>3==1?(o.location&&o.location.length||(o.location=[]),o.location.push(p.google.protobuf.SourceCodeInfo.Location.decode(e,e.uint32()))):e.skipType(7&r)}return o},Y.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},Y.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.location&&e.hasOwnProperty(\"location\")){if(!Array.isArray(e.location))return\"location: array expected\";for(var t=0;t<e.location.length;++t){var n=p.google.protobuf.SourceCodeInfo.Location.verify(e.location[t]);if(n)return\"location.\"+n}}return null},Y.fromObject=function(e){if(e instanceof p.google.protobuf.SourceCodeInfo)return e;var t=new p.google.protobuf.SourceCodeInfo;if(e.location){if(!Array.isArray(e.location))throw TypeError(\".google.protobuf.SourceCodeInfo.location: array expected\");t.location=[];for(var n=0;n<e.location.length;++n){if(\"object\"!=typeof e.location[n])throw TypeError(\".google.protobuf.SourceCodeInfo.location: object expected\");t.location[n]=p.google.protobuf.SourceCodeInfo.Location.fromObject(e.location[n])}}return t},Y.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.location=[]),e.location&&e.location.length){n.location=[];for(var o=0;o<e.location.length;++o)n.location[o]=p.google.protobuf.SourceCodeInfo.Location.toObject(e.location[o],t)}return n},Y.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},Y.Location=(R.prototype.path=i.emptyArray,R.prototype.span=i.emptyArray,R.prototype.leadingComments=\"\",R.prototype.trailingComments=\"\",R.prototype.leadingDetachedComments=i.emptyArray,R.create=function(e){return new R(e)},R.encode=function(e,t){if(t=t||r.create(),null!=e.path&&e.path.length){t.uint32(10).fork();for(var n=0;n<e.path.length;++n)t.int32(e.path[n]);t.ldelim()}if(null!=e.span&&e.span.length){t.uint32(18).fork();for(n=0;n<e.span.length;++n)t.int32(e.span[n]);t.ldelim()}if(null!=e.leadingComments&&Object.hasOwnProperty.call(e,\"leadingComments\")&&t.uint32(26).string(e.leadingComments),null!=e.trailingComments&&Object.hasOwnProperty.call(e,\"trailingComments\")&&t.uint32(34).string(e.trailingComments),null!=e.leadingDetachedComments&&e.leadingDetachedComments.length)for(n=0;n<e.leadingDetachedComments.length;++n)t.uint32(50).string(e.leadingDetachedComments[n]);return t},R.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},R.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.SourceCodeInfo.Location;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:if(o.path&&o.path.length||(o.path=[]),2==(7&r))for(var i=e.uint32()+e.pos;e.pos<i;)o.path.push(e.int32());else o.path.push(e.int32());break;case 2:if(o.span&&o.span.length||(o.span=[]),2==(7&r))for(i=e.uint32()+e.pos;e.pos<i;)o.span.push(e.int32());else o.span.push(e.int32());break;case 3:o.leadingComments=e.string();break;case 4:o.trailingComments=e.string();break;case 6:o.leadingDetachedComments&&o.leadingDetachedComments.length||(o.leadingDetachedComments=[]),o.leadingDetachedComments.push(e.string());break;default:e.skipType(7&r)}}return o},R.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},R.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.path&&e.hasOwnProperty(\"path\")){if(!Array.isArray(e.path))return\"path: array expected\";for(var t=0;t<e.path.length;++t)if(!i.isInteger(e.path[t]))return\"path: integer[] expected\"}if(null!=e.span&&e.hasOwnProperty(\"span\")){if(!Array.isArray(e.span))return\"span: array expected\";for(t=0;t<e.span.length;++t)if(!i.isInteger(e.span[t]))return\"span: integer[] expected\"}if(null!=e.leadingComments&&e.hasOwnProperty(\"leadingComments\")&&!i.isString(e.leadingComments))return\"leadingComments: string expected\";if(null!=e.trailingComments&&e.hasOwnProperty(\"trailingComments\")&&!i.isString(e.trailingComments))return\"trailingComments: string expected\";if(null!=e.leadingDetachedComments&&e.hasOwnProperty(\"leadingDetachedComments\")){if(!Array.isArray(e.leadingDetachedComments))return\"leadingDetachedComments: array expected\";for(t=0;t<e.leadingDetachedComments.length;++t)if(!i.isString(e.leadingDetachedComments[t]))return\"leadingDetachedComments: string[] expected\"}return null},R.fromObject=function(e){if(e instanceof p.google.protobuf.SourceCodeInfo.Location)return e;var t=new p.google.protobuf.SourceCodeInfo.Location;if(e.path){if(!Array.isArray(e.path))throw TypeError(\".google.protobuf.SourceCodeInfo.Location.path: array expected\");t.path=[];for(var n=0;n<e.path.length;++n)t.path[n]=0|e.path[n]}if(e.span){if(!Array.isArray(e.span))throw TypeError(\".google.protobuf.SourceCodeInfo.Location.span: array expected\");t.span=[];for(n=0;n<e.span.length;++n)t.span[n]=0|e.span[n]}if(null!=e.leadingComments&&(t.leadingComments=String(e.leadingComments)),null!=e.trailingComments&&(t.trailingComments=String(e.trailingComments)),e.leadingDetachedComments){if(!Array.isArray(e.leadingDetachedComments))throw TypeError(\".google.protobuf.SourceCodeInfo.Location.leadingDetachedComments: array expected\");t.leadingDetachedComments=[];for(n=0;n<e.leadingDetachedComments.length;++n)t.leadingDetachedComments[n]=String(e.leadingDetachedComments[n])}return t},R.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.path=[],n.span=[],n.leadingDetachedComments=[]),t.defaults&&(n.leadingComments=\"\",n.trailingComments=\"\"),e.path&&e.path.length){n.path=[];for(var o=0;o<e.path.length;++o)n.path[o]=e.path[o]}if(e.span&&e.span.length){n.span=[];for(o=0;o<e.span.length;++o)n.span[o]=e.span[o]}if(null!=e.leadingComments&&e.hasOwnProperty(\"leadingComments\")&&(n.leadingComments=e.leadingComments),null!=e.trailingComments&&e.hasOwnProperty(\"trailingComments\")&&(n.trailingComments=e.trailingComments),e.leadingDetachedComments&&e.leadingDetachedComments.length){n.leadingDetachedComments=[];for(o=0;o<e.leadingDetachedComments.length;++o)n.leadingDetachedComments[o]=e.leadingDetachedComments[o]}return n},R.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},R),Y),t.GeneratedCodeInfo=(W.prototype.annotation=i.emptyArray,W.create=function(e){return new W(e)},W.encode=function(e,t){if(t=t||r.create(),null!=e.annotation&&e.annotation.length)for(var n=0;n<e.annotation.length;++n)p.google.protobuf.GeneratedCodeInfo.Annotation.encode(e.annotation[n],t.uint32(10).fork()).ldelim();return t},W.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},W.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.GeneratedCodeInfo;e.pos<n;){var r=e.uint32();r>>>3==1?(o.annotation&&o.annotation.length||(o.annotation=[]),o.annotation.push(p.google.protobuf.GeneratedCodeInfo.Annotation.decode(e,e.uint32()))):e.skipType(7&r)}return o},W.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},W.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.annotation&&e.hasOwnProperty(\"annotation\")){if(!Array.isArray(e.annotation))return\"annotation: array expected\";for(var t=0;t<e.annotation.length;++t){var n=p.google.protobuf.GeneratedCodeInfo.Annotation.verify(e.annotation[t]);if(n)return\"annotation.\"+n}}return null},W.fromObject=function(e){if(e instanceof p.google.protobuf.GeneratedCodeInfo)return e;var t=new p.google.protobuf.GeneratedCodeInfo;if(e.annotation){if(!Array.isArray(e.annotation))throw TypeError(\".google.protobuf.GeneratedCodeInfo.annotation: array expected\");t.annotation=[];for(var n=0;n<e.annotation.length;++n){if(\"object\"!=typeof e.annotation[n])throw TypeError(\".google.protobuf.GeneratedCodeInfo.annotation: object expected\");t.annotation[n]=p.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(e.annotation[n])}}return t},W.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.annotation=[]),e.annotation&&e.annotation.length){n.annotation=[];for(var o=0;o<e.annotation.length;++o)n.annotation[o]=p.google.protobuf.GeneratedCodeInfo.Annotation.toObject(e.annotation[o],t)}return n},W.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},W.Annotation=(C.prototype.path=i.emptyArray,C.prototype.sourceFile=\"\",C.prototype.begin=0,C.prototype.end=0,C.create=function(e){return new C(e)},C.encode=function(e,t){if(t=t||r.create(),null!=e.path&&e.path.length){t.uint32(10).fork();for(var n=0;n<e.path.length;++n)t.int32(e.path[n]);t.ldelim()}return null!=e.sourceFile&&Object.hasOwnProperty.call(e,\"sourceFile\")&&t.uint32(18).string(e.sourceFile),null!=e.begin&&Object.hasOwnProperty.call(e,\"begin\")&&t.uint32(24).int32(e.begin),null!=e.end&&Object.hasOwnProperty.call(e,\"end\")&&t.uint32(32).int32(e.end),t},C.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},C.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.GeneratedCodeInfo.Annotation;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:if(o.path&&o.path.length||(o.path=[]),2==(7&r))for(var i=e.uint32()+e.pos;e.pos<i;)o.path.push(e.int32());else o.path.push(e.int32());break;case 2:o.sourceFile=e.string();break;case 3:o.begin=e.int32();break;case 4:o.end=e.int32();break;default:e.skipType(7&r)}}return o},C.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},C.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.path&&e.hasOwnProperty(\"path\")){if(!Array.isArray(e.path))return\"path: array expected\";for(var t=0;t<e.path.length;++t)if(!i.isInteger(e.path[t]))return\"path: integer[] expected\"}return null!=e.sourceFile&&e.hasOwnProperty(\"sourceFile\")&&!i.isString(e.sourceFile)?\"sourceFile: string expected\":null!=e.begin&&e.hasOwnProperty(\"begin\")&&!i.isInteger(e.begin)?\"begin: integer expected\":null!=e.end&&e.hasOwnProperty(\"end\")&&!i.isInteger(e.end)?\"end: integer expected\":null},C.fromObject=function(e){if(e instanceof p.google.protobuf.GeneratedCodeInfo.Annotation)return e;var t=new p.google.protobuf.GeneratedCodeInfo.Annotation;if(e.path){if(!Array.isArray(e.path))throw TypeError(\".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected\");t.path=[];for(var n=0;n<e.path.length;++n)t.path[n]=0|e.path[n]}return null!=e.sourceFile&&(t.sourceFile=String(e.sourceFile)),null!=e.begin&&(t.begin=0|e.begin),null!=e.end&&(t.end=0|e.end),t},C.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.path=[]),t.defaults&&(n.sourceFile=\"\",n.begin=0,n.end=0),e.path&&e.path.length){n.path=[];for(var o=0;o<e.path.length;++o)n.path[o]=e.path[o]}return null!=e.sourceFile&&e.hasOwnProperty(\"sourceFile\")&&(n.sourceFile=e.sourceFile),null!=e.begin&&e.hasOwnProperty(\"begin\")&&(n.begin=e.begin),null!=e.end&&e.hasOwnProperty(\"end\")&&(n.end=e.end),n},C.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},C),W),t.Any=(X.prototype.type_url=\"\",X.prototype.value=i.newBuffer([]),X.create=function(e){return new X(e)},X.encode=function(e,t){return t=t||r.create(),null!=e.type_url&&Object.hasOwnProperty.call(e,\"type_url\")&&t.uint32(10).string(e.type_url),null!=e.value&&Object.hasOwnProperty.call(e,\"value\")&&t.uint32(18).bytes(e.value),t},X.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},X.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.Any;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.type_url=e.string();break;case 2:o.value=e.bytes();break;default:e.skipType(7&r)}}return o},X.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},X.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.type_url&&e.hasOwnProperty(\"type_url\")&&!i.isString(e.type_url)?\"type_url: string expected\":null!=e.value&&e.hasOwnProperty(\"value\")&&!(e.value&&\"number\"==typeof e.value.length||i.isString(e.value))?\"value: buffer expected\":null},X.fromObject=function(e){var t;return e instanceof p.google.protobuf.Any?e:(t=new p.google.protobuf.Any,null!=e.type_url&&(t.type_url=String(e.type_url)),null!=e.value&&(\"string\"==typeof e.value?i.base64.decode(e.value,t.value=i.newBuffer(i.base64.length(e.value)),0):e.value.length&&(t.value=e.value)),t)},X.toObject=function(e,t){var n={};return(t=t||{}).defaults&&(n.type_url=\"\",t.bytes===String?n.value=\"\":(n.value=[],t.bytes!==Array&&(n.value=i.newBuffer(n.value)))),null!=e.type_url&&e.hasOwnProperty(\"type_url\")&&(n.type_url=e.type_url),null!=e.value&&e.hasOwnProperty(\"value\")&&(n.value=t.bytes===String?i.base64.encode(e.value,0,e.value.length):t.bytes===Array?Array.prototype.slice.call(e.value):e.value),n},X.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},X),t.Duration=(K.prototype.seconds=i.Long?i.Long.fromBits(0,0,!1):0,K.prototype.nanos=0,K.create=function(e){return new K(e)},K.encode=function(e,t){return t=t||r.create(),null!=e.seconds&&Object.hasOwnProperty.call(e,\"seconds\")&&t.uint32(8).int64(e.seconds),null!=e.nanos&&Object.hasOwnProperty.call(e,\"nanos\")&&t.uint32(16).int32(e.nanos),t},K.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},K.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.protobuf.Duration;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.seconds=e.int64();break;case 2:o.nanos=e.int32();break;default:e.skipType(7&r)}}return o},K.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},K.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null!=e.seconds&&e.hasOwnProperty(\"seconds\")&&!(i.isInteger(e.seconds)||e.seconds&&i.isInteger(e.seconds.low)&&i.isInteger(e.seconds.high))?\"seconds: integer|Long expected\":null!=e.nanos&&e.hasOwnProperty(\"nanos\")&&!i.isInteger(e.nanos)?\"nanos: integer expected\":null},K.fromObject=function(e){var t;return e instanceof p.google.protobuf.Duration?e:(t=new p.google.protobuf.Duration,null!=e.seconds&&(i.Long?(t.seconds=i.Long.fromValue(e.seconds)).unsigned=!1:\"string\"==typeof e.seconds?t.seconds=parseInt(e.seconds,10):\"number\"==typeof e.seconds?t.seconds=e.seconds:\"object\"==typeof e.seconds&&(t.seconds=new i.LongBits(e.seconds.low>>>0,e.seconds.high>>>0).toNumber())),null!=e.nanos&&(t.nanos=0|e.nanos),t)},K.toObject=function(e,t){var n,o={};return(t=t||{}).defaults&&(i.Long?(n=new i.Long(0,0,!1),o.seconds=t.longs===String?n.toString():t.longs===Number?n.toNumber():n):o.seconds=t.longs===String?\"0\":0,o.nanos=0),null!=e.seconds&&e.hasOwnProperty(\"seconds\")&&(\"number\"==typeof e.seconds?o.seconds=t.longs===String?String(e.seconds):e.seconds:o.seconds=t.longs===String?i.Long.prototype.toString.call(e.seconds):t.longs===Number?new i.LongBits(e.seconds.low>>>0,e.seconds.high>>>0).toNumber():e.seconds),null!=e.nanos&&e.hasOwnProperty(\"nanos\")&&(o.nanos=e.nanos),o},K.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},K),t.Empty=(Q.create=function(e){return new Q(e)},Q.encode=function(e,t){return t=t||r.create()},Q.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},Q.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,t=new p.google.protobuf.Empty;e.pos<n;){var o=e.uint32();e.skipType(7&o)}return t},Q.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},Q.verify=function(e){return\"object\"!=typeof e||null===e?\"object expected\":null},Q.fromObject=function(e){return e instanceof p.google.protobuf.Empty?e:new p.google.protobuf.Empty},Q.toObject=function(){return{}},Q.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},Q),t),F.rpc=((n={}).Status=(V.prototype.code=0,V.prototype.message=\"\",V.prototype.details=i.emptyArray,V.create=function(e){return new V(e)},V.encode=function(e,t){if(t=t||r.create(),null!=e.code&&Object.hasOwnProperty.call(e,\"code\")&&t.uint32(8).int32(e.code),null!=e.message&&Object.hasOwnProperty.call(e,\"message\")&&t.uint32(18).string(e.message),null!=e.details&&e.details.length)for(var n=0;n<e.details.length;++n)p.google.protobuf.Any.encode(e.details[n],t.uint32(26).fork()).ldelim();return t},V.encodeDelimited=function(e,t){return this.encode(e,t).ldelim()},V.decode=function(e,t){e instanceof a||(e=a.create(e));for(var n=void 0===t?e.len:e.pos+t,o=new p.google.rpc.Status;e.pos<n;){var r=e.uint32();switch(r>>>3){case 1:o.code=e.int32();break;case 2:o.message=e.string();break;case 3:o.details&&o.details.length||(o.details=[]),o.details.push(p.google.protobuf.Any.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return o},V.decodeDelimited=function(e){return e instanceof a||(e=new a(e)),this.decode(e,e.uint32())},V.verify=function(e){if(\"object\"!=typeof e||null===e)return\"object expected\";if(null!=e.code&&e.hasOwnProperty(\"code\")&&!i.isInteger(e.code))return\"code: integer expected\";if(null!=e.message&&e.hasOwnProperty(\"message\")&&!i.isString(e.message))return\"message: string expected\";if(null!=e.details&&e.hasOwnProperty(\"details\")){if(!Array.isArray(e.details))return\"details: array expected\";for(var t=0;t<e.details.length;++t){var n=p.google.protobuf.Any.verify(e.details[t]);if(n)return\"details.\"+n}}return null},V.fromObject=function(e){if(e instanceof p.google.rpc.Status)return e;var t=new p.google.rpc.Status;if(null!=e.code&&(t.code=0|e.code),null!=e.message&&(t.message=String(e.message)),e.details){if(!Array.isArray(e.details))throw TypeError(\".google.rpc.Status.details: array expected\");t.details=[];for(var n=0;n<e.details.length;++n){if(\"object\"!=typeof e.details[n])throw TypeError(\".google.rpc.Status.details: object expected\");t.details[n]=p.google.protobuf.Any.fromObject(e.details[n])}}return t},V.toObject=function(e,t){var n={};if(((t=t||{}).arrays||t.defaults)&&(n.details=[]),t.defaults&&(n.code=0,n.message=\"\"),null!=e.code&&e.hasOwnProperty(\"code\")&&(n.code=e.code),null!=e.message&&e.hasOwnProperty(\"message\")&&(n.message=e.message),e.details&&e.details.length){n.details=[];for(var o=0;o<e.details.length;++o)n.details[o]=p.google.protobuf.Any.toObject(e.details[o],t)}return n},V.prototype.toJSON=function(){return this.constructor.toObject(this,o.util.toJSONOptions)},V),n),F),p});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/protos/operations.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/apiCaller.js":
/*!********************************************************!*\
  !*** ./node_modules/google-gax/build/src/apiCaller.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.createAPICaller = createAPICaller;\r\nconst normalApiCaller_1 = __webpack_require__(/*! ./normalCalls/normalApiCaller */ \"(rsc)/./node_modules/google-gax/build/src/normalCalls/normalApiCaller.js\");\r\nfunction createAPICaller(settings, descriptor) {\r\n    if (!descriptor) {\r\n        return new normalApiCaller_1.NormalApiCaller();\r\n    }\r\n    return descriptor.getApiCaller(settings);\r\n}\r\n//# sourceMappingURL=apiCaller.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvYXBpQ2FsbGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHVCQUF1QjtBQUN2QiwwQkFBMEIsbUJBQU8sQ0FBQywrR0FBK0I7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYW5pc2gtYnVkZHkvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvYXBpQ2FsbGVyLmpzPzlmYmIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8qKlxyXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5jcmVhdGVBUElDYWxsZXIgPSBjcmVhdGVBUElDYWxsZXI7XHJcbmNvbnN0IG5vcm1hbEFwaUNhbGxlcl8xID0gcmVxdWlyZShcIi4vbm9ybWFsQ2FsbHMvbm9ybWFsQXBpQ2FsbGVyXCIpO1xyXG5mdW5jdGlvbiBjcmVhdGVBUElDYWxsZXIoc2V0dGluZ3MsIGRlc2NyaXB0b3IpIHtcclxuICAgIGlmICghZGVzY3JpcHRvcikge1xyXG4gICAgICAgIHJldHVybiBuZXcgbm9ybWFsQXBpQ2FsbGVyXzEuTm9ybWFsQXBpQ2FsbGVyKCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZGVzY3JpcHRvci5nZXRBcGlDYWxsZXIoc2V0dGluZ3MpO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwaUNhbGxlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/apiCaller.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/bundlingCalls/bundleApiCaller.js":
/*!****************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/bundlingCalls/bundleApiCaller.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.BundleApiCaller = void 0;\r\nconst call_1 = __webpack_require__(/*! ../call */ \"(rsc)/./node_modules/google-gax/build/src/call.js\");\r\nconst googleError_1 = __webpack_require__(/*! ../googleError */ \"(rsc)/./node_modules/google-gax/build/src/googleError.js\");\r\n/**\r\n * An implementation of APICaller for bundled calls.\r\n * Uses BundleExecutor to do bundling.\r\n */\r\nclass BundleApiCaller {\r\n    bundler;\r\n    constructor(bundler) {\r\n        this.bundler = bundler;\r\n    }\r\n    init(callback) {\r\n        if (callback) {\r\n            return new call_1.OngoingCall(callback);\r\n        }\r\n        return new call_1.OngoingCallPromise();\r\n    }\r\n    wrap(func) {\r\n        return func;\r\n    }\r\n    call(apiCall, argument, settings, status) {\r\n        if (!settings.isBundling) {\r\n            throw new googleError_1.GoogleError('Bundling enabled with no isBundling!');\r\n        }\r\n        status.call((argument, callback) => {\r\n            this.bundler.schedule(apiCall, argument, callback);\r\n            return status;\r\n        }, argument);\r\n    }\r\n    fail(canceller, err) {\r\n        canceller.callback(err);\r\n    }\r\n    result(canceller) {\r\n        return canceller.promise;\r\n    }\r\n}\r\nexports.BundleApiCaller = BundleApiCaller;\r\n//# sourceMappingURL=bundleApiCaller.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvYnVuZGxpbmdDYWxscy9idW5kbGVBcGlDYWxsZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsdUJBQXVCO0FBQ3ZCLGVBQWUsbUJBQU8sQ0FBQyxrRUFBUztBQUNoQyxzQkFBc0IsbUJBQU8sQ0FBQyxnRkFBZ0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QiIsInNvdXJjZXMiOlsid2VicGFjazovL2RhbmlzaC1idWRkeS8uL25vZGVfbW9kdWxlcy9nb29nbGUtZ2F4L2J1aWxkL3NyYy9idW5kbGluZ0NhbGxzL2J1bmRsZUFwaUNhbGxlci5qcz9iZjNjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG4vKipcclxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuQnVuZGxlQXBpQ2FsbGVyID0gdm9pZCAwO1xyXG5jb25zdCBjYWxsXzEgPSByZXF1aXJlKFwiLi4vY2FsbFwiKTtcclxuY29uc3QgZ29vZ2xlRXJyb3JfMSA9IHJlcXVpcmUoXCIuLi9nb29nbGVFcnJvclwiKTtcclxuLyoqXHJcbiAqIEFuIGltcGxlbWVudGF0aW9uIG9mIEFQSUNhbGxlciBmb3IgYnVuZGxlZCBjYWxscy5cclxuICogVXNlcyBCdW5kbGVFeGVjdXRvciB0byBkbyBidW5kbGluZy5cclxuICovXHJcbmNsYXNzIEJ1bmRsZUFwaUNhbGxlciB7XHJcbiAgICBidW5kbGVyO1xyXG4gICAgY29uc3RydWN0b3IoYnVuZGxlcikge1xyXG4gICAgICAgIHRoaXMuYnVuZGxlciA9IGJ1bmRsZXI7XHJcbiAgICB9XHJcbiAgICBpbml0KGNhbGxiYWNrKSB7XHJcbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgY2FsbF8xLk9uZ29pbmdDYWxsKGNhbGxiYWNrKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyBjYWxsXzEuT25nb2luZ0NhbGxQcm9taXNlKCk7XHJcbiAgICB9XHJcbiAgICB3cmFwKGZ1bmMpIHtcclxuICAgICAgICByZXR1cm4gZnVuYztcclxuICAgIH1cclxuICAgIGNhbGwoYXBpQ2FsbCwgYXJndW1lbnQsIHNldHRpbmdzLCBzdGF0dXMpIHtcclxuICAgICAgICBpZiAoIXNldHRpbmdzLmlzQnVuZGxpbmcpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IGdvb2dsZUVycm9yXzEuR29vZ2xlRXJyb3IoJ0J1bmRsaW5nIGVuYWJsZWQgd2l0aCBubyBpc0J1bmRsaW5nIScpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzdGF0dXMuY2FsbCgoYXJndW1lbnQsIGNhbGxiYWNrKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuYnVuZGxlci5zY2hlZHVsZShhcGlDYWxsLCBhcmd1bWVudCwgY2FsbGJhY2spO1xyXG4gICAgICAgICAgICByZXR1cm4gc3RhdHVzO1xyXG4gICAgICAgIH0sIGFyZ3VtZW50KTtcclxuICAgIH1cclxuICAgIGZhaWwoY2FuY2VsbGVyLCBlcnIpIHtcclxuICAgICAgICBjYW5jZWxsZXIuY2FsbGJhY2soZXJyKTtcclxuICAgIH1cclxuICAgIHJlc3VsdChjYW5jZWxsZXIpIHtcclxuICAgICAgICByZXR1cm4gY2FuY2VsbGVyLnByb21pc2U7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5CdW5kbGVBcGlDYWxsZXIgPSBCdW5kbGVBcGlDYWxsZXI7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJ1bmRsZUFwaUNhbGxlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/bundlingCalls/bundleApiCaller.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/bundlingCalls/bundleDescriptor.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/bundlingCalls/bundleDescriptor.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.BundleDescriptor = void 0;\r\nconst normalApiCaller_1 = __webpack_require__(/*! ../normalCalls/normalApiCaller */ \"(rsc)/./node_modules/google-gax/build/src/normalCalls/normalApiCaller.js\");\r\nconst bundleApiCaller_1 = __webpack_require__(/*! ./bundleApiCaller */ \"(rsc)/./node_modules/google-gax/build/src/bundlingCalls/bundleApiCaller.js\");\r\nconst bundleExecutor_1 = __webpack_require__(/*! ./bundleExecutor */ \"(rsc)/./node_modules/google-gax/build/src/bundlingCalls/bundleExecutor.js\");\r\nconst util_1 = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/google-gax/build/src/util.js\");\r\n/**\r\n * A descriptor for calls that can be bundled into one call.\r\n */\r\nclass BundleDescriptor {\r\n    bundledField;\r\n    requestDiscriminatorFields;\r\n    subresponseField;\r\n    byteLengthFunction;\r\n    /**\r\n     * Describes the structure of bundled call.\r\n     *\r\n     * requestDiscriminatorFields may include '.' as a separator, which is used to\r\n     * indicate object traversal. This allows fields in nested objects to be used\r\n     * to determine what request to bundle.\r\n     *\r\n     * @property {String} bundledField\r\n     * @property {String} requestDiscriminatorFields\r\n     * @property {String} subresponseField\r\n     * @property {Function} byteLengthFunction\r\n     *\r\n     * @param {String} bundledField - the repeated field in the request message\r\n     *   that will have its elements aggregated by bundling.\r\n     * @param {String} requestDiscriminatorFields - a list of fields in the\r\n     *   target request message class that are used to detemrine which request\r\n     *   messages should be bundled together.\r\n     * @param {String} subresponseField - an optional field, when present it\r\n     *   indicates the field in the response message that should be used to\r\n     *   demultiplex the response into multiple response messages.\r\n     * @param {Function} byteLengthFunction - a function to obtain the byte\r\n     *   length to be consumed for the bundled field messages. Because Node.JS\r\n     *   protobuf.js/gRPC uses builtin Objects for the user-visible data and\r\n     *   internally they are encoded/decoded in protobuf manner, this function\r\n     *   is actually necessary to calculate the byte length.\r\n     * @constructor\r\n     */\r\n    constructor(bundledField, requestDiscriminatorFields, subresponseField, byteLengthFunction) {\r\n        if (!byteLengthFunction && typeof subresponseField === 'function') {\r\n            byteLengthFunction = subresponseField;\r\n            subresponseField = null;\r\n        }\r\n        this.bundledField = bundledField;\r\n        this.requestDiscriminatorFields =\r\n            requestDiscriminatorFields.map(util_1.toCamelCase);\r\n        this.subresponseField = subresponseField;\r\n        this.byteLengthFunction = byteLengthFunction;\r\n    }\r\n    getApiCaller(settings) {\r\n        if (settings.isBundling === false) {\r\n            return new normalApiCaller_1.NormalApiCaller();\r\n        }\r\n        return new bundleApiCaller_1.BundleApiCaller(new bundleExecutor_1.BundleExecutor(settings.bundleOptions, this));\r\n    }\r\n}\r\nexports.BundleDescriptor = BundleDescriptor;\r\n//# sourceMappingURL=bundleDescriptor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvYnVuZGxpbmdDYWxscy9idW5kbGVEZXNjcmlwdG9yLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHdCQUF3QjtBQUN4QiwwQkFBMEIsbUJBQU8sQ0FBQyxnSEFBZ0M7QUFDbEUsMEJBQTBCLG1CQUFPLENBQUMscUdBQW1CO0FBQ3JELHlCQUF5QixtQkFBTyxDQUFDLG1HQUFrQjtBQUNuRCxlQUFlLG1CQUFPLENBQUMsa0VBQVM7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLFFBQVE7QUFDMUIsa0JBQWtCLFFBQVE7QUFDMUIsa0JBQWtCLFFBQVE7QUFDMUIsa0JBQWtCLFVBQVU7QUFDNUI7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0EsZUFBZSxVQUFVO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QiIsInNvdXJjZXMiOlsid2VicGFjazovL2RhbmlzaC1idWRkeS8uL25vZGVfbW9kdWxlcy9nb29nbGUtZ2F4L2J1aWxkL3NyYy9idW5kbGluZ0NhbGxzL2J1bmRsZURlc2NyaXB0b3IuanM/YjZhMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuLyoqXHJcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLkJ1bmRsZURlc2NyaXB0b3IgPSB2b2lkIDA7XHJcbmNvbnN0IG5vcm1hbEFwaUNhbGxlcl8xID0gcmVxdWlyZShcIi4uL25vcm1hbENhbGxzL25vcm1hbEFwaUNhbGxlclwiKTtcclxuY29uc3QgYnVuZGxlQXBpQ2FsbGVyXzEgPSByZXF1aXJlKFwiLi9idW5kbGVBcGlDYWxsZXJcIik7XHJcbmNvbnN0IGJ1bmRsZUV4ZWN1dG9yXzEgPSByZXF1aXJlKFwiLi9idW5kbGVFeGVjdXRvclwiKTtcclxuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIi4uL3V0aWxcIik7XHJcbi8qKlxyXG4gKiBBIGRlc2NyaXB0b3IgZm9yIGNhbGxzIHRoYXQgY2FuIGJlIGJ1bmRsZWQgaW50byBvbmUgY2FsbC5cclxuICovXHJcbmNsYXNzIEJ1bmRsZURlc2NyaXB0b3Ige1xyXG4gICAgYnVuZGxlZEZpZWxkO1xyXG4gICAgcmVxdWVzdERpc2NyaW1pbmF0b3JGaWVsZHM7XHJcbiAgICBzdWJyZXNwb25zZUZpZWxkO1xyXG4gICAgYnl0ZUxlbmd0aEZ1bmN0aW9uO1xyXG4gICAgLyoqXHJcbiAgICAgKiBEZXNjcmliZXMgdGhlIHN0cnVjdHVyZSBvZiBidW5kbGVkIGNhbGwuXHJcbiAgICAgKlxyXG4gICAgICogcmVxdWVzdERpc2NyaW1pbmF0b3JGaWVsZHMgbWF5IGluY2x1ZGUgJy4nIGFzIGEgc2VwYXJhdG9yLCB3aGljaCBpcyB1c2VkIHRvXHJcbiAgICAgKiBpbmRpY2F0ZSBvYmplY3QgdHJhdmVyc2FsLiBUaGlzIGFsbG93cyBmaWVsZHMgaW4gbmVzdGVkIG9iamVjdHMgdG8gYmUgdXNlZFxyXG4gICAgICogdG8gZGV0ZXJtaW5lIHdoYXQgcmVxdWVzdCB0byBidW5kbGUuXHJcbiAgICAgKlxyXG4gICAgICogQHByb3BlcnR5IHtTdHJpbmd9IGJ1bmRsZWRGaWVsZFxyXG4gICAgICogQHByb3BlcnR5IHtTdHJpbmd9IHJlcXVlc3REaXNjcmltaW5hdG9yRmllbGRzXHJcbiAgICAgKiBAcHJvcGVydHkge1N0cmluZ30gc3VicmVzcG9uc2VGaWVsZFxyXG4gICAgICogQHByb3BlcnR5IHtGdW5jdGlvbn0gYnl0ZUxlbmd0aEZ1bmN0aW9uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGJ1bmRsZWRGaWVsZCAtIHRoZSByZXBlYXRlZCBmaWVsZCBpbiB0aGUgcmVxdWVzdCBtZXNzYWdlXHJcbiAgICAgKiAgIHRoYXQgd2lsbCBoYXZlIGl0cyBlbGVtZW50cyBhZ2dyZWdhdGVkIGJ5IGJ1bmRsaW5nLlxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3REaXNjcmltaW5hdG9yRmllbGRzIC0gYSBsaXN0IG9mIGZpZWxkcyBpbiB0aGVcclxuICAgICAqICAgdGFyZ2V0IHJlcXVlc3QgbWVzc2FnZSBjbGFzcyB0aGF0IGFyZSB1c2VkIHRvIGRldGVtcmluZSB3aGljaCByZXF1ZXN0XHJcbiAgICAgKiAgIG1lc3NhZ2VzIHNob3VsZCBiZSBidW5kbGVkIHRvZ2V0aGVyLlxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHN1YnJlc3BvbnNlRmllbGQgLSBhbiBvcHRpb25hbCBmaWVsZCwgd2hlbiBwcmVzZW50IGl0XHJcbiAgICAgKiAgIGluZGljYXRlcyB0aGUgZmllbGQgaW4gdGhlIHJlc3BvbnNlIG1lc3NhZ2UgdGhhdCBzaG91bGQgYmUgdXNlZCB0b1xyXG4gICAgICogICBkZW11bHRpcGxleCB0aGUgcmVzcG9uc2UgaW50byBtdWx0aXBsZSByZXNwb25zZSBtZXNzYWdlcy5cclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGJ5dGVMZW5ndGhGdW5jdGlvbiAtIGEgZnVuY3Rpb24gdG8gb2J0YWluIHRoZSBieXRlXHJcbiAgICAgKiAgIGxlbmd0aCB0byBiZSBjb25zdW1lZCBmb3IgdGhlIGJ1bmRsZWQgZmllbGQgbWVzc2FnZXMuIEJlY2F1c2UgTm9kZS5KU1xyXG4gICAgICogICBwcm90b2J1Zi5qcy9nUlBDIHVzZXMgYnVpbHRpbiBPYmplY3RzIGZvciB0aGUgdXNlci12aXNpYmxlIGRhdGEgYW5kXHJcbiAgICAgKiAgIGludGVybmFsbHkgdGhleSBhcmUgZW5jb2RlZC9kZWNvZGVkIGluIHByb3RvYnVmIG1hbm5lciwgdGhpcyBmdW5jdGlvblxyXG4gICAgICogICBpcyBhY3R1YWxseSBuZWNlc3NhcnkgdG8gY2FsY3VsYXRlIHRoZSBieXRlIGxlbmd0aC5cclxuICAgICAqIEBjb25zdHJ1Y3RvclxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihidW5kbGVkRmllbGQsIHJlcXVlc3REaXNjcmltaW5hdG9yRmllbGRzLCBzdWJyZXNwb25zZUZpZWxkLCBieXRlTGVuZ3RoRnVuY3Rpb24pIHtcclxuICAgICAgICBpZiAoIWJ5dGVMZW5ndGhGdW5jdGlvbiAmJiB0eXBlb2Ygc3VicmVzcG9uc2VGaWVsZCA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICBieXRlTGVuZ3RoRnVuY3Rpb24gPSBzdWJyZXNwb25zZUZpZWxkO1xyXG4gICAgICAgICAgICBzdWJyZXNwb25zZUZpZWxkID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5idW5kbGVkRmllbGQgPSBidW5kbGVkRmllbGQ7XHJcbiAgICAgICAgdGhpcy5yZXF1ZXN0RGlzY3JpbWluYXRvckZpZWxkcyA9XHJcbiAgICAgICAgICAgIHJlcXVlc3REaXNjcmltaW5hdG9yRmllbGRzLm1hcCh1dGlsXzEudG9DYW1lbENhc2UpO1xyXG4gICAgICAgIHRoaXMuc3VicmVzcG9uc2VGaWVsZCA9IHN1YnJlc3BvbnNlRmllbGQ7XHJcbiAgICAgICAgdGhpcy5ieXRlTGVuZ3RoRnVuY3Rpb24gPSBieXRlTGVuZ3RoRnVuY3Rpb247XHJcbiAgICB9XHJcbiAgICBnZXRBcGlDYWxsZXIoc2V0dGluZ3MpIHtcclxuICAgICAgICBpZiAoc2V0dGluZ3MuaXNCdW5kbGluZyA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBub3JtYWxBcGlDYWxsZXJfMS5Ob3JtYWxBcGlDYWxsZXIoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyBidW5kbGVBcGlDYWxsZXJfMS5CdW5kbGVBcGlDYWxsZXIobmV3IGJ1bmRsZUV4ZWN1dG9yXzEuQnVuZGxlRXhlY3V0b3Ioc2V0dGluZ3MuYnVuZGxlT3B0aW9ucywgdGhpcykpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuQnVuZGxlRGVzY3JpcHRvciA9IEJ1bmRsZURlc2NyaXB0b3I7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJ1bmRsZURlc2NyaXB0b3IuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/bundlingCalls/bundleDescriptor.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/bundlingCalls/bundleExecutor.js":
/*!***************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/bundlingCalls/bundleExecutor.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.BundleExecutor = void 0;\r\nconst status_1 = __webpack_require__(/*! ../status */ \"(rsc)/./node_modules/google-gax/build/src/status.js\");\r\nconst googleError_1 = __webpack_require__(/*! ../googleError */ \"(rsc)/./node_modules/google-gax/build/src/googleError.js\");\r\nconst warnings_1 = __webpack_require__(/*! ../warnings */ \"(rsc)/./node_modules/google-gax/build/src/warnings.js\");\r\nconst bundlingUtils_1 = __webpack_require__(/*! ./bundlingUtils */ \"(rsc)/./node_modules/google-gax/build/src/bundlingCalls/bundlingUtils.js\");\r\nconst task_1 = __webpack_require__(/*! ./task */ \"(rsc)/./node_modules/google-gax/build/src/bundlingCalls/task.js\");\r\nfunction noop() { }\r\n/**\r\n * BundleExecutor stores several timers for each bundle (calls are bundled based\r\n * on the options passed, each bundle has unique ID that is calculated based on\r\n * field values). Each timer fires and sends a call after certain amount of\r\n * time, and if a new request comes to the same bundle, the timer can be\r\n * restarted.\r\n */\r\nclass BundleExecutor {\r\n    _options;\r\n    _descriptor;\r\n    _tasks;\r\n    _timers;\r\n    _invocations;\r\n    _invocationId;\r\n    /**\r\n     * Organizes requests for an api service that requires to bundle them.\r\n     *\r\n     * @param {BundleOptions} bundleOptions - configures strategy this instance\r\n     *   uses when executing bundled functions.\r\n     * @param {BundleDescriptor} bundleDescriptor - the description of the bundling.\r\n     * @constructor\r\n     */\r\n    constructor(bundleOptions, bundleDescriptor) {\r\n        this._options = bundleOptions;\r\n        this._descriptor = bundleDescriptor;\r\n        this._tasks = {};\r\n        this._timers = {};\r\n        this._invocations = {};\r\n        this._invocationId = 0;\r\n    }\r\n    /**\r\n     * Schedule a method call.\r\n     *\r\n     * @param {function} apiCall - the function for an API call.\r\n     * @param {Object} request - the request object to be bundled with others.\r\n     * @param {APICallback} callback - the callback to be called when the method finished.\r\n     * @return {function()} - the function to cancel the scheduled invocation.\r\n     */\r\n    schedule(apiCall, request, callback) {\r\n        const bundleId = (0, bundlingUtils_1.computeBundleId)(request, this._descriptor.requestDiscriminatorFields);\r\n        callback = (callback || noop);\r\n        if (bundleId === undefined) {\r\n            (0, warnings_1.warn)('bundling_schedule_bundleid_undefined', 'The request does not have enough information for request bundling. ' +\r\n                `Invoking immediately. Request: ${JSON.stringify(request)} ` +\r\n                `discriminator fields: ${this._descriptor.requestDiscriminatorFields}`);\r\n            return apiCall(request, callback);\r\n        }\r\n        if (request[this._descriptor.bundledField] === undefined) {\r\n            (0, warnings_1.warn)('bundling_no_bundled_field', `Request does not contain field ${this._descriptor.bundledField} that must present for bundling. ` +\r\n                `Invoking immediately. Request: ${JSON.stringify(request)}`);\r\n            return apiCall(request, callback);\r\n        }\r\n        if (!(bundleId in this._tasks)) {\r\n            this._tasks[bundleId] = new task_1.Task(apiCall, request, this._descriptor.bundledField, this._descriptor.subresponseField);\r\n        }\r\n        let task = this._tasks[bundleId];\r\n        callback.id = String(this._invocationId++);\r\n        this._invocations[callback.id] = bundleId;\r\n        const bundledField = request[this._descriptor.bundledField];\r\n        const elementCount = bundledField.length;\r\n        let requestBytes = 0;\r\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n        const self = this;\r\n        bundledField.forEach(obj => {\r\n            requestBytes += this._descriptor.byteLengthFunction(obj);\r\n        });\r\n        const countLimit = this._options.elementCountLimit || 0;\r\n        const byteLimit = this._options.requestByteLimit || 0;\r\n        if ((countLimit > 0 && elementCount > countLimit) ||\r\n            (byteLimit > 0 && requestBytes >= byteLimit)) {\r\n            let message;\r\n            if (countLimit > 0 && elementCount > countLimit) {\r\n                message =\r\n                    'The number of elements ' +\r\n                        elementCount +\r\n                        ' exceeds the limit ' +\r\n                        this._options.elementCountLimit;\r\n            }\r\n            else {\r\n                message =\r\n                    'The required bytes ' +\r\n                        requestBytes +\r\n                        ' exceeds the limit ' +\r\n                        this._options.requestByteLimit;\r\n            }\r\n            const error = new googleError_1.GoogleError(message);\r\n            error.code = status_1.Status.INVALID_ARGUMENT;\r\n            callback(error);\r\n            return {\r\n                cancel: noop,\r\n            };\r\n        }\r\n        const existingCount = task.getElementCount();\r\n        const existingBytes = task.getRequestByteSize();\r\n        if ((countLimit > 0 && elementCount + existingCount >= countLimit) ||\r\n            (byteLimit > 0 && requestBytes + existingBytes >= byteLimit)) {\r\n            this._runNow(bundleId);\r\n            this._tasks[bundleId] = new task_1.Task(apiCall, request, this._descriptor.bundledField, this._descriptor.subresponseField);\r\n            task = this._tasks[bundleId];\r\n        }\r\n        task.extend(bundledField, requestBytes, callback);\r\n        const ret = {\r\n            cancel() {\r\n                self._cancel(callback.id);\r\n            },\r\n        };\r\n        const countThreshold = this._options.elementCountThreshold || 0;\r\n        const sizeThreshold = this._options.requestByteThreshold || 0;\r\n        if ((countThreshold > 0 && task.getElementCount() >= countThreshold) ||\r\n            (sizeThreshold > 0 && task.getRequestByteSize() >= sizeThreshold)) {\r\n            this._runNow(bundleId);\r\n            return ret;\r\n        }\r\n        if (!(bundleId in this._timers) && this._options.delayThreshold > 0) {\r\n            this._timers[bundleId] = setTimeout(() => {\r\n                delete this._timers[bundleId];\r\n                this._runNow(bundleId);\r\n            }, this._options.delayThreshold);\r\n        }\r\n        return ret;\r\n    }\r\n    /**\r\n     * Clears scheduled timeout if it exists.\r\n     *\r\n     * @param {String} bundleId - the id for the task whose timeout needs to be\r\n     *   cleared.\r\n     * @private\r\n     */\r\n    _maybeClearTimeout(bundleId) {\r\n        if (bundleId in this._timers) {\r\n            const timerId = this._timers[bundleId];\r\n            delete this._timers[bundleId];\r\n            clearTimeout(timerId);\r\n        }\r\n    }\r\n    /**\r\n     * Cancels an event.\r\n     *\r\n     * @param {String} id - The id for the event in the task.\r\n     * @private\r\n     */\r\n    _cancel(id) {\r\n        if (!(id in this._invocations)) {\r\n            return;\r\n        }\r\n        const bundleId = this._invocations[id];\r\n        if (!(bundleId in this._tasks)) {\r\n            return;\r\n        }\r\n        const task = this._tasks[bundleId];\r\n        delete this._invocations[id];\r\n        if (task.cancel(id)) {\r\n            this._maybeClearTimeout(bundleId);\r\n            delete this._tasks[bundleId];\r\n        }\r\n    }\r\n    /**\r\n     * Invokes a task.\r\n     *\r\n     * @param {String} bundleId - The id for the task.\r\n     * @private\r\n     */\r\n    _runNow(bundleId) {\r\n        if (!(bundleId in this._tasks)) {\r\n            (0, warnings_1.warn)('bundle_runnow_bundleid_unknown', `No such bundleid: ${bundleId}`);\r\n            return;\r\n        }\r\n        this._maybeClearTimeout(bundleId);\r\n        const task = this._tasks[bundleId];\r\n        delete this._tasks[bundleId];\r\n        task.run().forEach(id => {\r\n            delete this._invocations[id];\r\n        });\r\n    }\r\n}\r\nexports.BundleExecutor = BundleExecutor;\r\n//# sourceMappingURL=bundleExecutor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/bundlingCalls/bundleExecutor.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/bundlingCalls/bundlingUtils.js":
/*!**************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/bundlingCalls/bundlingUtils.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\r\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.computeBundleId = computeBundleId;\r\n/**\r\n * Compute the identifier of the `obj`. The objects of the same ID\r\n * will be bundled together.\r\n *\r\n * @param {RequestType} obj - The request object.\r\n * @param {String[]} discriminatorFields - The array of field names.\r\n *   A field name may include '.' as a separator, which is used to\r\n *   indicate object traversal.\r\n * @return {String|undefined} - the identifier string, or undefined if any\r\n *   discriminator fields do not exist.\r\n */\r\nfunction computeBundleId(obj, discriminatorFields) {\r\n    const ids = [];\r\n    let hasIds = false;\r\n    for (const field of discriminatorFields) {\r\n        const id = at(obj, field);\r\n        if (id === undefined) {\r\n            ids.push(null);\r\n        }\r\n        else {\r\n            hasIds = true;\r\n            ids.push(id);\r\n        }\r\n    }\r\n    if (!hasIds) {\r\n        return undefined;\r\n    }\r\n    return JSON.stringify(ids);\r\n}\r\n/**\r\n * Given an object field path that may contain dots, dig into the obj and find\r\n * the value at the given path.\r\n * @example\r\n * const obj = {\r\n *   a: {\r\n *     b: 5\r\n *   }\r\n * }\r\n * const id = at(obj, 'a.b');\r\n * // id = 5\r\n * @param field Path to the property with `.` notation\r\n * @param obj The object to traverse\r\n * @returns the value at the given path\r\n */\r\nfunction at(obj, field) {\r\n    const pathParts = field.split('.');\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    let currentObj = obj;\r\n    for (const pathPart of pathParts) {\r\n        currentObj = currentObj?.[pathPart];\r\n    }\r\n    return currentObj;\r\n}\r\n//# sourceMappingURL=bundlingUtils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvYnVuZGxpbmdDYWxscy9idW5kbGluZ1V0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsYUFBYTtBQUN4QixXQUFXLFVBQVU7QUFDckI7QUFDQTtBQUNBLFlBQVksa0JBQWtCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2RhbmlzaC1idWRkeS8uL25vZGVfbW9kdWxlcy9nb29nbGUtZ2F4L2J1aWxkL3NyYy9idW5kbGluZ0NhbGxzL2J1bmRsaW5nVXRpbHMuanM/M2U4ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuLyoqXHJcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLmNvbXB1dGVCdW5kbGVJZCA9IGNvbXB1dGVCdW5kbGVJZDtcclxuLyoqXHJcbiAqIENvbXB1dGUgdGhlIGlkZW50aWZpZXIgb2YgdGhlIGBvYmpgLiBUaGUgb2JqZWN0cyBvZiB0aGUgc2FtZSBJRFxyXG4gKiB3aWxsIGJlIGJ1bmRsZWQgdG9nZXRoZXIuXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVxdWVzdFR5cGV9IG9iaiAtIFRoZSByZXF1ZXN0IG9iamVjdC5cclxuICogQHBhcmFtIHtTdHJpbmdbXX0gZGlzY3JpbWluYXRvckZpZWxkcyAtIFRoZSBhcnJheSBvZiBmaWVsZCBuYW1lcy5cclxuICogICBBIGZpZWxkIG5hbWUgbWF5IGluY2x1ZGUgJy4nIGFzIGEgc2VwYXJhdG9yLCB3aGljaCBpcyB1c2VkIHRvXHJcbiAqICAgaW5kaWNhdGUgb2JqZWN0IHRyYXZlcnNhbC5cclxuICogQHJldHVybiB7U3RyaW5nfHVuZGVmaW5lZH0gLSB0aGUgaWRlbnRpZmllciBzdHJpbmcsIG9yIHVuZGVmaW5lZCBpZiBhbnlcclxuICogICBkaXNjcmltaW5hdG9yIGZpZWxkcyBkbyBub3QgZXhpc3QuXHJcbiAqL1xyXG5mdW5jdGlvbiBjb21wdXRlQnVuZGxlSWQob2JqLCBkaXNjcmltaW5hdG9yRmllbGRzKSB7XHJcbiAgICBjb25zdCBpZHMgPSBbXTtcclxuICAgIGxldCBoYXNJZHMgPSBmYWxzZTtcclxuICAgIGZvciAoY29uc3QgZmllbGQgb2YgZGlzY3JpbWluYXRvckZpZWxkcykge1xyXG4gICAgICAgIGNvbnN0IGlkID0gYXQob2JqLCBmaWVsZCk7XHJcbiAgICAgICAgaWYgKGlkID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgaWRzLnB1c2gobnVsbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBoYXNJZHMgPSB0cnVlO1xyXG4gICAgICAgICAgICBpZHMucHVzaChpZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKCFoYXNJZHMpIHtcclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGlkcyk7XHJcbn1cclxuLyoqXHJcbiAqIEdpdmVuIGFuIG9iamVjdCBmaWVsZCBwYXRoIHRoYXQgbWF5IGNvbnRhaW4gZG90cywgZGlnIGludG8gdGhlIG9iaiBhbmQgZmluZFxyXG4gKiB0aGUgdmFsdWUgYXQgdGhlIGdpdmVuIHBhdGguXHJcbiAqIEBleGFtcGxlXHJcbiAqIGNvbnN0IG9iaiA9IHtcclxuICogICBhOiB7XHJcbiAqICAgICBiOiA1XHJcbiAqICAgfVxyXG4gKiB9XHJcbiAqIGNvbnN0IGlkID0gYXQob2JqLCAnYS5iJyk7XHJcbiAqIC8vIGlkID0gNVxyXG4gKiBAcGFyYW0gZmllbGQgUGF0aCB0byB0aGUgcHJvcGVydHkgd2l0aCBgLmAgbm90YXRpb25cclxuICogQHBhcmFtIG9iaiBUaGUgb2JqZWN0IHRvIHRyYXZlcnNlXHJcbiAqIEByZXR1cm5zIHRoZSB2YWx1ZSBhdCB0aGUgZ2l2ZW4gcGF0aFxyXG4gKi9cclxuZnVuY3Rpb24gYXQob2JqLCBmaWVsZCkge1xyXG4gICAgY29uc3QgcGF0aFBhcnRzID0gZmllbGQuc3BsaXQoJy4nKTtcclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XHJcbiAgICBsZXQgY3VycmVudE9iaiA9IG9iajtcclxuICAgIGZvciAoY29uc3QgcGF0aFBhcnQgb2YgcGF0aFBhcnRzKSB7XHJcbiAgICAgICAgY3VycmVudE9iaiA9IGN1cnJlbnRPYmo/LltwYXRoUGFydF07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY3VycmVudE9iajtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1idW5kbGluZ1V0aWxzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/bundlingCalls/bundlingUtils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/bundlingCalls/task.js":
/*!*****************************************************************!*\
  !*** ./node_modules/google-gax/build/src/bundlingCalls/task.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Task = void 0;\r\nexports.deepCopyForResponse = deepCopyForResponse;\r\nconst status_1 = __webpack_require__(/*! ../status */ \"(rsc)/./node_modules/google-gax/build/src/status.js\");\r\nconst googleError_1 = __webpack_require__(/*! ../googleError */ \"(rsc)/./node_modules/google-gax/build/src/googleError.js\");\r\n/**\r\n * Creates a deep copy of the object with the consideration of subresponse\r\n * fields for bundling.\r\n *\r\n * @param {Object} obj - The source object.\r\n * @param {Object?} subresponseInfo - The information to copy the subset of\r\n *   the field for the response. Do nothing if it's null.\r\n * @param {String} subresponseInfo.field - The field name.\r\n * @param {number} subresponseInfo.start - The offset where the copying\r\n *   element should starts with.\r\n * @param {number} subresponseInfo.end - The ending index where the copying\r\n *   region of the elements ends.\r\n * @return {Object} The copied object.\r\n * @private\r\n */\r\nfunction deepCopyForResponse(\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nobj, subresponseInfo) {\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    let result;\r\n    if (obj === null) {\r\n        return null;\r\n    }\r\n    if (obj === undefined) {\r\n        return undefined;\r\n    }\r\n    if (Array.isArray(obj)) {\r\n        result = [];\r\n        obj.forEach(element => {\r\n            result.push(deepCopyForResponse(element, null));\r\n        });\r\n        return result;\r\n    }\r\n    // Some objects (such as ByteBuffer) have copy method.\r\n    if (obj.copy !== undefined) {\r\n        return obj.copy();\r\n    }\r\n    // ArrayBuffer should be copied through slice().\r\n    if (obj instanceof ArrayBuffer) {\r\n        return obj.slice(0);\r\n    }\r\n    if (typeof obj === 'object') {\r\n        result = {};\r\n        Object.keys(obj).forEach(key => {\r\n            if (subresponseInfo &&\r\n                key === subresponseInfo.field &&\r\n                Array.isArray(obj[key])) {\r\n                // Note that subresponses are not deep-copied. This is safe because\r\n                // those subresponses are not shared among callbacks.\r\n                result[key] = obj[key].slice(subresponseInfo.start, subresponseInfo.end);\r\n            }\r\n            else {\r\n                result[key] = deepCopyForResponse(obj[key], null);\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n    return obj;\r\n}\r\nclass Task {\r\n    _apiCall;\r\n    _request;\r\n    _bundledField;\r\n    _subresponseField;\r\n    _data;\r\n    callCanceller;\r\n    /**\r\n     * A task coordinates the execution of a single bundle.\r\n     *\r\n     * @param {function} apiCall - The function to conduct calling API.\r\n     * @param {Object} bundlingRequest - The base request object to be used\r\n     *   for the actual API call.\r\n     * @param {string} bundledField - The name of the field in bundlingRequest\r\n     *   to be bundled.\r\n     * @param {string=} subresponseField - The name of the field in the response\r\n     *   to be passed to the callback.\r\n     * @constructor\r\n     * @private\r\n     */\r\n    constructor(apiCall, bundlingRequest, bundledField, subresponseField) {\r\n        this._apiCall = apiCall;\r\n        this._request = bundlingRequest;\r\n        this._bundledField = bundledField;\r\n        this._subresponseField = subresponseField;\r\n        this._data = [];\r\n    }\r\n    /**\r\n     * Returns the number of elements in a task.\r\n     * @return {number} The number of elements.\r\n     */\r\n    getElementCount() {\r\n        let count = 0;\r\n        for (let i = 0; i < this._data.length; ++i) {\r\n            count += this._data[i].elements.length;\r\n        }\r\n        return count;\r\n    }\r\n    /**\r\n     * Returns the total byte size of the elements in a task.\r\n     * @return {number} The byte size.\r\n     */\r\n    getRequestByteSize() {\r\n        let size = 0;\r\n        for (let i = 0; i < this._data.length; ++i) {\r\n            size += this._data[i].bytes;\r\n        }\r\n        return size;\r\n    }\r\n    /**\r\n     * Invokes the actual API call with current elements.\r\n     * @return {string[]} - the list of ids for invocations to be run.\r\n     */\r\n    run() {\r\n        if (this._data.length === 0) {\r\n            return [];\r\n        }\r\n        const request = this._request;\r\n        const elements = [];\r\n        const ids = [];\r\n        for (let i = 0; i < this._data.length; ++i) {\r\n            elements.push(...this._data[i].elements);\r\n            ids.push(this._data[i].callback.id);\r\n        }\r\n        request[this._bundledField] = elements;\r\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n        const self = this;\r\n        this.callCanceller = this._apiCall(request, (err, response) => {\r\n            const responses = [];\r\n            if (err) {\r\n                self._data.forEach(() => {\r\n                    responses.push(undefined);\r\n                });\r\n            }\r\n            else {\r\n                let subresponseInfo = null;\r\n                if (self._subresponseField) {\r\n                    subresponseInfo = {\r\n                        field: self._subresponseField,\r\n                        start: 0,\r\n                    };\r\n                }\r\n                self._data.forEach(data => {\r\n                    if (subresponseInfo) {\r\n                        subresponseInfo.end =\r\n                            subresponseInfo.start + data.elements.length;\r\n                    }\r\n                    responses.push(deepCopyForResponse(response, subresponseInfo));\r\n                    if (subresponseInfo) {\r\n                        subresponseInfo.start = subresponseInfo.end;\r\n                    }\r\n                });\r\n            }\r\n            for (let i = 0; i < self._data.length; ++i) {\r\n                if (self._data[i].cancelled) {\r\n                    const error = new googleError_1.GoogleError('cancelled');\r\n                    error.code = status_1.Status.CANCELLED;\r\n                    self._data[i].callback(error);\r\n                }\r\n                else {\r\n                    self._data[i].callback(err, responses[i]);\r\n                }\r\n            }\r\n        });\r\n        return ids;\r\n    }\r\n    /**\r\n     * Appends the list of elements into the task.\r\n     * @param {Object[]} elements - the new list of elements.\r\n     * @param {number} bytes - the byte size required to encode elements in the API.\r\n     * @param {APICallback} callback - the callback of the method call.\r\n     */\r\n    extend(elements, bytes, callback) {\r\n        this._data.push({\r\n            elements,\r\n            bytes,\r\n            callback,\r\n        });\r\n    }\r\n    /**\r\n     * Cancels a part of elements.\r\n     * @param {string} id - The identifier of the part of elements.\r\n     * @return {boolean} Whether the entire task will be canceled or not.\r\n     */\r\n    cancel(id) {\r\n        if (this.callCanceller) {\r\n            let allCancelled = true;\r\n            this._data.forEach(d => {\r\n                if (d.callback.id === id) {\r\n                    d.cancelled = true;\r\n                }\r\n                if (!d.cancelled) {\r\n                    allCancelled = false;\r\n                }\r\n            });\r\n            if (allCancelled) {\r\n                this.callCanceller.cancel();\r\n            }\r\n            return allCancelled;\r\n        }\r\n        for (let i = 0; i < this._data.length; ++i) {\r\n            if (this._data[i].callback.id === id) {\r\n                const error = new googleError_1.GoogleError('cancelled');\r\n                error.code = status_1.Status.CANCELLED;\r\n                this._data[i].callback(error);\r\n                this._data.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n        return this._data.length === 0;\r\n    }\r\n}\r\nexports.Task = Task;\r\n//# sourceMappingURL=task.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/bundlingCalls/task.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/call.js":
/*!***************************************************!*\
  !*** ./node_modules/google-gax/build/src/call.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.OngoingCallPromise = exports.OngoingCall = void 0;\r\nconst status_1 = __webpack_require__(/*! ./status */ \"(rsc)/./node_modules/google-gax/build/src/status.js\");\r\nconst googleError_1 = __webpack_require__(/*! ./googleError */ \"(rsc)/./node_modules/google-gax/build/src/googleError.js\");\r\nclass OngoingCall {\r\n    callback;\r\n    cancelFunc;\r\n    completed;\r\n    /**\r\n     * OngoingCall manages callback, API calls, and cancellation\r\n     * of the API calls.\r\n     * @param {APICallback=} callback\r\n     *   The callback to be called asynchronously when the API call\r\n     *   finishes.\r\n     * @constructor\r\n     * @property {APICallback} callback\r\n     *   The callback function to be called.\r\n     * @private\r\n     */\r\n    constructor(callback) {\r\n        this.callback = callback;\r\n        this.completed = false;\r\n    }\r\n    /**\r\n     * Cancels the ongoing promise.\r\n     */\r\n    cancel() {\r\n        if (this.completed) {\r\n            return;\r\n        }\r\n        this.completed = true;\r\n        if (this.cancelFunc) {\r\n            this.cancelFunc();\r\n        }\r\n        else {\r\n            const error = new googleError_1.GoogleError('cancelled');\r\n            error.code = status_1.Status.CANCELLED;\r\n            this.callback(error);\r\n        }\r\n    }\r\n    /**\r\n     * Call calls the specified function. Result will be used to fulfill\r\n     * the promise.\r\n     *\r\n     * @param {SimpleCallbackFunction} func\r\n     *   A function for an API call.\r\n     * @param {Object} argument\r\n     *   A request object.\r\n     */\r\n    call(func, argument) {\r\n        if (this.completed) {\r\n            return;\r\n        }\r\n        const canceller = func(argument, (err, response, next, rawResponse) => {\r\n            this.completed = true;\r\n            setImmediate(this.callback, err, response, next, rawResponse);\r\n        });\r\n        if (canceller instanceof Promise) {\r\n            canceller.catch(err => {\r\n                setImmediate(this.callback, new googleError_1.GoogleError(err), null, null, null);\r\n            });\r\n        }\r\n        this.cancelFunc = () => canceller.cancel();\r\n    }\r\n}\r\nexports.OngoingCall = OngoingCall;\r\nclass OngoingCallPromise extends OngoingCall {\r\n    promise;\r\n    /**\r\n     * GaxPromise is GRPCCallbackWrapper, but it holds a promise when\r\n     * the API call finishes.\r\n     * @constructor\r\n     * @private\r\n     */\r\n    constructor() {\r\n        let resolveCallback;\r\n        let rejectCallback;\r\n        const callback = (err, response, next, rawResponse) => {\r\n            if (err) {\r\n                // If gRPC metadata exist, parsed google.rpc.status details.\r\n                if (err.metadata) {\r\n                    rejectCallback(googleError_1.GoogleError.parseGRPCStatusDetails(err));\r\n                }\r\n                else {\r\n                    rejectCallback(err);\r\n                }\r\n            }\r\n            else if (response !== undefined) {\r\n                resolveCallback([response, next || null, rawResponse || null]);\r\n            }\r\n            else {\r\n                throw new googleError_1.GoogleError('Neither error nor response are defined');\r\n            }\r\n        };\r\n        const promise = new Promise((resolve, reject) => {\r\n            resolveCallback = resolve;\r\n            rejectCallback = reject;\r\n        });\r\n        super(callback);\r\n        this.promise = promise;\r\n        this.promise.cancel = () => {\r\n            this.cancel();\r\n        };\r\n    }\r\n}\r\nexports.OngoingCallPromise = OngoingCallPromise;\r\n//# sourceMappingURL=call.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvY2FsbC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwwQkFBMEIsR0FBRyxtQkFBbUI7QUFDaEQsaUJBQWlCLG1CQUFPLENBQUMscUVBQVU7QUFDbkMsc0JBQXNCLG1CQUFPLENBQUMsK0VBQWU7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGNBQWM7QUFDN0I7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGFBQWE7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHdCQUF3QjtBQUN2QztBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFuaXNoLWJ1ZGR5Ly4vbm9kZV9tb2R1bGVzL2dvb2dsZS1nYXgvYnVpbGQvc3JjL2NhbGwuanM/ZGE2YiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuLyoqXHJcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLk9uZ29pbmdDYWxsUHJvbWlzZSA9IGV4cG9ydHMuT25nb2luZ0NhbGwgPSB2b2lkIDA7XHJcbmNvbnN0IHN0YXR1c18xID0gcmVxdWlyZShcIi4vc3RhdHVzXCIpO1xyXG5jb25zdCBnb29nbGVFcnJvcl8xID0gcmVxdWlyZShcIi4vZ29vZ2xlRXJyb3JcIik7XHJcbmNsYXNzIE9uZ29pbmdDYWxsIHtcclxuICAgIGNhbGxiYWNrO1xyXG4gICAgY2FuY2VsRnVuYztcclxuICAgIGNvbXBsZXRlZDtcclxuICAgIC8qKlxyXG4gICAgICogT25nb2luZ0NhbGwgbWFuYWdlcyBjYWxsYmFjaywgQVBJIGNhbGxzLCBhbmQgY2FuY2VsbGF0aW9uXHJcbiAgICAgKiBvZiB0aGUgQVBJIGNhbGxzLlxyXG4gICAgICogQHBhcmFtIHtBUElDYWxsYmFjaz19IGNhbGxiYWNrXHJcbiAgICAgKiAgIFRoZSBjYWxsYmFjayB0byBiZSBjYWxsZWQgYXN5bmNocm9ub3VzbHkgd2hlbiB0aGUgQVBJIGNhbGxcclxuICAgICAqICAgZmluaXNoZXMuXHJcbiAgICAgKiBAY29uc3RydWN0b3JcclxuICAgICAqIEBwcm9wZXJ0eSB7QVBJQ2FsbGJhY2t9IGNhbGxiYWNrXHJcbiAgICAgKiAgIFRoZSBjYWxsYmFjayBmdW5jdGlvbiB0byBiZSBjYWxsZWQuXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihjYWxsYmFjaykge1xyXG4gICAgICAgIHRoaXMuY2FsbGJhY2sgPSBjYWxsYmFjaztcclxuICAgICAgICB0aGlzLmNvbXBsZXRlZCA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDYW5jZWxzIHRoZSBvbmdvaW5nIHByb21pc2UuXHJcbiAgICAgKi9cclxuICAgIGNhbmNlbCgpIHtcclxuICAgICAgICBpZiAodGhpcy5jb21wbGV0ZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNvbXBsZXRlZCA9IHRydWU7XHJcbiAgICAgICAgaWYgKHRoaXMuY2FuY2VsRnVuYykge1xyXG4gICAgICAgICAgICB0aGlzLmNhbmNlbEZ1bmMoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVycm9yID0gbmV3IGdvb2dsZUVycm9yXzEuR29vZ2xlRXJyb3IoJ2NhbmNlbGxlZCcpO1xyXG4gICAgICAgICAgICBlcnJvci5jb2RlID0gc3RhdHVzXzEuU3RhdHVzLkNBTkNFTExFRDtcclxuICAgICAgICAgICAgdGhpcy5jYWxsYmFjayhlcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxsIGNhbGxzIHRoZSBzcGVjaWZpZWQgZnVuY3Rpb24uIFJlc3VsdCB3aWxsIGJlIHVzZWQgdG8gZnVsZmlsbFxyXG4gICAgICogdGhlIHByb21pc2UuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtTaW1wbGVDYWxsYmFja0Z1bmN0aW9ufSBmdW5jXHJcbiAgICAgKiAgIEEgZnVuY3Rpb24gZm9yIGFuIEFQSSBjYWxsLlxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGFyZ3VtZW50XHJcbiAgICAgKiAgIEEgcmVxdWVzdCBvYmplY3QuXHJcbiAgICAgKi9cclxuICAgIGNhbGwoZnVuYywgYXJndW1lbnQpIHtcclxuICAgICAgICBpZiAodGhpcy5jb21wbGV0ZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBjYW5jZWxsZXIgPSBmdW5jKGFyZ3VtZW50LCAoZXJyLCByZXNwb25zZSwgbmV4dCwgcmF3UmVzcG9uc2UpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5jb21wbGV0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBzZXRJbW1lZGlhdGUodGhpcy5jYWxsYmFjaywgZXJyLCByZXNwb25zZSwgbmV4dCwgcmF3UmVzcG9uc2UpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmIChjYW5jZWxsZXIgaW5zdGFuY2VvZiBQcm9taXNlKSB7XHJcbiAgICAgICAgICAgIGNhbmNlbGxlci5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgICAgICAgICAgc2V0SW1tZWRpYXRlKHRoaXMuY2FsbGJhY2ssIG5ldyBnb29nbGVFcnJvcl8xLkdvb2dsZUVycm9yKGVyciksIG51bGwsIG51bGwsIG51bGwpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jYW5jZWxGdW5jID0gKCkgPT4gY2FuY2VsbGVyLmNhbmNlbCgpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuT25nb2luZ0NhbGwgPSBPbmdvaW5nQ2FsbDtcclxuY2xhc3MgT25nb2luZ0NhbGxQcm9taXNlIGV4dGVuZHMgT25nb2luZ0NhbGwge1xyXG4gICAgcHJvbWlzZTtcclxuICAgIC8qKlxyXG4gICAgICogR2F4UHJvbWlzZSBpcyBHUlBDQ2FsbGJhY2tXcmFwcGVyLCBidXQgaXQgaG9sZHMgYSBwcm9taXNlIHdoZW5cclxuICAgICAqIHRoZSBBUEkgY2FsbCBmaW5pc2hlcy5cclxuICAgICAqIEBjb25zdHJ1Y3RvclxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgbGV0IHJlc29sdmVDYWxsYmFjaztcclxuICAgICAgICBsZXQgcmVqZWN0Q2FsbGJhY2s7XHJcbiAgICAgICAgY29uc3QgY2FsbGJhY2sgPSAoZXJyLCByZXNwb25zZSwgbmV4dCwgcmF3UmVzcG9uc2UpID0+IHtcclxuICAgICAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgICAgICAgLy8gSWYgZ1JQQyBtZXRhZGF0YSBleGlzdCwgcGFyc2VkIGdvb2dsZS5ycGMuc3RhdHVzIGRldGFpbHMuXHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyLm1ldGFkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0Q2FsbGJhY2soZ29vZ2xlRXJyb3JfMS5Hb29nbGVFcnJvci5wYXJzZUdSUENTdGF0dXNEZXRhaWxzKGVycikpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0Q2FsbGJhY2soZXJyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChyZXNwb25zZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlQ2FsbGJhY2soW3Jlc3BvbnNlLCBuZXh0IHx8IG51bGwsIHJhd1Jlc3BvbnNlIHx8IG51bGxdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBnb29nbGVFcnJvcl8xLkdvb2dsZUVycm9yKCdOZWl0aGVyIGVycm9yIG5vciByZXNwb25zZSBhcmUgZGVmaW5lZCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICByZXNvbHZlQ2FsbGJhY2sgPSByZXNvbHZlO1xyXG4gICAgICAgICAgICByZWplY3RDYWxsYmFjayA9IHJlamVjdDtcclxuICAgICAgICB9KTtcclxuICAgICAgICBzdXBlcihjYWxsYmFjayk7XHJcbiAgICAgICAgdGhpcy5wcm9taXNlID0gcHJvbWlzZTtcclxuICAgICAgICB0aGlzLnByb21pc2UuY2FuY2VsID0gKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmNhbmNlbCgpO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5PbmdvaW5nQ2FsbFByb21pc2UgPSBPbmdvaW5nQ2FsbFByb21pc2U7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNhbGwuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/call.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/createApiCall.js":
/*!************************************************************!*\
  !*** ./node_modules/google-gax/build/src/createApiCall.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.createApiCall = createApiCall;\r\n/**\r\n * Provides function wrappers that implement page streaming and retrying.\r\n */\r\nconst apiCaller_1 = __webpack_require__(/*! ./apiCaller */ \"(rsc)/./node_modules/google-gax/build/src/apiCaller.js\");\r\nconst gax_1 = __webpack_require__(/*! ./gax */ \"(rsc)/./node_modules/google-gax/build/src/gax.js\");\r\nconst retries_1 = __webpack_require__(/*! ./normalCalls/retries */ \"(rsc)/./node_modules/google-gax/build/src/normalCalls/retries.js\");\r\nconst timeout_1 = __webpack_require__(/*! ./normalCalls/timeout */ \"(rsc)/./node_modules/google-gax/build/src/normalCalls/timeout.js\");\r\nconst streamingApiCaller_1 = __webpack_require__(/*! ./streamingCalls/streamingApiCaller */ \"(rsc)/./node_modules/google-gax/build/src/streamingCalls/streamingApiCaller.js\");\r\nconst warnings_1 = __webpack_require__(/*! ./warnings */ \"(rsc)/./node_modules/google-gax/build/src/warnings.js\");\r\n/**\r\n * Converts an rpc call into an API call governed by the settings.\r\n *\r\n * In typical usage, `func` will be a promise to a callable used to make an rpc\r\n * request. This will mostly likely be a bound method from a request stub used\r\n * to make an rpc call. It is not a direct function but a Promise instance,\r\n * because of its asynchronism (typically, obtaining the auth information).\r\n *\r\n * The result is a function which manages the API call with the given settings\r\n * and the options on the invocation.\r\n *\r\n * @param {Promise<GRPCCall>|GRPCCall} func - is either a promise to be used to make\r\n *   a bare RPC call, or just a bare RPC call.\r\n * @param {CallSettings} settings - provides the settings for this call\r\n * @param {Descriptor} descriptor - optionally specify the descriptor for\r\n *   the method call.\r\n * @return {GaxCall} func - a bound method on a request stub used\r\n *   to make an rpc call.\r\n */\r\nfunction createApiCall(func, settings, descriptor, \r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n_fallback) {\r\n    // we want to be able to accept both promise resolving to a function and a\r\n    // function. Currently client librares are only calling this method with a\r\n    // promise, but it will change.\r\n    const funcPromise = typeof func === 'function' ? Promise.resolve(func) : func;\r\n    // the following apiCaller will be used for all calls of this function...\r\n    const apiCaller = (0, apiCaller_1.createAPICaller)(settings, descriptor);\r\n    return (request, callOptions, callback) => {\r\n        let currentApiCaller = apiCaller;\r\n        let thisSettings;\r\n        if (currentApiCaller instanceof streamingApiCaller_1.StreamingApiCaller) {\r\n            const gaxStreamingRetries = currentApiCaller.descriptor?.gaxStreamingRetries ?? false;\r\n            // If Gax streaming retries are enabled, check settings passed at call time and convert parameters if needed\r\n            const convertedRetryOptions = (0, gax_1.convertRetryOptions)(callOptions, gaxStreamingRetries);\r\n            thisSettings = settings.merge(convertedRetryOptions);\r\n        }\r\n        else {\r\n            thisSettings = settings.merge(callOptions);\r\n        }\r\n        // special case: if bundling is disabled for this one call,\r\n        // use default API caller instead\r\n        if (settings.isBundling && !thisSettings.isBundling) {\r\n            currentApiCaller = (0, apiCaller_1.createAPICaller)(settings, undefined);\r\n        }\r\n        const ongoingCall = currentApiCaller.init(callback);\r\n        funcPromise\r\n            .then((func) => {\r\n            // Initially, the function is just what gRPC server stub contains.\r\n            func = currentApiCaller.wrap(func);\r\n            const streaming = currentApiCaller.descriptor\r\n                ?.streaming;\r\n            const retry = thisSettings.retry;\r\n            if (streaming && retry) {\r\n                if (retry.retryCodes.length > 0 && retry.shouldRetryFn) {\r\n                    (0, warnings_1.warn)('either_retrycodes_or_shouldretryfn', 'Only one of retryCodes or shouldRetryFn may be defined. Ignoring retryCodes.');\r\n                    retry.retryCodes = [];\r\n                }\r\n                if (!currentApiCaller.descriptor\r\n                    .gaxStreamingRetries &&\r\n                    retry.getResumptionRequestFn) {\r\n                    throw new Error('getResumptionRequestFn can only be used when gaxStreamingRetries is set to true.');\r\n                }\r\n            }\r\n            if (!streaming && retry) {\r\n                if (retry.shouldRetryFn) {\r\n                    throw new Error('Using a function to determine retry eligibility is only supported with server streaming calls');\r\n                }\r\n                if (retry.getResumptionRequestFn) {\r\n                    throw new Error('Resumption strategy can only be used with server streaming retries');\r\n                }\r\n                if (retry.retryCodes && retry.retryCodes.length > 0) {\r\n                    retry.backoffSettings.initialRpcTimeoutMillis ??=\r\n                        thisSettings.timeout;\r\n                    return (0, retries_1.retryable)(func, thisSettings.retry, thisSettings.otherArgs, thisSettings.apiName);\r\n                }\r\n            }\r\n            return (0, timeout_1.addTimeoutArg)(func, thisSettings.timeout, thisSettings.otherArgs);\r\n        })\r\n            .then((apiCall) => {\r\n            // After adding retries / timeouts, the call function becomes simpler:\r\n            // it only accepts request and callback.\r\n            currentApiCaller.call(apiCall, request, thisSettings, ongoingCall);\r\n        })\r\n            .catch(err => {\r\n            currentApiCaller.fail(ongoingCall, err);\r\n        });\r\n        // Calls normally return a \"cancellable promise\" that can be used to `await` for the actual result,\r\n        // or to cancel the ongoing call.\r\n        return currentApiCaller.result(ongoingCall);\r\n    };\r\n}\r\n//# sourceMappingURL=createApiCall.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvY3JlYXRlQXBpQ2FsbC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLG1CQUFPLENBQUMsMkVBQWE7QUFDekMsY0FBYyxtQkFBTyxDQUFDLCtEQUFPO0FBQzdCLGtCQUFrQixtQkFBTyxDQUFDLCtGQUF1QjtBQUNqRCxrQkFBa0IsbUJBQU8sQ0FBQywrRkFBdUI7QUFDakQsNkJBQTZCLG1CQUFPLENBQUMsMkhBQXFDO0FBQzFFLG1CQUFtQixtQkFBTyxDQUFDLHlFQUFZO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLDRCQUE0QjtBQUN2QztBQUNBLFdBQVcsY0FBYztBQUN6QixXQUFXLFlBQVk7QUFDdkI7QUFDQSxZQUFZLFNBQVM7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYW5pc2gtYnVkZHkvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvY3JlYXRlQXBpQ2FsbC5qcz9lOTE4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG4vKipcclxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuY3JlYXRlQXBpQ2FsbCA9IGNyZWF0ZUFwaUNhbGw7XHJcbi8qKlxyXG4gKiBQcm92aWRlcyBmdW5jdGlvbiB3cmFwcGVycyB0aGF0IGltcGxlbWVudCBwYWdlIHN0cmVhbWluZyBhbmQgcmV0cnlpbmcuXHJcbiAqL1xyXG5jb25zdCBhcGlDYWxsZXJfMSA9IHJlcXVpcmUoXCIuL2FwaUNhbGxlclwiKTtcclxuY29uc3QgZ2F4XzEgPSByZXF1aXJlKFwiLi9nYXhcIik7XHJcbmNvbnN0IHJldHJpZXNfMSA9IHJlcXVpcmUoXCIuL25vcm1hbENhbGxzL3JldHJpZXNcIik7XHJcbmNvbnN0IHRpbWVvdXRfMSA9IHJlcXVpcmUoXCIuL25vcm1hbENhbGxzL3RpbWVvdXRcIik7XHJcbmNvbnN0IHN0cmVhbWluZ0FwaUNhbGxlcl8xID0gcmVxdWlyZShcIi4vc3RyZWFtaW5nQ2FsbHMvc3RyZWFtaW5nQXBpQ2FsbGVyXCIpO1xyXG5jb25zdCB3YXJuaW5nc18xID0gcmVxdWlyZShcIi4vd2FybmluZ3NcIik7XHJcbi8qKlxyXG4gKiBDb252ZXJ0cyBhbiBycGMgY2FsbCBpbnRvIGFuIEFQSSBjYWxsIGdvdmVybmVkIGJ5IHRoZSBzZXR0aW5ncy5cclxuICpcclxuICogSW4gdHlwaWNhbCB1c2FnZSwgYGZ1bmNgIHdpbGwgYmUgYSBwcm9taXNlIHRvIGEgY2FsbGFibGUgdXNlZCB0byBtYWtlIGFuIHJwY1xyXG4gKiByZXF1ZXN0LiBUaGlzIHdpbGwgbW9zdGx5IGxpa2VseSBiZSBhIGJvdW5kIG1ldGhvZCBmcm9tIGEgcmVxdWVzdCBzdHViIHVzZWRcclxuICogdG8gbWFrZSBhbiBycGMgY2FsbC4gSXQgaXMgbm90IGEgZGlyZWN0IGZ1bmN0aW9uIGJ1dCBhIFByb21pc2UgaW5zdGFuY2UsXHJcbiAqIGJlY2F1c2Ugb2YgaXRzIGFzeW5jaHJvbmlzbSAodHlwaWNhbGx5LCBvYnRhaW5pbmcgdGhlIGF1dGggaW5mb3JtYXRpb24pLlxyXG4gKlxyXG4gKiBUaGUgcmVzdWx0IGlzIGEgZnVuY3Rpb24gd2hpY2ggbWFuYWdlcyB0aGUgQVBJIGNhbGwgd2l0aCB0aGUgZ2l2ZW4gc2V0dGluZ3NcclxuICogYW5kIHRoZSBvcHRpb25zIG9uIHRoZSBpbnZvY2F0aW9uLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1Byb21pc2U8R1JQQ0NhbGw+fEdSUENDYWxsfSBmdW5jIC0gaXMgZWl0aGVyIGEgcHJvbWlzZSB0byBiZSB1c2VkIHRvIG1ha2VcclxuICogICBhIGJhcmUgUlBDIGNhbGwsIG9yIGp1c3QgYSBiYXJlIFJQQyBjYWxsLlxyXG4gKiBAcGFyYW0ge0NhbGxTZXR0aW5nc30gc2V0dGluZ3MgLSBwcm92aWRlcyB0aGUgc2V0dGluZ3MgZm9yIHRoaXMgY2FsbFxyXG4gKiBAcGFyYW0ge0Rlc2NyaXB0b3J9IGRlc2NyaXB0b3IgLSBvcHRpb25hbGx5IHNwZWNpZnkgdGhlIGRlc2NyaXB0b3IgZm9yXHJcbiAqICAgdGhlIG1ldGhvZCBjYWxsLlxyXG4gKiBAcmV0dXJuIHtHYXhDYWxsfSBmdW5jIC0gYSBib3VuZCBtZXRob2Qgb24gYSByZXF1ZXN0IHN0dWIgdXNlZFxyXG4gKiAgIHRvIG1ha2UgYW4gcnBjIGNhbGwuXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVBcGlDYWxsKGZ1bmMsIHNldHRpbmdzLCBkZXNjcmlwdG9yLCBcclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xyXG5fZmFsbGJhY2spIHtcclxuICAgIC8vIHdlIHdhbnQgdG8gYmUgYWJsZSB0byBhY2NlcHQgYm90aCBwcm9taXNlIHJlc29sdmluZyB0byBhIGZ1bmN0aW9uIGFuZCBhXHJcbiAgICAvLyBmdW5jdGlvbi4gQ3VycmVudGx5IGNsaWVudCBsaWJyYXJlcyBhcmUgb25seSBjYWxsaW5nIHRoaXMgbWV0aG9kIHdpdGggYVxyXG4gICAgLy8gcHJvbWlzZSwgYnV0IGl0IHdpbGwgY2hhbmdlLlxyXG4gICAgY29uc3QgZnVuY1Byb21pc2UgPSB0eXBlb2YgZnVuYyA9PT0gJ2Z1bmN0aW9uJyA/IFByb21pc2UucmVzb2x2ZShmdW5jKSA6IGZ1bmM7XHJcbiAgICAvLyB0aGUgZm9sbG93aW5nIGFwaUNhbGxlciB3aWxsIGJlIHVzZWQgZm9yIGFsbCBjYWxscyBvZiB0aGlzIGZ1bmN0aW9uLi4uXHJcbiAgICBjb25zdCBhcGlDYWxsZXIgPSAoMCwgYXBpQ2FsbGVyXzEuY3JlYXRlQVBJQ2FsbGVyKShzZXR0aW5ncywgZGVzY3JpcHRvcik7XHJcbiAgICByZXR1cm4gKHJlcXVlc3QsIGNhbGxPcHRpb25zLCBjYWxsYmFjaykgPT4ge1xyXG4gICAgICAgIGxldCBjdXJyZW50QXBpQ2FsbGVyID0gYXBpQ2FsbGVyO1xyXG4gICAgICAgIGxldCB0aGlzU2V0dGluZ3M7XHJcbiAgICAgICAgaWYgKGN1cnJlbnRBcGlDYWxsZXIgaW5zdGFuY2VvZiBzdHJlYW1pbmdBcGlDYWxsZXJfMS5TdHJlYW1pbmdBcGlDYWxsZXIpIHtcclxuICAgICAgICAgICAgY29uc3QgZ2F4U3RyZWFtaW5nUmV0cmllcyA9IGN1cnJlbnRBcGlDYWxsZXIuZGVzY3JpcHRvcj8uZ2F4U3RyZWFtaW5nUmV0cmllcyA/PyBmYWxzZTtcclxuICAgICAgICAgICAgLy8gSWYgR2F4IHN0cmVhbWluZyByZXRyaWVzIGFyZSBlbmFibGVkLCBjaGVjayBzZXR0aW5ncyBwYXNzZWQgYXQgY2FsbCB0aW1lIGFuZCBjb252ZXJ0IHBhcmFtZXRlcnMgaWYgbmVlZGVkXHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnZlcnRlZFJldHJ5T3B0aW9ucyA9ICgwLCBnYXhfMS5jb252ZXJ0UmV0cnlPcHRpb25zKShjYWxsT3B0aW9ucywgZ2F4U3RyZWFtaW5nUmV0cmllcyk7XHJcbiAgICAgICAgICAgIHRoaXNTZXR0aW5ncyA9IHNldHRpbmdzLm1lcmdlKGNvbnZlcnRlZFJldHJ5T3B0aW9ucyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzU2V0dGluZ3MgPSBzZXR0aW5ncy5tZXJnZShjYWxsT3B0aW9ucyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHNwZWNpYWwgY2FzZTogaWYgYnVuZGxpbmcgaXMgZGlzYWJsZWQgZm9yIHRoaXMgb25lIGNhbGwsXHJcbiAgICAgICAgLy8gdXNlIGRlZmF1bHQgQVBJIGNhbGxlciBpbnN0ZWFkXHJcbiAgICAgICAgaWYgKHNldHRpbmdzLmlzQnVuZGxpbmcgJiYgIXRoaXNTZXR0aW5ncy5pc0J1bmRsaW5nKSB7XHJcbiAgICAgICAgICAgIGN1cnJlbnRBcGlDYWxsZXIgPSAoMCwgYXBpQ2FsbGVyXzEuY3JlYXRlQVBJQ2FsbGVyKShzZXR0aW5ncywgdW5kZWZpbmVkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3Qgb25nb2luZ0NhbGwgPSBjdXJyZW50QXBpQ2FsbGVyLmluaXQoY2FsbGJhY2spO1xyXG4gICAgICAgIGZ1bmNQcm9taXNlXHJcbiAgICAgICAgICAgIC50aGVuKChmdW5jKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIEluaXRpYWxseSwgdGhlIGZ1bmN0aW9uIGlzIGp1c3Qgd2hhdCBnUlBDIHNlcnZlciBzdHViIGNvbnRhaW5zLlxyXG4gICAgICAgICAgICBmdW5jID0gY3VycmVudEFwaUNhbGxlci53cmFwKGZ1bmMpO1xyXG4gICAgICAgICAgICBjb25zdCBzdHJlYW1pbmcgPSBjdXJyZW50QXBpQ2FsbGVyLmRlc2NyaXB0b3JcclxuICAgICAgICAgICAgICAgID8uc3RyZWFtaW5nO1xyXG4gICAgICAgICAgICBjb25zdCByZXRyeSA9IHRoaXNTZXR0aW5ncy5yZXRyeTtcclxuICAgICAgICAgICAgaWYgKHN0cmVhbWluZyAmJiByZXRyeSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHJldHJ5LnJldHJ5Q29kZXMubGVuZ3RoID4gMCAmJiByZXRyeS5zaG91bGRSZXRyeUZuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgKDAsIHdhcm5pbmdzXzEud2FybikoJ2VpdGhlcl9yZXRyeWNvZGVzX29yX3Nob3VsZHJldHJ5Zm4nLCAnT25seSBvbmUgb2YgcmV0cnlDb2RlcyBvciBzaG91bGRSZXRyeUZuIG1heSBiZSBkZWZpbmVkLiBJZ25vcmluZyByZXRyeUNvZGVzLicpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHJ5LnJldHJ5Q29kZXMgPSBbXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICghY3VycmVudEFwaUNhbGxlci5kZXNjcmlwdG9yXHJcbiAgICAgICAgICAgICAgICAgICAgLmdheFN0cmVhbWluZ1JldHJpZXMgJiZcclxuICAgICAgICAgICAgICAgICAgICByZXRyeS5nZXRSZXN1bXB0aW9uUmVxdWVzdEZuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdnZXRSZXN1bXB0aW9uUmVxdWVzdEZuIGNhbiBvbmx5IGJlIHVzZWQgd2hlbiBnYXhTdHJlYW1pbmdSZXRyaWVzIGlzIHNldCB0byB0cnVlLicpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghc3RyZWFtaW5nICYmIHJldHJ5KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocmV0cnkuc2hvdWxkUmV0cnlGbikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVXNpbmcgYSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgcmV0cnkgZWxpZ2liaWxpdHkgaXMgb25seSBzdXBwb3J0ZWQgd2l0aCBzZXJ2ZXIgc3RyZWFtaW5nIGNhbGxzJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAocmV0cnkuZ2V0UmVzdW1wdGlvblJlcXVlc3RGbikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVzdW1wdGlvbiBzdHJhdGVneSBjYW4gb25seSBiZSB1c2VkIHdpdGggc2VydmVyIHN0cmVhbWluZyByZXRyaWVzJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAocmV0cnkucmV0cnlDb2RlcyAmJiByZXRyeS5yZXRyeUNvZGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXRyeS5iYWNrb2ZmU2V0dGluZ3MuaW5pdGlhbFJwY1RpbWVvdXRNaWxsaXMgPz89XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNTZXR0aW5ncy50aW1lb3V0O1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoMCwgcmV0cmllc18xLnJldHJ5YWJsZSkoZnVuYywgdGhpc1NldHRpbmdzLnJldHJ5LCB0aGlzU2V0dGluZ3Mub3RoZXJBcmdzLCB0aGlzU2V0dGluZ3MuYXBpTmFtZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuICgwLCB0aW1lb3V0XzEuYWRkVGltZW91dEFyZykoZnVuYywgdGhpc1NldHRpbmdzLnRpbWVvdXQsIHRoaXNTZXR0aW5ncy5vdGhlckFyZ3MpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuKChhcGlDYWxsKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIEFmdGVyIGFkZGluZyByZXRyaWVzIC8gdGltZW91dHMsIHRoZSBjYWxsIGZ1bmN0aW9uIGJlY29tZXMgc2ltcGxlcjpcclxuICAgICAgICAgICAgLy8gaXQgb25seSBhY2NlcHRzIHJlcXVlc3QgYW5kIGNhbGxiYWNrLlxyXG4gICAgICAgICAgICBjdXJyZW50QXBpQ2FsbGVyLmNhbGwoYXBpQ2FsbCwgcmVxdWVzdCwgdGhpc1NldHRpbmdzLCBvbmdvaW5nQ2FsbCk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLmNhdGNoKGVyciA9PiB7XHJcbiAgICAgICAgICAgIGN1cnJlbnRBcGlDYWxsZXIuZmFpbChvbmdvaW5nQ2FsbCwgZXJyKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBDYWxscyBub3JtYWxseSByZXR1cm4gYSBcImNhbmNlbGxhYmxlIHByb21pc2VcIiB0aGF0IGNhbiBiZSB1c2VkIHRvIGBhd2FpdGAgZm9yIHRoZSBhY3R1YWwgcmVzdWx0LFxyXG4gICAgICAgIC8vIG9yIHRvIGNhbmNlbCB0aGUgb25nb2luZyBjYWxsLlxyXG4gICAgICAgIHJldHVybiBjdXJyZW50QXBpQ2FsbGVyLnJlc3VsdChvbmdvaW5nQ2FsbCk7XHJcbiAgICB9O1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0ZUFwaUNhbGwuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/createApiCall.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/descriptor.js":
/*!*********************************************************!*\
  !*** ./node_modules/google-gax/build/src/descriptor.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.BundleDescriptor = exports.StreamDescriptor = exports.PageDescriptor = exports.LongrunningDescriptor = void 0;\r\nvar longRunningDescriptor_1 = __webpack_require__(/*! ./longRunningCalls/longRunningDescriptor */ \"(rsc)/./node_modules/google-gax/build/src/longRunningCalls/longRunningDescriptor.js\");\r\nObject.defineProperty(exports, \"LongrunningDescriptor\", ({ enumerable: true, get: function () { return longRunningDescriptor_1.LongRunningDescriptor; } }));\r\nvar pageDescriptor_1 = __webpack_require__(/*! ./paginationCalls/pageDescriptor */ \"(rsc)/./node_modules/google-gax/build/src/paginationCalls/pageDescriptor.js\");\r\nObject.defineProperty(exports, \"PageDescriptor\", ({ enumerable: true, get: function () { return pageDescriptor_1.PageDescriptor; } }));\r\nvar streamDescriptor_1 = __webpack_require__(/*! ./streamingCalls/streamDescriptor */ \"(rsc)/./node_modules/google-gax/build/src/streamingCalls/streamDescriptor.js\");\r\nObject.defineProperty(exports, \"StreamDescriptor\", ({ enumerable: true, get: function () { return streamDescriptor_1.StreamDescriptor; } }));\r\nvar bundleDescriptor_1 = __webpack_require__(/*! ./bundlingCalls/bundleDescriptor */ \"(rsc)/./node_modules/google-gax/build/src/bundlingCalls/bundleDescriptor.js\");\r\nObject.defineProperty(exports, \"BundleDescriptor\", ({ enumerable: true, get: function () { return bundleDescriptor_1.BundleDescriptor; } }));\r\n//# sourceMappingURL=descriptor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvZGVzY3JpcHRvci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx3QkFBd0IsR0FBRyx3QkFBd0IsR0FBRyxzQkFBc0IsR0FBRyw2QkFBNkI7QUFDNUcsOEJBQThCLG1CQUFPLENBQUMscUlBQTBDO0FBQ2hGLHlEQUF3RCxFQUFFLHFDQUFxQyx5REFBeUQsRUFBQztBQUN6Six1QkFBdUIsbUJBQU8sQ0FBQyxxSEFBa0M7QUFDakUsa0RBQWlELEVBQUUscUNBQXFDLDJDQUEyQyxFQUFDO0FBQ3BJLHlCQUF5QixtQkFBTyxDQUFDLHVIQUFtQztBQUNwRSxvREFBbUQsRUFBRSxxQ0FBcUMsK0NBQStDLEVBQUM7QUFDMUkseUJBQXlCLG1CQUFPLENBQUMscUhBQWtDO0FBQ25FLG9EQUFtRCxFQUFFLHFDQUFxQywrQ0FBK0MsRUFBQztBQUMxSSIsInNvdXJjZXMiOlsid2VicGFjazovL2RhbmlzaC1idWRkeS8uL25vZGVfbW9kdWxlcy9nb29nbGUtZ2F4L2J1aWxkL3NyYy9kZXNjcmlwdG9yLmpzP2NkYTAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8qKlxyXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5CdW5kbGVEZXNjcmlwdG9yID0gZXhwb3J0cy5TdHJlYW1EZXNjcmlwdG9yID0gZXhwb3J0cy5QYWdlRGVzY3JpcHRvciA9IGV4cG9ydHMuTG9uZ3J1bm5pbmdEZXNjcmlwdG9yID0gdm9pZCAwO1xyXG52YXIgbG9uZ1J1bm5pbmdEZXNjcmlwdG9yXzEgPSByZXF1aXJlKFwiLi9sb25nUnVubmluZ0NhbGxzL2xvbmdSdW5uaW5nRGVzY3JpcHRvclwiKTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTG9uZ3J1bm5pbmdEZXNjcmlwdG9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBsb25nUnVubmluZ0Rlc2NyaXB0b3JfMS5Mb25nUnVubmluZ0Rlc2NyaXB0b3I7IH0gfSk7XHJcbnZhciBwYWdlRGVzY3JpcHRvcl8xID0gcmVxdWlyZShcIi4vcGFnaW5hdGlvbkNhbGxzL3BhZ2VEZXNjcmlwdG9yXCIpO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJQYWdlRGVzY3JpcHRvclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcGFnZURlc2NyaXB0b3JfMS5QYWdlRGVzY3JpcHRvcjsgfSB9KTtcclxudmFyIHN0cmVhbURlc2NyaXB0b3JfMSA9IHJlcXVpcmUoXCIuL3N0cmVhbWluZ0NhbGxzL3N0cmVhbURlc2NyaXB0b3JcIik7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlN0cmVhbURlc2NyaXB0b3JcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN0cmVhbURlc2NyaXB0b3JfMS5TdHJlYW1EZXNjcmlwdG9yOyB9IH0pO1xyXG52YXIgYnVuZGxlRGVzY3JpcHRvcl8xID0gcmVxdWlyZShcIi4vYnVuZGxpbmdDYWxscy9idW5kbGVEZXNjcmlwdG9yXCIpO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJCdW5kbGVEZXNjcmlwdG9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBidW5kbGVEZXNjcmlwdG9yXzEuQnVuZGxlRGVzY3JpcHRvcjsgfSB9KTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVzY3JpcHRvci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/descriptor.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/fallback.js":
/*!*******************************************************!*\
  !*** ./node_modules/google-gax/build/src/fallback.js ***!
  \*******************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || (function () {\r\n    var ownKeys = function(o) {\r\n        ownKeys = Object.getOwnPropertyNames || function (o) {\r\n            var ar = [];\r\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\r\n            return ar;\r\n        };\r\n        return ownKeys(o);\r\n    };\r\n    return function (mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\r\n        __setModuleDefault(result, mod);\r\n        return result;\r\n    };\r\n})();\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.fallback = exports.GoogleError = exports.operation = exports.Operation = exports.warn = exports.protobufMinimal = exports.protobuf = exports.LocationProtos = exports.IamProtos = exports.operationsProtos = exports.GrpcClient = exports.defaultToObjectOptions = exports.makeUUID = exports.LocationsClient = exports.IamClient = exports.OperationsClient = exports.StreamType = exports.StreamDescriptor = exports.PageDescriptor = exports.LongrunningDescriptor = exports.BundleDescriptor = exports.version = exports.createDefaultBackoffSettings = exports.RetryOptions = exports.constructSettings = exports.CallSettings = exports.routingHeader = exports.PathTemplate = void 0;\r\nexports.lro = lro;\r\nexports.createApiCall = createApiCall;\r\nconst object_hash_1 = __importDefault(__webpack_require__(/*! object-hash */ \"(rsc)/./node_modules/object-hash/index.js\"));\r\nconst protobuf = __importStar(__webpack_require__(/*! protobufjs */ \"(rsc)/./node_modules/protobufjs/index.js\"));\r\nexports.protobuf = protobuf;\r\nconst gax = __importStar(__webpack_require__(/*! ./gax */ \"(rsc)/./node_modules/google-gax/build/src/gax.js\"));\r\nconst routingHeader = __importStar(__webpack_require__(/*! ./routingHeader */ \"(rsc)/./node_modules/google-gax/build/src/routingHeader.js\"));\r\nexports.routingHeader = routingHeader;\r\nconst status_1 = __webpack_require__(/*! ./status */ \"(rsc)/./node_modules/google-gax/build/src/status.js\");\r\nconst google_auth_library_1 = __webpack_require__(/*! google-auth-library */ \"(rsc)/./node_modules/google-auth-library/build/src/index.js\");\r\nconst operationsClient_1 = __webpack_require__(/*! ./operationsClient */ \"(rsc)/./node_modules/google-gax/build/src/operationsClient.js\");\r\nconst createApiCall_1 = __webpack_require__(/*! ./createApiCall */ \"(rsc)/./node_modules/google-gax/build/src/createApiCall.js\");\r\nconst fallbackRest = __importStar(__webpack_require__(/*! ./fallbackRest */ \"(rsc)/./node_modules/google-gax/build/src/fallbackRest.js\"));\r\nconst featureDetection_1 = __webpack_require__(/*! ./featureDetection */ \"(rsc)/./node_modules/google-gax/build/src/featureDetection.js\");\r\nconst fallbackServiceStub_1 = __webpack_require__(/*! ./fallbackServiceStub */ \"(rsc)/./node_modules/google-gax/build/src/fallbackServiceStub.js\");\r\nconst streaming_1 = __webpack_require__(/*! ./streamingCalls/streaming */ \"(rsc)/./node_modules/google-gax/build/src/streamingCalls/streaming.js\");\r\nconst util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/google-gax/build/src/util.js\");\r\nconst IamProtos = __importStar(__webpack_require__(/*! ../protos/iam_service */ \"(rsc)/./node_modules/google-gax/build/protos/iam_service.js\"));\r\nexports.IamProtos = IamProtos;\r\nconst LocationProtos = __importStar(__webpack_require__(/*! ../protos/locations */ \"(rsc)/./node_modules/google-gax/build/protos/locations.js\"));\r\nexports.LocationProtos = LocationProtos;\r\nconst operationsProtos = __importStar(__webpack_require__(/*! ../protos/operations */ \"(rsc)/./node_modules/google-gax/build/protos/operations.js\"));\r\nexports.operationsProtos = operationsProtos;\r\nvar pathTemplate_1 = __webpack_require__(/*! ./pathTemplate */ \"(rsc)/./node_modules/google-gax/build/src/pathTemplate.js\");\r\nObject.defineProperty(exports, \"PathTemplate\", ({ enumerable: true, get: function () { return pathTemplate_1.PathTemplate; } }));\r\nvar gax_1 = __webpack_require__(/*! ./gax */ \"(rsc)/./node_modules/google-gax/build/src/gax.js\");\r\nObject.defineProperty(exports, \"CallSettings\", ({ enumerable: true, get: function () { return gax_1.CallSettings; } }));\r\nObject.defineProperty(exports, \"constructSettings\", ({ enumerable: true, get: function () { return gax_1.constructSettings; } }));\r\nObject.defineProperty(exports, \"RetryOptions\", ({ enumerable: true, get: function () { return gax_1.RetryOptions; } }));\r\nObject.defineProperty(exports, \"createDefaultBackoffSettings\", ({ enumerable: true, get: function () { return gax_1.createDefaultBackoffSettings; } }));\r\nexports.version = (__webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/google-gax/package.json\").version) + '-fallback';\r\nvar descriptor_1 = __webpack_require__(/*! ./descriptor */ \"(rsc)/./node_modules/google-gax/build/src/descriptor.js\");\r\nObject.defineProperty(exports, \"BundleDescriptor\", ({ enumerable: true, get: function () { return descriptor_1.BundleDescriptor; } }));\r\nObject.defineProperty(exports, \"LongrunningDescriptor\", ({ enumerable: true, get: function () { return descriptor_1.LongrunningDescriptor; } }));\r\nObject.defineProperty(exports, \"PageDescriptor\", ({ enumerable: true, get: function () { return descriptor_1.PageDescriptor; } }));\r\nObject.defineProperty(exports, \"StreamDescriptor\", ({ enumerable: true, get: function () { return descriptor_1.StreamDescriptor; } }));\r\nvar streaming_2 = __webpack_require__(/*! ./streamingCalls/streaming */ \"(rsc)/./node_modules/google-gax/build/src/streamingCalls/streaming.js\");\r\nObject.defineProperty(exports, \"StreamType\", ({ enumerable: true, get: function () { return streaming_2.StreamType; } }));\r\nvar operationsClient_2 = __webpack_require__(/*! ./operationsClient */ \"(rsc)/./node_modules/google-gax/build/src/operationsClient.js\");\r\nObject.defineProperty(exports, \"OperationsClient\", ({ enumerable: true, get: function () { return operationsClient_2.OperationsClient; } }));\r\nvar iamService_1 = __webpack_require__(/*! ./iamService */ \"(rsc)/./node_modules/google-gax/build/src/iamService.js\");\r\nObject.defineProperty(exports, \"IamClient\", ({ enumerable: true, get: function () { return iamService_1.IamClient; } }));\r\nvar locationService_1 = __webpack_require__(/*! ./locationService */ \"(rsc)/./node_modules/google-gax/build/src/locationService.js\");\r\nObject.defineProperty(exports, \"LocationsClient\", ({ enumerable: true, get: function () { return locationService_1.LocationsClient; } }));\r\nvar util_2 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/google-gax/build/src/util.js\");\r\nObject.defineProperty(exports, \"makeUUID\", ({ enumerable: true, get: function () { return util_2.makeUUID; } }));\r\nexports.defaultToObjectOptions = {\r\n    keepCase: false,\r\n    longs: String,\r\n    enums: String,\r\n    defaults: true,\r\n    oneofs: true,\r\n};\r\nconst CLIENT_VERSION_HEADER = 'x-goog-api-client';\r\nclass GrpcClient {\r\n    auth;\r\n    /**\r\n     * @deprecated use {@link GrpcClient.auth} instead\r\n     */\r\n    authClient;\r\n    fallback;\r\n    grpcVersion;\r\n    static protoCache = new Map();\r\n    httpRules;\r\n    numericEnums;\r\n    minifyJson;\r\n    /**\r\n     * In rare cases users might need to deallocate all memory consumed by loaded protos.\r\n     * This method will delete the proto cache content.\r\n     */\r\n    static clearProtoCache() {\r\n        GrpcClient.protoCache.clear();\r\n    }\r\n    /**\r\n     * gRPC-fallback version of GrpcClient\r\n     * Implements GrpcClient API for a browser using grpc-fallback protocol (sends serialized protobuf to HTTP/1 $rpc endpoint).\r\n     *\r\n     * @param options {@link GrpcClientOptions}\r\n     */\r\n    constructor(options = {}) {\r\n        if (options.auth) {\r\n            this.auth = options.auth;\r\n        }\r\n        else if ('authClient' in options) {\r\n            this.auth = options.authClient;\r\n        }\r\n        else {\r\n            this.auth = new google_auth_library_1.GoogleAuth({\r\n                authClient: options.auth,\r\n                ...options,\r\n            });\r\n        }\r\n        this.fallback = options.fallback ? true : false;\r\n        this.grpcVersion = (__webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/google-gax/package.json\").version);\r\n        this.httpRules = options.httpRules;\r\n        this.numericEnums = options.numericEnums ?? false;\r\n        this.minifyJson = options.minifyJson ?? false;\r\n    }\r\n    /**\r\n     * gRPC-fallback version of loadProto\r\n     * Loads the protobuf root object from a JSON object created from a proto file\r\n     * @param {Object} jsonObject - A JSON version of a protofile created usin protobuf.js\r\n     * @returns {Object} Root namespace of proto JSON\r\n     */\r\n    loadProto(jsonObject) {\r\n        const rootObject = protobuf.Root.fromJSON(jsonObject);\r\n        return rootObject;\r\n    }\r\n    loadProtoJSON(json, ignoreCache = false) {\r\n        const hash = (0, object_hash_1.default)(JSON.stringify(json)).toString();\r\n        const cached = GrpcClient.protoCache.get(hash);\r\n        if (cached && !ignoreCache) {\r\n            return cached;\r\n        }\r\n        const root = protobuf.Root.fromJSON(json);\r\n        GrpcClient.protoCache.set(hash, root);\r\n        return root;\r\n    }\r\n    static getServiceMethods(service) {\r\n        const methods = {};\r\n        for (const [methodName, methodObject] of Object.entries(service.methods)) {\r\n            const methodNameLowerCamelCase = (0, util_1.toLowerCamelCase)(methodName);\r\n            methods[methodNameLowerCamelCase] = methodObject;\r\n        }\r\n        return methods;\r\n    }\r\n    /**\r\n     * gRPC-fallback version of constructSettings\r\n     * A wrapper of {@link constructSettings} function under the gRPC context.\r\n     *\r\n     * Most of parameters are common among constructSettings, please take a look.\r\n     * @param {string} serviceName - The fullly-qualified name of the service.\r\n     * @param {Object} clientConfig - A dictionary of the client config.\r\n     * @param {Object} configOverrides - A dictionary of overriding configs.\r\n     * @param {Object} headers - A dictionary of additional HTTP header name to\r\n     *   its value.\r\n     * @return {Object} A mapping of method names to CallSettings.\r\n     */\r\n    constructSettings(serviceName, clientConfig, configOverrides, headers) {\r\n        function buildMetadata(abTests, moreHeaders) {\r\n            const metadata = {};\r\n            if (!headers) {\r\n                headers = {};\r\n            }\r\n            // Since gRPC expects each header to be an array,\r\n            // we are doing the same for fallback here.\r\n            for (const key in headers) {\r\n                metadata[key] = Array.isArray(headers[key])\r\n                    ? headers[key]\r\n                    : [headers[key]];\r\n            }\r\n            // gRPC-fallback request must have 'grpc-web/' in 'x-goog-api-client'\r\n            const clientVersions = [];\r\n            if (metadata[CLIENT_VERSION_HEADER] &&\r\n                metadata[CLIENT_VERSION_HEADER][0]) {\r\n                clientVersions.push(...metadata[CLIENT_VERSION_HEADER][0].split(' '));\r\n            }\r\n            clientVersions.push(`grpc-web/${exports.version}`);\r\n            metadata[CLIENT_VERSION_HEADER] = [clientVersions.join(' ')];\r\n            if (!moreHeaders) {\r\n                return metadata;\r\n            }\r\n            for (const key in moreHeaders) {\r\n                if (key.toLowerCase() !== CLIENT_VERSION_HEADER) {\r\n                    const value = moreHeaders[key];\r\n                    if (Array.isArray(value)) {\r\n                        if (metadata[key] === undefined) {\r\n                            metadata[key] = value;\r\n                        }\r\n                        else {\r\n                            if (Array.isArray(metadata[key])) {\r\n                                metadata[key].push(...value);\r\n                            }\r\n                            else {\r\n                                throw new Error(`Can not add value ${value} to the call metadata.`);\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        metadata[key] = [value];\r\n                    }\r\n                }\r\n            }\r\n            return metadata;\r\n        }\r\n        return gax.constructSettings(serviceName, clientConfig, configOverrides, status_1.Status, { metadataBuilder: buildMetadata });\r\n    }\r\n    /**\r\n     * gRPC-fallback version of createStub\r\n     * Creates a gRPC-fallback stub with authentication headers built from supplied `AuthClient` instance\r\n     *\r\n     * @param {function} CreateStub - The constructor function of the stub.\r\n     * @param {Object} service - A protobufjs Service object (as returned by lookupService)\r\n     * @param {Object} opts - Connection options, as described below.\r\n     * @param {string} opts.servicePath - The hostname of the API endpoint service.\r\n     * @param {number} opts.port - The port of the service.\r\n     * @return {Promise} A promise which resolves to a gRPC-fallback service stub, which is a protobuf.js service stub instance modified to match the gRPC stub API\r\n     */\r\n    async createStub(service, opts, \r\n    // For consistency with createStub in grpc.ts, customServicePath is defined:\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    customServicePath) {\r\n        if (!this.authClient) {\r\n            if (this.auth && 'getClient' in this.auth) {\r\n                this.authClient = await this.auth.getClient();\r\n            }\r\n            else if (this.auth && 'getRequestHeaders' in this.auth) {\r\n                this.authClient = this.auth;\r\n            }\r\n        }\r\n        if (!this.authClient) {\r\n            throw new Error('No authentication was provided');\r\n        }\r\n        if (!opts.universeDomain) {\r\n            opts.universeDomain = 'googleapis.com';\r\n        }\r\n        if (opts.universeDomain) {\r\n            const universeFromAuth = this.authClient.universeDomain;\r\n            if (universeFromAuth && opts.universeDomain !== universeFromAuth) {\r\n                throw new Error(`The configured universe domain (${opts.universeDomain}) does not match the universe domain found in the credentials (${universeFromAuth}). ` +\r\n                    \"If you haven't configured the universe domain explicitly, googleapis.com is the default.\");\r\n            }\r\n        }\r\n        service.resolveAll();\r\n        const methods = GrpcClient.getServiceMethods(service);\r\n        const protocol = opts.protocol || 'https';\r\n        let servicePath = opts.servicePath;\r\n        if (!servicePath &&\r\n            service.options &&\r\n            service.options['(google.api.default_host)']) {\r\n            servicePath = service.options['(google.api.default_host)'];\r\n        }\r\n        if (!servicePath) {\r\n            throw new Error(`Cannot determine service API path for service ${service.name}.`);\r\n        }\r\n        let servicePort;\r\n        const match = servicePath.match(/^(.*):(\\d+)$/);\r\n        if (match) {\r\n            servicePath = match[1];\r\n            servicePort = parseInt(match[2]);\r\n        }\r\n        if (opts.port) {\r\n            servicePort = opts.port;\r\n        }\r\n        else if (!servicePort) {\r\n            servicePort = 443;\r\n        }\r\n        const encoder = fallbackRest.encodeRequest;\r\n        const decoder = fallbackRest.decodeResponse;\r\n        const serviceStub = (0, fallbackServiceStub_1.generateServiceStub)(methods, protocol, servicePath, servicePort, this.auth || this.authClient, encoder, decoder, this.numericEnums, this.minifyJson);\r\n        return serviceStub;\r\n    }\r\n    /**\r\n     * Creates a 'bytelength' function for a given proto message class.\r\n     *\r\n     * See {@link BundleDescriptor} about the meaning of the return value.\r\n     *\r\n     * @param {function} message - a constructor function that is generated by\r\n     *   protobuf.js. Assumes 'encoder' field in the message.\r\n     * @return {function(Object):number} - a function to compute the byte length\r\n     *   for an object.\r\n     */\r\n    static createByteLengthFunction(message) {\r\n        return gax.createByteLengthFunction(message);\r\n    }\r\n}\r\nexports.GrpcClient = GrpcClient;\r\n/**\r\n * gRPC-fallback version of lro\r\n *\r\n * @param {Object=} options.auth - An instance of google-auth-library.\r\n * @return {Object} A OperationsClientBuilder that will return a OperationsClient\r\n */\r\nfunction lro(options) {\r\n    options = Object.assign({ scopes: [] }, options);\r\n    if (options.protoJson) {\r\n        options = Object.assign(options, { fallback: true });\r\n    }\r\n    const gaxGrpc = new GrpcClient(options);\r\n    return new operationsClient_1.OperationsClientBuilder(gaxGrpc, options.protoJson);\r\n}\r\n/**\r\n * gRPC-fallback version of createApiCall\r\n *\r\n * Converts an rpc call into an API call governed by the settings.\r\n *\r\n * In typical usage, `func` will be a promise to a callable used to make an rpc\r\n * request. This will mostly likely be a bound method from a request stub used\r\n * to make an rpc call. It is not a direct function but a Promise instance,\r\n * because of its asynchronism (typically, obtaining the auth information).\r\n *\r\n * The result is a function which manages the API call with the given settings\r\n * and the options on the invocation.\r\n *\r\n * Throws exception on unsupported streaming calls\r\n *\r\n * @param {Promise<GRPCCall>|GRPCCall} func - is either a promise to be used to make\r\n *   a bare RPC call, or just a bare RPC call.\r\n * @param {CallSettings} settings - provides the settings for this call\r\n * @param {Descriptor} descriptor - optionally specify the descriptor for\r\n *   the method call.\r\n * @return {GaxCall} func - a bound method on a request stub used\r\n *   to make an rpc call.\r\n */\r\nfunction createApiCall(func, settings, descriptor, \r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n_fallback) {\r\n    if (descriptor &&\r\n        'streaming' in descriptor &&\r\n        descriptor.type !== streaming_1.StreamType.SERVER_STREAMING) {\r\n        return () => {\r\n            throw new Error('The REST transport currently does not support client-streaming or bidi-stream calls.');\r\n        };\r\n    }\r\n    if (descriptor && 'streaming' in descriptor && !(0, featureDetection_1.isNodeJS)()) {\r\n        // TODO: with `fetch` this functionality is available in the browser...\r\n        return () => {\r\n            throw new Error('Server streaming over the REST transport is only supported in Node.js.');\r\n        };\r\n    }\r\n    return (0, createApiCall_1.createApiCall)(func, settings, descriptor);\r\n}\r\nexports.protobufMinimal = __importStar(__webpack_require__(/*! protobufjs/minimal */ \"(rsc)/./node_modules/protobufjs/minimal.js\"));\r\nvar warnings_1 = __webpack_require__(/*! ./warnings */ \"(rsc)/./node_modules/google-gax/build/src/warnings.js\");\r\nObject.defineProperty(exports, \"warn\", ({ enumerable: true, get: function () { return warnings_1.warn; } }));\r\nvar longrunning_1 = __webpack_require__(/*! ./longRunningCalls/longrunning */ \"(rsc)/./node_modules/google-gax/build/src/longRunningCalls/longrunning.js\");\r\nObject.defineProperty(exports, \"Operation\", ({ enumerable: true, get: function () { return longrunning_1.Operation; } }));\r\nObject.defineProperty(exports, \"operation\", ({ enumerable: true, get: function () { return longrunning_1.operation; } }));\r\nvar googleError_1 = __webpack_require__(/*! ./googleError */ \"(rsc)/./node_modules/google-gax/build/src/googleError.js\");\r\nObject.defineProperty(exports, \"GoogleError\", ({ enumerable: true, get: function () { return googleError_1.GoogleError; } }));\r\n// Different environments or bundlers may or may not respect \"browser\" field\r\n// in package.json (e.g. Electron does not respect it, but if you run the code\r\n// through webpack first, it will follow the \"browser\" field).\r\n// To make it safer and more compatible, let's make sure that if you do\r\n// const gax = require(\"google-gax\");\r\n// you can always ask for gax.fallback, regardless of \"browser\" field being\r\n// understood or not.\r\nconst fallback = module.exports;\r\nexports.fallback = fallback;\r\n//# sourceMappingURL=fallback.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/fallback.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/fallbackRest.js":
/*!***********************************************************!*\
  !*** ./node_modules/google-gax/build/src/fallbackRest.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\r\n/**\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || (function () {\r\n    var ownKeys = function(o) {\r\n        ownKeys = Object.getOwnPropertyNames || function (o) {\r\n            var ar = [];\r\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\r\n            return ar;\r\n        };\r\n        return ownKeys(o);\r\n    };\r\n    return function (mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\r\n        __setModuleDefault(result, mod);\r\n        return result;\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.encodeRequest = encodeRequest;\r\nexports.decodeResponse = decodeResponse;\r\n// proto-over-HTTP request encoding and decoding\r\nconst serializer = __importStar(__webpack_require__(/*! proto3-json-serializer */ \"(rsc)/./node_modules/proto3-json-serializer/build/src/index.js\"));\r\nconst fallback_1 = __webpack_require__(/*! ./fallback */ \"(rsc)/./node_modules/google-gax/build/src/fallback.js\");\r\nconst googleError_1 = __webpack_require__(/*! ./googleError */ \"(rsc)/./node_modules/google-gax/build/src/googleError.js\");\r\nconst transcoding_1 = __webpack_require__(/*! ./transcoding */ \"(rsc)/./node_modules/google-gax/build/src/transcoding.js\");\r\nfunction encodeRequest(rpc, protocol, servicePath, servicePort, request, numericEnums, minifyJson) {\r\n    const headers = {\r\n        'Content-Type': 'application/json',\r\n    };\r\n    const message = rpc.resolvedRequestType.fromObject(request);\r\n    const json = serializer.toProto3JSON(message, {\r\n        numericEnums,\r\n    });\r\n    if (!json) {\r\n        throw new Error(`Cannot send null request to RPC ${rpc.name}.`);\r\n    }\r\n    if (typeof json !== 'object' || Array.isArray(json)) {\r\n        throw new Error(`Request to RPC ${rpc.name} must be an object.`);\r\n    }\r\n    const transcoded = (0, transcoding_1.transcode)(json, rpc.parsedOptions);\r\n    if (!transcoded) {\r\n        throw new Error(`Cannot build HTTP request for ${JSON.stringify(json)}, method: ${rpc.name}`);\r\n    }\r\n    // If numeric enums feature is requested, add extra parameter to the query string\r\n    if (numericEnums) {\r\n        transcoded.queryString =\r\n            (transcoded.queryString ? `${transcoded.queryString}&` : '') +\r\n                '$alt=json%3Benum-encoding=int';\r\n    }\r\n    // If minifyJson feature is requested, disable pretty-print JSON responses\r\n    if (minifyJson) {\r\n        transcoded.queryString =\r\n            (transcoded.queryString ? `${transcoded.queryString}&` : '') +\r\n                '$prettyPrint=0';\r\n    }\r\n    // Converts httpMethod to method that permitted in standard Fetch API spec\r\n    // https://fetch.spec.whatwg.org/#methods\r\n    const method = transcoded.httpMethod.toUpperCase();\r\n    const body = JSON.stringify(transcoded.data);\r\n    const url = `${protocol}://${servicePath}:${servicePort}/${transcoded.url.replace(/^\\//, '')}?${transcoded.queryString}`;\r\n    return {\r\n        method,\r\n        url,\r\n        headers,\r\n        body,\r\n    };\r\n}\r\nfunction decodeResponse(rpc, ok, response) {\r\n    // eslint-disable-next-line n/no-unsupported-features/node-builtins\r\n    const decodedString = new TextDecoder().decode(response);\r\n    if (!decodedString) {\r\n        throw new Error(`Received null response from RPC ${rpc.name}`);\r\n    }\r\n    const json = JSON.parse(decodedString);\r\n    if (!ok) {\r\n        const error = googleError_1.GoogleError.parseHttpError(json);\r\n        throw error;\r\n    }\r\n    const message = serializer.fromProto3JSON(rpc.resolvedResponseType, json);\r\n    if (!message) {\r\n        throw new Error(`Received null or malformed response from JSON serializer from RPC ${rpc.name}`);\r\n    }\r\n    return rpc.resolvedResponseType.toObject(message, fallback_1.defaultToObjectOptions);\r\n}\r\n//# sourceMappingURL=fallbackRest.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/fallbackRest.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/fallbackServiceStub.js":
/*!******************************************************************!*\
  !*** ./node_modules/google-gax/build/src/fallbackServiceStub.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\n/**\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.generateServiceStub = generateServiceStub;\r\nconst abort_controller_1 = __webpack_require__(/*! abort-controller */ \"(rsc)/./node_modules/abort-controller/dist/abort-controller.js\");\r\nconst google_auth_library_1 = __webpack_require__(/*! google-auth-library */ \"(rsc)/./node_modules/google-auth-library/build/src/index.js\");\r\nconst featureDetection_1 = __webpack_require__(/*! ./featureDetection */ \"(rsc)/./node_modules/google-gax/build/src/featureDetection.js\");\r\nconst streamArrayParser_1 = __webpack_require__(/*! ./streamArrayParser */ \"(rsc)/./node_modules/google-gax/build/src/streamArrayParser.js\");\r\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\r\nconst fetchNode = (...args) => Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/google-gax\"), __webpack_require__.e(\"vendor-chunks/fetch-blob\"), __webpack_require__.e(\"vendor-chunks/formdata-polyfill\"), __webpack_require__.e(\"vendor-chunks/data-uri-to-buffer\"), __webpack_require__.e(\"vendor-chunks/node-domexception\")]).then(__webpack_require__.bind(__webpack_require__, /*! node-fetch */ \"(rsc)/./node_modules/google-gax/node_modules/node-fetch/src/index.js\")).then(({ default: fetch }) => fetch(...args));\r\n// Node.js before v19 does not enable keepalive by default.\r\n// We'll try to enable it very carefully to make sure we don't break possible non-Node use cases.\r\n// TODO: remove this after Node 18 is EOL.\r\n// More info:\r\n// - https://github.com/node-fetch/node-fetch#custom-agent\r\n// - https://github.com/googleapis/gax-nodejs/pull/1534\r\nlet agentOption = null;\r\nif ((0, featureDetection_1.isNodeJS)()) {\r\n    const http = __webpack_require__(/*! http */ \"http\");\r\n    const https = __webpack_require__(/*! https */ \"https\");\r\n    const httpAgent = new http.Agent({ keepAlive: true });\r\n    const httpsAgent = new https.Agent({ keepAlive: true });\r\n    agentOption = (parsedUrl) => {\r\n        if (parsedUrl.protocol === 'http:') {\r\n            return httpAgent;\r\n        }\r\n        return httpsAgent;\r\n    };\r\n}\r\nfunction generateServiceStub(rpcs, protocol, servicePath, servicePort, auth, requestEncoder, responseDecoder, numericEnums, minifyJson) {\r\n    const fetch = (0, featureDetection_1.hasWindowFetch)()\r\n        ? window.fetch\r\n        : fetchNode;\r\n    const serviceStub = {\r\n        // close method should close all cancel controllers. If this feature request in the future, we can have a cancelControllerFactory that tracks created cancel controllers, and abort them all in close method.\r\n        close: () => {\r\n            return { cancel: () => { } };\r\n        },\r\n    };\r\n    for (const [rpcName, rpc] of Object.entries(rpcs)) {\r\n        serviceStub[rpcName] = (request, options, _metadata, callback) => {\r\n            options ??= {};\r\n            // We cannot use async-await in this function because we need to return the canceller object as soon as possible.\r\n            // Using plain old promises instead.\r\n            let fetchParameters;\r\n            try {\r\n                fetchParameters = requestEncoder(rpc, protocol, servicePath, servicePort, request, numericEnums, minifyJson);\r\n            }\r\n            catch (err) {\r\n                // we could not encode parameters; pass error to the callback\r\n                // and return a no-op canceler object.\r\n                if (callback) {\r\n                    callback(err);\r\n                }\r\n                return {\r\n                    cancel() { },\r\n                };\r\n            }\r\n            const cancelController = (0, featureDetection_1.hasAbortController)()\r\n                ? new AbortController()\r\n                : new abort_controller_1.AbortController();\r\n            const cancelSignal = cancelController.signal;\r\n            let cancelRequested = false;\r\n            const url = fetchParameters.url;\r\n            const headers = new Headers(fetchParameters.headers);\r\n            for (const key of Object.keys(options)) {\r\n                headers.set(key, options[key][0]);\r\n            }\r\n            const streamArrayParser = new streamArrayParser_1.StreamArrayParser(rpc);\r\n            auth\r\n                .getRequestHeaders()\r\n                .then(authHeader => {\r\n                const fetchRequest = {\r\n                    headers: google_auth_library_1.gaxios.Gaxios.mergeHeaders(authHeader, headers),\r\n                    body: fetchParameters.body,\r\n                    method: fetchParameters.method,\r\n                    signal: cancelSignal,\r\n                };\r\n                if (agentOption) {\r\n                    fetchRequest.agent = agentOption;\r\n                }\r\n                if (fetchParameters.method === 'GET' ||\r\n                    fetchParameters.method === 'DELETE') {\r\n                    delete fetchRequest['body'];\r\n                }\r\n                return fetch(url, fetchRequest);\r\n            })\r\n                .then((response) => {\r\n                if (response.ok && rpc.responseStream) {\r\n                    (0, stream_1.pipeline)(response.body, streamArrayParser, (err) => {\r\n                        if (err &&\r\n                            (!cancelRequested ||\r\n                                (err instanceof Error && err.name !== 'AbortError'))) {\r\n                            if (callback) {\r\n                                callback(err);\r\n                            }\r\n                            streamArrayParser.emit('error', err);\r\n                        }\r\n                    });\r\n                    return;\r\n                }\r\n                else {\r\n                    return Promise.all([\r\n                        Promise.resolve(response.ok),\r\n                        response.arrayBuffer(),\r\n                    ])\r\n                        .then(([ok, buffer]) => {\r\n                        const response = responseDecoder(rpc, ok, buffer);\r\n                        callback(null, response);\r\n                    })\r\n                        .catch((err) => {\r\n                        if (!cancelRequested || err.name !== 'AbortError') {\r\n                            if (rpc.responseStream) {\r\n                                if (callback) {\r\n                                    callback(err);\r\n                                }\r\n                                streamArrayParser.emit('error', err);\r\n                            }\r\n                            else if (callback) {\r\n                                callback(err);\r\n                            }\r\n                            else {\r\n                                throw err;\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            })\r\n                .catch((err) => {\r\n                if (rpc.responseStream) {\r\n                    if (callback) {\r\n                        callback(err);\r\n                    }\r\n                    streamArrayParser.emit('error', err);\r\n                }\r\n                else if (callback) {\r\n                    callback(err);\r\n                }\r\n                else {\r\n                    throw err;\r\n                }\r\n            });\r\n            if (rpc.responseStream) {\r\n                return streamArrayParser;\r\n            }\r\n            return {\r\n                cancel: () => {\r\n                    cancelRequested = true;\r\n                    cancelController.abort();\r\n                },\r\n            };\r\n        };\r\n    }\r\n    return serviceStub;\r\n}\r\n//# sourceMappingURL=fallbackServiceStub.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/fallbackServiceStub.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/featureDetection.js":
/*!***************************************************************!*\
  !*** ./node_modules/google-gax/build/src/featureDetection.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\r\n/**\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.hasWindowFetch = hasWindowFetch;\r\nexports.isNodeJS = isNodeJS;\r\nexports.hasAbortController = hasAbortController;\r\n/* global window */\r\nconst features = {\r\n    windowFetch: typeof window !== 'undefined' &&\r\n        window?.fetch &&\r\n        typeof window?.fetch === 'function',\r\n    // eslint-disable-next-line n/no-unsupported-features/node-builtins\r\n    textEncoder: typeof TextEncoder !== 'undefined',\r\n    // eslint-disable-next-line n/no-unsupported-features/node-builtins\r\n    textDecoder: typeof TextDecoder !== 'undefined',\r\n    nodeJS: typeof process !== 'undefined' && process?.versions?.node,\r\n    abortController: typeof AbortController !== 'undefined',\r\n};\r\nfunction hasWindowFetch() {\r\n    return features.windowFetch;\r\n}\r\nfunction isNodeJS() {\r\n    return features.nodeJS;\r\n}\r\nfunction hasAbortController() {\r\n    return features.abortController;\r\n}\r\n//# sourceMappingURL=featureDetection.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvZmVhdHVyZURldGVjdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0I7QUFDdEIsZ0JBQWdCO0FBQ2hCLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2RhbmlzaC1idWRkeS8uL25vZGVfbW9kdWxlcy9nb29nbGUtZ2F4L2J1aWxkL3NyYy9mZWF0dXJlRGV0ZWN0aW9uLmpzPzM0YjkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8qKlxyXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5oYXNXaW5kb3dGZXRjaCA9IGhhc1dpbmRvd0ZldGNoO1xyXG5leHBvcnRzLmlzTm9kZUpTID0gaXNOb2RlSlM7XHJcbmV4cG9ydHMuaGFzQWJvcnRDb250cm9sbGVyID0gaGFzQWJvcnRDb250cm9sbGVyO1xyXG4vKiBnbG9iYWwgd2luZG93ICovXHJcbmNvbnN0IGZlYXR1cmVzID0ge1xyXG4gICAgd2luZG93RmV0Y2g6IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXHJcbiAgICAgICAgd2luZG93Py5mZXRjaCAmJlxyXG4gICAgICAgIHR5cGVvZiB3aW5kb3c/LmZldGNoID09PSAnZnVuY3Rpb24nLFxyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG4vbm8tdW5zdXBwb3J0ZWQtZmVhdHVyZXMvbm9kZS1idWlsdGluc1xyXG4gICAgdGV4dEVuY29kZXI6IHR5cGVvZiBUZXh0RW5jb2RlciAhPT0gJ3VuZGVmaW5lZCcsXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbi9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zXHJcbiAgICB0ZXh0RGVjb2RlcjogdHlwZW9mIFRleHREZWNvZGVyICE9PSAndW5kZWZpbmVkJyxcclxuICAgIG5vZGVKUzogdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHByb2Nlc3M/LnZlcnNpb25zPy5ub2RlLFxyXG4gICAgYWJvcnRDb250cm9sbGVyOiB0eXBlb2YgQWJvcnRDb250cm9sbGVyICE9PSAndW5kZWZpbmVkJyxcclxufTtcclxuZnVuY3Rpb24gaGFzV2luZG93RmV0Y2goKSB7XHJcbiAgICByZXR1cm4gZmVhdHVyZXMud2luZG93RmV0Y2g7XHJcbn1cclxuZnVuY3Rpb24gaXNOb2RlSlMoKSB7XHJcbiAgICByZXR1cm4gZmVhdHVyZXMubm9kZUpTO1xyXG59XHJcbmZ1bmN0aW9uIGhhc0Fib3J0Q29udHJvbGxlcigpIHtcclxuICAgIHJldHVybiBmZWF0dXJlcy5hYm9ydENvbnRyb2xsZXI7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmVhdHVyZURldGVjdGlvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/featureDetection.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/gax.js":
/*!**************************************************!*\
  !*** ./node_modules/google-gax/build/src/gax.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.CallSettings = exports.RetryOptions = void 0;\r\nexports.convertRetryOptions = convertRetryOptions;\r\nexports.createRetryOptions = createRetryOptions;\r\nexports.createBackoffSettings = createBackoffSettings;\r\nexports.createDefaultBackoffSettings = createDefaultBackoffSettings;\r\nexports.createMaxRetriesBackoffSettings = createMaxRetriesBackoffSettings;\r\nexports.createBundleOptions = createBundleOptions;\r\nexports.constructSettings = constructSettings;\r\nexports.createByteLengthFunction = createByteLengthFunction;\r\nconst warnings_1 = __webpack_require__(/*! ./warnings */ \"(rsc)/./node_modules/google-gax/build/src/warnings.js\");\r\nconst util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/google-gax/build/src/util.js\");\r\nconst status_1 = __webpack_require__(/*! ./status */ \"(rsc)/./node_modules/google-gax/build/src/status.js\");\r\n/**\r\n * Encapsulates the overridable settings for a particular API call.\r\n *\r\n * ``CallOptions`` is an optional arg for all GAX API calls.  It is used to\r\n * configure the settings of a specific API call.\r\n *\r\n * When provided, its values override the GAX service defaults for that\r\n * particular call.\r\n *\r\n * Typically the API clients will accept this as the second to the last\r\n * argument. See the examples below.\r\n * @typedef {Object} CallOptions\r\n * @property {number=} timeout - The client-side timeout for API calls.\r\n * @property {RetryOptions=} retry - determines whether and how to retry\r\n *   on transient errors. When set to null, the call will not retry.\r\n * @property {boolean=} autoPaginate - If set to false and the call is\r\n *   configured for paged iteration, page unrolling is not performed, instead\r\n *   the callback will be called with the response object.\r\n * @property {Object=} pageToken - If set and the call is configured for\r\n *   paged iteration, paged iteration is not performed and requested with this\r\n *   pageToken.\r\n * @property {number} maxResults - If set and the call is configured for\r\n *   paged iteration, the call will stop when the number of response elements\r\n *   reaches to the specified size. By default, it will unroll the page to\r\n *   the end of the list.\r\n * @property {boolean=} isBundling - If set to false and the call is configured\r\n *   for bundling, bundling is not performed.\r\n * @property {BackoffSettings=} longrunning - BackoffSettings used for polling.\r\n * @example\r\n * // suppress bundling for bundled method.\r\n * api.bundlingMethod(\r\n *     param, {optParam: aValue, isBundling: false}, function(err, response) {\r\n *   // handle response.\r\n * });\r\n * @example\r\n * // suppress streaming for page-streaming method.\r\n * api.pageStreamingMethod(\r\n *     param, {optParam: aValue, autoPaginate: false}, function(err, page) {\r\n *   // not returning a stream, but callback is called with the paged response.\r\n * });\r\n */\r\n/**\r\n * Per-call configurable settings for retrying upon transient failure.\r\n * @implements {RetryOptionsType}\r\n * @typedef {Object} RetryOptions\r\n * @property {number[]} retryCodes\r\n * @property {BackoffSettings} backoffSettings\r\n * @property {(function)} shouldRetryFn\r\n * @property {(function)} getResumptionRequestFn\r\n */\r\nclass RetryOptions {\r\n    retryCodes;\r\n    backoffSettings;\r\n    shouldRetryFn;\r\n    getResumptionRequestFn;\r\n    constructor(retryCodes, backoffSettings, shouldRetryFn, getResumptionRequestFn) {\r\n        this.retryCodes = retryCodes;\r\n        this.backoffSettings = backoffSettings;\r\n        this.shouldRetryFn = shouldRetryFn;\r\n        this.getResumptionRequestFn = getResumptionRequestFn;\r\n    }\r\n}\r\nexports.RetryOptions = RetryOptions;\r\nclass CallSettings {\r\n    timeout;\r\n    retry;\r\n    autoPaginate;\r\n    pageToken;\r\n    pageSize;\r\n    maxResults;\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    otherArgs;\r\n    bundleOptions;\r\n    isBundling;\r\n    longrunning;\r\n    apiName;\r\n    retryRequestOptions;\r\n    /**\r\n     * @param {Object} settings - An object containing parameters of this settings.\r\n     * @param {number} settings.timeout - The client-side timeout for API calls.\r\n     *   This parameter is ignored for retrying calls.\r\n     * @param {RetryOptions} settings.retry - The configuration for retrying upon\r\n     *   transient error. If set to null, this call will not retry.\r\n     * @param {boolean} settings.autoPaginate - If there is no `pageDescriptor`,\r\n     *   this attrbute has no meaning. Otherwise, determines whether a page\r\n     * streamed response should make the page structure transparent to the user by\r\n     *   flattening the repeated field in the returned generator.\r\n     * @param {number} settings.pageToken - If there is no `pageDescriptor`,\r\n     *   this attribute has no meaning. Otherwise, determines the page token used\r\n     * in the page streaming request.\r\n     * @param {Object} settings.otherArgs - Additional arguments to be passed to\r\n     *   the API calls.\r\n     *\r\n     * @constructor\r\n     */\r\n    constructor(settings) {\r\n        settings = settings || {};\r\n        this.timeout = settings.timeout || 30 * 1000;\r\n        this.retry = settings.retry;\r\n        this.autoPaginate =\r\n            'autoPaginate' in settings ? settings.autoPaginate : true;\r\n        this.maxResults = settings.maxResults;\r\n        this.otherArgs = settings.otherArgs || {};\r\n        this.bundleOptions = settings.bundleOptions;\r\n        this.isBundling = 'isBundling' in settings ? settings.isBundling : true;\r\n        this.longrunning =\r\n            'longrunning' in settings ? settings.longrunning : undefined;\r\n        this.apiName = settings.apiName ?? undefined;\r\n        this.retryRequestOptions = settings.retryRequestOptions;\r\n    }\r\n    /**\r\n     * Returns a new CallSettings merged from this and a CallOptions object.\r\n     *\r\n     * @param {CallOptions} options - an instance whose values override\r\n     *   those in this object. If null, ``merge`` returns a copy of this\r\n     *   object\r\n     * @return {CallSettings} The merged CallSettings instance.\r\n     */\r\n    merge(options) {\r\n        if (!options) {\r\n            return new CallSettings(this);\r\n        }\r\n        let timeout = this.timeout;\r\n        let retry = this.retry;\r\n        let autoPaginate = this.autoPaginate;\r\n        let maxResults = this.maxResults;\r\n        let otherArgs = this.otherArgs;\r\n        let isBundling = this.isBundling;\r\n        let longrunning = this.longrunning;\r\n        let apiName = this.apiName;\r\n        let retryRequestOptions = this.retryRequestOptions;\r\n        // If the user provides a timeout to the method, that timeout value will be used\r\n        // to override the backoff settings.\r\n        if ('timeout' in options) {\r\n            timeout = options.timeout;\r\n        }\r\n        // If a method-specific timeout is set in the service config, and the retry codes for that\r\n        // method are non-null, then that timeout value will be used to\r\n        // override backoff settings.\r\n        if (retry?.retryCodes) {\r\n            retry.backoffSettings.initialRpcTimeoutMillis = timeout;\r\n            retry.backoffSettings.maxRpcTimeoutMillis = timeout;\r\n            retry.backoffSettings.totalTimeoutMillis = timeout;\r\n        }\r\n        if ('retry' in options) {\r\n            retry = mergeRetryOptions(retry || {}, options.retry);\r\n        }\r\n        if ('autoPaginate' in options && !options.autoPaginate) {\r\n            autoPaginate = false;\r\n        }\r\n        if ('maxResults' in options) {\r\n            maxResults = options.maxResults;\r\n        }\r\n        if ('otherArgs' in options) {\r\n            otherArgs = {};\r\n            for (const key in this.otherArgs) {\r\n                otherArgs[key] = this.otherArgs[key];\r\n            }\r\n            for (const optionsKey in options.otherArgs) {\r\n                otherArgs[optionsKey] = options.otherArgs[optionsKey];\r\n            }\r\n        }\r\n        if ('isBundling' in options) {\r\n            isBundling = options.isBundling;\r\n        }\r\n        if ('maxRetries' in options && options.maxRetries !== undefined) {\r\n            retry.backoffSettings.maxRetries = options.maxRetries;\r\n            delete retry.backoffSettings.totalTimeoutMillis;\r\n        }\r\n        if ('longrunning' in options) {\r\n            longrunning = options.longrunning;\r\n        }\r\n        if ('apiName' in options) {\r\n            apiName = options.apiName;\r\n        }\r\n        if ('retryRequestOptions' in options) {\r\n            retryRequestOptions = options.retryRequestOptions;\r\n        }\r\n        return new CallSettings({\r\n            timeout,\r\n            retry,\r\n            bundleOptions: this.bundleOptions,\r\n            longrunning,\r\n            autoPaginate,\r\n            maxResults,\r\n            otherArgs,\r\n            isBundling,\r\n            apiName,\r\n            retryRequestOptions,\r\n        });\r\n    }\r\n}\r\nexports.CallSettings = CallSettings;\r\n/**\r\n * Validates passed retry options in preparation for eventual parameter deprecation\r\n * converts retryRequestOptions to retryOptions\r\n * then sets retryRequestOptions to null\r\n *\r\n * @param {CallOptions} options - a list of passed retry option\r\n * @return {CallOptions} A new CallOptions object.\r\n *\r\n */\r\nfunction convertRetryOptions(options, gaxStreamingRetries) {\r\n    // options will be undefined if no CallOptions object is passed at call time\r\n    if (!options) {\r\n        return options;\r\n    }\r\n    // if a user provided retry AND retryRequestOptions at call time, throw an error\r\n    // otherwise, convert supported parameters\r\n    if (!gaxStreamingRetries) {\r\n        return options;\r\n    }\r\n    if (options.retry && options.retryRequestOptions) {\r\n        throw new Error('Only one of retry or retryRequestOptions may be set');\r\n    } // handles parameter conversion from retryRequestOptions to retryOptions\r\n    if (options.retryRequestOptions) {\r\n        if (options.retryRequestOptions.objectMode !== undefined) {\r\n            (0, warnings_1.warn)('retry_request_options', 'objectMode override is not supported. It is set to true internally by default in gax.', 'UnsupportedParameterWarning');\r\n        }\r\n        if (options.retryRequestOptions.noResponseRetries !== undefined) {\r\n            (0, warnings_1.warn)('retry_request_options', 'noResponseRetries override is not supported. Please specify retry codes or a function to determine retry eligibility.', 'UnsupportedParameterWarning');\r\n        }\r\n        if (options.retryRequestOptions.currentRetryAttempt !== undefined) {\r\n            (0, warnings_1.warn)('retry_request_options', 'currentRetryAttempt override is not supported. Retry attempts are tracked internally.', 'UnsupportedParameterWarning');\r\n        }\r\n        let retryCodes = [status_1.Status.UNAVAILABLE];\r\n        let shouldRetryFn;\r\n        if (options.retryRequestOptions.shouldRetryFn) {\r\n            retryCodes = [];\r\n            shouldRetryFn = options.retryRequestOptions.shouldRetryFn;\r\n        }\r\n        //Backoff settings\r\n        options.maxRetries =\r\n            options?.retryRequestOptions?.retries ?? options.maxRetries;\r\n        // create a default backoff settings object in case the user didn't provide overrides for everything\r\n        const backoffSettings = createDefaultBackoffSettings();\r\n        let maxRetryDelayMillis;\r\n        let totalTimeoutMillis;\r\n        // maxRetryDelay - this is in seconds, need to convert to milliseconds\r\n        if (options.retryRequestOptions.maxRetryDelay !== undefined) {\r\n            maxRetryDelayMillis = options.retryRequestOptions.maxRetryDelay * 1000;\r\n        }\r\n        // retryDelayMultiplier - should be a one to one mapping to retryDelayMultiplier\r\n        const retryDelayMultiplier = options?.retryRequestOptions?.retryDelayMultiplier ??\r\n            backoffSettings.retryDelayMultiplier;\r\n        // this is in seconds and needs to be converted to milliseconds and the totalTimeoutMillis parameter\r\n        if (options.retryRequestOptions.totalTimeout !== undefined) {\r\n            totalTimeoutMillis = options.retryRequestOptions.totalTimeout * 1000;\r\n        }\r\n        else {\r\n            if (options.maxRetries === undefined) {\r\n                totalTimeoutMillis = 30000;\r\n                (0, warnings_1.warn)('retry_request_options_no_max_retries_timeout', 'Neither maxRetries nor totalTimeout were passed. Defaulting to totalTimeout of 30000ms.', 'MissingParameterWarning');\r\n            }\r\n        }\r\n        // for the variables the user wants to override, override in the backoff settings object we made\r\n        backoffSettings.maxRetryDelayMillis =\r\n            maxRetryDelayMillis ?? backoffSettings.maxRetryDelayMillis;\r\n        backoffSettings.retryDelayMultiplier =\r\n            retryDelayMultiplier ?? backoffSettings.retryDelayMultiplier;\r\n        backoffSettings.totalTimeoutMillis =\r\n            totalTimeoutMillis ?? backoffSettings.totalTimeoutMillis;\r\n        const convertedRetryOptions = createRetryOptions(retryCodes, backoffSettings, shouldRetryFn);\r\n        options.retry = convertedRetryOptions;\r\n        delete options.retryRequestOptions; // completely remove them to avoid any further confusion\r\n        (0, warnings_1.warn)('retry_request_options', 'retryRequestOptions will be deprecated in a future release. Please use retryOptions to pass retry options at call time', 'DeprecationWarning');\r\n    }\r\n    return options;\r\n}\r\n/**\r\n * Per-call configurable settings for retrying upon transient failure.\r\n * @param {number[]} retryCodes - a list of Google API canonical error codes OR a function that returns a boolean to determine retry behavior\r\n *   upon which a retry should be attempted.\r\n * @param {BackoffSettings} backoffSettings - configures the retry\r\n *   exponential backoff algorithm.\r\n * @param {function} shouldRetryFn - a function that determines whether a call should retry. If this is defined retryCodes must be empty\r\n * @param {function} getResumptionRequestFn - a function with a resumption strategy - only used with server streaming retries\r\n * @return {RetryOptions} A new RetryOptions object.\r\n *\r\n */\r\nfunction createRetryOptions(retryCodes, backoffSettings, shouldRetryFn, getResumptionRequestFn) {\r\n    return {\r\n        retryCodes,\r\n        backoffSettings,\r\n        shouldRetryFn,\r\n        getResumptionRequestFn,\r\n    };\r\n}\r\n/**\r\n * Parameters to the exponential backoff algorithm for retrying.\r\n *\r\n * @param {number} initialRetryDelayMillis - the initial delay time,\r\n *   in milliseconds, between the completion of the first failed request and the\r\n *   initiation of the first retrying request.\r\n * @param {number} retryDelayMultiplier - the multiplier by which to\r\n *   increase the delay time between the completion of failed requests, and the\r\n *   initiation of the subsequent retrying request.\r\n * @param {number} maxRetryDelayMillis - the maximum delay time, in\r\n *   milliseconds, between requests. When this value is reached,\r\n *   ``retryDelayMultiplier`` will no longer be used to increase delay time.\r\n * @param {number} initialRpcTimeoutMillis - the initial timeout parameter\r\n *   to the request.\r\n * @param {number} rpcTimeoutMultiplier - the multiplier by which to\r\n *   increase the timeout parameter between failed requests.\r\n * @param {number} maxRpcTimeoutMillis - the maximum timeout parameter, in\r\n *   milliseconds, for a request. When this value is reached,\r\n *   ``rpcTimeoutMultiplier`` will no longer be used to increase the timeout.\r\n * @param {number} totalTimeoutMillis - the total time, in milliseconds,\r\n *   starting from when the initial request is sent, after which an error will\r\n *   be returned, regardless of the retrying attempts made meanwhile.\r\n * @return {BackoffSettings} a new settings.\r\n *\r\n */\r\nfunction createBackoffSettings(initialRetryDelayMillis, retryDelayMultiplier, maxRetryDelayMillis, initialRpcTimeoutMillis, rpcTimeoutMultiplier, maxRpcTimeoutMillis, totalTimeoutMillis) {\r\n    return {\r\n        initialRetryDelayMillis,\r\n        retryDelayMultiplier,\r\n        maxRetryDelayMillis,\r\n        initialRpcTimeoutMillis,\r\n        rpcTimeoutMultiplier,\r\n        maxRpcTimeoutMillis,\r\n        totalTimeoutMillis,\r\n    };\r\n}\r\nfunction createDefaultBackoffSettings() {\r\n    return createBackoffSettings(100, 1.3, 60000, null, null, null, null);\r\n}\r\n/**\r\n * Parameters to the exponential backoff algorithm for retrying.\r\n * This function is unsupported, and intended for internal use only.\r\n *\r\n * @param {number} initialRetryDelayMillis - the initial delay time,\r\n *   in milliseconds, between the completion of the first failed request and the\r\n *   initiation of the first retrying request.\r\n * @param {number} retryDelayMultiplier - the multiplier by which to\r\n *   increase the delay time between the completion of failed requests, and the\r\n *   initiation of the subsequent retrying request.\r\n * @param {number} maxRetryDelayMillis - the maximum delay time, in\r\n *   milliseconds, between requests. When this value is reached,\r\n *   ``retryDelayMultiplier`` will no longer be used to increase delay time.\r\n * @param {number} initialRpcTimeoutMillis - the initial timeout parameter\r\n *   to the request.\r\n * @param {number} rpcTimeoutMultiplier - the multiplier by which to\r\n *   increase the timeout parameter between failed requests.\r\n * @param {number} maxRpcTimeoutMillis - the maximum timeout parameter, in\r\n *   milliseconds, for a request. When this value is reached,\r\n *   ``rpcTimeoutMultiplier`` will no longer be used to increase the timeout.\r\n * @param {number} maxRetries - the maximum number of retrying attempts that\r\n *   will be made. If reached, an error will be returned.\r\n * @return {BackoffSettings} a new settings.\r\n *\r\n */\r\nfunction createMaxRetriesBackoffSettings(initialRetryDelayMillis, retryDelayMultiplier, maxRetryDelayMillis, initialRpcTimeoutMillis, rpcTimeoutMultiplier, maxRpcTimeoutMillis, maxRetries) {\r\n    return {\r\n        initialRetryDelayMillis,\r\n        retryDelayMultiplier,\r\n        maxRetryDelayMillis,\r\n        initialRpcTimeoutMillis,\r\n        rpcTimeoutMultiplier,\r\n        maxRpcTimeoutMillis,\r\n        maxRetries,\r\n    };\r\n}\r\n/**\r\n * Creates a new {@link BundleOptions}.\r\n *\r\n * @private\r\n * @param {Object} options - An object to hold optional parameters. See\r\n *   properties for the content of options.\r\n * @return {BundleOptions} - A new options.\r\n */\r\nfunction createBundleOptions(options) {\r\n    const params = [\r\n        'element_count_threshold',\r\n        'element_count_limit',\r\n        'request_byte_threshold',\r\n        'request_byte_limit',\r\n        'delay_threshold_millis',\r\n    ];\r\n    params.forEach(param => {\r\n        if (param in options && typeof options[param] !== 'number') {\r\n            throw new Error(`${param} should be a number`);\r\n        }\r\n    });\r\n    const elementCountThreshold = options.element_count_threshold || 0;\r\n    const elementCountLimit = options.element_count_limit || 0;\r\n    const requestByteThreshold = options.request_byte_threshold || 0;\r\n    const requestByteLimit = options.request_byte_limit || 0;\r\n    const delayThreshold = options.delay_threshold_millis || 0;\r\n    if (elementCountThreshold === 0 &&\r\n        requestByteThreshold === 0 &&\r\n        delayThreshold === 0) {\r\n        throw new Error('one threshold should be > 0');\r\n    }\r\n    return {\r\n        elementCountThreshold,\r\n        elementCountLimit,\r\n        requestByteThreshold,\r\n        requestByteLimit,\r\n        delayThreshold,\r\n    };\r\n}\r\n/**\r\n * Helper for {@link constructSettings}\r\n *\r\n * @private\r\n *\r\n * @param {Object} methodConfig - A dictionary representing a single\r\n *   `methods` entry of the standard API client config file. (See\r\n *   {@link constructSettings} for information on this yaml.)\r\n * @param {?Object} retryCodes - A dictionary parsed from the\r\n *   `retry_codes_def` entry of the standard API client config\r\n *   file. (See {@link constructSettings} for information on this yaml.)\r\n * @param {Object} retryParams - A dictionary parsed from the\r\n *   `retry_params` entry of the standard API client config\r\n *   file. (See {@link constructSettings} for information on this yaml.)\r\n * @param {Object} retryNames - A dictionary mapping the string names\r\n *   used in the standard API client config file to API response\r\n *   status codes.\r\n * @return {?RetryOptions} The new retry options.\r\n */\r\nfunction constructRetry(methodConfig, retryCodes, retryParams, retryNames) {\r\n    if (!methodConfig) {\r\n        return null;\r\n    }\r\n    let codes = null; // this is one instance where it will NOT be an array OR a function because we do not allow shouldRetryFn in the client\r\n    if (retryCodes && 'retry_codes_name' in methodConfig) {\r\n        const retryCodesName = methodConfig['retry_codes_name'];\r\n        codes = (retryCodes[retryCodesName] || []).map(name => {\r\n            return Number(retryNames[name]);\r\n        });\r\n    }\r\n    let backoffSettings = null;\r\n    if (retryParams && 'retry_params_name' in methodConfig) {\r\n        const params = retryParams[methodConfig.retry_params_name];\r\n        backoffSettings = createBackoffSettings(params.initial_retry_delay_millis, params.retry_delay_multiplier, params.max_retry_delay_millis, params.initial_rpc_timeout_millis, params.rpc_timeout_multiplier, params.max_rpc_timeout_millis, params.total_timeout_millis);\r\n    }\r\n    return createRetryOptions(codes, backoffSettings);\r\n}\r\n/**\r\n * Helper for {@link constructSettings}\r\n *\r\n * Takes two retry options, and merges them into a single RetryOption instance.\r\n *\r\n * @private\r\n *\r\n * @param {RetryOptions} retry - The base RetryOptions.\r\n * @param {RetryOptions} overrides - The RetryOptions used for overriding\r\n *   `retry`. Use the values if it is not null. If entire `overrides` is null,\r\n *   ignore the base retry and return null.\r\n * @return {?RetryOptions} The merged RetryOptions.\r\n */\r\nfunction mergeRetryOptions(retry, overrides) {\r\n    if (!overrides) {\r\n        return null;\r\n    }\r\n    if (!overrides.retryCodes &&\r\n        !overrides.backoffSettings &&\r\n        !overrides.shouldRetryFn &&\r\n        !overrides.getResumptionRequestFn) {\r\n        return retry;\r\n    }\r\n    const retryCodes = overrides.retryCodes\r\n        ? overrides.retryCodes\r\n        : retry.retryCodes;\r\n    const backoffSettings = overrides.backoffSettings\r\n        ? overrides.backoffSettings\r\n        : retry.backoffSettings;\r\n    const shouldRetryFn = overrides.shouldRetryFn\r\n        ? overrides.shouldRetryFn\r\n        : retry.shouldRetryFn;\r\n    const getResumptionRequestFn = overrides.getResumptionRequestFn\r\n        ? overrides.getResumptionRequestFn\r\n        : retry.getResumptionRequestFn;\r\n    return createRetryOptions(retryCodes, backoffSettings, shouldRetryFn, getResumptionRequestFn);\r\n}\r\n/**\r\n * Constructs a dictionary mapping method names to {@link CallSettings}.\r\n *\r\n * The `clientConfig` parameter is parsed from a client configuration JSON\r\n * file of the form:\r\n *\r\n *     {\r\n *       \"interfaces\": {\r\n *         \"google.fake.v1.ServiceName\": {\r\n *           \"retry_codes\": {\r\n *             \"idempotent\": [\"UNAVAILABLE\", \"DEADLINE_EXCEEDED\"],\r\n *             \"non_idempotent\": []\r\n *           },\r\n *           \"retry_params\": {\r\n *             \"default\": {\r\n *               \"initial_retry_delay_millis\": 100,\r\n *               \"retry_delay_multiplier\": 1.2,\r\n *               \"max_retry_delay_millis\": 1000,\r\n *               \"initial_rpc_timeout_millis\": 2000,\r\n *               \"rpc_timeout_multiplier\": 1.5,\r\n *               \"max_rpc_timeout_millis\": 30000,\r\n *               \"total_timeout_millis\": 45000\r\n *             }\r\n *           },\r\n *           \"methods\": {\r\n *             \"CreateFoo\": {\r\n *               \"retry_codes_name\": \"idempotent\",\r\n *               \"retry_params_name\": \"default\"\r\n *             },\r\n *             \"Publish\": {\r\n *               \"retry_codes_name\": \"non_idempotent\",\r\n *               \"retry_params_name\": \"default\",\r\n *               \"bundling\": {\r\n *                 \"element_count_threshold\": 40,\r\n *                 \"element_count_limit\": 200,\r\n *                 \"request_byte_threshold\": 90000,\r\n *                 \"request_byte_limit\": 100000,\r\n *                 \"delay_threshold_millis\": 100\r\n *               }\r\n *             }\r\n *           }\r\n *         }\r\n *       }\r\n *     }\r\n *\r\n * @param {String} serviceName - The fully-qualified name of this\r\n *   service, used as a key into the client config file (in the\r\n *   example above, this value should be 'google.fake.v1.ServiceName').\r\n * @param {Object} clientConfig - A dictionary parsed from the\r\n *   standard API client config file.\r\n * @param {Object} configOverrides - A dictionary in the same structure of\r\n *   client_config to override the settings.\r\n * @param {Object.<string, string[]>} retryNames - A dictionary mapping the strings\r\n *   referring to response status codes to objects representing\r\n *   those codes.\r\n * @param {Object} otherArgs - the non-request arguments to be passed to the API\r\n *   calls.\r\n * @return {Object} A mapping from method name to CallSettings, or null if the\r\n *   service is not found in the config.\r\n */\r\nfunction constructSettings(serviceName, clientConfig, configOverrides, retryNames, otherArgs) {\r\n    otherArgs = otherArgs || {};\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    const defaults = {};\r\n    const serviceConfig = (clientConfig.interfaces || {})[serviceName];\r\n    if (!serviceConfig) {\r\n        return null;\r\n    }\r\n    // users can override the config from client side, like bundling options.\r\n    // The detailed structure of the clientConfig can be found here: https://github.com/googleapis/gax-nodejs/blob/main/src/gax.ts#L546\r\n    // The way to override bundling options:\r\n    //\r\n    // const customConfig = {\"interfaces\": {\"service\": {\"methods\": {\"methodName\": {\"bundling\": {..}}}}}}\r\n    // const client = new Client({ projectId, customConfig });\r\n    const overrides = (configOverrides.interfaces || {})[serviceName] || {};\r\n    const methods = serviceConfig.methods;\r\n    const overridingMethods = overrides.methods || {};\r\n    for (const methodName in methods) {\r\n        const methodConfig = methods[methodName];\r\n        const jsName = (0, util_1.toLowerCamelCase)(methodName);\r\n        let retry = constructRetry(methodConfig, serviceConfig.retry_codes, serviceConfig.retry_params, retryNames);\r\n        let bundlingConfig = methodConfig.bundling;\r\n        let timeout = methodConfig.timeout_millis;\r\n        if (methodName in overridingMethods) {\r\n            const overridingMethod = overridingMethods[methodName];\r\n            if (overridingMethod) {\r\n                if ('bundling' in overridingMethod) {\r\n                    bundlingConfig = overridingMethod.bundling;\r\n                }\r\n                if ('timeout_millis' in overridingMethod) {\r\n                    timeout = overridingMethod.timeout_millis;\r\n                }\r\n            }\r\n            retry = mergeRetryOptions(retry, constructRetry(overridingMethod, overrides.retry_codes, overrides.retry_params, retryNames));\r\n        }\r\n        const apiName = serviceName;\r\n        defaults[jsName] = new CallSettings({\r\n            timeout,\r\n            retry,\r\n            bundleOptions: bundlingConfig\r\n                ? createBundleOptions(bundlingConfig)\r\n                : null,\r\n            otherArgs,\r\n            apiName,\r\n        });\r\n    }\r\n    return defaults;\r\n}\r\nfunction createByteLengthFunction(message) {\r\n    return function getByteLength(obj) {\r\n        try {\r\n            return message.encode(obj).finish().length;\r\n        }\r\n        catch (err) {\r\n            const stringified = JSON.stringify(obj);\r\n            (0, warnings_1.warn)('error_encoding_protobufjs_object', `Cannot encode protobuf.js object: ${stringified}: ${err}`);\r\n            // We failed to encode the object properly, let's just return an upper boundary of its length.\r\n            // It's only needed for calculating the size of the batch, so it's safe if it's bigger than needed.\r\n            return stringified.length;\r\n        }\r\n    };\r\n}\r\n//# sourceMappingURL=gax.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/gax.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/googleError.js":
/*!**********************************************************!*\
  !*** ./node_modules/google-gax/build/src/googleError.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\r\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || (function () {\r\n    var ownKeys = function(o) {\r\n        ownKeys = Object.getOwnPropertyNames || function (o) {\r\n            var ar = [];\r\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\r\n            return ar;\r\n        };\r\n        return ownKeys(o);\r\n    };\r\n    return function (mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\r\n        __setModuleDefault(result, mod);\r\n        return result;\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.GoogleErrorDecoder = exports.GoogleError = void 0;\r\nconst status_1 = __webpack_require__(/*! ./status */ \"(rsc)/./node_modules/google-gax/build/src/status.js\");\r\nconst protobuf = __importStar(__webpack_require__(/*! protobufjs */ \"(rsc)/./node_modules/protobufjs/index.js\"));\r\nconst serializer = __importStar(__webpack_require__(/*! proto3-json-serializer */ \"(rsc)/./node_modules/proto3-json-serializer/build/src/index.js\"));\r\nconst fallback_1 = __webpack_require__(/*! ./fallback */ \"(rsc)/./node_modules/google-gax/build/src/fallback.js\");\r\nclass GoogleError extends Error {\r\n    code;\r\n    note;\r\n    metadata;\r\n    statusDetails;\r\n    reason;\r\n    domain;\r\n    errorInfoMetadata;\r\n    // Parse details field in google.rpc.status wire over gRPC medatadata.\r\n    // Promote google.rpc.ErrorInfo if exist.\r\n    static parseGRPCStatusDetails(err) {\r\n        const decoder = new GoogleErrorDecoder();\r\n        try {\r\n            if (err.metadata && err.metadata.get('grpc-status-details-bin')) {\r\n                const statusDetailsObj = decoder.decodeGRPCStatusDetails(err.metadata.get('grpc-status-details-bin'));\r\n                if (statusDetailsObj &&\r\n                    statusDetailsObj.details &&\r\n                    statusDetailsObj.details.length > 0) {\r\n                    err.statusDetails = statusDetailsObj.details;\r\n                }\r\n                if (statusDetailsObj && statusDetailsObj.errorInfo) {\r\n                    err.reason = statusDetailsObj.errorInfo.reason;\r\n                    err.domain = statusDetailsObj.errorInfo.domain;\r\n                    err.errorInfoMetadata = statusDetailsObj.errorInfo.metadata;\r\n                }\r\n            }\r\n        }\r\n        catch (decodeErr) {\r\n            // ignoring the error\r\n        }\r\n        return err;\r\n    }\r\n    // Parse http JSON error and promote google.rpc.ErrorInfo if exist.\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    static parseHttpError(json) {\r\n        if (Array.isArray(json)) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            json = json.find((obj) => {\r\n                return 'error' in obj;\r\n            });\r\n        }\r\n        // fallback logic.\r\n        // related issue: https://github.com/googleapis/gax-nodejs/issues/1303\r\n        // google error mapping: https://cloud.google.com/apis/design/errors\r\n        // if input json doesn't have 'error' fields, wrap the whole object with 'error' field\r\n        if (!json['error']) {\r\n            json['error'] = {};\r\n            Object.keys(json)\r\n                .filter(key => key !== 'error')\r\n                .forEach(key => {\r\n                json['error'][key] = json[key];\r\n                delete json[key];\r\n            });\r\n        }\r\n        const decoder = new GoogleErrorDecoder();\r\n        const proto3Error = decoder.decodeHTTPError(json['error']);\r\n        const error = Object.assign(new GoogleError(json['error']['message']), proto3Error);\r\n        // Get gRPC Status Code\r\n        if (json['error']['status'] &&\r\n            status_1.Status[json['error']['status']]) {\r\n            error.code = status_1.Status[json['error']['status']];\r\n        }\r\n        else if (json['error']['code']) {\r\n            // Map Http Status Code to gRPC Status Code\r\n            error.code = (0, status_1.rpcCodeFromHttpStatusCode)(json['error']['code']);\r\n        }\r\n        else {\r\n            // If error code is absent, proto3 message default value is 0. We should\r\n            // keep error code as undefined.\r\n            delete error.code;\r\n        }\r\n        // Keep consistency with gRPC statusDetails fields. gRPC details has been occupied before.\r\n        // Rename \"details\" to \"statusDetails\".\r\n        if (error.details) {\r\n            try {\r\n                const statusDetailsObj = decoder.decodeHttpStatusDetails(error.details);\r\n                if (statusDetailsObj &&\r\n                    statusDetailsObj.details &&\r\n                    statusDetailsObj.details.length > 0) {\r\n                    error.statusDetails = statusDetailsObj.details;\r\n                }\r\n                if (statusDetailsObj && statusDetailsObj.errorInfo) {\r\n                    error.reason = statusDetailsObj.errorInfo.reason;\r\n                    error.domain = statusDetailsObj.errorInfo.domain;\r\n                    // error.metadata has been occupied for gRPC metadata, so we use\r\n                    // errorInfoMetadata to represent ErrorInfo' metadata field. Keep\r\n                    // consistency with gRPC ErrorInfo metadata field name.\r\n                    error.errorInfoMetadata = statusDetailsObj.errorInfo.metadata;\r\n                }\r\n            }\r\n            catch (decodeErr) {\r\n                // ignoring the error\r\n            }\r\n        }\r\n        return error;\r\n    }\r\n}\r\nexports.GoogleError = GoogleError;\r\nclass GoogleErrorDecoder {\r\n    root;\r\n    anyType;\r\n    statusType;\r\n    constructor() {\r\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\r\n        const errorProtoJson = __webpack_require__(/*! ../../build/protos/status.json */ \"(rsc)/./node_modules/google-gax/build/protos/status.json\");\r\n        this.root = protobuf.Root.fromJSON(errorProtoJson);\r\n        this.anyType = this.root.lookupType('google.protobuf.Any');\r\n        this.statusType = this.root.lookupType('google.rpc.Status');\r\n    }\r\n    decodeProtobufAny(anyValue) {\r\n        const match = anyValue.type_url.match(/^type.googleapis.com\\/(.*)/);\r\n        if (!match) {\r\n            throw new Error(`Unknown type encoded in google.protobuf.any: ${anyValue.type_url}`);\r\n        }\r\n        const typeName = match[1];\r\n        const type = this.root.lookupType(typeName);\r\n        if (!type) {\r\n            throw new Error(`Cannot lookup type ${typeName}`);\r\n        }\r\n        return type.decode(anyValue.value);\r\n    }\r\n    // Decodes gRPC-fallback error which is an instance of google.rpc.Status.\r\n    decodeRpcStatus(buffer) {\r\n        const uint8array = new Uint8Array(buffer);\r\n        const status = this.statusType.decode(uint8array);\r\n        // google.rpc.Status contains an array of google.protobuf.Any\r\n        // which need a special treatment\r\n        const details = [];\r\n        let errorInfo;\r\n        for (const detail of status.details) {\r\n            try {\r\n                const decodedDetail = this.decodeProtobufAny(detail);\r\n                details.push(decodedDetail);\r\n                if (detail.type_url === 'type.googleapis.com/google.rpc.ErrorInfo') {\r\n                    errorInfo = decodedDetail;\r\n                }\r\n            }\r\n            catch (err) {\r\n                // cannot decode detail, likely because of the unknown type - just skip it\r\n            }\r\n        }\r\n        const result = {\r\n            code: status.code,\r\n            message: status.message,\r\n            statusDetails: details,\r\n            reason: errorInfo?.reason,\r\n            domain: errorInfo?.domain,\r\n            errorInfoMetadata: errorInfo?.metadata,\r\n        };\r\n        return result;\r\n    }\r\n    // Construct an Error from a StatusObject.\r\n    // Adapted from https://github.com/grpc/grpc-node/blob/main/packages/grpc-js/src/call.ts#L79\r\n    callErrorFromStatus(status) {\r\n        status.message = `${status.code} ${status_1.Status[status.code]}: ${status.message}`;\r\n        return Object.assign(new GoogleError(status.message), status);\r\n    }\r\n    // Decodes gRPC-fallback error which is an instance of google.rpc.Status,\r\n    // and puts it into the object similar to gRPC ServiceError object.\r\n    decodeErrorFromBuffer(buffer) {\r\n        return this.callErrorFromStatus(this.decodeRpcStatus(buffer));\r\n    }\r\n    // Decodes gRPC metadata error details which is an instance of google.rpc.Status.\r\n    decodeGRPCStatusDetails(bufferArr) {\r\n        const details = [];\r\n        let errorInfo;\r\n        bufferArr.forEach(buffer => {\r\n            const uint8array = new Uint8Array(buffer);\r\n            const rpcStatus = this.statusType.decode(uint8array);\r\n            for (const detail of rpcStatus.details) {\r\n                try {\r\n                    const decodedDetail = this.decodeProtobufAny(detail);\r\n                    details.push(decodedDetail);\r\n                    if (detail.type_url === 'type.googleapis.com/google.rpc.ErrorInfo') {\r\n                        errorInfo = decodedDetail;\r\n                    }\r\n                }\r\n                catch (err) {\r\n                    // cannot decode detail, likely because of the unknown type - just skip it\r\n                }\r\n            }\r\n        });\r\n        const result = {\r\n            details,\r\n            errorInfo,\r\n        };\r\n        return result;\r\n    }\r\n    // Decodes http error which is an instance of google.rpc.Status.\r\n    decodeHTTPError(json) {\r\n        const errorMessage = serializer.fromProto3JSON(this.statusType, json);\r\n        if (!errorMessage) {\r\n            throw new Error(`Received error message ${json}, but failed to serialize as proto3 message`);\r\n        }\r\n        return this.statusType.toObject(errorMessage, fallback_1.defaultToObjectOptions);\r\n    }\r\n    // Decodes http error details which is an instance of Array<google.protobuf.Any>.\r\n    decodeHttpStatusDetails(rawDetails) {\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        const details = [];\r\n        let errorInfo;\r\n        for (const detail of rawDetails) {\r\n            try {\r\n                const decodedDetail = this.decodeProtobufAny(detail);\r\n                details.push(decodedDetail);\r\n                if (detail.type_url === 'type.googleapis.com/google.rpc.ErrorInfo') {\r\n                    errorInfo = decodedDetail;\r\n                }\r\n            }\r\n            catch (err) {\r\n                // cannot decode detail, likely because of the unknown type - just skip it\r\n            }\r\n        }\r\n        return { details, errorInfo };\r\n    }\r\n}\r\nexports.GoogleErrorDecoder = GoogleErrorDecoder;\r\n//# sourceMappingURL=googleError.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/googleError.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/grpc.js":
/*!***************************************************!*\
  !*** ./node_modules/google-gax/build/src/grpc.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\r\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || (function () {\r\n    var ownKeys = function(o) {\r\n        ownKeys = Object.getOwnPropertyNames || function (o) {\r\n            var ar = [];\r\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\r\n            return ar;\r\n        };\r\n        return ownKeys(o);\r\n    };\r\n    return function (mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\r\n        __setModuleDefault(result, mod);\r\n        return result;\r\n    };\r\n})();\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.GoogleProtoFilesRoot = exports.GrpcClient = exports.ClientStub = void 0;\r\nconst grpcProtoLoader = __importStar(__webpack_require__(/*! @grpc/proto-loader */ \"(rsc)/./node_modules/@grpc/proto-loader/build/src/index.js\"));\r\nconst child_process_1 = __webpack_require__(/*! child_process */ \"child_process\");\r\nconst fs = __importStar(__webpack_require__(/*! fs */ \"fs\"));\r\nconst google_auth_library_1 = __webpack_require__(/*! google-auth-library */ \"(rsc)/./node_modules/google-auth-library/build/src/index.js\");\r\nconst grpc = __importStar(__webpack_require__(/*! @grpc/grpc-js */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/index.js\"));\r\nconst os = __importStar(__webpack_require__(/*! os */ \"os\"));\r\nconst path_1 = __webpack_require__(/*! path */ \"path\");\r\nconst path = __importStar(__webpack_require__(/*! path */ \"path\"));\r\nconst protobuf = __importStar(__webpack_require__(/*! protobufjs */ \"(rsc)/./node_modules/protobufjs/index.js\"));\r\nconst object_hash_1 = __importDefault(__webpack_require__(/*! object-hash */ \"(rsc)/./node_modules/object-hash/index.js\"));\r\nconst gax = __importStar(__webpack_require__(/*! ./gax */ \"(rsc)/./node_modules/google-gax/build/src/gax.js\"));\r\nconst googleProtoFilesDir = path.join(__dirname, '..', '..', 'build', 'protos');\r\n// INCLUDE_DIRS is passed to @grpc/proto-loader\r\nconst INCLUDE_DIRS = [];\r\nINCLUDE_DIRS.push(googleProtoFilesDir);\r\n// COMMON_PROTO_FILES logic is here for protobufjs loads (see\r\n// GoogleProtoFilesRoot below)\r\nconst protosList_json_1 = __importDefault(__webpack_require__(/*! ./protosList.json */ \"(rsc)/./node_modules/google-gax/build/src/protosList.json\"));\r\n// use the correct path separator for the OS we are running on\r\nconst COMMON_PROTO_FILES = protosList_json_1.default.map(file => file.replace(/[/\\\\]/g, path.sep));\r\n/*\r\n * Async version of readFile.\r\n *\r\n * @returns {Promise} Contents of file at path.\r\n */\r\nasync function readFileAsync(path) {\r\n    return new Promise((resolve, reject) => {\r\n        fs.readFile(path, 'utf8', (err, content) => {\r\n            if (err)\r\n                return reject(err);\r\n            else\r\n                resolve(content);\r\n        });\r\n    });\r\n}\r\n/*\r\n * Async version of execFile.\r\n *\r\n * @returns {Promise} stdout from command execution.\r\n */\r\nasync function execFileAsync(command, args) {\r\n    return new Promise((resolve, reject) => {\r\n        (0, child_process_1.execFile)(command, args, (err, stdout) => {\r\n            if (err)\r\n                return reject(err);\r\n            else\r\n                resolve(stdout);\r\n        });\r\n    });\r\n}\r\nclass ClientStub extends grpc.Client {\r\n}\r\nexports.ClientStub = ClientStub;\r\nclass GrpcClient {\r\n    auth;\r\n    grpc;\r\n    grpcVersion;\r\n    fallback;\r\n    static protoCache = new Map();\r\n    httpRules;\r\n    /**\r\n     * Key for proto cache map. We are doing our best to make sure we respect\r\n     * the options, so if the same proto file is loaded with different set of\r\n     * options, the cache won't be used.  Since some of the options are\r\n     * Functions (e.g. `enums: String` - see below in `loadProto()`),\r\n     * they will be omitted from the cache key.  If the cache breaks anything\r\n     * for you, use the `ignoreCache` parameter of `loadProto()` to disable it.\r\n     */\r\n    static protoCacheKey(filename, options) {\r\n        if (!filename ||\r\n            (Array.isArray(filename) && (filename.length === 0 || !filename[0]))) {\r\n            return undefined;\r\n        }\r\n        return JSON.stringify(filename) + ' ' + JSON.stringify(options);\r\n    }\r\n    /**\r\n     * In rare cases users might need to deallocate all memory consumed by loaded protos.\r\n     * This method will delete the proto cache content.\r\n     */\r\n    static clearProtoCache() {\r\n        GrpcClient.protoCache.clear();\r\n    }\r\n    /**\r\n     * A class which keeps the context of gRPC and auth for the gRPC.\r\n     *\r\n     * @param {Object=} options - The optional parameters. It will be directly\r\n     *   passed to google-auth-library library, so parameters like keyFile or\r\n     *   credentials will be valid.\r\n     * @param {Object=} options.auth - An instance of google-auth-library.\r\n     *   When specified, this auth instance will be used instead of creating\r\n     *   a new one.\r\n     * @param {Object=} options.grpc - When specified, this will be used\r\n     *   for the 'grpc' module in this context. By default, it will load the grpc\r\n     *   module in the standard way.\r\n     * @constructor\r\n     */\r\n    constructor(options = {}) {\r\n        this.auth = options.auth || new google_auth_library_1.GoogleAuth(options);\r\n        this.fallback = false;\r\n        const minimumVersion = 10;\r\n        const major = Number(process.version.match(/^v(\\d+)/)?.[1]);\r\n        if (Number.isNaN(major) || major < minimumVersion) {\r\n            const errorMessage = `Node.js v${minimumVersion}.0.0 is a minimum requirement. To learn about legacy version support visit: ` +\r\n                'https://github.com/googleapis/google-cloud-node#supported-nodejs-versions';\r\n            throw new Error(errorMessage);\r\n        }\r\n        if ('grpc' in options) {\r\n            this.grpc = options.grpc;\r\n            this.grpcVersion = '';\r\n        }\r\n        else {\r\n            this.grpc = grpc;\r\n            this.grpcVersion = (__webpack_require__(/*! @grpc/grpc-js/package.json */ \"(rsc)/./node_modules/@grpc/grpc-js/package.json\").version);\r\n        }\r\n    }\r\n    /**\r\n     * Creates a gRPC credentials. It asks the auth data if necessary.\r\n     * @private\r\n     * @param {Object} opts - options values for configuring credentials.\r\n     * @param {Object=} opts.sslCreds - when specified, this is used instead\r\n     *   of default channel credentials.\r\n     * @return {Promise} The promise which will be resolved to the gRPC credential.\r\n     */\r\n    async _getCredentials(opts) {\r\n        if (opts.sslCreds) {\r\n            return opts.sslCreds;\r\n        }\r\n        const grpc = this.grpc;\r\n        const sslCreds = opts.cert && opts.key\r\n            ? grpc.credentials.createSsl(null, Buffer.from(opts.key), Buffer.from(opts.cert))\r\n            : grpc.credentials.createSsl();\r\n        const client = await this.auth.getClient();\r\n        const credentials = grpc.credentials.combineChannelCredentials(sslCreds, grpc.credentials.createFromGoogleCredential({\r\n            // the `grpc` package does not support the `Headers` object yet\r\n            getRequestHeaders: async (url) => {\r\n                const headers = await client.getRequestHeaders(url);\r\n                const genericHeadersObject = {};\r\n                headers.forEach((value, key) => (genericHeadersObject[key] = value));\r\n                return genericHeadersObject;\r\n            },\r\n        }));\r\n        return credentials;\r\n    }\r\n    static defaultOptions() {\r\n        // This set of @grpc/proto-loader options\r\n        // 'closely approximates the existing behavior of grpc.load'\r\n        const includeDirs = INCLUDE_DIRS.slice();\r\n        const options = {\r\n            keepCase: false,\r\n            longs: String,\r\n            enums: String,\r\n            defaults: true,\r\n            oneofs: true,\r\n            includeDirs,\r\n        };\r\n        return options;\r\n    }\r\n    /**\r\n     * Loads the gRPC service from the proto file(s) at the given path and with the\r\n     * given options. Caches the loaded protos so the subsequent loads don't do\r\n     * any disk reads.\r\n     * @param filename The path to the proto file(s).\r\n     * @param options Options for loading the proto file.\r\n     * @param ignoreCache Defaults to `false`. Set it to `true` if the caching logic\r\n     *   incorrectly decides that the options object is the same, or if you want to\r\n     *   re-read the protos from disk for any other reason.\r\n     */\r\n    loadFromProto(filename, options, ignoreCache = false) {\r\n        const cacheKey = GrpcClient.protoCacheKey(filename, options);\r\n        let grpcPackage = cacheKey\r\n            ? GrpcClient.protoCache.get(cacheKey)\r\n            : undefined;\r\n        if (ignoreCache || !grpcPackage) {\r\n            const packageDef = grpcProtoLoader.loadSync(filename, options);\r\n            grpcPackage = this.grpc.loadPackageDefinition(packageDef);\r\n            if (cacheKey) {\r\n                GrpcClient.protoCache.set(cacheKey, grpcPackage);\r\n            }\r\n        }\r\n        return grpcPackage;\r\n    }\r\n    /**\r\n     * Load gRPC proto service from a filename looking in googleapis common protos\r\n     * when necessary. Caches the loaded protos so the subsequent loads don't do\r\n     * any disk reads.\r\n     * @param {String} protoPath - The directory to search for the protofile.\r\n     * @param {String|String[]} filename - The filename(s) of the proto(s) to be loaded.\r\n     *   If omitted, protoPath will be treated as a file path to load.\r\n     * @param ignoreCache Defaults to `false`. Set it to `true` if the caching logic\r\n     *   incorrectly decides that the options object is the same, or if you want to\r\n     *   re-read the protos from disk for any other reason.\r\n     * @return {Object<string, *>} The gRPC loaded result (the toplevel namespace\r\n     *   object).\r\n     */\r\n    loadProto(protoPath, filename, ignoreCache = false) {\r\n        if (!filename) {\r\n            filename = path.basename(protoPath);\r\n            protoPath = path.dirname(protoPath);\r\n        }\r\n        if (Array.isArray(filename) && filename.length === 0) {\r\n            return {};\r\n        }\r\n        const options = GrpcClient.defaultOptions();\r\n        options.includeDirs.unshift(protoPath);\r\n        return this.loadFromProto(filename, options, ignoreCache);\r\n    }\r\n    static _resolveFile(protoPath, filename) {\r\n        if (fs.existsSync(path.join(protoPath, filename))) {\r\n            return path.join(protoPath, filename);\r\n        }\r\n        else if (COMMON_PROTO_FILES.indexOf(filename) > -1) {\r\n            return path.join(googleProtoFilesDir, filename);\r\n        }\r\n        throw new Error(filename + ' could not be found in ' + protoPath);\r\n    }\r\n    loadProtoJSON(json, ignoreCache = false) {\r\n        const hash = (0, object_hash_1.default)(JSON.stringify(json)).toString();\r\n        const cached = GrpcClient.protoCache.get(hash);\r\n        if (cached && !ignoreCache) {\r\n            return cached;\r\n        }\r\n        const options = GrpcClient.defaultOptions();\r\n        const packageDefinition = grpcProtoLoader.fromJSON(json, options);\r\n        const grpcPackage = this.grpc.loadPackageDefinition(packageDefinition);\r\n        GrpcClient.protoCache.set(hash, grpcPackage);\r\n        return grpcPackage;\r\n    }\r\n    metadataBuilder(headers) {\r\n        const Metadata = this.grpc.Metadata;\r\n        const baseMetadata = new Metadata();\r\n        for (const key in headers) {\r\n            const value = headers[key];\r\n            if (Array.isArray(value)) {\r\n                value.forEach(v => baseMetadata.add(key, v));\r\n            }\r\n            else {\r\n                baseMetadata.set(key, `${value}`);\r\n            }\r\n        }\r\n        return function buildMetadata(abTests, moreHeaders) {\r\n            // TODO: bring the A/B testing info into the metadata.\r\n            let copied = false;\r\n            let metadata = baseMetadata;\r\n            if (moreHeaders) {\r\n                for (const key in moreHeaders) {\r\n                    if (key.toLowerCase() !== 'x-goog-api-client') {\r\n                        if (!copied) {\r\n                            copied = true;\r\n                            metadata = metadata.clone();\r\n                        }\r\n                        const value = moreHeaders[key];\r\n                        if (Array.isArray(value)) {\r\n                            value.forEach(v => metadata.add(key, v));\r\n                        }\r\n                        else {\r\n                            metadata.set(key, `${value}`);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return metadata;\r\n        };\r\n    }\r\n    /**\r\n     * A wrapper of {@link constructSettings} function under the gRPC context.\r\n     *\r\n     * Most of parameters are common among constructSettings, please take a look.\r\n     * @param {string} serviceName - The fullly-qualified name of the service.\r\n     * @param {Object} clientConfig - A dictionary of the client config.\r\n     * @param {Object} configOverrides - A dictionary of overriding configs.\r\n     * @param {Object} headers - A dictionary of additional HTTP header name to\r\n     *   its value.\r\n     * @return {Object} A mapping of method names to CallSettings.\r\n     */\r\n    constructSettings(serviceName, clientConfig, configOverrides, headers) {\r\n        return gax.constructSettings(serviceName, clientConfig, configOverrides, this.grpc.status, { metadataBuilder: this.metadataBuilder(headers) });\r\n    }\r\n    /**\r\n     * Creates a gRPC stub with current gRPC and auth.\r\n     * @param {function} CreateStub - The constructor function of the stub.\r\n     * @param {Object} options - The optional arguments to customize\r\n     *   gRPC connection. This options will be passed to the constructor of\r\n     *   gRPC client too.\r\n     * @param {string} options.servicePath - The name of the server of the service.\r\n     * @param {number} options.port - The port of the service.\r\n     * @param {grpcTypes.ClientCredentials=} options.sslCreds - The credentials to be used\r\n     *   to set up gRPC connection.\r\n     * @param {string} defaultServicePath - The default service path.\r\n     * @return {Promise} A promise which resolves to a gRPC stub instance.\r\n     */\r\n    async createStub(CreateStub, options, customServicePath) {\r\n        // The following options are understood by grpc-gcp and need a special treatment\r\n        // (should be passed without a `grpc.` prefix)\r\n        const grpcGcpOptions = [\r\n            'grpc.callInvocationTransformer',\r\n            'grpc.channelFactoryOverride',\r\n            'grpc.gcpApiConfig',\r\n        ];\r\n        const [cert, key] = await this._detectClientCertificate(options, options.universeDomain);\r\n        const servicePath = this._mtlsServicePath(options.servicePath, customServicePath, cert && key);\r\n        const opts = Object.assign({}, options, { cert, key, servicePath });\r\n        const serviceAddress = servicePath + ':' + opts.port;\r\n        if (!options.universeDomain) {\r\n            options.universeDomain = 'googleapis.com';\r\n        }\r\n        if (options.universeDomain) {\r\n            const universeFromAuth = await this.auth.getUniverseDomain();\r\n            if (universeFromAuth && options.universeDomain !== universeFromAuth) {\r\n                throw new Error(`The configured universe domain (${options.universeDomain}) does not match the universe domain found in the credentials (${universeFromAuth}). ` +\r\n                    \"If you haven't configured the universe domain explicitly, googleapis.com is the default.\");\r\n            }\r\n        }\r\n        const creds = await this._getCredentials(opts);\r\n        const grpcOptions = {};\r\n        // @grpc/grpc-js limits max receive/send message length starting from v0.8.0\r\n        // https://github.com/grpc/grpc-node/releases/tag/%40grpc%2Fgrpc-js%400.8.0\r\n        // To keep the existing behavior and avoid libraries breakage, we pass -1 there as suggested.\r\n        grpcOptions['grpc.max_receive_message_length'] = -1;\r\n        grpcOptions['grpc.max_send_message_length'] = -1;\r\n        grpcOptions['grpc.initial_reconnect_backoff_ms'] = 1000;\r\n        Object.keys(opts).forEach(key => {\r\n            const value = options[key];\r\n            // the older versions had a bug which required users to call an option\r\n            // grpc.grpc.* to make it actually pass to gRPC as grpc.*, let's handle\r\n            // this here until the next major release\r\n            if (key.startsWith('grpc.grpc.')) {\r\n                key = key.replace(/^grpc\\./, '');\r\n            }\r\n            if (key.startsWith('grpc.')) {\r\n                if (grpcGcpOptions.includes(key)) {\r\n                    key = key.replace(/^grpc\\./, '');\r\n                }\r\n                grpcOptions[key] = value;\r\n            }\r\n            if (key.startsWith('grpc-node.')) {\r\n                grpcOptions[key] = value;\r\n            }\r\n        });\r\n        const stub = new CreateStub(serviceAddress, creds, grpcOptions);\r\n        return stub;\r\n    }\r\n    /**\r\n     * Detect mTLS client certificate based on logic described in\r\n     * https://google.aip.dev/auth/4114.\r\n     *\r\n     * @param {object} [options] - The configuration object.\r\n     * @returns {Promise} Resolves array of strings representing cert and key.\r\n     */\r\n    async _detectClientCertificate(opts, universeDomain) {\r\n        const certRegex = /(?<cert>-----BEGIN CERTIFICATE-----.*?-----END CERTIFICATE-----)/s;\r\n        const keyRegex = /(?<key>-----BEGIN PRIVATE KEY-----.*?-----END PRIVATE KEY-----)/s;\r\n        // If GOOGLE_API_USE_CLIENT_CERTIFICATE is true...:\r\n        if (typeof process !== 'undefined' &&\r\n            process?.env?.GOOGLE_API_USE_CLIENT_CERTIFICATE === 'true') {\r\n            if (universeDomain && universeDomain !== 'googleapis.com') {\r\n                throw new Error('mTLS is not supported outside of googleapis.com universe domain.');\r\n            }\r\n            if (opts?.cert && opts?.key) {\r\n                return [opts.cert, opts.key];\r\n            }\r\n            // If context aware metadata exists, run the cert provider command,\r\n            // parse the output to extract cert and key, and use this cert/key.\r\n            const metadataPath = (0, path_1.join)(os.homedir(), '.secureConnect', 'context_aware_metadata.json');\r\n            const metadata = JSON.parse(await readFileAsync(metadataPath));\r\n            if (!metadata.cert_provider_command) {\r\n                throw Error('no cert_provider_command found');\r\n            }\r\n            const stdout = await execFileAsync(metadata.cert_provider_command[0], metadata.cert_provider_command.slice(1));\r\n            const matchCert = stdout.toString().match(certRegex);\r\n            const matchKey = stdout.toString().match(keyRegex);\r\n            if (!(matchCert?.groups && matchKey?.groups)) {\r\n                throw Error('unable to parse certificate and key');\r\n            }\r\n            else {\r\n                return [matchCert.groups.cert, matchKey.groups.key];\r\n            }\r\n        }\r\n        // If GOOGLE_API_USE_CLIENT_CERTIFICATE is not set or false,\r\n        // use no cert or key:\r\n        return [undefined, undefined];\r\n    }\r\n    /**\r\n     * Return service path, taking into account mTLS logic.\r\n     * See: https://google.aip.dev/auth/4114\r\n     *\r\n     * @param {string|undefined} servicePath - The path of the service.\r\n     * @param {string|undefined} customServicePath - Did the user provide a custom service URL.\r\n     * @param {boolean} hasCertificate - Was a certificate found.\r\n     * @returns {string} The DNS address for this service.\r\n     */\r\n    _mtlsServicePath(servicePath, customServicePath, hasCertificate) {\r\n        // If user provides a custom service path, return the current service\r\n        // path and do not attempt to add mtls subdomain:\r\n        if (customServicePath || !servicePath)\r\n            return servicePath;\r\n        if (typeof process !== 'undefined' &&\r\n            process?.env?.GOOGLE_API_USE_MTLS_ENDPOINT === 'never') {\r\n            // It was explicitly asked that mtls endpoint not be used:\r\n            return servicePath;\r\n        }\r\n        else if ((typeof process !== 'undefined' &&\r\n            process?.env?.GOOGLE_API_USE_MTLS_ENDPOINT === 'always') ||\r\n            hasCertificate) {\r\n            // Either auto-detect or explicit setting of endpoint:\r\n            return servicePath.replace('googleapis.com', 'mtls.googleapis.com');\r\n        }\r\n        return servicePath;\r\n    }\r\n    /**\r\n     * Creates a 'bytelength' function for a given proto message class.\r\n     *\r\n     * See {@link BundleDescriptor} about the meaning of the return value.\r\n     *\r\n     * @param {function} message - a constructor function that is generated by\r\n     *   protobuf.js. Assumes 'encoder' field in the message.\r\n     * @return {function(Object):number} - a function to compute the byte length\r\n     *   for an object.\r\n     */\r\n    static createByteLengthFunction(message) {\r\n        return gax.createByteLengthFunction(message);\r\n    }\r\n}\r\nexports.GrpcClient = GrpcClient;\r\nclass GoogleProtoFilesRoot extends protobuf.Root {\r\n    constructor(...args) {\r\n        super(...args);\r\n    }\r\n    // Causes the loading of an included proto to check if it is a common\r\n    // proto. If it is a common proto, use the bundled proto.\r\n    resolvePath(originPath, includePath) {\r\n        originPath = path.normalize(originPath);\r\n        includePath = path.normalize(includePath);\r\n        // Fully qualified paths don't need to be resolved.\r\n        if (path.isAbsolute(includePath)) {\r\n            if (!fs.existsSync(includePath)) {\r\n                throw new Error('The include `' + includePath + '` was not found.');\r\n            }\r\n            return includePath;\r\n        }\r\n        if (COMMON_PROTO_FILES.indexOf(includePath) > -1) {\r\n            return path.join(googleProtoFilesDir, includePath);\r\n        }\r\n        return GoogleProtoFilesRoot._findIncludePath(originPath, includePath);\r\n    }\r\n    static _findIncludePath(originPath, includePath) {\r\n        originPath = path.normalize(originPath);\r\n        includePath = path.normalize(includePath);\r\n        let current = originPath;\r\n        let found = fs.existsSync(path.join(current, includePath));\r\n        while (!found && current.length > 0) {\r\n            current = current.substring(0, current.lastIndexOf(path.sep));\r\n            found = fs.existsSync(path.join(current, includePath));\r\n        }\r\n        if (!found) {\r\n            throw new Error('The include `' + includePath + '` was not found.');\r\n        }\r\n        return path.join(current, includePath);\r\n    }\r\n}\r\nexports.GoogleProtoFilesRoot = GoogleProtoFilesRoot;\r\n//# sourceMappingURL=grpc.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/grpc.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/iamService.js":
/*!*********************************************************!*\
  !*** ./node_modules/google-gax/build/src/iamService.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\r\n// Copyright 2020 Google LLC\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     https://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n//\r\n// ** This file is automatically generated by gapic-generator-typescript. **\r\n// ** https://github.com/googleapis/gapic-generator-typescript **\r\n// ** All changes to this file may be overwritten. **\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || (function () {\r\n    var ownKeys = function(o) {\r\n        ownKeys = Object.getOwnPropertyNames || function (o) {\r\n            var ar = [];\r\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\r\n            return ar;\r\n        };\r\n        return ownKeys(o);\r\n    };\r\n    return function (mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\r\n        __setModuleDefault(result, mod);\r\n        return result;\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.IamClient = void 0;\r\nconst createApiCall_1 = __webpack_require__(/*! ./createApiCall */ \"(rsc)/./node_modules/google-gax/build/src/createApiCall.js\");\r\nconst routingHeader = __importStar(__webpack_require__(/*! ./routingHeader */ \"(rsc)/./node_modules/google-gax/build/src/routingHeader.js\"));\r\nconst gapicConfig = __importStar(__webpack_require__(/*! ./iam_policy_service_client_config.json */ \"(rsc)/./node_modules/google-gax/build/src/iam_policy_service_client_config.json\"));\r\nconst fallback = __importStar(__webpack_require__(/*! ./fallback */ \"(rsc)/./node_modules/google-gax/build/src/fallback.js\"));\r\nlet version = (__webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/google-gax/package.json\").version);\r\nconst jsonProtos = __webpack_require__(/*! ../protos/iam_service.json */ \"(rsc)/./node_modules/google-gax/build/protos/iam_service.json\");\r\n/**\r\n *  Google Cloud IAM Client.\r\n *  This is manually written for providing methods [setIamPolicy, getIamPolicy, testIamPerssion] to the generated client.\r\n */\r\nclass IamClient {\r\n    _terminated = false;\r\n    _opts;\r\n    _defaults;\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    _protos;\r\n    auth;\r\n    descriptors = { page: {}, stream: {}, longrunning: {} };\r\n    innerApiCalls = {};\r\n    iamPolicyStub;\r\n    gaxGrpc;\r\n    constructor(gaxGrpc, \r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    options) {\r\n        this.gaxGrpc = gaxGrpc;\r\n        // Ensure that options include the service address and port.\r\n        const opts = Object.assign({\r\n            servicePath: options.servicePath,\r\n            port: options.port,\r\n            clientConfig: options.clientConfig,\r\n            apiEndpoint: options.apiEndpoint,\r\n            fallback: options.fallback,\r\n        }, options);\r\n        version = opts.fallback ? fallback.version : version;\r\n        opts.scopes = this.constructor.scopes;\r\n        // Save options to use in initialize() method.\r\n        this._opts = opts;\r\n        // Save the auth object to the client, for use by other methods.\r\n        this.auth = gaxGrpc.auth;\r\n        // Determine the client header string.\r\n        const clientHeader = [`gax/${version}`, `gapic/${version}`];\r\n        if (typeof process !== 'undefined' && 'versions' in process) {\r\n            clientHeader.push(`gl-node/${process.versions.node}`);\r\n        }\r\n        else {\r\n            clientHeader.push(`gl-web/${version}`);\r\n        }\r\n        if (!opts.fallback) {\r\n            clientHeader.push(`grpc/${gaxGrpc.grpcVersion}`);\r\n        }\r\n        if (opts.libName && opts.libVersion) {\r\n            clientHeader.push(`${opts.libName}/${opts.libVersion}`);\r\n        }\r\n        // Load the applicable protos.\r\n        this._protos = this.gaxGrpc.loadProtoJSON(jsonProtos);\r\n        // Put together the default options sent with requests.\r\n        this._defaults = gaxGrpc.constructSettings('google.iam.v1.IAMPolicy', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });\r\n        this.innerApiCalls = {};\r\n    }\r\n    /**\r\n     * Initialize the client.\r\n     * Performs asynchronous operations (such as authentication) and prepares the client.\r\n     * This function will be called automatically when any class method is called for the\r\n     * first time, but if you need to initialize it before calling an actual method,\r\n     * feel free to call initialize() directly.\r\n     *\r\n     * You can await on this method if you want to make sure the client is initialized.\r\n     *\r\n     * @returns {Promise} A promise that resolves to an authenticated service stub.\r\n     */\r\n    initialize() {\r\n        // If the client stub promise is already initialized, return immediately.\r\n        if (this.iamPolicyStub) {\r\n            return this.iamPolicyStub;\r\n        }\r\n        // Put together the \"service stub\" for\r\n        // google.iam.v1.IAMPolicy.\r\n        this.iamPolicyStub = this.gaxGrpc.createStub(this._opts.fallback\r\n            ? this._protos.lookupService('google.iam.v1.IAMPolicy')\r\n            : this._protos.google.iam.v1.IAMPolicy, this._opts);\r\n        // Iterate over each of the methods that the service provides\r\n        // and create an API call method for each.\r\n        const iamPolicyStubMethods = [\r\n            'getIamPolicy',\r\n            'setIamPolicy',\r\n            'testIamPermissions',\r\n        ];\r\n        for (const methodName of iamPolicyStubMethods) {\r\n            const innerCallPromise = this.iamPolicyStub.then(stub => (...args) => {\r\n                if (this._terminated) {\r\n                    return Promise.reject('The client has already been closed.');\r\n                }\r\n                const func = stub[methodName];\r\n                return func.apply(stub, args);\r\n            }, (err) => () => {\r\n                throw err;\r\n            });\r\n            this.innerApiCalls[methodName] = (0, createApiCall_1.createApiCall)(innerCallPromise, this._defaults[methodName], this.descriptors.page[methodName]);\r\n        }\r\n        return this.iamPolicyStub;\r\n    }\r\n    /**\r\n     * The DNS address for this API service.\r\n     */\r\n    static get servicePath() {\r\n        return 'cloudkms.googleapis.com';\r\n    }\r\n    /**\r\n     * The DNS address for this API service - same as servicePath(),\r\n     * exists for compatibility reasons.\r\n     */\r\n    static get apiEndpoint() {\r\n        return 'cloudkms.googleapis.com';\r\n    }\r\n    /**\r\n     * The port for this API service.\r\n     */\r\n    static get port() {\r\n        return 443;\r\n    }\r\n    /**\r\n     * The scopes needed to make gRPC calls for every method defined\r\n     * in this service.\r\n     */\r\n    static get scopes() {\r\n        return [\r\n            'https://www.googleapis.com/auth/cloud-platform',\r\n            'https://www.googleapis.com/auth/cloudkms',\r\n        ];\r\n    }\r\n    getProjectId(callback) {\r\n        if (this.auth && 'getProjectId' in this.auth) {\r\n            return this.auth.getProjectId(callback);\r\n        }\r\n        if (callback) {\r\n            callback(new Error('Cannot determine project ID.'));\r\n        }\r\n        else {\r\n            return Promise.reject('Cannot determine project ID.');\r\n        }\r\n    }\r\n    getIamPolicy(request, optionsOrCallback, callback) {\r\n        let options;\r\n        if (optionsOrCallback instanceof Function && callback === undefined) {\r\n            callback = optionsOrCallback;\r\n            options = {};\r\n        }\r\n        else {\r\n            options = optionsOrCallback;\r\n        }\r\n        request = request || {};\r\n        options = options || {};\r\n        options.otherArgs = options.otherArgs || {};\r\n        options.otherArgs.headers = options.otherArgs.headers || {};\r\n        options.otherArgs.headers['x-goog-request-params'] =\r\n            routingHeader.fromParams({\r\n                resource: request.resource,\r\n            });\r\n        this.initialize().catch(console.error);\r\n        return this.innerApiCalls.getIamPolicy(request, options, callback);\r\n    }\r\n    setIamPolicy(request, optionsOrCallback, callback) {\r\n        let options;\r\n        if (optionsOrCallback instanceof Function && callback === undefined) {\r\n            callback = optionsOrCallback;\r\n            options = {};\r\n        }\r\n        else {\r\n            options = optionsOrCallback;\r\n        }\r\n        request = request || {};\r\n        options = options || {};\r\n        options.otherArgs = options.otherArgs || {};\r\n        options.otherArgs.headers = options.otherArgs.headers || {};\r\n        options.otherArgs.headers['x-goog-request-params'] =\r\n            routingHeader.fromParams({\r\n                resource: request.resource,\r\n            });\r\n        this.initialize().catch(console.error);\r\n        return this.innerApiCalls.setIamPolicy(request, options, callback);\r\n    }\r\n    testIamPermissions(request, optionsOrCallback, callback) {\r\n        let options;\r\n        if (optionsOrCallback instanceof Function && callback === undefined) {\r\n            callback = optionsOrCallback;\r\n            options = {};\r\n        }\r\n        else {\r\n            options = optionsOrCallback;\r\n        }\r\n        request = request || {};\r\n        options = options || {};\r\n        options.otherArgs = options.otherArgs || {};\r\n        options.otherArgs.headers = options.otherArgs.headers || {};\r\n        options.otherArgs.headers['x-goog-request-params'] =\r\n            routingHeader.fromParams({\r\n                resource: request.resource,\r\n            });\r\n        this.initialize().catch(console.error);\r\n        return this.innerApiCalls.testIamPermissions(request, options, callback);\r\n    }\r\n    /**\r\n     * Terminate the GRPC channel and close the client.\r\n     *\r\n     * The client will no longer be usable and all future behavior is undefined.\r\n     */\r\n    close() {\r\n        this.initialize().catch(console.error);\r\n        if (!this._terminated) {\r\n            return this.iamPolicyStub.then(stub => {\r\n                this._terminated = true;\r\n                stub.close();\r\n            });\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n}\r\nexports.IamClient = IamClient;\r\n//# sourceMappingURL=iamService.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/iamService.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/index.js":
/*!****************************************************!*\
  !*** ./node_modules/google-gax/build/src/index.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\r\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || (function () {\r\n    var ownKeys = function(o) {\r\n        ownKeys = Object.getOwnPropertyNames || function (o) {\r\n            var ar = [];\r\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\r\n            return ar;\r\n        };\r\n        return ownKeys(o);\r\n    };\r\n    return function (mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\r\n        __setModuleDefault(result, mod);\r\n        return result;\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.serializer = exports.warn = exports.ChannelCredentials = exports.makeUUID = exports.fallback = exports.protobufMinimal = exports.protobuf = exports.version = exports.createByteLengthFunction = exports.LocationsClient = exports.IamClient = exports.OperationsClient = exports.LocationProtos = exports.IamProtos = exports.operationsProtos = exports.routingHeader = exports.StreamType = exports.Status = exports.PathTemplate = exports.operation = exports.Operation = exports.GrpcClient = exports.GoogleProtoFilesRoot = exports.ClientStub = exports.GoogleError = exports.createMaxRetriesBackoffSettings = exports.createDefaultBackoffSettings = exports.createBackoffSettings = exports.createBundleOptions = exports.createRetryOptions = exports.RetryOptions = exports.constructSettings = exports.CallSettings = exports.StreamDescriptor = exports.PageDescriptor = exports.LongrunningDescriptor = exports.BundleDescriptor = exports.createApiCall = exports.OngoingCall = exports.grpc = exports.loggingUtils = exports.googleAuthLibrary = exports.GoogleAuth = void 0;\r\nexports.lro = lro;\r\nconst grpc = __importStar(__webpack_require__(/*! @grpc/grpc-js */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/index.js\"));\r\nexports.grpc = grpc;\r\nconst grpc_1 = __webpack_require__(/*! ./grpc */ \"(rsc)/./node_modules/google-gax/build/src/grpc.js\");\r\nconst IamProtos = __importStar(__webpack_require__(/*! ../protos/iam_service */ \"(rsc)/./node_modules/google-gax/build/protos/iam_service.js\"));\r\nexports.IamProtos = IamProtos;\r\nconst LocationProtos = __importStar(__webpack_require__(/*! ../protos/locations */ \"(rsc)/./node_modules/google-gax/build/protos/locations.js\"));\r\nexports.LocationProtos = LocationProtos;\r\nconst operationsProtos = __importStar(__webpack_require__(/*! ../protos/operations */ \"(rsc)/./node_modules/google-gax/build/protos/operations.js\"));\r\nexports.operationsProtos = operationsProtos;\r\nconst operationsClient = __importStar(__webpack_require__(/*! ./operationsClient */ \"(rsc)/./node_modules/google-gax/build/src/operationsClient.js\"));\r\nconst routingHeader = __importStar(__webpack_require__(/*! ./routingHeader */ \"(rsc)/./node_modules/google-gax/build/src/routingHeader.js\"));\r\nexports.routingHeader = routingHeader;\r\nvar google_auth_library_1 = __webpack_require__(/*! google-auth-library */ \"(rsc)/./node_modules/google-auth-library/build/src/index.js\");\r\nObject.defineProperty(exports, \"GoogleAuth\", ({ enumerable: true, get: function () { return google_auth_library_1.GoogleAuth; } }));\r\nexports.googleAuthLibrary = __importStar(__webpack_require__(/*! google-auth-library */ \"(rsc)/./node_modules/google-auth-library/build/src/index.js\"));\r\nexports.loggingUtils = __importStar(__webpack_require__(/*! google-logging-utils */ \"(rsc)/./node_modules/google-logging-utils/build/src/index.js\"));\r\nvar call_1 = __webpack_require__(/*! ./call */ \"(rsc)/./node_modules/google-gax/build/src/call.js\");\r\nObject.defineProperty(exports, \"OngoingCall\", ({ enumerable: true, get: function () { return call_1.OngoingCall; } }));\r\nvar createApiCall_1 = __webpack_require__(/*! ./createApiCall */ \"(rsc)/./node_modules/google-gax/build/src/createApiCall.js\");\r\nObject.defineProperty(exports, \"createApiCall\", ({ enumerable: true, get: function () { return createApiCall_1.createApiCall; } }));\r\nvar descriptor_1 = __webpack_require__(/*! ./descriptor */ \"(rsc)/./node_modules/google-gax/build/src/descriptor.js\");\r\nObject.defineProperty(exports, \"BundleDescriptor\", ({ enumerable: true, get: function () { return descriptor_1.BundleDescriptor; } }));\r\nObject.defineProperty(exports, \"LongrunningDescriptor\", ({ enumerable: true, get: function () { return descriptor_1.LongrunningDescriptor; } }));\r\nObject.defineProperty(exports, \"PageDescriptor\", ({ enumerable: true, get: function () { return descriptor_1.PageDescriptor; } }));\r\nObject.defineProperty(exports, \"StreamDescriptor\", ({ enumerable: true, get: function () { return descriptor_1.StreamDescriptor; } }));\r\nvar gax_1 = __webpack_require__(/*! ./gax */ \"(rsc)/./node_modules/google-gax/build/src/gax.js\");\r\nObject.defineProperty(exports, \"CallSettings\", ({ enumerable: true, get: function () { return gax_1.CallSettings; } }));\r\nObject.defineProperty(exports, \"constructSettings\", ({ enumerable: true, get: function () { return gax_1.constructSettings; } }));\r\nObject.defineProperty(exports, \"RetryOptions\", ({ enumerable: true, get: function () { return gax_1.RetryOptions; } }));\r\nObject.defineProperty(exports, \"createRetryOptions\", ({ enumerable: true, get: function () { return gax_1.createRetryOptions; } }));\r\nObject.defineProperty(exports, \"createBundleOptions\", ({ enumerable: true, get: function () { return gax_1.createBundleOptions; } }));\r\nObject.defineProperty(exports, \"createBackoffSettings\", ({ enumerable: true, get: function () { return gax_1.createBackoffSettings; } }));\r\nObject.defineProperty(exports, \"createDefaultBackoffSettings\", ({ enumerable: true, get: function () { return gax_1.createDefaultBackoffSettings; } }));\r\nObject.defineProperty(exports, \"createMaxRetriesBackoffSettings\", ({ enumerable: true, get: function () { return gax_1.createMaxRetriesBackoffSettings; } }));\r\nvar googleError_1 = __webpack_require__(/*! ./googleError */ \"(rsc)/./node_modules/google-gax/build/src/googleError.js\");\r\nObject.defineProperty(exports, \"GoogleError\", ({ enumerable: true, get: function () { return googleError_1.GoogleError; } }));\r\nvar grpc_2 = __webpack_require__(/*! ./grpc */ \"(rsc)/./node_modules/google-gax/build/src/grpc.js\");\r\nObject.defineProperty(exports, \"ClientStub\", ({ enumerable: true, get: function () { return grpc_2.ClientStub; } }));\r\nObject.defineProperty(exports, \"GoogleProtoFilesRoot\", ({ enumerable: true, get: function () { return grpc_2.GoogleProtoFilesRoot; } }));\r\nObject.defineProperty(exports, \"GrpcClient\", ({ enumerable: true, get: function () { return grpc_2.GrpcClient; } }));\r\nvar longrunning_1 = __webpack_require__(/*! ./longRunningCalls/longrunning */ \"(rsc)/./node_modules/google-gax/build/src/longRunningCalls/longrunning.js\");\r\nObject.defineProperty(exports, \"Operation\", ({ enumerable: true, get: function () { return longrunning_1.Operation; } }));\r\nObject.defineProperty(exports, \"operation\", ({ enumerable: true, get: function () { return longrunning_1.operation; } }));\r\nvar pathTemplate_1 = __webpack_require__(/*! ./pathTemplate */ \"(rsc)/./node_modules/google-gax/build/src/pathTemplate.js\");\r\nObject.defineProperty(exports, \"PathTemplate\", ({ enumerable: true, get: function () { return pathTemplate_1.PathTemplate; } }));\r\nvar status_1 = __webpack_require__(/*! ./status */ \"(rsc)/./node_modules/google-gax/build/src/status.js\");\r\nObject.defineProperty(exports, \"Status\", ({ enumerable: true, get: function () { return status_1.Status; } }));\r\nvar streaming_1 = __webpack_require__(/*! ./streamingCalls/streaming */ \"(rsc)/./node_modules/google-gax/build/src/streamingCalls/streaming.js\");\r\nObject.defineProperty(exports, \"StreamType\", ({ enumerable: true, get: function () { return streaming_1.StreamType; } }));\r\nfunction lro(options) {\r\n    options = Object.assign({ scopes: lro.ALL_SCOPES }, options);\r\n    const gaxGrpc = new grpc_1.GrpcClient(options);\r\n    return new operationsClient.OperationsClientBuilder(gaxGrpc);\r\n}\r\nlro.SERVICE_ADDRESS = operationsClient.SERVICE_ADDRESS;\r\nlro.ALL_SCOPES = operationsClient.ALL_SCOPES;\r\nvar operationsClient_1 = __webpack_require__(/*! ./operationsClient */ \"(rsc)/./node_modules/google-gax/build/src/operationsClient.js\");\r\nObject.defineProperty(exports, \"OperationsClient\", ({ enumerable: true, get: function () { return operationsClient_1.OperationsClient; } }));\r\nvar iamService_1 = __webpack_require__(/*! ./iamService */ \"(rsc)/./node_modules/google-gax/build/src/iamService.js\");\r\nObject.defineProperty(exports, \"IamClient\", ({ enumerable: true, get: function () { return iamService_1.IamClient; } }));\r\nvar locationService_1 = __webpack_require__(/*! ./locationService */ \"(rsc)/./node_modules/google-gax/build/src/locationService.js\");\r\nObject.defineProperty(exports, \"LocationsClient\", ({ enumerable: true, get: function () { return locationService_1.LocationsClient; } }));\r\nexports.createByteLengthFunction = grpc_1.GrpcClient?.createByteLengthFunction;\r\nexports.version = __webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/google-gax/package.json\").version;\r\nconst protobuf = __importStar(__webpack_require__(/*! protobufjs */ \"(rsc)/./node_modules/protobufjs/index.js\"));\r\nexports.protobuf = protobuf;\r\nexports.protobufMinimal = __importStar(__webpack_require__(/*! protobufjs/minimal */ \"(rsc)/./node_modules/protobufjs/minimal.js\"));\r\nconst fallback = __importStar(__webpack_require__(/*! ./fallback */ \"(rsc)/./node_modules/google-gax/build/src/fallback.js\"));\r\nexports.fallback = fallback;\r\nvar util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/google-gax/build/src/util.js\");\r\nObject.defineProperty(exports, \"makeUUID\", ({ enumerable: true, get: function () { return util_1.makeUUID; } }));\r\nvar grpc_js_1 = __webpack_require__(/*! @grpc/grpc-js */ \"(rsc)/./node_modules/@grpc/grpc-js/build/src/index.js\");\r\nObject.defineProperty(exports, \"ChannelCredentials\", ({ enumerable: true, get: function () { return grpc_js_1.ChannelCredentials; } }));\r\nvar warnings_1 = __webpack_require__(/*! ./warnings */ \"(rsc)/./node_modules/google-gax/build/src/warnings.js\");\r\nObject.defineProperty(exports, \"warn\", ({ enumerable: true, get: function () { return warnings_1.warn; } }));\r\nconst serializer = __importStar(__webpack_require__(/*! proto3-json-serializer */ \"(rsc)/./node_modules/proto3-json-serializer/build/src/index.js\"));\r\nexports.serializer = serializer;\r\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/locationService.js":
/*!**************************************************************!*\
  !*** ./node_modules/google-gax/build/src/locationService.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\r\n// Copyright 2021 Google LLC\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     https://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || (function () {\r\n    var ownKeys = function(o) {\r\n        ownKeys = Object.getOwnPropertyNames || function (o) {\r\n            var ar = [];\r\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\r\n            return ar;\r\n        };\r\n        return ownKeys(o);\r\n    };\r\n    return function (mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\r\n        __setModuleDefault(result, mod);\r\n        return result;\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.LocationsClient = void 0;\r\n/* global window */\r\nconst gax = __importStar(__webpack_require__(/*! ./gax */ \"(rsc)/./node_modules/google-gax/build/src/gax.js\"));\r\nconst warnings_1 = __webpack_require__(/*! ./warnings */ \"(rsc)/./node_modules/google-gax/build/src/warnings.js\");\r\nconst createApiCall_1 = __webpack_require__(/*! ./createApiCall */ \"(rsc)/./node_modules/google-gax/build/src/createApiCall.js\");\r\nconst routingHeader = __importStar(__webpack_require__(/*! ./routingHeader */ \"(rsc)/./node_modules/google-gax/build/src/routingHeader.js\"));\r\nconst pageDescriptor_1 = __webpack_require__(/*! ./paginationCalls/pageDescriptor */ \"(rsc)/./node_modules/google-gax/build/src/paginationCalls/pageDescriptor.js\");\r\nconst jsonProtos = __webpack_require__(/*! ../protos/locations.json */ \"(rsc)/./node_modules/google-gax/build/protos/locations.json\");\r\n/**\r\n * This file defines retry strategy and timeouts for all API methods in this library.\r\n */\r\nconst gapicConfig = __importStar(__webpack_require__(/*! ./locations_client_config.json */ \"(rsc)/./node_modules/google-gax/build/src/locations_client_config.json\"));\r\nconst version = (__webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/google-gax/package.json\").version);\r\n/**\r\n *  Google Cloud Locations Client.\r\n *  This is manually written for providing methods [listLocations, getLocations] to the generated client.\r\n */\r\nclass LocationsClient {\r\n    _terminated = false;\r\n    _opts;\r\n    _providedCustomServicePath;\r\n    _protos;\r\n    _defaults;\r\n    auth;\r\n    descriptors = {\r\n        page: {},\r\n        stream: {},\r\n        longrunning: {},\r\n        batching: {},\r\n    };\r\n    warn;\r\n    innerApiCalls;\r\n    locationsStub;\r\n    gaxGrpc;\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    PageDescriptor;\r\n    /**\r\n     * Construct an instance of LocationsClient.\r\n     *\r\n     * @param {object} [options] - The configuration object.\r\n     * The options accepted by the constructor are described in detail\r\n     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).\r\n     * The common options are:\r\n     * @param {object} [options.credentials] - Credentials object.\r\n     * @param {string} [options.credentials.client_email]\r\n     * @param {string} [options.credentials.private_key]\r\n     * @param {string} [options.email] - Account email address. Required when\r\n     *     using a .pem or .p12 keyFilename.\r\n     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\r\n     *     .p12 key downloaded from the Google Developers Console. If you provide\r\n     *     a path to a JSON file, the projectId option below is not necessary.\r\n     *     NOTE: .pem and .p12 require you to specify options.email as well.\r\n     * @param {number} [options.port] - The port on which to connect to\r\n     *     the remote host.\r\n     * @param {string} [options.projectId] - The project ID from the Google\r\n     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\r\n     *     the environment variable GCLOUD_PROJECT for your project ID. If your\r\n     *     app is running in an environment which supports\r\n     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\r\n     *     your project ID will be detected automatically.\r\n     * @param {string} [options.apiEndpoint] - The domain name of the\r\n     *     API remote host.\r\n     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.\r\n     *     Follows the structure of {@link gapicConfig}.\r\n     * @param {boolean} [options.fallback] - Use HTTP fallback mode.\r\n     *     In fallback mode, a special browser-compatible transport implementation is used\r\n     *     instead of gRPC transport. In browser context (if the `window` object is defined)\r\n     *     the fallback mode is enabled automatically; set `options.fallback` to `false`\r\n     *     if you need to override this behavior.\r\n     */\r\n    constructor(gaxGrpc, \r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    opts) {\r\n        // Ensure that options include all the required fields.\r\n        this.gaxGrpc = gaxGrpc;\r\n        const staticMembers = this.constructor;\r\n        const servicePath = opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;\r\n        this._providedCustomServicePath = !!(opts?.servicePath || opts?.apiEndpoint);\r\n        const port = opts?.port || staticMembers.port;\r\n        const clientConfig = opts?.clientConfig ?? {};\r\n        const fallback = opts?.fallback ??\r\n            (typeof window !== 'undefined' && typeof window?.fetch === 'function');\r\n        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);\r\n        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.\r\n        if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {\r\n            opts['scopes'] = staticMembers.scopes;\r\n        }\r\n        // Save options to use in initialize() method.\r\n        this._opts = opts;\r\n        // Save the auth object to the client, for use by other methods.\r\n        this.auth = gaxGrpc.auth;\r\n        // Set the default scopes in auth client if needed.\r\n        if (servicePath === staticMembers.servicePath) {\r\n            this.auth.defaultScopes = staticMembers.scopes;\r\n        }\r\n        // Determine the client header string.\r\n        const clientHeader = [`gax/${version}`, `gapic/${version}`];\r\n        if (typeof process !== 'undefined' && 'versions' in process) {\r\n            clientHeader.push(`gl-node/${process.versions.node}`);\r\n        }\r\n        else {\r\n            clientHeader.push(`gl-web/${version}`);\r\n        }\r\n        if (!opts.fallback) {\r\n            clientHeader.push(`grpc/${gaxGrpc.grpcVersion}`);\r\n        }\r\n        else if (opts.fallback === 'rest') {\r\n            clientHeader.push(`rest/${gaxGrpc.grpcVersion}`);\r\n        }\r\n        if (opts.libName && opts.libVersion) {\r\n            clientHeader.push(`${opts.libName}/${opts.libVersion}`);\r\n        }\r\n        // Load the applicable protos.\r\n        this._protos = gaxGrpc.loadProtoJSON(jsonProtos);\r\n        // Some of the methods on this service return \"paged\" results,\r\n        // (e.g. 50 results at a time, with tokens to get subsequent\r\n        // pages). Denote the keys used for pagination and results.\r\n        this.descriptors.page = {\r\n            listLocations: new pageDescriptor_1.PageDescriptor('pageToken', 'nextPageToken', 'locations'),\r\n        };\r\n        // Put together the default options sent with requests.\r\n        this._defaults = gaxGrpc.constructSettings('google.cloud.location.Locations', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });\r\n        // Set up a dictionary of \"inner API calls\"; the core implementation\r\n        // of calling the API is handled in `google-gax`, with this code\r\n        // merely providing the destination and request information.\r\n        this.innerApiCalls = {};\r\n        // Add a warn function to the client constructor so it can be easily tested.\r\n        this.warn = warnings_1.warn;\r\n    }\r\n    /**\r\n     * Initialize the client.\r\n     * Performs asynchronous operations (such as authentication) and prepares the client.\r\n     * This function will be called automatically when any class method is called for the\r\n     * first time, but if you need to initialize it before calling an actual method,\r\n     * feel free to call initialize() directly.\r\n     *\r\n     * You can await on this method if you want to make sure the client is initialized.\r\n     *\r\n     * @returns {Promise} A promise that resolves to an authenticated service stub.\r\n     */\r\n    initialize() {\r\n        // If the client stub promise is already initialized, return immediately.\r\n        if (this.locationsStub) {\r\n            return this.locationsStub;\r\n        }\r\n        // Put together the \"service stub\" for\r\n        // google.cloud.location.Locations.\r\n        this.locationsStub = this.gaxGrpc.createStub(this._opts.fallback\r\n            ? this._protos.lookupService('google.cloud.location.Locations')\r\n            : // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                this._protos.google.cloud.location.Locations, this._opts, this._providedCustomServicePath);\r\n        // Iterate over each of the methods that the service provides\r\n        // and create an API call method for each.\r\n        const locationsStubMethods = ['listLocations', 'getLocation'];\r\n        for (const methodName of locationsStubMethods) {\r\n            const callPromise = this.locationsStub.then(stub => (...args) => {\r\n                if (this._terminated) {\r\n                    return Promise.reject('The client has already been closed.');\r\n                }\r\n                const func = stub[methodName];\r\n                return func.apply(stub, args);\r\n            }, (err) => () => {\r\n                throw err;\r\n            });\r\n            const descriptor = this.descriptors.page[methodName] || undefined;\r\n            const apiCall = (0, createApiCall_1.createApiCall)(callPromise, this._defaults[methodName], descriptor);\r\n            this.innerApiCalls[methodName] = apiCall;\r\n        }\r\n        return this.locationsStub;\r\n    }\r\n    /**\r\n     * The DNS address for this API service.\r\n     * @returns {string} The DNS address for this service.\r\n     */\r\n    static get servicePath() {\r\n        return 'cloud.googleapis.com';\r\n    }\r\n    /**\r\n     * The DNS address for this API service - same as servicePath(),\r\n     * exists for compatibility reasons.\r\n     * @returns {string} The DNS address for this service.\r\n     */\r\n    static get apiEndpoint() {\r\n        return 'cloud.googleapis.com';\r\n    }\r\n    /**\r\n     * The port for this API service.\r\n     * @returns {number} The default port for this service.\r\n     */\r\n    static get port() {\r\n        return 443;\r\n    }\r\n    /**\r\n     * The scopes needed to make gRPC calls for every method defined\r\n     * in this service.\r\n     * @returns {string[]} List of default scopes.\r\n     */\r\n    static get scopes() {\r\n        return ['https://www.googleapis.com/auth/cloud-platform'];\r\n    }\r\n    getProjectId(callback) {\r\n        if (callback) {\r\n            this.auth.getProjectId(callback);\r\n            return;\r\n        }\r\n        return this.auth.getProjectId();\r\n    }\r\n    /**\r\n     * Gets information about a location.\r\n     *\r\n     * @param {Object} request\r\n     *   The request object that will be sent.\r\n     * @param {string} request.name\r\n     *   Resource name for the location.\r\n     * @param {object} [options]\r\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\r\n     * @returns {Promise} - The promise which resolves to an array.\r\n     *   The first element of the array is an object representing [Location]{@link google.cloud.location.Location}.\r\n     *   Please see the\r\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#regular-methods)\r\n     *   for more details and examples.\r\n     * @example\r\n     * const [response] = await client.getLocation(request);\r\n     */\r\n    getLocation(request, optionsOrCallback, callback) {\r\n        request = request || {};\r\n        let options;\r\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\r\n            callback = optionsOrCallback;\r\n            options = {};\r\n        }\r\n        else {\r\n            options = optionsOrCallback;\r\n        }\r\n        options = options || {};\r\n        options.otherArgs = options.otherArgs || {};\r\n        options.otherArgs.headers = options.otherArgs.headers || {};\r\n        options.otherArgs.headers['x-goog-request-params'] =\r\n            routingHeader.fromParams({\r\n                name: request.name || '',\r\n            });\r\n        this.initialize().catch(console.error);\r\n        return this.innerApiCalls.getLocation(request, options, callback);\r\n    }\r\n    /**\r\n     * Lists information about the supported locations for this service.\r\n     *\r\n     * @param {Object} request\r\n     *   The request object that will be sent.\r\n     * @param {string} request.name\r\n     *   The resource that owns the locations collection, if applicable.\r\n     * @param {string} request.filter\r\n     *   The standard list filter.\r\n     * @param {number} request.pageSize\r\n     *   The standard list page size.\r\n     * @param {string} request.pageToken\r\n     *   The standard list page token.\r\n     * @param {object} [options]\r\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\r\n     * @returns {Promise} - The promise which resolves to an array.\r\n     *   The first element of the array is Array of [Location]{@link google.cloud.location.Location}.\r\n     *   The client library will perform auto-pagination by default: it will call the API as many\r\n     *   times as needed and will merge results from all the pages into this array.\r\n     *   Note that it can affect your quota.\r\n     *   We recommend using `listLocationsAsync()`\r\n     *   method described below for async iteration which you can stop as needed.\r\n     *   Please see the\r\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#auto-pagination)\r\n     *   for more details and examples.\r\n     */\r\n    listLocations(request, optionsOrCallback, callback) {\r\n        request = request || {};\r\n        let options;\r\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\r\n            callback = optionsOrCallback;\r\n            options = {};\r\n        }\r\n        else {\r\n            options = optionsOrCallback;\r\n        }\r\n        options = options || {};\r\n        options.otherArgs = options.otherArgs || {};\r\n        options.otherArgs.headers = options.otherArgs.headers || {};\r\n        options.otherArgs.headers['x-goog-request-params'] =\r\n            routingHeader.fromParams({\r\n                name: request.name || '',\r\n            });\r\n        this.initialize().catch(console.error);\r\n        return this.innerApiCalls.listLocations(request, options, callback);\r\n    }\r\n    /**\r\n     * Equivalent to `listLocations`, but returns an iterable object.\r\n     *\r\n     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\r\n     * @param {Object} request\r\n     *   The request object that will be sent.\r\n     * @param {string} request.name\r\n     *   The resource that owns the locations collection, if applicable.\r\n     * @param {string} request.filter\r\n     *   The standard list filter.\r\n     * @param {number} request.pageSize\r\n     *   The standard list page size.\r\n     * @param {string} request.pageToken\r\n     *   The standard list page token.\r\n     * @param {object} [options]\r\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\r\n     * @returns {Object}\r\n     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).\r\n     *   When you iterate the returned iterable, each element will be an object representing\r\n     *   [Location]{@link google.cloud.location.Location}. The API will be called under the hood as needed, once per the page,\r\n     *   so you can stop the iteration when you don't need more results.\r\n     *   Please see the\r\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#auto-pagination)\r\n     *   for more details and examples.\r\n     * @example\r\n     * const iterable = client.listLocationsAsync(request);\r\n     * for await (const response of iterable) {\r\n     *   // process response\r\n     * }\r\n     */\r\n    listLocationsAsync(request, options) {\r\n        request = request || {};\r\n        options = options || {};\r\n        options.otherArgs = options.otherArgs || {};\r\n        options.otherArgs.headers = options.otherArgs.headers || {};\r\n        options.otherArgs.headers['x-goog-request-params'] =\r\n            routingHeader.fromParams({\r\n                name: request.name || '',\r\n            });\r\n        options = options || {};\r\n        const callSettings = new gax.CallSettings(options);\r\n        this.initialize().catch(console.error);\r\n        return this.descriptors.page.listLocations.asyncIterate(this.innerApiCalls['listLocations'], request, callSettings);\r\n    }\r\n    /**\r\n     * Terminate the gRPC channel and close the client.\r\n     *\r\n     * The client will no longer be usable and all future behavior is undefined.\r\n     * @returns {Promise} A promise that resolves when the client is closed.\r\n     */\r\n    close() {\r\n        this.initialize().catch(console.error);\r\n        if (!this._terminated) {\r\n            return this.locationsStub.then(stub => {\r\n                this._terminated = true;\r\n                stub.close();\r\n            });\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n}\r\nexports.LocationsClient = LocationsClient;\r\n//# sourceMappingURL=locationService.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/locationService.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/longRunningCalls/longRunningApiCaller.js":
/*!************************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/longRunningCalls/longRunningApiCaller.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.LongrunningApiCaller = void 0;\r\nconst call_1 = __webpack_require__(/*! ../call */ \"(rsc)/./node_modules/google-gax/build/src/call.js\");\r\nconst gax_1 = __webpack_require__(/*! ../gax */ \"(rsc)/./node_modules/google-gax/build/src/gax.js\");\r\nconst longrunning_1 = __webpack_require__(/*! ./longrunning */ \"(rsc)/./node_modules/google-gax/build/src/longRunningCalls/longrunning.js\");\r\nclass LongrunningApiCaller {\r\n    longrunningDescriptor;\r\n    /**\r\n     * Creates an API caller that performs polling on a long running operation.\r\n     *\r\n     * @private\r\n     * @constructor\r\n     * @param {LongRunningDescriptor} longrunningDescriptor - Holds the\r\n     * decoders used for unpacking responses and the operationsClient\r\n     * used for polling the operation.\r\n     */\r\n    constructor(longrunningDescriptor) {\r\n        this.longrunningDescriptor = longrunningDescriptor;\r\n    }\r\n    init(callback) {\r\n        if (callback) {\r\n            return new call_1.OngoingCall(callback);\r\n        }\r\n        return new call_1.OngoingCallPromise();\r\n    }\r\n    wrap(func) {\r\n        return func;\r\n    }\r\n    call(apiCall, argument, settings, canceller) {\r\n        canceller.call((argument, callback) => {\r\n            return this._wrapOperation(apiCall, settings, argument, callback);\r\n        }, argument);\r\n    }\r\n    _wrapOperation(apiCall, settings, argument, callback) {\r\n        let backoffSettings = settings.longrunning;\r\n        if (!backoffSettings) {\r\n            backoffSettings = (0, gax_1.createDefaultBackoffSettings)();\r\n        }\r\n        const longrunningDescriptor = this.longrunningDescriptor;\r\n        return apiCall(argument, (err, rawResponse) => {\r\n            if (err) {\r\n                callback(err, null, null, rawResponse);\r\n                return;\r\n            }\r\n            const operation = new longrunning_1.Operation(rawResponse, longrunningDescriptor, backoffSettings, settings);\r\n            callback(null, operation, rawResponse);\r\n        });\r\n    }\r\n    fail(canceller, err) {\r\n        canceller.callback(err);\r\n    }\r\n    result(canceller) {\r\n        return canceller.promise;\r\n    }\r\n}\r\nexports.LongrunningApiCaller = LongrunningApiCaller;\r\n//# sourceMappingURL=longRunningApiCaller.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvbG9uZ1J1bm5pbmdDYWxscy9sb25nUnVubmluZ0FwaUNhbGxlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw0QkFBNEI7QUFDNUIsZUFBZSxtQkFBTyxDQUFDLGtFQUFTO0FBQ2hDLGNBQWMsbUJBQU8sQ0FBQyxnRUFBUTtBQUM5QixzQkFBc0IsbUJBQU8sQ0FBQyxnR0FBZTtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsdUJBQXVCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYW5pc2gtYnVkZHkvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvbG9uZ1J1bm5pbmdDYWxscy9sb25nUnVubmluZ0FwaUNhbGxlci5qcz8wMWI4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG4vKipcclxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuTG9uZ3J1bm5pbmdBcGlDYWxsZXIgPSB2b2lkIDA7XHJcbmNvbnN0IGNhbGxfMSA9IHJlcXVpcmUoXCIuLi9jYWxsXCIpO1xyXG5jb25zdCBnYXhfMSA9IHJlcXVpcmUoXCIuLi9nYXhcIik7XHJcbmNvbnN0IGxvbmdydW5uaW5nXzEgPSByZXF1aXJlKFwiLi9sb25ncnVubmluZ1wiKTtcclxuY2xhc3MgTG9uZ3J1bm5pbmdBcGlDYWxsZXIge1xyXG4gICAgbG9uZ3J1bm5pbmdEZXNjcmlwdG9yO1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGFuIEFQSSBjYWxsZXIgdGhhdCBwZXJmb3JtcyBwb2xsaW5nIG9uIGEgbG9uZyBydW5uaW5nIG9wZXJhdGlvbi5cclxuICAgICAqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICogQGNvbnN0cnVjdG9yXHJcbiAgICAgKiBAcGFyYW0ge0xvbmdSdW5uaW5nRGVzY3JpcHRvcn0gbG9uZ3J1bm5pbmdEZXNjcmlwdG9yIC0gSG9sZHMgdGhlXHJcbiAgICAgKiBkZWNvZGVycyB1c2VkIGZvciB1bnBhY2tpbmcgcmVzcG9uc2VzIGFuZCB0aGUgb3BlcmF0aW9uc0NsaWVudFxyXG4gICAgICogdXNlZCBmb3IgcG9sbGluZyB0aGUgb3BlcmF0aW9uLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcihsb25ncnVubmluZ0Rlc2NyaXB0b3IpIHtcclxuICAgICAgICB0aGlzLmxvbmdydW5uaW5nRGVzY3JpcHRvciA9IGxvbmdydW5uaW5nRGVzY3JpcHRvcjtcclxuICAgIH1cclxuICAgIGluaXQoY2FsbGJhY2spIHtcclxuICAgICAgICBpZiAoY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBjYWxsXzEuT25nb2luZ0NhbGwoY2FsbGJhY2spO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3IGNhbGxfMS5PbmdvaW5nQ2FsbFByb21pc2UoKTtcclxuICAgIH1cclxuICAgIHdyYXAoZnVuYykge1xyXG4gICAgICAgIHJldHVybiBmdW5jO1xyXG4gICAgfVxyXG4gICAgY2FsbChhcGlDYWxsLCBhcmd1bWVudCwgc2V0dGluZ3MsIGNhbmNlbGxlcikge1xyXG4gICAgICAgIGNhbmNlbGxlci5jYWxsKChhcmd1bWVudCwgY2FsbGJhY2spID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dyYXBPcGVyYXRpb24oYXBpQ2FsbCwgc2V0dGluZ3MsIGFyZ3VtZW50LCBjYWxsYmFjayk7XHJcbiAgICAgICAgfSwgYXJndW1lbnQpO1xyXG4gICAgfVxyXG4gICAgX3dyYXBPcGVyYXRpb24oYXBpQ2FsbCwgc2V0dGluZ3MsIGFyZ3VtZW50LCBjYWxsYmFjaykge1xyXG4gICAgICAgIGxldCBiYWNrb2ZmU2V0dGluZ3MgPSBzZXR0aW5ncy5sb25ncnVubmluZztcclxuICAgICAgICBpZiAoIWJhY2tvZmZTZXR0aW5ncykge1xyXG4gICAgICAgICAgICBiYWNrb2ZmU2V0dGluZ3MgPSAoMCwgZ2F4XzEuY3JlYXRlRGVmYXVsdEJhY2tvZmZTZXR0aW5ncykoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgbG9uZ3J1bm5pbmdEZXNjcmlwdG9yID0gdGhpcy5sb25ncnVubmluZ0Rlc2NyaXB0b3I7XHJcbiAgICAgICAgcmV0dXJuIGFwaUNhbGwoYXJndW1lbnQsIChlcnIsIHJhd1Jlc3BvbnNlKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVyciwgbnVsbCwgbnVsbCwgcmF3UmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG9wZXJhdGlvbiA9IG5ldyBsb25ncnVubmluZ18xLk9wZXJhdGlvbihyYXdSZXNwb25zZSwgbG9uZ3J1bm5pbmdEZXNjcmlwdG9yLCBiYWNrb2ZmU2V0dGluZ3MsIHNldHRpbmdzKTtcclxuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgb3BlcmF0aW9uLCByYXdSZXNwb25zZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBmYWlsKGNhbmNlbGxlciwgZXJyKSB7XHJcbiAgICAgICAgY2FuY2VsbGVyLmNhbGxiYWNrKGVycik7XHJcbiAgICB9XHJcbiAgICByZXN1bHQoY2FuY2VsbGVyKSB7XHJcbiAgICAgICAgcmV0dXJuIGNhbmNlbGxlci5wcm9taXNlO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuTG9uZ3J1bm5pbmdBcGlDYWxsZXIgPSBMb25ncnVubmluZ0FwaUNhbGxlcjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9uZ1J1bm5pbmdBcGlDYWxsZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/longRunningCalls/longRunningApiCaller.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/longRunningCalls/longRunningDescriptor.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/longRunningCalls/longRunningDescriptor.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.LongRunningDescriptor = void 0;\r\nconst longRunningApiCaller_1 = __webpack_require__(/*! ./longRunningApiCaller */ \"(rsc)/./node_modules/google-gax/build/src/longRunningCalls/longRunningApiCaller.js\");\r\n/**\r\n * A descriptor for long-running operations.\r\n */\r\nclass LongRunningDescriptor {\r\n    operationsClient;\r\n    responseDecoder;\r\n    metadataDecoder;\r\n    constructor(operationsClient, responseDecoder, metadataDecoder) {\r\n        this.operationsClient = operationsClient;\r\n        this.responseDecoder = responseDecoder;\r\n        this.metadataDecoder = metadataDecoder;\r\n    }\r\n    getApiCaller() {\r\n        return new longRunningApiCaller_1.LongrunningApiCaller(this);\r\n    }\r\n}\r\nexports.LongRunningDescriptor = LongRunningDescriptor;\r\n//# sourceMappingURL=longRunningDescriptor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvbG9uZ1J1bm5pbmdDYWxscy9sb25nUnVubmluZ0Rlc2NyaXB0b3IuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNkJBQTZCO0FBQzdCLCtCQUErQixtQkFBTyxDQUFDLGtIQUF3QjtBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QiIsInNvdXJjZXMiOlsid2VicGFjazovL2RhbmlzaC1idWRkeS8uL25vZGVfbW9kdWxlcy9nb29nbGUtZ2F4L2J1aWxkL3NyYy9sb25nUnVubmluZ0NhbGxzL2xvbmdSdW5uaW5nRGVzY3JpcHRvci5qcz80M2VjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG4vKipcclxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuTG9uZ1J1bm5pbmdEZXNjcmlwdG9yID0gdm9pZCAwO1xyXG5jb25zdCBsb25nUnVubmluZ0FwaUNhbGxlcl8xID0gcmVxdWlyZShcIi4vbG9uZ1J1bm5pbmdBcGlDYWxsZXJcIik7XHJcbi8qKlxyXG4gKiBBIGRlc2NyaXB0b3IgZm9yIGxvbmctcnVubmluZyBvcGVyYXRpb25zLlxyXG4gKi9cclxuY2xhc3MgTG9uZ1J1bm5pbmdEZXNjcmlwdG9yIHtcclxuICAgIG9wZXJhdGlvbnNDbGllbnQ7XHJcbiAgICByZXNwb25zZURlY29kZXI7XHJcbiAgICBtZXRhZGF0YURlY29kZXI7XHJcbiAgICBjb25zdHJ1Y3RvcihvcGVyYXRpb25zQ2xpZW50LCByZXNwb25zZURlY29kZXIsIG1ldGFkYXRhRGVjb2Rlcikge1xyXG4gICAgICAgIHRoaXMub3BlcmF0aW9uc0NsaWVudCA9IG9wZXJhdGlvbnNDbGllbnQ7XHJcbiAgICAgICAgdGhpcy5yZXNwb25zZURlY29kZXIgPSByZXNwb25zZURlY29kZXI7XHJcbiAgICAgICAgdGhpcy5tZXRhZGF0YURlY29kZXIgPSBtZXRhZGF0YURlY29kZXI7XHJcbiAgICB9XHJcbiAgICBnZXRBcGlDYWxsZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBsb25nUnVubmluZ0FwaUNhbGxlcl8xLkxvbmdydW5uaW5nQXBpQ2FsbGVyKHRoaXMpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuTG9uZ1J1bm5pbmdEZXNjcmlwdG9yID0gTG9uZ1J1bm5pbmdEZXNjcmlwdG9yO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb25nUnVubmluZ0Rlc2NyaXB0b3IuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/longRunningCalls/longRunningDescriptor.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/longRunningCalls/longrunning.js":
/*!***************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/longRunningCalls/longrunning.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\r\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || (function () {\r\n    var ownKeys = function(o) {\r\n        ownKeys = Object.getOwnPropertyNames || function (o) {\r\n            var ar = [];\r\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\r\n            return ar;\r\n        };\r\n        return ownKeys(o);\r\n    };\r\n    return function (mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\r\n        __setModuleDefault(result, mod);\r\n        return result;\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Operation = void 0;\r\nexports.operation = operation;\r\nconst events_1 = __webpack_require__(/*! events */ \"events\");\r\nconst status_1 = __webpack_require__(/*! ../status */ \"(rsc)/./node_modules/google-gax/build/src/status.js\");\r\nconst googleError_1 = __webpack_require__(/*! ../googleError */ \"(rsc)/./node_modules/google-gax/build/src/googleError.js\");\r\nconst operationProtos = __importStar(__webpack_require__(/*! ../../protos/operations */ \"(rsc)/./node_modules/google-gax/build/protos/operations.js\"));\r\nclass Operation extends events_1.EventEmitter {\r\n    completeListeners;\r\n    hasActiveListeners;\r\n    latestResponse;\r\n    longrunningDescriptor;\r\n    result;\r\n    metadata;\r\n    backoffSettings;\r\n    _callOptions;\r\n    currentCallPromise_;\r\n    name;\r\n    done;\r\n    error;\r\n    response;\r\n    /**\r\n     * Wrapper for a google.longrunnung.Operation.\r\n     *\r\n     * @constructor\r\n     *\r\n     * @param {google.longrunning.Operation} grpcOp - The operation to be wrapped.\r\n     * @param {LongRunningDescriptor} longrunningDescriptor - This defines the\r\n     * operations service client and unpacking mechanisms for the operation.\r\n     * @param {BackoffSettings} backoffSettings - The backoff settings used in\r\n     * in polling the operation.\r\n     * @param {CallOptions} callOptions - CallOptions used in making get operation\r\n     * requests.\r\n     */\r\n    constructor(grpcOp, longrunningDescriptor, backoffSettings, callOptions) {\r\n        super();\r\n        this.completeListeners = 0;\r\n        this.hasActiveListeners = false;\r\n        this.latestResponse = grpcOp;\r\n        this.name = this.latestResponse.name;\r\n        this.done = this.latestResponse.done;\r\n        this.error = this.latestResponse.error;\r\n        this.longrunningDescriptor = longrunningDescriptor;\r\n        this.result = null;\r\n        this.metadata = null;\r\n        this.backoffSettings = backoffSettings;\r\n        this._unpackResponse(grpcOp);\r\n        this._listenForEvents();\r\n        this._callOptions = callOptions;\r\n    }\r\n    /**\r\n     * Begin listening for events on the operation. This method keeps track of how\r\n     * many \"complete\" listeners are registered and removed, making sure polling\r\n     * is handled automatically.\r\n     *\r\n     * As long as there is one active \"complete\" listener, the connection is open.\r\n     * When there are no more listeners, the polling stops.\r\n     *\r\n     * @private\r\n     */\r\n    _listenForEvents() {\r\n        this.on('newListener', event => {\r\n            if (event === 'complete') {\r\n                this.completeListeners++;\r\n                if (!this.hasActiveListeners) {\r\n                    this.hasActiveListeners = true;\r\n                    this.startPolling_();\r\n                }\r\n            }\r\n        });\r\n        this.on('removeListener', event => {\r\n            if (event === 'complete' && --this.completeListeners === 0) {\r\n                this.hasActiveListeners = false;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Cancels current polling api call and cancels the operation.\r\n     *\r\n     * @return {Promise} the promise of the OperationsClient#cancelOperation api\r\n     * request.\r\n     */\r\n    cancel() {\r\n        if (this.currentCallPromise_) {\r\n            this.currentCallPromise_.cancel();\r\n        }\r\n        const operationsClient = this.longrunningDescriptor.operationsClient;\r\n        const cancelRequest = new operationProtos.google.longrunning.CancelOperationRequest();\r\n        cancelRequest.name = this.latestResponse.name;\r\n        return operationsClient.cancelOperation(cancelRequest);\r\n    }\r\n    getOperation(callback) {\r\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n        const self = this;\r\n        const operationsClient = this.longrunningDescriptor.operationsClient;\r\n        function promisifyResponse() {\r\n            if (!callback) {\r\n                return new Promise((resolve, reject) => {\r\n                    if (self.latestResponse.error) {\r\n                        const error = new googleError_1.GoogleError(self.latestResponse.error.message);\r\n                        error.code = self.latestResponse.error.code;\r\n                        reject(error);\r\n                    }\r\n                    else {\r\n                        resolve([self.result, self.metadata, self.latestResponse]);\r\n                    }\r\n                });\r\n            }\r\n            return;\r\n        }\r\n        if (this.latestResponse.done) {\r\n            this._unpackResponse(this.latestResponse, callback);\r\n            return promisifyResponse();\r\n        }\r\n        const request = new operationProtos.google.longrunning.GetOperationRequest();\r\n        request.name = this.latestResponse.name;\r\n        this.currentCallPromise_ = operationsClient.getOperationInternal(request, this._callOptions);\r\n        const noCallbackPromise = this.currentCallPromise_.then(responses => {\r\n            self.latestResponse = responses[0];\r\n            self._unpackResponse(responses[0], callback);\r\n            return promisifyResponse();\r\n        }, (err) => {\r\n            if (callback) {\r\n                callback(err);\r\n                return;\r\n            }\r\n            return Promise.reject(err);\r\n        });\r\n        if (!callback) {\r\n            return noCallbackPromise;\r\n        }\r\n    }\r\n    _unpackResponse(op, callback) {\r\n        const responseDecoder = this.longrunningDescriptor.responseDecoder;\r\n        const metadataDecoder = this.longrunningDescriptor.metadataDecoder;\r\n        let response;\r\n        let metadata;\r\n        if (op.done) {\r\n            if (op.result === 'error') {\r\n                const error = new googleError_1.GoogleError(op.error.message);\r\n                error.code = op.error.code;\r\n                this.error = error;\r\n                if (callback) {\r\n                    callback(error);\r\n                }\r\n                return;\r\n            }\r\n            if (responseDecoder && op.response) {\r\n                this.response = op.response;\r\n                response = responseDecoder(op.response.value);\r\n                this.result = response;\r\n                this.done = true;\r\n            }\r\n        }\r\n        if (metadataDecoder && op.metadata) {\r\n            metadata = metadataDecoder(op.metadata.value);\r\n            this.metadata = metadata;\r\n        }\r\n        if (callback) {\r\n            callback(null, response, metadata, op);\r\n        }\r\n    }\r\n    /**\r\n     * Poll `getOperation` to check the operation's status. This runs a loop to\r\n     * ping using the backoff strategy specified at initialization.\r\n     *\r\n     * Note: This method is automatically called once a \"complete\" event handler\r\n     * is registered on the operation.\r\n     *\r\n     * @private\r\n     */\r\n    startPolling_() {\r\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n        const self = this;\r\n        let now = new Date();\r\n        const delayMult = this.backoffSettings.retryDelayMultiplier;\r\n        const maxDelay = this.backoffSettings.maxRetryDelayMillis;\r\n        let delay = this.backoffSettings.initialRetryDelayMillis;\r\n        let deadline = Infinity;\r\n        if (this.backoffSettings.totalTimeoutMillis) {\r\n            deadline = now.getTime() + this.backoffSettings.totalTimeoutMillis;\r\n        }\r\n        let previousMetadataBytes;\r\n        if (this.latestResponse.metadata) {\r\n            previousMetadataBytes = this.latestResponse.metadata.value;\r\n        }\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        function emit(event, ...args) {\r\n            self.emit(event, ...args);\r\n        }\r\n        // Helper function to replace nodejs buffer's equals()\r\n        function arrayEquals(a, b) {\r\n            if (a.byteLength !== b.byteLength) {\r\n                return false;\r\n            }\r\n            for (let i = 0; i < a.byteLength; ++i) {\r\n                if (a[i] !== b[i])\r\n                    return false;\r\n            }\r\n            return true;\r\n        }\r\n        function retry() {\r\n            if (!self.hasActiveListeners) {\r\n                return;\r\n            }\r\n            if (now.getTime() >= deadline) {\r\n                const error = new googleError_1.GoogleError('Total timeout exceeded before any response was received');\r\n                error.code = status_1.Status.DEADLINE_EXCEEDED;\r\n                setImmediate(emit, 'error', error);\r\n                return;\r\n            }\r\n            self.getOperation((err, result, metadata, rawResponse) => {\r\n                if (err) {\r\n                    setImmediate(emit, 'error', err);\r\n                    return;\r\n                }\r\n                if (!result) {\r\n                    if (rawResponse.metadata &&\r\n                        (!previousMetadataBytes ||\r\n                            (rawResponse &&\r\n                                !arrayEquals(rawResponse.metadata.value, previousMetadataBytes)))) {\r\n                        setImmediate(emit, 'progress', metadata, rawResponse);\r\n                        previousMetadataBytes = rawResponse.metadata.value;\r\n                    }\r\n                    // special case: some APIs fail to set either result or error\r\n                    // but set done = true (e.g. speech with silent file).\r\n                    // Some APIs just use this for the normal completion\r\n                    // (e.g. nodejs-contact-center-insights), so let's just return\r\n                    // an empty response in this case.\r\n                    if (rawResponse.done) {\r\n                        setImmediate(emit, 'complete', {}, metadata, rawResponse);\r\n                        return;\r\n                    }\r\n                    setTimeout(() => {\r\n                        now = new Date();\r\n                        delay = Math.min(delay * delayMult, maxDelay);\r\n                        retry();\r\n                    }, delay);\r\n                    return;\r\n                }\r\n                setImmediate(emit, 'complete', result, metadata, rawResponse);\r\n            });\r\n        }\r\n        retry();\r\n    }\r\n    /**\r\n     * Wraps the `complete` and `error` events in a Promise.\r\n     *\r\n     * @return {promise} - Promise that resolves on operation completion and rejects\r\n     * on operation error.\r\n     */\r\n    promise() {\r\n        return new Promise((resolve, reject) => {\r\n            this.on('error', reject).on('complete', (result, metadata, rawResponse) => {\r\n                resolve([result, metadata, rawResponse]);\r\n            });\r\n        });\r\n    }\r\n}\r\nexports.Operation = Operation;\r\n/**\r\n * Method used to create Operation objects.\r\n *\r\n * @constructor\r\n *\r\n * @param {google.longrunning.Operation} op - The operation to be wrapped.\r\n * @param {LongRunningDescriptor} longrunningDescriptor - This defines the\r\n * operations service client and unpacking mechanisms for the operation.\r\n * @param {BackoffSettings} backoffSettings - The backoff settings used in\r\n * in polling the operation.\r\n * @param {CallOptions=} callOptions - CallOptions used in making get operation\r\n * requests.\r\n */\r\nfunction operation(op, longrunningDescriptor, backoffSettings, callOptions) {\r\n    return new Operation(op, longrunningDescriptor, backoffSettings, callOptions);\r\n}\r\n//# sourceMappingURL=longrunning.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/longRunningCalls/longrunning.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/normalCalls/normalApiCaller.js":
/*!**************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/normalCalls/normalApiCaller.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.NormalApiCaller = void 0;\r\nconst call_1 = __webpack_require__(/*! ../call */ \"(rsc)/./node_modules/google-gax/build/src/call.js\");\r\n/**\r\n * Creates an API caller for regular unary methods.\r\n */\r\nclass NormalApiCaller {\r\n    init(callback) {\r\n        if (callback) {\r\n            return new call_1.OngoingCall(callback);\r\n        }\r\n        return new call_1.OngoingCallPromise();\r\n    }\r\n    wrap(func) {\r\n        return func;\r\n    }\r\n    call(apiCall, argument, settings, canceller) {\r\n        canceller.call(apiCall, argument);\r\n    }\r\n    fail(canceller, err) {\r\n        canceller.callback(err);\r\n    }\r\n    result(canceller) {\r\n        return canceller.promise;\r\n    }\r\n}\r\nexports.NormalApiCaller = NormalApiCaller;\r\n//# sourceMappingURL=normalApiCaller.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvbm9ybWFsQ2FsbHMvbm9ybWFsQXBpQ2FsbGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHVCQUF1QjtBQUN2QixlQUFlLG1CQUFPLENBQUMsa0VBQVM7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QiIsInNvdXJjZXMiOlsid2VicGFjazovL2RhbmlzaC1idWRkeS8uL25vZGVfbW9kdWxlcy9nb29nbGUtZ2F4L2J1aWxkL3NyYy9ub3JtYWxDYWxscy9ub3JtYWxBcGlDYWxsZXIuanM/OGI4NyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuLyoqXHJcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLk5vcm1hbEFwaUNhbGxlciA9IHZvaWQgMDtcclxuY29uc3QgY2FsbF8xID0gcmVxdWlyZShcIi4uL2NhbGxcIik7XHJcbi8qKlxyXG4gKiBDcmVhdGVzIGFuIEFQSSBjYWxsZXIgZm9yIHJlZ3VsYXIgdW5hcnkgbWV0aG9kcy5cclxuICovXHJcbmNsYXNzIE5vcm1hbEFwaUNhbGxlciB7XHJcbiAgICBpbml0KGNhbGxiYWNrKSB7XHJcbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgY2FsbF8xLk9uZ29pbmdDYWxsKGNhbGxiYWNrKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyBjYWxsXzEuT25nb2luZ0NhbGxQcm9taXNlKCk7XHJcbiAgICB9XHJcbiAgICB3cmFwKGZ1bmMpIHtcclxuICAgICAgICByZXR1cm4gZnVuYztcclxuICAgIH1cclxuICAgIGNhbGwoYXBpQ2FsbCwgYXJndW1lbnQsIHNldHRpbmdzLCBjYW5jZWxsZXIpIHtcclxuICAgICAgICBjYW5jZWxsZXIuY2FsbChhcGlDYWxsLCBhcmd1bWVudCk7XHJcbiAgICB9XHJcbiAgICBmYWlsKGNhbmNlbGxlciwgZXJyKSB7XHJcbiAgICAgICAgY2FuY2VsbGVyLmNhbGxiYWNrKGVycik7XHJcbiAgICB9XHJcbiAgICByZXN1bHQoY2FuY2VsbGVyKSB7XHJcbiAgICAgICAgcmV0dXJuIGNhbmNlbGxlci5wcm9taXNlO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuTm9ybWFsQXBpQ2FsbGVyID0gTm9ybWFsQXBpQ2FsbGVyO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub3JtYWxBcGlDYWxsZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/normalCalls/normalApiCaller.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/normalCalls/retries.js":
/*!******************************************************************!*\
  !*** ./node_modules/google-gax/build/src/normalCalls/retries.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.retryable = retryable;\r\nconst status_1 = __webpack_require__(/*! ../status */ \"(rsc)/./node_modules/google-gax/build/src/status.js\");\r\nconst googleError_1 = __webpack_require__(/*! ../googleError */ \"(rsc)/./node_modules/google-gax/build/src/googleError.js\");\r\nconst timeout_1 = __webpack_require__(/*! ./timeout */ \"(rsc)/./node_modules/google-gax/build/src/normalCalls/timeout.js\");\r\n/**\r\n * Creates a function equivalent to func, but that retries on certain\r\n * exceptions.\r\n *\r\n * @private\r\n *\r\n * @param {GRPCCall} func - A function.\r\n * @param {RetryOptions} retry - Configures the exceptions upon which the\r\n *   function eshould retry, and the parameters to the exponential backoff retry\r\n *   algorithm.\r\n * @param {GRPCCallOtherArgs} otherArgs - the additional arguments to be passed to func.\r\n * @return {SimpleCallbackFunction} A function that will retry.\r\n */\r\nfunction retryable(func, retry, otherArgs, apiName) {\r\n    const delayMult = retry.backoffSettings.retryDelayMultiplier;\r\n    const maxDelay = retry.backoffSettings.maxRetryDelayMillis;\r\n    const timeoutMult = retry.backoffSettings.rpcTimeoutMultiplier;\r\n    const maxTimeout = retry.backoffSettings.maxRpcTimeoutMillis;\r\n    let delay = retry.backoffSettings.initialRetryDelayMillis;\r\n    let timeout = retry.backoffSettings.initialRpcTimeoutMillis;\r\n    /**\r\n     * Equivalent to ``func``, but retries upon transient failure.\r\n     *\r\n     * Retrying is done through an exponential backoff algorithm configured\r\n     * by the options in ``retry``.\r\n     * @param {RequestType} argument The request object.\r\n     * @param {APICallback} callback The callback.\r\n     * @return {GRPCCall}\r\n     */\r\n    return (argument, callback) => {\r\n        let canceller;\r\n        let timeoutId;\r\n        let now = new Date();\r\n        let deadline;\r\n        if (retry.backoffSettings.totalTimeoutMillis) {\r\n            deadline = now.getTime() + retry.backoffSettings.totalTimeoutMillis;\r\n        }\r\n        let retries = 0;\r\n        const maxRetries = retry.backoffSettings.maxRetries;\r\n        // TODO: define A/B testing values for retry behaviors.\r\n        /** Repeat the API call as long as necessary. */\r\n        function repeat(err) {\r\n            timeoutId = null;\r\n            if (deadline && now.getTime() >= deadline) {\r\n                const error = new googleError_1.GoogleError(`Total timeout of API ${apiName} exceeded ${retry.backoffSettings.totalTimeoutMillis} milliseconds ${err ? `retrying error ${err} ` : ''} before any response was received.`);\r\n                error.code = status_1.Status.DEADLINE_EXCEEDED;\r\n                callback(error);\r\n                return;\r\n            }\r\n            if (retries && retries >= maxRetries) {\r\n                const error = new googleError_1.GoogleError('Exceeded maximum number of retries ' +\r\n                    (err ? `retrying error ${err} ` : '') +\r\n                    'before any response was received');\r\n                error.code = status_1.Status.DEADLINE_EXCEEDED;\r\n                callback(error);\r\n                return;\r\n            }\r\n            retries++;\r\n            let lastError = err;\r\n            const toCall = (0, timeout_1.addTimeoutArg)(func, timeout, otherArgs);\r\n            canceller = toCall(argument, (err, response, next, rawResponse) => {\r\n                // Save only the error before deadline exceeded\r\n                if (err && err.code !== 4) {\r\n                    lastError = err;\r\n                }\r\n                if (!err) {\r\n                    callback(null, response, next, rawResponse);\r\n                    return;\r\n                }\r\n                canceller = null;\r\n                if (retry.retryCodes.length > 0 &&\r\n                    retry.retryCodes.indexOf(err.code) < 0) {\r\n                    err.note =\r\n                        'Exception occurred in retry method that was ' +\r\n                            'not classified as transient';\r\n                    callback(err);\r\n                }\r\n                else {\r\n                    const toSleep = Math.random() * delay;\r\n                    timeoutId = setTimeout(() => {\r\n                        now = new Date();\r\n                        delay = Math.min(delay * delayMult, maxDelay);\r\n                        const timeoutCal = timeout && timeoutMult ? timeout * timeoutMult : 0;\r\n                        const rpcTimeout = maxTimeout ? maxTimeout : 0;\r\n                        const newDeadline = deadline ? deadline - now.getTime() : 0;\r\n                        timeout = Math.min(timeoutCal, rpcTimeout, newDeadline);\r\n                        repeat(lastError);\r\n                    }, toSleep);\r\n                }\r\n            });\r\n            if (canceller instanceof Promise) {\r\n                canceller.catch(err => {\r\n                    callback(new googleError_1.GoogleError(err));\r\n                });\r\n            }\r\n        }\r\n        if (maxRetries && deadline) {\r\n            const error = new googleError_1.GoogleError('Cannot set both totalTimeoutMillis and maxRetries ' +\r\n                'in backoffSettings.');\r\n            error.code = status_1.Status.INVALID_ARGUMENT;\r\n            callback(error);\r\n        }\r\n        else {\r\n            repeat();\r\n        }\r\n        return {\r\n            cancel() {\r\n                if (timeoutId) {\r\n                    clearTimeout(timeoutId);\r\n                }\r\n                if (canceller) {\r\n                    canceller.cancel();\r\n                }\r\n                else {\r\n                    const error = new googleError_1.GoogleError('cancelled');\r\n                    error.code = status_1.Status.CANCELLED;\r\n                    callback(error);\r\n                }\r\n            },\r\n        };\r\n    };\r\n}\r\n//# sourceMappingURL=retries.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvbm9ybWFsQ2FsbHMvcmV0cmllcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxpQkFBaUI7QUFDakIsaUJBQWlCLG1CQUFPLENBQUMsc0VBQVc7QUFDcEMsc0JBQXNCLG1CQUFPLENBQUMsZ0ZBQWdCO0FBQzlDLGtCQUFrQixtQkFBTyxDQUFDLG1GQUFXO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQixXQUFXLGNBQWM7QUFDekI7QUFDQTtBQUNBLFdBQVcsbUJBQW1CO0FBQzlCLFlBQVksd0JBQXdCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxhQUFhO0FBQzVCLGVBQWUsYUFBYTtBQUM1QixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvRkFBb0YsU0FBUyxXQUFXLDBDQUEwQyxlQUFlLHdCQUF3QixLQUFLLFFBQVE7QUFDdE07QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLEtBQUs7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFuaXNoLWJ1ZGR5Ly4vbm9kZV9tb2R1bGVzL2dvb2dsZS1nYXgvYnVpbGQvc3JjL25vcm1hbENhbGxzL3JldHJpZXMuanM/ZmIzZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuLyoqXHJcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnJldHJ5YWJsZSA9IHJldHJ5YWJsZTtcclxuY29uc3Qgc3RhdHVzXzEgPSByZXF1aXJlKFwiLi4vc3RhdHVzXCIpO1xyXG5jb25zdCBnb29nbGVFcnJvcl8xID0gcmVxdWlyZShcIi4uL2dvb2dsZUVycm9yXCIpO1xyXG5jb25zdCB0aW1lb3V0XzEgPSByZXF1aXJlKFwiLi90aW1lb3V0XCIpO1xyXG4vKipcclxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGVxdWl2YWxlbnQgdG8gZnVuYywgYnV0IHRoYXQgcmV0cmllcyBvbiBjZXJ0YWluXHJcbiAqIGV4Y2VwdGlvbnMuXHJcbiAqXHJcbiAqIEBwcml2YXRlXHJcbiAqXHJcbiAqIEBwYXJhbSB7R1JQQ0NhbGx9IGZ1bmMgLSBBIGZ1bmN0aW9uLlxyXG4gKiBAcGFyYW0ge1JldHJ5T3B0aW9uc30gcmV0cnkgLSBDb25maWd1cmVzIHRoZSBleGNlcHRpb25zIHVwb24gd2hpY2ggdGhlXHJcbiAqICAgZnVuY3Rpb24gZXNob3VsZCByZXRyeSwgYW5kIHRoZSBwYXJhbWV0ZXJzIHRvIHRoZSBleHBvbmVudGlhbCBiYWNrb2ZmIHJldHJ5XHJcbiAqICAgYWxnb3JpdGhtLlxyXG4gKiBAcGFyYW0ge0dSUENDYWxsT3RoZXJBcmdzfSBvdGhlckFyZ3MgLSB0aGUgYWRkaXRpb25hbCBhcmd1bWVudHMgdG8gYmUgcGFzc2VkIHRvIGZ1bmMuXHJcbiAqIEByZXR1cm4ge1NpbXBsZUNhbGxiYWNrRnVuY3Rpb259IEEgZnVuY3Rpb24gdGhhdCB3aWxsIHJldHJ5LlxyXG4gKi9cclxuZnVuY3Rpb24gcmV0cnlhYmxlKGZ1bmMsIHJldHJ5LCBvdGhlckFyZ3MsIGFwaU5hbWUpIHtcclxuICAgIGNvbnN0IGRlbGF5TXVsdCA9IHJldHJ5LmJhY2tvZmZTZXR0aW5ncy5yZXRyeURlbGF5TXVsdGlwbGllcjtcclxuICAgIGNvbnN0IG1heERlbGF5ID0gcmV0cnkuYmFja29mZlNldHRpbmdzLm1heFJldHJ5RGVsYXlNaWxsaXM7XHJcbiAgICBjb25zdCB0aW1lb3V0TXVsdCA9IHJldHJ5LmJhY2tvZmZTZXR0aW5ncy5ycGNUaW1lb3V0TXVsdGlwbGllcjtcclxuICAgIGNvbnN0IG1heFRpbWVvdXQgPSByZXRyeS5iYWNrb2ZmU2V0dGluZ3MubWF4UnBjVGltZW91dE1pbGxpcztcclxuICAgIGxldCBkZWxheSA9IHJldHJ5LmJhY2tvZmZTZXR0aW5ncy5pbml0aWFsUmV0cnlEZWxheU1pbGxpcztcclxuICAgIGxldCB0aW1lb3V0ID0gcmV0cnkuYmFja29mZlNldHRpbmdzLmluaXRpYWxScGNUaW1lb3V0TWlsbGlzO1xyXG4gICAgLyoqXHJcbiAgICAgKiBFcXVpdmFsZW50IHRvIGBgZnVuY2BgLCBidXQgcmV0cmllcyB1cG9uIHRyYW5zaWVudCBmYWlsdXJlLlxyXG4gICAgICpcclxuICAgICAqIFJldHJ5aW5nIGlzIGRvbmUgdGhyb3VnaCBhbiBleHBvbmVudGlhbCBiYWNrb2ZmIGFsZ29yaXRobSBjb25maWd1cmVkXHJcbiAgICAgKiBieSB0aGUgb3B0aW9ucyBpbiBgYHJldHJ5YGAuXHJcbiAgICAgKiBAcGFyYW0ge1JlcXVlc3RUeXBlfSBhcmd1bWVudCBUaGUgcmVxdWVzdCBvYmplY3QuXHJcbiAgICAgKiBAcGFyYW0ge0FQSUNhbGxiYWNrfSBjYWxsYmFjayBUaGUgY2FsbGJhY2suXHJcbiAgICAgKiBAcmV0dXJuIHtHUlBDQ2FsbH1cclxuICAgICAqL1xyXG4gICAgcmV0dXJuIChhcmd1bWVudCwgY2FsbGJhY2spID0+IHtcclxuICAgICAgICBsZXQgY2FuY2VsbGVyO1xyXG4gICAgICAgIGxldCB0aW1lb3V0SWQ7XHJcbiAgICAgICAgbGV0IG5vdyA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgbGV0IGRlYWRsaW5lO1xyXG4gICAgICAgIGlmIChyZXRyeS5iYWNrb2ZmU2V0dGluZ3MudG90YWxUaW1lb3V0TWlsbGlzKSB7XHJcbiAgICAgICAgICAgIGRlYWRsaW5lID0gbm93LmdldFRpbWUoKSArIHJldHJ5LmJhY2tvZmZTZXR0aW5ncy50b3RhbFRpbWVvdXRNaWxsaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCByZXRyaWVzID0gMDtcclxuICAgICAgICBjb25zdCBtYXhSZXRyaWVzID0gcmV0cnkuYmFja29mZlNldHRpbmdzLm1heFJldHJpZXM7XHJcbiAgICAgICAgLy8gVE9ETzogZGVmaW5lIEEvQiB0ZXN0aW5nIHZhbHVlcyBmb3IgcmV0cnkgYmVoYXZpb3JzLlxyXG4gICAgICAgIC8qKiBSZXBlYXQgdGhlIEFQSSBjYWxsIGFzIGxvbmcgYXMgbmVjZXNzYXJ5LiAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIHJlcGVhdChlcnIpIHtcclxuICAgICAgICAgICAgdGltZW91dElkID0gbnVsbDtcclxuICAgICAgICAgICAgaWYgKGRlYWRsaW5lICYmIG5vdy5nZXRUaW1lKCkgPj0gZGVhZGxpbmUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yID0gbmV3IGdvb2dsZUVycm9yXzEuR29vZ2xlRXJyb3IoYFRvdGFsIHRpbWVvdXQgb2YgQVBJICR7YXBpTmFtZX0gZXhjZWVkZWQgJHtyZXRyeS5iYWNrb2ZmU2V0dGluZ3MudG90YWxUaW1lb3V0TWlsbGlzfSBtaWxsaXNlY29uZHMgJHtlcnIgPyBgcmV0cnlpbmcgZXJyb3IgJHtlcnJ9IGAgOiAnJ30gYmVmb3JlIGFueSByZXNwb25zZSB3YXMgcmVjZWl2ZWQuYCk7XHJcbiAgICAgICAgICAgICAgICBlcnJvci5jb2RlID0gc3RhdHVzXzEuU3RhdHVzLkRFQURMSU5FX0VYQ0VFREVEO1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChyZXRyaWVzICYmIHJldHJpZXMgPj0gbWF4UmV0cmllcykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgZ29vZ2xlRXJyb3JfMS5Hb29nbGVFcnJvcignRXhjZWVkZWQgbWF4aW11bSBudW1iZXIgb2YgcmV0cmllcyAnICtcclxuICAgICAgICAgICAgICAgICAgICAoZXJyID8gYHJldHJ5aW5nIGVycm9yICR7ZXJyfSBgIDogJycpICtcclxuICAgICAgICAgICAgICAgICAgICAnYmVmb3JlIGFueSByZXNwb25zZSB3YXMgcmVjZWl2ZWQnKTtcclxuICAgICAgICAgICAgICAgIGVycm9yLmNvZGUgPSBzdGF0dXNfMS5TdGF0dXMuREVBRExJTkVfRVhDRUVERUQ7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnJvcik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0cmllcysrO1xyXG4gICAgICAgICAgICBsZXQgbGFzdEVycm9yID0gZXJyO1xyXG4gICAgICAgICAgICBjb25zdCB0b0NhbGwgPSAoMCwgdGltZW91dF8xLmFkZFRpbWVvdXRBcmcpKGZ1bmMsIHRpbWVvdXQsIG90aGVyQXJncyk7XHJcbiAgICAgICAgICAgIGNhbmNlbGxlciA9IHRvQ2FsbChhcmd1bWVudCwgKGVyciwgcmVzcG9uc2UsIG5leHQsIHJhd1Jlc3BvbnNlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyBTYXZlIG9ubHkgdGhlIGVycm9yIGJlZm9yZSBkZWFkbGluZSBleGNlZWRlZFxyXG4gICAgICAgICAgICAgICAgaWYgKGVyciAmJiBlcnIuY29kZSAhPT0gNCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxhc3RFcnJvciA9IGVycjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICghZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVzcG9uc2UsIG5leHQsIHJhd1Jlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYW5jZWxsZXIgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJldHJ5LnJldHJ5Q29kZXMubGVuZ3RoID4gMCAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHJ5LnJldHJ5Q29kZXMuaW5kZXhPZihlcnIuY29kZSkgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXJyLm5vdGUgPVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnRXhjZXB0aW9uIG9jY3VycmVkIGluIHJldHJ5IG1ldGhvZCB0aGF0IHdhcyAnICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdub3QgY2xhc3NpZmllZCBhcyB0cmFuc2llbnQnO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0b1NsZWVwID0gTWF0aC5yYW5kb20oKSAqIGRlbGF5O1xyXG4gICAgICAgICAgICAgICAgICAgIHRpbWVvdXRJZCA9IHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBub3cgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxheSA9IE1hdGgubWluKGRlbGF5ICogZGVsYXlNdWx0LCBtYXhEZWxheSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRpbWVvdXRDYWwgPSB0aW1lb3V0ICYmIHRpbWVvdXRNdWx0ID8gdGltZW91dCAqIHRpbWVvdXRNdWx0IDogMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcnBjVGltZW91dCA9IG1heFRpbWVvdXQgPyBtYXhUaW1lb3V0IDogMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3RGVhZGxpbmUgPSBkZWFkbGluZSA/IGRlYWRsaW5lIC0gbm93LmdldFRpbWUoKSA6IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVvdXQgPSBNYXRoLm1pbih0aW1lb3V0Q2FsLCBycGNUaW1lb3V0LCBuZXdEZWFkbGluZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcGVhdChsYXN0RXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIHRvU2xlZXApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaWYgKGNhbmNlbGxlciBpbnN0YW5jZW9mIFByb21pc2UpIHtcclxuICAgICAgICAgICAgICAgIGNhbmNlbGxlci5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKG5ldyBnb29nbGVFcnJvcl8xLkdvb2dsZUVycm9yKGVycikpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG1heFJldHJpZXMgJiYgZGVhZGxpbmUpIHtcclxuICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgZ29vZ2xlRXJyb3JfMS5Hb29nbGVFcnJvcignQ2Fubm90IHNldCBib3RoIHRvdGFsVGltZW91dE1pbGxpcyBhbmQgbWF4UmV0cmllcyAnICtcclxuICAgICAgICAgICAgICAgICdpbiBiYWNrb2ZmU2V0dGluZ3MuJyk7XHJcbiAgICAgICAgICAgIGVycm9yLmNvZGUgPSBzdGF0dXNfMS5TdGF0dXMuSU5WQUxJRF9BUkdVTUVOVDtcclxuICAgICAgICAgICAgY2FsbGJhY2soZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmVwZWF0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGNhbmNlbCgpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aW1lb3V0SWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dElkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChjYW5jZWxsZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYW5jZWxsZXIuY2FuY2VsKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlcnJvciA9IG5ldyBnb29nbGVFcnJvcl8xLkdvb2dsZUVycm9yKCdjYW5jZWxsZWQnKTtcclxuICAgICAgICAgICAgICAgICAgICBlcnJvci5jb2RlID0gc3RhdHVzXzEuU3RhdHVzLkNBTkNFTExFRDtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnJvcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmV0cmllcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/normalCalls/retries.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/normalCalls/timeout.js":
/*!******************************************************************!*\
  !*** ./node_modules/google-gax/build/src/normalCalls/timeout.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\r\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.addTimeoutArg = addTimeoutArg;\r\n/**\r\n * Updates func so that it gets called with the timeout as its final arg.\r\n *\r\n * This converts a function, func, into another function with updated deadline.\r\n *\r\n * @private\r\n *\r\n * @param {GRPCCall} func - a function to be updated.\r\n * @param {number} timeout - to be added to the original function as it final\r\n *   positional arg.\r\n * @param {Object} otherArgs - the additional arguments to be passed to func.\r\n * @param {Object=} abTests - the A/B testing key/value pairs.\r\n * @return {function(Object, APICallback)}\r\n *  the function with other arguments and the timeout.\r\n */\r\nfunction addTimeoutArg(func, timeout, otherArgs, abTests) {\r\n    // TODO: this assumes the other arguments consist of metadata and options,\r\n    // which is specific to gRPC calls. Remove the hidden dependency on gRPC.\r\n    return (argument, callback) => {\r\n        const now = new Date();\r\n        const options = otherArgs.options || {};\r\n        options.deadline = new Date(now.getTime() + timeout);\r\n        const metadata = otherArgs.metadataBuilder\r\n            ? otherArgs.metadataBuilder(abTests, otherArgs.headers || {})\r\n            : null;\r\n        return func(argument, metadata, options, callback);\r\n    };\r\n}\r\n//# sourceMappingURL=timeout.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvbm9ybWFsQ2FsbHMvdGltZW91dC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFVBQVU7QUFDckIsV0FBVyxRQUFRO0FBQ25CO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsU0FBUztBQUNwQixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3RUFBd0U7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2RhbmlzaC1idWRkeS8uL25vZGVfbW9kdWxlcy9nb29nbGUtZ2F4L2J1aWxkL3NyYy9ub3JtYWxDYWxscy90aW1lb3V0LmpzPzRmZjIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8qKlxyXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5hZGRUaW1lb3V0QXJnID0gYWRkVGltZW91dEFyZztcclxuLyoqXHJcbiAqIFVwZGF0ZXMgZnVuYyBzbyB0aGF0IGl0IGdldHMgY2FsbGVkIHdpdGggdGhlIHRpbWVvdXQgYXMgaXRzIGZpbmFsIGFyZy5cclxuICpcclxuICogVGhpcyBjb252ZXJ0cyBhIGZ1bmN0aW9uLCBmdW5jLCBpbnRvIGFub3RoZXIgZnVuY3Rpb24gd2l0aCB1cGRhdGVkIGRlYWRsaW5lLlxyXG4gKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKlxyXG4gKiBAcGFyYW0ge0dSUENDYWxsfSBmdW5jIC0gYSBmdW5jdGlvbiB0byBiZSB1cGRhdGVkLlxyXG4gKiBAcGFyYW0ge251bWJlcn0gdGltZW91dCAtIHRvIGJlIGFkZGVkIHRvIHRoZSBvcmlnaW5hbCBmdW5jdGlvbiBhcyBpdCBmaW5hbFxyXG4gKiAgIHBvc2l0aW9uYWwgYXJnLlxyXG4gKiBAcGFyYW0ge09iamVjdH0gb3RoZXJBcmdzIC0gdGhlIGFkZGl0aW9uYWwgYXJndW1lbnRzIHRvIGJlIHBhc3NlZCB0byBmdW5jLlxyXG4gKiBAcGFyYW0ge09iamVjdD19IGFiVGVzdHMgLSB0aGUgQS9CIHRlc3Rpbmcga2V5L3ZhbHVlIHBhaXJzLlxyXG4gKiBAcmV0dXJuIHtmdW5jdGlvbihPYmplY3QsIEFQSUNhbGxiYWNrKX1cclxuICogIHRoZSBmdW5jdGlvbiB3aXRoIG90aGVyIGFyZ3VtZW50cyBhbmQgdGhlIHRpbWVvdXQuXHJcbiAqL1xyXG5mdW5jdGlvbiBhZGRUaW1lb3V0QXJnKGZ1bmMsIHRpbWVvdXQsIG90aGVyQXJncywgYWJUZXN0cykge1xyXG4gICAgLy8gVE9ETzogdGhpcyBhc3N1bWVzIHRoZSBvdGhlciBhcmd1bWVudHMgY29uc2lzdCBvZiBtZXRhZGF0YSBhbmQgb3B0aW9ucyxcclxuICAgIC8vIHdoaWNoIGlzIHNwZWNpZmljIHRvIGdSUEMgY2FsbHMuIFJlbW92ZSB0aGUgaGlkZGVuIGRlcGVuZGVuY3kgb24gZ1JQQy5cclxuICAgIHJldHVybiAoYXJndW1lbnQsIGNhbGxiYWNrKSA9PiB7XHJcbiAgICAgICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcclxuICAgICAgICBjb25zdCBvcHRpb25zID0gb3RoZXJBcmdzLm9wdGlvbnMgfHwge307XHJcbiAgICAgICAgb3B0aW9ucy5kZWFkbGluZSA9IG5ldyBEYXRlKG5vdy5nZXRUaW1lKCkgKyB0aW1lb3V0KTtcclxuICAgICAgICBjb25zdCBtZXRhZGF0YSA9IG90aGVyQXJncy5tZXRhZGF0YUJ1aWxkZXJcclxuICAgICAgICAgICAgPyBvdGhlckFyZ3MubWV0YWRhdGFCdWlsZGVyKGFiVGVzdHMsIG90aGVyQXJncy5oZWFkZXJzIHx8IHt9KVxyXG4gICAgICAgICAgICA6IG51bGw7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmMoYXJndW1lbnQsIG1ldGFkYXRhLCBvcHRpb25zLCBjYWxsYmFjayk7XHJcbiAgICB9O1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRpbWVvdXQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/normalCalls/timeout.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/operationsClient.js":
/*!***************************************************************!*\
  !*** ./node_modules/google-gax/build/src/operationsClient.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\r\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || (function () {\r\n    var ownKeys = function(o) {\r\n        ownKeys = Object.getOwnPropertyNames || function (o) {\r\n            var ar = [];\r\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\r\n            return ar;\r\n        };\r\n        return ownKeys(o);\r\n    };\r\n    return function (mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\r\n        __setModuleDefault(result, mod);\r\n        return result;\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.OperationsClientBuilder = exports.OperationsClient = exports.ALL_SCOPES = exports.SERVICE_ADDRESS = void 0;\r\nconst createApiCall_1 = __webpack_require__(/*! ./createApiCall */ \"(rsc)/./node_modules/google-gax/build/src/createApiCall.js\");\r\nconst descriptor_1 = __webpack_require__(/*! ./descriptor */ \"(rsc)/./node_modules/google-gax/build/src/descriptor.js\");\r\nconst gax = __importStar(__webpack_require__(/*! ./gax */ \"(rsc)/./node_modules/google-gax/build/src/gax.js\"));\r\nconst configData = __webpack_require__(/*! ./operations_client_config.json */ \"(rsc)/./node_modules/google-gax/build/src/operations_client_config.json\");\r\nconst operationProtoJson = __webpack_require__(/*! ../protos/operations.json */ \"(rsc)/./node_modules/google-gax/build/protos/operations.json\");\r\nconst transcoding_1 = __webpack_require__(/*! ./transcoding */ \"(rsc)/./node_modules/google-gax/build/src/transcoding.js\");\r\nexports.SERVICE_ADDRESS = 'longrunning.googleapis.com';\r\nconst version = (__webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/google-gax/package.json\").version);\r\nconst DEFAULT_SERVICE_PORT = 443;\r\nconst CODE_GEN_NAME_VERSION = 'gapic/0.7.1';\r\n/**\r\n * The scopes needed to make gRPC calls to all of the methods defined in\r\n * this service.\r\n */\r\nexports.ALL_SCOPES = [];\r\n/**\r\n * Manages long-running operations with an API service.\r\n *\r\n * When an API method normally takes long time to complete, it can be designed\r\n * to return {@link Operation} to the client, and the client can use this\r\n * interface to receive the real response asynchronously by polling the\r\n * operation resource, or pass the operation resource to another API (such as\r\n * Google Cloud Pub/Sub API) to receive the response.  Any API service that\r\n * returns long-running operations should implement the `Operations` interface\r\n * so developers can have a consistent client experience.\r\n *\r\n * This will be created through a builder function which can be obtained by the\r\n * module. See the following example of how to initialize the module and how to\r\n * access to the builder.\r\n * @see {@link operationsClient}\r\n *\r\n * @class\r\n */\r\nclass OperationsClient {\r\n    auth;\r\n    innerApiCalls;\r\n    descriptor;\r\n    operationsStub;\r\n    constructor(gaxGrpc, \r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    operationsProtos, options) {\r\n        const opts = Object.assign({\r\n            servicePath: exports.SERVICE_ADDRESS,\r\n            port: DEFAULT_SERVICE_PORT,\r\n            clientConfig: {},\r\n        }, options);\r\n        const googleApiClient = ['gl-node/' + process.versions.node];\r\n        if (opts.libName && opts.libVersion) {\r\n            googleApiClient.push(opts.libName + '/' + opts.libVersion);\r\n        }\r\n        googleApiClient.push(CODE_GEN_NAME_VERSION, 'gax/' + version);\r\n        if (opts.fallback) {\r\n            googleApiClient.push('gl-web/' + version);\r\n        }\r\n        else {\r\n            googleApiClient.push('grpc/' + gaxGrpc.grpcVersion);\r\n        }\r\n        const defaults = gaxGrpc.constructSettings('google.longrunning.Operations', configData, opts.clientConfig || {}, { 'x-goog-api-client': googleApiClient.join(' ') });\r\n        this.auth = gaxGrpc.auth;\r\n        // Set up a dictionary of \"inner API calls\"; the core implementation\r\n        // of calling the API is handled in `google-gax`, with this code\r\n        // merely providing the destination and request information.\r\n        this.innerApiCalls = {};\r\n        this.descriptor = {\r\n            listOperations: new descriptor_1.PageDescriptor('pageToken', 'nextPageToken', 'operations'),\r\n        };\r\n        // Put together the \"service stub\" for\r\n        // google.longrunning.Operations.\r\n        this.operationsStub = gaxGrpc.createStub(opts.fallback\r\n            ? operationsProtos.lookupService('google.longrunning.Operations')\r\n            : operationsProtos.google.longrunning.Operations, opts);\r\n        const operationsStubMethods = [\r\n            'getOperation',\r\n            'listOperations',\r\n            'cancelOperation',\r\n            'deleteOperation',\r\n        ];\r\n        for (const methodName of operationsStubMethods) {\r\n            const innerCallPromise = this.operationsStub.then(stub => (...args) => {\r\n                const func = stub[methodName];\r\n                return func.apply(stub, args);\r\n            }, err => () => {\r\n                throw err;\r\n            });\r\n            this.innerApiCalls[methodName] = (0, createApiCall_1.createApiCall)(innerCallPromise, defaults[methodName], this.descriptor[methodName]);\r\n        }\r\n    }\r\n    /** Closes this operations client. */\r\n    close() {\r\n        this.operationsStub.then(stub => stub.close()).catch(console.error);\r\n    }\r\n    getProjectId(callback) {\r\n        if (this.auth && 'getProjectId' in this.auth) {\r\n            return this.auth.getProjectId(callback);\r\n        }\r\n        if (callback) {\r\n            callback(new Error('Cannot determine project ID.'));\r\n        }\r\n        else {\r\n            return Promise.reject('Cannot determine project ID.');\r\n        }\r\n    }\r\n    // Service calls\r\n    getOperationInternal(request, options, callback) {\r\n        request = request || {};\r\n        options = options || {};\r\n        return this.innerApiCalls.getOperation(request, options, callback);\r\n    }\r\n    /**\r\n     * Gets the latest state of a long-running operation.  Clients can use this\r\n     * method to poll the operation result at intervals as recommended by the API\r\n     * service.\r\n     *\r\n     * @param {Object} request - The request object that will be sent.\r\n     * @param {string} request.name - The name of the operation resource.\r\n     * @param {Object=} options\r\n     *   Optional parameters. You can override the default settings for this call,\r\n     *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\r\n     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\r\n     *   details.\r\n     * @param {function(?Error, ?Object)=} callback\r\n     *   The function which will be called with the result of the API call.\r\n     *\r\n     *   The second parameter to the callback is an object representing\r\n     * [google.longrunning.Operation]{@link\r\n     * external:\"google.longrunning.Operation\"}.\r\n     * @return {Promise} - The promise which resolves to an array.\r\n     *   The first element of the array is an object representing\r\n     * [google.longrunning.Operation]{@link\r\n     * external:\"google.longrunning.Operation\"}. The promise has a method named\r\n     * \"cancel\" which cancels the ongoing API call.\r\n     *\r\n     * @example\r\n     *\r\n     * const client = longrunning.operationsClient();\r\n     * const name = '';\r\n     * const [response] = await client.getOperation({name});\r\n     * // doThingsWith(response)\r\n     */\r\n    getOperation(request, optionsOrCallback, callback) {\r\n        let options;\r\n        if (optionsOrCallback instanceof Function && callback === undefined) {\r\n            callback = optionsOrCallback;\r\n            options = {};\r\n        }\r\n        else {\r\n            options = optionsOrCallback;\r\n        }\r\n        request = request || {};\r\n        options = options || {};\r\n        return this.innerApiCalls.getOperation(request, options, callback);\r\n    }\r\n    /**\r\n     * Lists operations that match the specified filter in the request. If the\r\n     * server doesn't support this method, it returns `UNIMPLEMENTED`.\r\n     *\r\n     * NOTE: the `name` binding below allows API services to override the binding\r\n     * to use different resource name schemes.\r\n     *\r\n     * @param {Object} request - The request object that will be sent.\r\n     * @param {string} request.name - The name of the operation collection.\r\n     * @param {string} request.filter - The standard list filter.\r\n     * @param {number=} request.pageSize\r\n     *   The maximum number of resources contained in the underlying API\r\n     *   response. If page streaming is performed per-resource, this\r\n     *   parameter does not affect the return value. If page streaming is\r\n     *   performed per-page, this determines the maximum number of\r\n     *   resources in a page.\r\n     * @param {Object=} options\r\n     *   Optional parameters. You can override the default settings for this call,\r\n     * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\r\n     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\r\n     * details.\r\n     * @param {function(?Error, ?Array, ?Object, ?Object)=} callback\r\n     *   The function which will be called with the result of the API call.\r\n     *\r\n     *   The second parameter to the callback is Array of\r\n     * [google.longrunning.Operation]{@link\r\n     * external:\"google.longrunning.Operation\"}.\r\n     *\r\n     *   When autoPaginate: false is specified through options, it contains the\r\n     * result in a single response. If the response indicates the next page\r\n     * exists, the third parameter is set to be used for the next request object.\r\n     * The fourth parameter keeps the raw response object of an object\r\n     * representing [google.longrunning.ListOperationsResponse]{@link\r\n     * external:\"google.longrunning.ListOperationsResponse\"}.\r\n     * @return {Promise} - The promise which resolves to an array.\r\n     *   The first element of the array is Array of\r\n     * [google.longrunning.Operation]{@link\r\n     * external:\"google.longrunning.Operation\"}.\r\n     *\r\n     *   When autoPaginate: false is specified through options, the array has\r\n     * three elements. The first element is Array of\r\n     * [google.longrunning.Operation]{@link\r\n     * external:\"google.longrunning.Operation\"} in a single response. The second\r\n     * element is the next request object if the response indicates the next page\r\n     * exists, or null. The third element is an object representing\r\n     * [google.longrunning.ListOperationsResponse]{@link\r\n     * external:\"google.longrunning.ListOperationsResponse\"}.\r\n     *\r\n     *   The promise has a method named \"cancel\" which cancels the ongoing API\r\n     * call.\r\n     *\r\n     * @example\r\n     *\r\n     * const client = longrunning.operationsClient();\r\n     * const request = {\r\n     *     name: '',\r\n     *     filter: ''\r\n     * };\r\n     * // Iterate over all elements.\r\n     * const [resources] = await client.listOperations(request);\r\n     * for (const resource of resources) {\r\n     *   console.log(resources);\r\n     * }\r\n     *\r\n     * // Or obtain the paged response.\r\n     * const options = {autoPaginate: false};\r\n     * let nextRequest = request;\r\n     * while(nextRequest) {\r\n     *   const response = await client.listOperations(nextRequest, options);\r\n     *   const resources = response[0];\r\n     *   nextRequest = response[1];\r\n     *   const rawResponse = response[2];\r\n     *   for (const resource of resources) {\r\n     *     // doThingsWith(resource);\r\n     *   }\r\n     * };\r\n     */\r\n    listOperations(request, optionsOrCallback, callback) {\r\n        let options;\r\n        if (optionsOrCallback instanceof Function && callback === undefined) {\r\n            callback = optionsOrCallback;\r\n            options = {};\r\n        }\r\n        else {\r\n            options = optionsOrCallback;\r\n        }\r\n        request = request || {};\r\n        options = options || {};\r\n        return this.innerApiCalls.listOperations(request, options, callback);\r\n    }\r\n    /**\r\n     * Equivalent to {@link listOperations}, but returns a NodeJS Stream object.\r\n     *\r\n     * This fetches the paged responses for {@link listOperations} continuously\r\n     * and invokes the callback registered for 'data' event for each element in\r\n     * the responses.\r\n     *\r\n     * The returned object has 'end' method when no more elements are required.\r\n     *\r\n     * autoPaginate option will be ignored.\r\n     *\r\n     * @see {@link https://nodejs.org/api/stream.html}\r\n     *\r\n     * @param {Object} request - The request object that will be sent.\r\n     * @param {string} request.name - The name of the operation collection.\r\n     * @param {string} request.filter - The standard list filter.\r\n     * @param {number=} request.pageSize -\r\n     *   The maximum number of resources contained in the underlying API\r\n     *   response. If page streaming is performed per-resource, this\r\n     *   parameter does not affect the return value. If page streaming is\r\n     *   performed per-page, this determines the maximum number of\r\n     *   resources in a page.\r\n     * @param {Object=} options\r\n     *   Optional parameters. You can override the default settings for this call,\r\n     *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\r\n     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\r\n     *   details.\r\n     * @return {Stream} - An object stream which emits an object representing [google.longrunning.Operation]{@link external:\"google.longrunning.Operation\"} on 'data' event.\r\n     *\r\n     * @example\r\n     *\r\n     * const client = longrunning.operationsClient();\r\n     * const request = {\r\n     *   name: '',\r\n     *   filter: ''\r\n     * };\r\n     * client.listOperationsStream(request)\r\n     *   .on('data', element => {\r\n     *     // doThingsWith(element)\r\n     *   })\r\n     *   .on('error', err => {\r\n     *     console.error(err);\r\n     *   });\r\n     */\r\n    listOperationsStream(request, options) {\r\n        const callSettings = new gax.CallSettings(options);\r\n        return this.descriptor.listOperations.createStream(this.innerApiCalls.listOperations, request, callSettings);\r\n    }\r\n    /**\r\n     * Equivalent to {@link listOperations}, but returns an iterable object.\r\n     *\r\n     * for-await-of syntax is used with the iterable to recursively get response element on-demand.\r\n     *\r\n     * @param {Object} request - The request object that will be sent.\r\n     * @param {string} request.name - The name of the operation collection.\r\n     * @param {string} request.filter - The standard list filter.\r\n     * @param {number=} request.pageSize -\r\n     *   The maximum number of resources contained in the underlying API\r\n     *   response. If page streaming is performed per-resource, this\r\n     *   parameter does not affect the return value. If page streaming is\r\n     *   performed per-page, this determines the maximum number of\r\n     *   resources in a page.\r\n     * @param {Object=} options\r\n     *   Optional parameters. You can override the default settings for this call,\r\n     *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\r\n     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\r\n     *   details.\r\n     * @returns {Object}\r\n     *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.\r\n     */\r\n    listOperationsAsync(request, options) {\r\n        request = request || {};\r\n        options = options || {};\r\n        const callSettings = new gax.CallSettings(options);\r\n        return this.descriptor.listOperations.asyncIterate(this.innerApiCalls.listOperations, request, callSettings);\r\n    }\r\n    /**\r\n     * Starts asynchronous cancellation on a long-running operation.  The server\r\n     * makes a best effort to cancel the operation, but success is not\r\n     * guaranteed.  If the server doesn't support this method, it returns\r\n     * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use\r\n     * {@link Operations.GetOperation} or\r\n     * other methods to check whether the cancellation succeeded or whether the\r\n     * operation completed despite cancellation. On successful cancellation,\r\n     * the operation is not deleted; instead, it becomes an operation with\r\n     * an {@link Operation.error} value with a {@link google.rpc.Status.code} of\r\n     * 1, corresponding to `Code.CANCELLED`.\r\n     *\r\n     * @param {Object} request - The request object that will be sent.\r\n     * @param {string} request.name - The name of the operation resource to be cancelled.\r\n     * @param {Object=} options\r\n     *   Optional parameters. You can override the default settings for this call,\r\n     * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\r\n     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\r\n     * details.\r\n     * @param {function(?Error)=} callback\r\n     *   The function which will be called with the result of the API call.\r\n     * @return {Promise} - The promise which resolves when API call finishes.\r\n     *   The promise has a method named \"cancel\" which cancels the ongoing API\r\n     * call.\r\n     *\r\n     * @example\r\n     *\r\n     * const client = longrunning.operationsClient();\r\n     * await client.cancelOperation({name: ''});\r\n     */\r\n    cancelOperation(request, optionsOrCallback, callback) {\r\n        let options;\r\n        if (optionsOrCallback instanceof Function && callback === undefined) {\r\n            callback = optionsOrCallback;\r\n            options = {};\r\n        }\r\n        else {\r\n            options = optionsOrCallback;\r\n        }\r\n        request = request || {};\r\n        options = options || {};\r\n        return this.innerApiCalls.cancelOperation(request, options, callback);\r\n    }\r\n    /**\r\n     * Deletes a long-running operation. This method indicates that the client is\r\n     * no longer interested in the operation result. It does not cancel the\r\n     * operation. If the server doesn't support this method, it returns\r\n     * `google.rpc.Code.UNIMPLEMENTED`.\r\n     *\r\n     * @param {Object} request - The request object that will be sent.\r\n     * @param {string} request.name - The name of the operation resource to be deleted.\r\n     * @param {Object=} options\r\n     *   Optional parameters. You can override the default settings for this call,\r\n     * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\r\n     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\r\n     * details.\r\n     * @param {function(?Error)=} callback\r\n     *   The function which will be called with the result of the API call.\r\n     * @return {Promise} - The promise which resolves when API call finishes.\r\n     *   The promise has a method named \"cancel\" which cancels the ongoing API\r\n     * call.\r\n     *\r\n     * @example\r\n     *\r\n     * const client = longrunning.operationsClient();\r\n     * await client.deleteOperation({name: ''});\r\n     */\r\n    deleteOperation(request, optionsOrCallback, callback) {\r\n        let options;\r\n        if (optionsOrCallback instanceof Function && callback === undefined) {\r\n            callback = optionsOrCallback;\r\n            options = {};\r\n        }\r\n        else {\r\n            options = optionsOrCallback;\r\n        }\r\n        request = request || {};\r\n        options = options || {};\r\n        return this.innerApiCalls.deleteOperation(request, options, callback);\r\n    }\r\n}\r\nexports.OperationsClient = OperationsClient;\r\nclass OperationsClientBuilder {\r\n    operationsClient;\r\n    /**\r\n     * Builds a new Operations Client\r\n     * @param gaxGrpc {GrpcClient}\r\n     */\r\n    constructor(gaxGrpc, protoJson) {\r\n        if (protoJson && gaxGrpc.httpRules) {\r\n            // overwrite the http rules if provide in service yaml.\r\n            (0, transcoding_1.overrideHttpRules)(gaxGrpc.httpRules, protoJson);\r\n        }\r\n        const operationsProtos = protoJson ?? gaxGrpc.loadProtoJSON(operationProtoJson);\r\n        /**\r\n         * Build a new instance of {@link OperationsClient}.\r\n         *\r\n         * @param {Object=} opts - The optional parameters.\r\n         * @param {String=} opts.servicePath - Domain name of the API remote host.\r\n         * @param {number=} opts.port - The port on which to connect to the remote host.\r\n         * @param {grpc.ClientCredentials=} opts.sslCreds - A ClientCredentials for use with an SSL-enabled channel.\r\n         * @param {Object=} opts.clientConfig - The customized config to build the call settings. See {@link gax.constructSettings} for the format.\r\n         */\r\n        this.operationsClient = opts => {\r\n            if (gaxGrpc.fallback) {\r\n                opts.fallback = gaxGrpc.fallback;\r\n            }\r\n            return new OperationsClient(gaxGrpc, operationsProtos, opts);\r\n        };\r\n        Object.assign(this.operationsClient, OperationsClient);\r\n    }\r\n}\r\nexports.OperationsClientBuilder = OperationsClientBuilder;\r\n//# sourceMappingURL=operationsClient.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/operationsClient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/paginationCalls/pageDescriptor.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/paginationCalls/pageDescriptor.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.PageDescriptor = void 0;\r\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\r\nconst normalApiCaller_1 = __webpack_require__(/*! ../normalCalls/normalApiCaller */ \"(rsc)/./node_modules/google-gax/build/src/normalCalls/normalApiCaller.js\");\r\nconst warnings_1 = __webpack_require__(/*! .././warnings */ \"(rsc)/./node_modules/google-gax/build/src/warnings.js\");\r\nconst pagedApiCaller_1 = __webpack_require__(/*! ./pagedApiCaller */ \"(rsc)/./node_modules/google-gax/build/src/paginationCalls/pagedApiCaller.js\");\r\nconst maxAttemptsEmptyResponse = 10;\r\n/**\r\n * A descriptor for methods that support pagination.\r\n */\r\nclass PageDescriptor {\r\n    requestPageTokenField;\r\n    responsePageTokenField;\r\n    requestPageSizeField;\r\n    resourceField;\r\n    constructor(requestPageTokenField, responsePageTokenField, resourceField) {\r\n        this.requestPageTokenField = requestPageTokenField;\r\n        this.responsePageTokenField = responsePageTokenField;\r\n        this.resourceField = resourceField;\r\n    }\r\n    /**\r\n     * Creates a new object Stream which emits the resource on 'data' event.\r\n     */\r\n    createStream(apiCall, request, options) {\r\n        if (options?.autoPaginate) {\r\n            (0, warnings_1.warn)('autoPaginate true', 'Autopaginate will always be set to false in stream paging methods. See more info at https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#auto-pagination for more information on how to configure paging calls', 'AutopaginateTrueWarning');\r\n        }\r\n        const stream = new stream_1.PassThrough({ objectMode: true });\r\n        options = Object.assign({}, options, { autoPaginate: false });\r\n        const maxResults = 'maxResults' in options ? options.maxResults : -1;\r\n        let pushCount = 0;\r\n        let started = false;\r\n        function callback(err, resources, next, apiResp) {\r\n            if (err) {\r\n                stream.emit('error', err);\r\n                return;\r\n            }\r\n            // emit full api response with every page.\r\n            stream.emit('response', apiResp);\r\n            for (let i = 0; i < resources.length; ++i) {\r\n                // TODO: rewrite without accessing stream internals\r\n                if (stream\r\n                    ._readableState.ended) {\r\n                    return;\r\n                }\r\n                if (resources[i] === null) {\r\n                    continue;\r\n                }\r\n                stream.push(resources[i]);\r\n                pushCount++;\r\n                if (pushCount === maxResults) {\r\n                    stream.end();\r\n                }\r\n            }\r\n            // TODO: rewrite without accessing stream internals\r\n            if (stream._readableState\r\n                .ended) {\r\n                return;\r\n            }\r\n            if (!next) {\r\n                stream.end();\r\n                return;\r\n            }\r\n            // When pageToken is specified in the original options, it will overwrite\r\n            // the page token field in the next request. Therefore it must be cleared.\r\n            if ('pageToken' in options) {\r\n                delete options.pageToken;\r\n            }\r\n            if (stream.isPaused()) {\r\n                request = next;\r\n                started = false;\r\n            }\r\n            else {\r\n                setImmediate(apiCall, next, options, callback);\r\n            }\r\n        }\r\n        stream.on('resume', async () => {\r\n            if (!started) {\r\n                started = true;\r\n                await apiCall(request, options, callback);\r\n            }\r\n        });\r\n        return stream;\r\n    }\r\n    /**\r\n     * Create an async iterable which can be recursively called for data on-demand.\r\n     */\r\n    asyncIterate(apiCall, request, options) {\r\n        if (options?.autoPaginate) {\r\n            (0, warnings_1.warn)('autoPaginate true', 'Autopaginate will always be set to false in Async paging methods. See more info at https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#auto-pagination for more information on how to configure paging calls', 'AutopaginateTrueWarning');\r\n        }\r\n        options = Object.assign({}, options, { autoPaginate: false });\r\n        const iterable = this.createIterator(apiCall, request, options);\r\n        return iterable;\r\n    }\r\n    createIterator(apiCall, request, options) {\r\n        const asyncIterable = {\r\n            [Symbol.asyncIterator]() {\r\n                let nextPageRequest = request;\r\n                const cache = [];\r\n                return {\r\n                    async next() {\r\n                        if (cache.length > 0) {\r\n                            return Promise.resolve({\r\n                                done: false,\r\n                                value: cache.shift(),\r\n                            });\r\n                        }\r\n                        let attempts = 0;\r\n                        while (cache.length === 0 && nextPageRequest) {\r\n                            let result;\r\n                            [result, nextPageRequest] = (await apiCall(nextPageRequest, options));\r\n                            // For pagination response with protobuf map type, use tuple as representation.\r\n                            if (result && !Array.isArray(result)) {\r\n                                for (const [key, value] of Object.entries(result)) {\r\n                                    cache.push([key, value]);\r\n                                }\r\n                            }\r\n                            else {\r\n                                cache.push(...result);\r\n                            }\r\n                            if (cache.length === 0) {\r\n                                ++attempts;\r\n                                if (attempts > maxAttemptsEmptyResponse) {\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        if (cache.length === 0) {\r\n                            return Promise.resolve({ done: true, value: undefined });\r\n                        }\r\n                        return Promise.resolve({ done: false, value: cache.shift() });\r\n                    },\r\n                };\r\n            },\r\n        };\r\n        return asyncIterable;\r\n    }\r\n    getApiCaller(settings) {\r\n        if (!settings.autoPaginate) {\r\n            return new normalApiCaller_1.NormalApiCaller();\r\n        }\r\n        return new pagedApiCaller_1.PagedApiCaller(this);\r\n    }\r\n}\r\nexports.PageDescriptor = PageDescriptor;\r\n//# sourceMappingURL=pageDescriptor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/paginationCalls/pageDescriptor.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/paginationCalls/pagedApiCaller.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/paginationCalls/pagedApiCaller.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.PagedApiCaller = void 0;\r\nconst call_1 = __webpack_require__(/*! ../call */ \"(rsc)/./node_modules/google-gax/build/src/call.js\");\r\nconst googleError_1 = __webpack_require__(/*! ../googleError */ \"(rsc)/./node_modules/google-gax/build/src/googleError.js\");\r\nconst resourceCollector_1 = __webpack_require__(/*! ./resourceCollector */ \"(rsc)/./node_modules/google-gax/build/src/paginationCalls/resourceCollector.js\");\r\nconst warnings_1 = __webpack_require__(/*! .././warnings */ \"(rsc)/./node_modules/google-gax/build/src/warnings.js\");\r\nclass PagedApiCaller {\r\n    pageDescriptor;\r\n    /**\r\n     * Creates an API caller that returns a stream to performs page-streaming.\r\n     *\r\n     * @private\r\n     * @constructor\r\n     * @param {PageDescriptor} pageDescriptor - indicates the structure\r\n     *   of page streaming to be performed.\r\n     */\r\n    constructor(pageDescriptor) {\r\n        this.pageDescriptor = pageDescriptor;\r\n    }\r\n    /**\r\n     * This function translates between regular gRPC calls (that accepts a request and returns a response,\r\n     * and does not know anything about pages and page tokens) and the users' callback (that expects\r\n     * to see resources from one page, a request to get the next page, and the raw response from the server).\r\n     *\r\n     * It generates a function that can be passed as a callback function to a gRPC call, will understand\r\n     * pagination-specific fields in the response, and call the users' callback after having those fields\r\n     * parsed.\r\n     *\r\n     * @param request Request object. It needs to be passed to all subsequent next page requests\r\n     * (the main content of the request object stays unchanged, only the next page token changes)\r\n     * @param callback The user's callback that expects the page content, next page request, and raw response.\r\n     */\r\n    generateParseResponseCallback(request, callback) {\r\n        const resourceFieldName = this.pageDescriptor.resourceField;\r\n        const responsePageTokenFieldName = this.pageDescriptor.responsePageTokenField;\r\n        const requestPageTokenFieldName = this.pageDescriptor.requestPageTokenField;\r\n        return (err, response) => {\r\n            if (err) {\r\n                callback(err);\r\n                return;\r\n            }\r\n            if (!request) {\r\n                callback(new googleError_1.GoogleError('Undefined request in pagination method callback.'));\r\n                return;\r\n            }\r\n            if (!response) {\r\n                callback(new googleError_1.GoogleError('Undefined response in pagination method callback.'));\r\n                return;\r\n            }\r\n            const resources = response[resourceFieldName] || [];\r\n            const pageToken = response[responsePageTokenFieldName];\r\n            let nextPageRequest = null;\r\n            if (pageToken) {\r\n                nextPageRequest = Object.assign({}, request);\r\n                nextPageRequest[requestPageTokenFieldName] = pageToken;\r\n            }\r\n            callback(err, resources, nextPageRequest, response);\r\n        };\r\n    }\r\n    /**\r\n     * Adds a special ability to understand pagination-specific fields to the existing gRPC call.\r\n     * The original gRPC call just calls callback(err, result).\r\n     * The wrapped one will call callback(err, resources, nextPageRequest, rawResponse) instead.\r\n     *\r\n     * @param func gRPC call (normally, a service stub call). The gRPC call is expected to accept four parameters:\r\n     * request, metadata, call options, and callback.\r\n     */\r\n    wrap(func) {\r\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n        const self = this;\r\n        return function wrappedCall(argument, metadata, options, callback) {\r\n            return func(argument, metadata, options, self.generateParseResponseCallback(argument, callback));\r\n        };\r\n    }\r\n    /**\r\n     * Makes it possible to use both callback-based and promise-based calls.\r\n     * Returns an OngoingCall or OngoingCallPromise object.\r\n     * Regardless of which one is returned, it always has a `.callback` to call.\r\n     *\r\n     * @param settings Call settings. Can only be used to replace Promise with another promise implementation.\r\n     * @param [callback] Callback to be called, if any.\r\n     */\r\n    init(callback) {\r\n        if (callback) {\r\n            return new call_1.OngoingCall(callback);\r\n        }\r\n        return new call_1.OngoingCallPromise();\r\n    }\r\n    /**\r\n     * Implements auto-pagination logic.\r\n     *\r\n     * @param apiCall A function that performs gRPC request and calls its callback with a response or an error.\r\n     * It's supposed to be a gRPC service stub function wrapped into several layers of wrappers that make it\r\n     * accept just two parameters: (request, callback).\r\n     * @param request A request object that came from the user.\r\n     * @param settings Call settings. We are interested in `maxResults` and `autoPaginate` (they are optional).\r\n     * @param ongoingCall An instance of OngoingCall or OngoingCallPromise that can be used for call cancellation,\r\n     * and is used to return results to the user.\r\n     */\r\n    call(apiCall, request, settings, ongoingCall) {\r\n        request = Object.assign({}, request);\r\n        if (!settings.autoPaginate) {\r\n            // they don't want auto-pagination this time - okay, just call once\r\n            ongoingCall.call(apiCall, request);\r\n            return;\r\n        }\r\n        if (request.pageSize && settings.autoPaginate) {\r\n            (0, warnings_1.warn)('autoPaginate true', 'Providing a pageSize without setting autoPaginate to false will still return all results. See https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#auto-pagination for more information on how to configure manual paging', 'AutopaginateTrueWarning');\r\n        }\r\n        const maxResults = settings.maxResults || -1;\r\n        const resourceCollector = new resourceCollector_1.ResourceCollector(apiCall, maxResults);\r\n        resourceCollector.processAllPages(request).then(resources => ongoingCall.callback(null, resources), err => ongoingCall.callback(err));\r\n    }\r\n    fail(ongoingCall, err) {\r\n        ongoingCall.callback(err);\r\n    }\r\n    result(ongoingCall) {\r\n        return ongoingCall.promise;\r\n    }\r\n}\r\nexports.PagedApiCaller = PagedApiCaller;\r\n//# sourceMappingURL=pagedApiCaller.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/paginationCalls/pagedApiCaller.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/paginationCalls/resourceCollector.js":
/*!********************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/paginationCalls/resourceCollector.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\r\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ResourceCollector = void 0;\r\n/**\r\n * ResourceCollector class implements asynchronous logic of calling the API call that supports pagination,\r\n * page by page, collecting all resources (up to `maxResults`) in the array.\r\n *\r\n * Usage:\r\n *   const resourceCollector = new ResourceCollector(apiCall, maxResults); // -1 for unlimited\r\n *   resourceCollector.processAllPages(request).then(resources => ...);\r\n */\r\nclass ResourceCollector {\r\n    apiCall;\r\n    resources;\r\n    maxResults;\r\n    resolveCallback;\r\n    rejectCallback;\r\n    constructor(apiCall, maxResults = -1) {\r\n        this.apiCall = apiCall;\r\n        this.resources = [];\r\n        this.maxResults = maxResults;\r\n    }\r\n    callback(err, resources, nextPageRequest) {\r\n        if (err) {\r\n            // Something went wrong with this request - failing everything\r\n            this.rejectCallback(err);\r\n            return;\r\n        }\r\n        // Process one page\r\n        for (const resource of resources) {\r\n            this.resources.push(resource);\r\n            if (this.resources.length === this.maxResults) {\r\n                nextPageRequest = null;\r\n                break;\r\n            }\r\n        }\r\n        // All done?\r\n        if (!nextPageRequest) {\r\n            this.resolveCallback(this.resources);\r\n            return;\r\n        }\r\n        // Schedule the next call\r\n        const callback = (...args) => this.callback(...args);\r\n        setImmediate(this.apiCall, nextPageRequest, callback);\r\n    }\r\n    processAllPages(firstRequest) {\r\n        return new Promise((resolve, reject) => {\r\n            this.resolveCallback = resolve;\r\n            this.rejectCallback = reject;\r\n            // Schedule the first call\r\n            const callback = (...args) => this.callback(...args);\r\n            setImmediate(this.apiCall, firstRequest, callback);\r\n        });\r\n    }\r\n}\r\nexports.ResourceCollector = ResourceCollector;\r\n//# sourceMappingURL=resourceCollector.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvcGFnaW5hdGlvbkNhbGxzL3Jlc291cmNlQ29sbGVjdG9yLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkVBQTJFO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYW5pc2gtYnVkZHkvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvcGFnaW5hdGlvbkNhbGxzL3Jlc291cmNlQ29sbGVjdG9yLmpzPzE2NmYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8qKlxyXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5SZXNvdXJjZUNvbGxlY3RvciA9IHZvaWQgMDtcclxuLyoqXHJcbiAqIFJlc291cmNlQ29sbGVjdG9yIGNsYXNzIGltcGxlbWVudHMgYXN5bmNocm9ub3VzIGxvZ2ljIG9mIGNhbGxpbmcgdGhlIEFQSSBjYWxsIHRoYXQgc3VwcG9ydHMgcGFnaW5hdGlvbixcclxuICogcGFnZSBieSBwYWdlLCBjb2xsZWN0aW5nIGFsbCByZXNvdXJjZXMgKHVwIHRvIGBtYXhSZXN1bHRzYCkgaW4gdGhlIGFycmF5LlxyXG4gKlxyXG4gKiBVc2FnZTpcclxuICogICBjb25zdCByZXNvdXJjZUNvbGxlY3RvciA9IG5ldyBSZXNvdXJjZUNvbGxlY3RvcihhcGlDYWxsLCBtYXhSZXN1bHRzKTsgLy8gLTEgZm9yIHVubGltaXRlZFxyXG4gKiAgIHJlc291cmNlQ29sbGVjdG9yLnByb2Nlc3NBbGxQYWdlcyhyZXF1ZXN0KS50aGVuKHJlc291cmNlcyA9PiAuLi4pO1xyXG4gKi9cclxuY2xhc3MgUmVzb3VyY2VDb2xsZWN0b3Ige1xyXG4gICAgYXBpQ2FsbDtcclxuICAgIHJlc291cmNlcztcclxuICAgIG1heFJlc3VsdHM7XHJcbiAgICByZXNvbHZlQ2FsbGJhY2s7XHJcbiAgICByZWplY3RDYWxsYmFjaztcclxuICAgIGNvbnN0cnVjdG9yKGFwaUNhbGwsIG1heFJlc3VsdHMgPSAtMSkge1xyXG4gICAgICAgIHRoaXMuYXBpQ2FsbCA9IGFwaUNhbGw7XHJcbiAgICAgICAgdGhpcy5yZXNvdXJjZXMgPSBbXTtcclxuICAgICAgICB0aGlzLm1heFJlc3VsdHMgPSBtYXhSZXN1bHRzO1xyXG4gICAgfVxyXG4gICAgY2FsbGJhY2soZXJyLCByZXNvdXJjZXMsIG5leHRQYWdlUmVxdWVzdCkge1xyXG4gICAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICAgICAgLy8gU29tZXRoaW5nIHdlbnQgd3Jvbmcgd2l0aCB0aGlzIHJlcXVlc3QgLSBmYWlsaW5nIGV2ZXJ5dGhpbmdcclxuICAgICAgICAgICAgdGhpcy5yZWplY3RDYWxsYmFjayhlcnIpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFByb2Nlc3Mgb25lIHBhZ2VcclxuICAgICAgICBmb3IgKGNvbnN0IHJlc291cmNlIG9mIHJlc291cmNlcykge1xyXG4gICAgICAgICAgICB0aGlzLnJlc291cmNlcy5wdXNoKHJlc291cmNlKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMucmVzb3VyY2VzLmxlbmd0aCA9PT0gdGhpcy5tYXhSZXN1bHRzKSB7XHJcbiAgICAgICAgICAgICAgICBuZXh0UGFnZVJlcXVlc3QgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQWxsIGRvbmU/XHJcbiAgICAgICAgaWYgKCFuZXh0UGFnZVJlcXVlc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5yZXNvbHZlQ2FsbGJhY2sodGhpcy5yZXNvdXJjZXMpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFNjaGVkdWxlIHRoZSBuZXh0IGNhbGxcclxuICAgICAgICBjb25zdCBjYWxsYmFjayA9ICguLi5hcmdzKSA9PiB0aGlzLmNhbGxiYWNrKC4uLmFyZ3MpO1xyXG4gICAgICAgIHNldEltbWVkaWF0ZSh0aGlzLmFwaUNhbGwsIG5leHRQYWdlUmVxdWVzdCwgY2FsbGJhY2spO1xyXG4gICAgfVxyXG4gICAgcHJvY2Vzc0FsbFBhZ2VzKGZpcnN0UmVxdWVzdCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucmVzb2x2ZUNhbGxiYWNrID0gcmVzb2x2ZTtcclxuICAgICAgICAgICAgdGhpcy5yZWplY3RDYWxsYmFjayA9IHJlamVjdDtcclxuICAgICAgICAgICAgLy8gU2NoZWR1bGUgdGhlIGZpcnN0IGNhbGxcclxuICAgICAgICAgICAgY29uc3QgY2FsbGJhY2sgPSAoLi4uYXJncykgPT4gdGhpcy5jYWxsYmFjayguLi5hcmdzKTtcclxuICAgICAgICAgICAgc2V0SW1tZWRpYXRlKHRoaXMuYXBpQ2FsbCwgZmlyc3RSZXF1ZXN0LCBjYWxsYmFjayk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5SZXNvdXJjZUNvbGxlY3RvciA9IFJlc291cmNlQ29sbGVjdG9yO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXNvdXJjZUNvbGxlY3Rvci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/paginationCalls/resourceCollector.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/pathTemplate.js":
/*!***********************************************************!*\
  !*** ./node_modules/google-gax/build/src/pathTemplate.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\r\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.PathTemplate = void 0;\r\nclass PathTemplate {\r\n    data;\r\n    bindings = {};\r\n    segments;\r\n    size;\r\n    /**\r\n     * @param {String} data the of the template\r\n     *\r\n     * @constructor\r\n     */\r\n    constructor(data) {\r\n        this.data = data;\r\n        this.segments = this.parsePathTemplate(data);\r\n        this.size = this.segments.length;\r\n    }\r\n    /**\r\n     * Matches a fully-qualified path template string.\r\n     *\r\n     * @param {String} path a fully-qualified path template string\r\n     * @return {Object} contains const names matched to binding values\r\n     * @throws {TypeError} if path can't be matched to this template\r\n     */\r\n    match(path) {\r\n        let pathSegments = path.split('/');\r\n        const bindings = {};\r\n        if (pathSegments.length !== this.segments.length) {\r\n            // if the path contains a wildcard, then the length may differ by 1.\r\n            if (!this.data.includes('**')) {\r\n                throw new TypeError(`This path ${path} does not match path template ${this.data}, the number of parameters is not same.`);\r\n            }\r\n            else if (pathSegments.length !== this.segments.length + 1) {\r\n                throw new TypeError(`This path ${path} does not match path template ${this.data}, the number of parameters is not same with one wildcard.`);\r\n            }\r\n        }\r\n        for (let index = 0; index < this.segments.length && pathSegments.length > 0; index++) {\r\n            if (this.segments[index] !== pathSegments[0]) {\r\n                if (!this.segments[index].includes('*')) {\r\n                    throw new TypeError(`segment does not match, ${this.segments[index]} and  ${pathSegments[index]}.`);\r\n                }\r\n                else {\r\n                    let segment = this.segments[index];\r\n                    const matches = segment.match(/\\{[$0-9a-zA-Z_]+=.*?\\}/g);\r\n                    if (!matches) {\r\n                        throw new Error(`Error processing path template segment ${segment}`);\r\n                    }\r\n                    const variables = matches.map(str => str.replace(/^\\{/, '').replace(/=.*/, ''));\r\n                    if (segment.includes('**')) {\r\n                        bindings[variables[0]] = pathSegments[0] + '/' + pathSegments[1];\r\n                        pathSegments = pathSegments.slice(2);\r\n                    }\r\n                    else {\r\n                        // atomic resource\r\n                        if (variables.length === 1) {\r\n                            bindings[variables[0]] = pathSegments[0];\r\n                        }\r\n                        else {\r\n                            // non-slash resource\r\n                            // segment: {blurb_id=*}.{legacy_user=*} to match pathSegments: ['bar.user2']\r\n                            // split the match pathSegments[0] -> value: ['bar', 'user2']\r\n                            // compare the length of two arrays, and compare array items\r\n                            const value = pathSegments[0].split(/[-_.~]/);\r\n                            if (value.length !== variables.length) {\r\n                                throw new Error(`segment ${segment} does not match ${pathSegments[0]}`);\r\n                            }\r\n                            for (const v of variables) {\r\n                                bindings[v] = value[0];\r\n                                segment = segment.replace(`{${v}=*}`, `${value[0]}`);\r\n                                value.shift();\r\n                            }\r\n                            // segment: {blurb_id=*}.{legacy_user=*} matching pathSegments: ['bar~user2'] should fail\r\n                            if (segment !== pathSegments[0]) {\r\n                                throw new TypeError(`non slash resource pattern ${this.segments[index]} and ${pathSegments[0]} should have same separator`);\r\n                            }\r\n                        }\r\n                        pathSegments.shift();\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                pathSegments.shift();\r\n            }\r\n        }\r\n        return bindings;\r\n    }\r\n    /**\r\n     * Renders a path template using the provided bindings.\r\n     *\r\n     * @param {Object} bindings a mapping of const names to binding strings\r\n     * @return {String} a rendered representation of the path template\r\n     * @throws {TypeError} if a key is missing, or if a sub-template cannot be\r\n     *   parsed\r\n     */\r\n    render(bindings) {\r\n        if (Object.keys(bindings).length !== Object.keys(this.bindings).length) {\r\n            throw new TypeError(`The number of variables ${Object.keys(bindings).length} does not match the number of needed variables ${Object.keys(this.bindings).length}`);\r\n        }\r\n        let path = this.inspect();\r\n        for (const key of Object.keys(bindings)) {\r\n            const b = bindings[key].toString();\r\n            if (!this.bindings[key]) {\r\n                throw new TypeError(`render fails for not matching ${bindings[key]}`);\r\n            }\r\n            const variable = this.bindings[key];\r\n            if (variable === '*') {\r\n                if (!b.match(/[^/{}]+/)) {\r\n                    throw new TypeError(`render fails for not matching ${b}`);\r\n                }\r\n                path = path.replace(`{${key}=*}`, `${b}`);\r\n            }\r\n            else if (variable === '**') {\r\n                if (!b.match(/[^{}]+/)) {\r\n                    throw new TypeError(`render fails for not matching ${b}`);\r\n                }\r\n                path = path.replace(`{${key}=**}`, `${b}`);\r\n            }\r\n        }\r\n        return path;\r\n    }\r\n    /**\r\n     * Renders the path template.\r\n     *\r\n     * @return {string} contains const names matched to binding values\r\n     */\r\n    inspect() {\r\n        return this.segments.join('/');\r\n    }\r\n    /**\r\n     * Parse the path template.\r\n     *\r\n     * @return {string[]} return segments of the input path.\r\n     * For example: 'buckets/{hello}'' will give back ['buckets', {hello=*}]\r\n     */\r\n    parsePathTemplate(data) {\r\n        const pathSegments = splitPathTemplate(data);\r\n        let index = 0;\r\n        let wildCardCount = 0;\r\n        const segments = [];\r\n        let matches;\r\n        pathSegments.forEach(segment => {\r\n            // * or ** -> segments.push('{$0=*}');\r\n            //         -> bindings['$0'] = '*'\r\n            if (segment === '*' || segment === '**') {\r\n                this.bindings[`$${index}`] = segment;\r\n                segments.push(`{$${index}=${segment}}`);\r\n                index = index + 1;\r\n                if (segment === '**') {\r\n                    ++wildCardCount;\r\n                }\r\n            }\r\n            else if ((matches = segment.match(/\\{[0-9a-zA-Z-.~_]+(?:=.*?)?\\}/g))) {\r\n                for (const subsegment of matches) {\r\n                    const pairMatch = subsegment.match(/^\\{([0-9a-zA-Z-.~_]+)(?:=(.*?))?\\}$/);\r\n                    if (!pairMatch) {\r\n                        throw new Error(`Cannot process path template segment ${subsegment}`);\r\n                    }\r\n                    const key = pairMatch[1];\r\n                    let value = pairMatch[2];\r\n                    if (!value) {\r\n                        value = '*';\r\n                        segment = segment.replace(key, key + '=*');\r\n                        this.bindings[key] = value;\r\n                    }\r\n                    else if (value === '*') {\r\n                        this.bindings[key] = value;\r\n                    }\r\n                    else if (value === '**') {\r\n                        ++wildCardCount;\r\n                        this.bindings[key] = value;\r\n                    }\r\n                }\r\n                segments.push(segment);\r\n            }\r\n            else if (segment.match(/[0-9a-zA-Z-.~_]+/)) {\r\n                segments.push(segment);\r\n            }\r\n        });\r\n        if (wildCardCount > 1) {\r\n            throw new TypeError('Can not have more than one wildcard.');\r\n        }\r\n        return segments;\r\n    }\r\n}\r\nexports.PathTemplate = PathTemplate;\r\n/**\r\n * Split the path template by `/`.\r\n * It can not be simply splitted by `/` because there might be `/` in the segments.\r\n * For example: 'a/b/{a=hello/world}' we do not want to break the brackets pair\r\n * so above path will be splitted as ['a', 'b', '{a=hello/world}']\r\n */\r\nfunction splitPathTemplate(data) {\r\n    let left = 0;\r\n    let right = 0;\r\n    let bracketCount = 0;\r\n    const segments = [];\r\n    while (right >= left && right < data.length) {\r\n        if (data.charAt(right) === '{') {\r\n            bracketCount = bracketCount + 1;\r\n        }\r\n        else if (data.charAt(right) === '}') {\r\n            bracketCount = bracketCount - 1;\r\n        }\r\n        else if (data.charAt(right) === '/') {\r\n            if (right === data.length - 1) {\r\n                throw new TypeError('Invalid path, it can not be ended by /');\r\n            }\r\n            if (bracketCount === 0) {\r\n                // complete bracket, to avoid the case a/b/**/*/{a=hello/world}\r\n                segments.push(data.substring(left, right));\r\n                left = right + 1;\r\n            }\r\n        }\r\n        if (right === data.length - 1) {\r\n            if (bracketCount !== 0) {\r\n                throw new TypeError('Brackets are invalid.');\r\n            }\r\n            segments.push(data.substring(left));\r\n        }\r\n        right = right + 1;\r\n    }\r\n    return segments;\r\n}\r\n//# sourceMappingURL=pathTemplate.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/pathTemplate.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/routingHeader.js":
/*!************************************************************!*\
  !*** ./node_modules/google-gax/build/src/routingHeader.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\r\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || (function () {\r\n    var ownKeys = function(o) {\r\n        ownKeys = Object.getOwnPropertyNames || function (o) {\r\n            var ar = [];\r\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\r\n            return ar;\r\n        };\r\n        return ownKeys(o);\r\n    };\r\n    return function (mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\r\n        __setModuleDefault(result, mod);\r\n        return result;\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.fromParams = fromParams;\r\nconst querystring = __importStar(__webpack_require__(/*! querystring */ \"querystring\"));\r\n/**\r\n * Helpers for constructing routing headers.\r\n *\r\n * These headers are used by Google infrastructure to determine how to route\r\n * requests, especially for services that are regional.\r\n *\r\n * Generally, these headers are specified as gRPC metadata.\r\n */\r\n/**\r\n * Constructs the routing header from the given params\r\n *\r\n * @param {Object} params - the request header parameters.\r\n * @return {string} the routing header value.\r\n */\r\nfunction fromParams(params) {\r\n    return querystring.stringify(params);\r\n}\r\n//# sourceMappingURL=routingHeader.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvcm91dGluZ0hlYWRlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsMENBQTBDLDRCQUE0QjtBQUN0RSxDQUFDO0FBQ0Q7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQTJELGNBQWM7QUFDekU7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQkFBa0I7QUFDbEIsaUNBQWlDLG1CQUFPLENBQUMsZ0NBQWE7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZLFFBQVE7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2RhbmlzaC1idWRkeS8uL25vZGVfbW9kdWxlcy9nb29nbGUtZ2F4L2J1aWxkL3NyYy9yb3V0aW5nSGVhZGVyLmpzPzMwMjkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8qKlxyXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XHJcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xyXG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcclxufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICBvW2syXSA9IG1ba107XHJcbn0pKTtcclxudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19zZXRNb2R1bGVEZWZhdWx0KSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XHJcbn0pIDogZnVuY3Rpb24obywgdikge1xyXG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xyXG59KTtcclxudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCAoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIG93bktleXMgPSBmdW5jdGlvbihvKSB7XHJcbiAgICAgICAgb3duS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIChvKSB7XHJcbiAgICAgICAgICAgIHZhciBhciA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBrIGluIG8pIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobywgaykpIGFyW2FyLmxlbmd0aF0gPSBrO1xyXG4gICAgICAgICAgICByZXR1cm4gYXI7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gb3duS2V5cyhvKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKG1vZCkge1xyXG4gICAgICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IHt9O1xyXG4gICAgICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayA9IG93bktleXMobW9kKSwgaSA9IDA7IGkgPCBrLmxlbmd0aDsgaSsrKSBpZiAoa1tpXSAhPT0gXCJkZWZhdWx0XCIpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwga1tpXSk7XHJcbiAgICAgICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfTtcclxufSkoKTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLmZyb21QYXJhbXMgPSBmcm9tUGFyYW1zO1xyXG5jb25zdCBxdWVyeXN0cmluZyA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwicXVlcnlzdHJpbmdcIikpO1xyXG4vKipcclxuICogSGVscGVycyBmb3IgY29uc3RydWN0aW5nIHJvdXRpbmcgaGVhZGVycy5cclxuICpcclxuICogVGhlc2UgaGVhZGVycyBhcmUgdXNlZCBieSBHb29nbGUgaW5mcmFzdHJ1Y3R1cmUgdG8gZGV0ZXJtaW5lIGhvdyB0byByb3V0ZVxyXG4gKiByZXF1ZXN0cywgZXNwZWNpYWxseSBmb3Igc2VydmljZXMgdGhhdCBhcmUgcmVnaW9uYWwuXHJcbiAqXHJcbiAqIEdlbmVyYWxseSwgdGhlc2UgaGVhZGVycyBhcmUgc3BlY2lmaWVkIGFzIGdSUEMgbWV0YWRhdGEuXHJcbiAqL1xyXG4vKipcclxuICogQ29uc3RydWN0cyB0aGUgcm91dGluZyBoZWFkZXIgZnJvbSB0aGUgZ2l2ZW4gcGFyYW1zXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXMgLSB0aGUgcmVxdWVzdCBoZWFkZXIgcGFyYW1ldGVycy5cclxuICogQHJldHVybiB7c3RyaW5nfSB0aGUgcm91dGluZyBoZWFkZXIgdmFsdWUuXHJcbiAqL1xyXG5mdW5jdGlvbiBmcm9tUGFyYW1zKHBhcmFtcykge1xyXG4gICAgcmV0dXJuIHF1ZXJ5c3RyaW5nLnN0cmluZ2lmeShwYXJhbXMpO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJvdXRpbmdIZWFkZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/routingHeader.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/status.js":
/*!*****************************************************!*\
  !*** ./node_modules/google-gax/build/src/status.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\r\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.HttpCodeToRpcCodeMap = exports.Status = void 0;\r\nexports.rpcCodeFromHttpStatusCode = rpcCodeFromHttpStatusCode;\r\n// The following is a copy of the Status enum defined in @grpc/grpc-js,\r\n// src/constants.ts. We need to use some of these statuses here and there,\r\n// but we don't want to include the whole @grpc/grpc-js into the browser\r\n// bundle just to have this small enum.\r\nvar Status;\r\n(function (Status) {\r\n    Status[Status[\"OK\"] = 0] = \"OK\";\r\n    Status[Status[\"CANCELLED\"] = 1] = \"CANCELLED\";\r\n    Status[Status[\"UNKNOWN\"] = 2] = \"UNKNOWN\";\r\n    Status[Status[\"INVALID_ARGUMENT\"] = 3] = \"INVALID_ARGUMENT\";\r\n    Status[Status[\"DEADLINE_EXCEEDED\"] = 4] = \"DEADLINE_EXCEEDED\";\r\n    Status[Status[\"NOT_FOUND\"] = 5] = \"NOT_FOUND\";\r\n    Status[Status[\"ALREADY_EXISTS\"] = 6] = \"ALREADY_EXISTS\";\r\n    Status[Status[\"PERMISSION_DENIED\"] = 7] = \"PERMISSION_DENIED\";\r\n    Status[Status[\"RESOURCE_EXHAUSTED\"] = 8] = \"RESOURCE_EXHAUSTED\";\r\n    Status[Status[\"FAILED_PRECONDITION\"] = 9] = \"FAILED_PRECONDITION\";\r\n    Status[Status[\"ABORTED\"] = 10] = \"ABORTED\";\r\n    Status[Status[\"OUT_OF_RANGE\"] = 11] = \"OUT_OF_RANGE\";\r\n    Status[Status[\"UNIMPLEMENTED\"] = 12] = \"UNIMPLEMENTED\";\r\n    Status[Status[\"INTERNAL\"] = 13] = \"INTERNAL\";\r\n    Status[Status[\"UNAVAILABLE\"] = 14] = \"UNAVAILABLE\";\r\n    Status[Status[\"DATA_LOSS\"] = 15] = \"DATA_LOSS\";\r\n    Status[Status[\"UNAUTHENTICATED\"] = 16] = \"UNAUTHENTICATED\";\r\n})(Status || (exports.Status = Status = {}));\r\nexports.HttpCodeToRpcCodeMap = new Map([\r\n    [400, Status.INVALID_ARGUMENT],\r\n    [401, Status.UNAUTHENTICATED],\r\n    [403, Status.PERMISSION_DENIED],\r\n    [404, Status.NOT_FOUND],\r\n    [409, Status.ABORTED],\r\n    [416, Status.OUT_OF_RANGE],\r\n    [429, Status.RESOURCE_EXHAUSTED],\r\n    [499, Status.CANCELLED],\r\n    [501, Status.UNIMPLEMENTED],\r\n    [503, Status.UNAVAILABLE],\r\n    [504, Status.DEADLINE_EXCEEDED],\r\n]);\r\n// Maps HTTP status codes to gRPC status codes above.\r\nfunction rpcCodeFromHttpStatusCode(httpStatusCode) {\r\n    if (exports.HttpCodeToRpcCodeMap.has(httpStatusCode)) {\r\n        return exports.HttpCodeToRpcCodeMap.get(httpStatusCode);\r\n    }\r\n    // All 2xx\r\n    if (httpStatusCode >= 200 && httpStatusCode < 300) {\r\n        return Status.OK;\r\n    }\r\n    // All other 4xx\r\n    if (httpStatusCode >= 400 && httpStatusCode < 500) {\r\n        return Status.FAILED_PRECONDITION;\r\n    }\r\n    // All other 5xx\r\n    if (httpStatusCode >= 500 && httpStatusCode < 600) {\r\n        return Status.INTERNAL;\r\n    }\r\n    // Everything else\r\n    return Status.UNKNOWN;\r\n}\r\n//# sourceMappingURL=status.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvc3RhdHVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDRCQUE0QixHQUFHLGNBQWM7QUFDN0MsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLGFBQWEsY0FBYyxjQUFjO0FBQzFDLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYW5pc2gtYnVkZHkvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvc3RhdHVzLmpzPzYwNzIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8qKlxyXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5IdHRwQ29kZVRvUnBjQ29kZU1hcCA9IGV4cG9ydHMuU3RhdHVzID0gdm9pZCAwO1xyXG5leHBvcnRzLnJwY0NvZGVGcm9tSHR0cFN0YXR1c0NvZGUgPSBycGNDb2RlRnJvbUh0dHBTdGF0dXNDb2RlO1xyXG4vLyBUaGUgZm9sbG93aW5nIGlzIGEgY29weSBvZiB0aGUgU3RhdHVzIGVudW0gZGVmaW5lZCBpbiBAZ3JwYy9ncnBjLWpzLFxyXG4vLyBzcmMvY29uc3RhbnRzLnRzLiBXZSBuZWVkIHRvIHVzZSBzb21lIG9mIHRoZXNlIHN0YXR1c2VzIGhlcmUgYW5kIHRoZXJlLFxyXG4vLyBidXQgd2UgZG9uJ3Qgd2FudCB0byBpbmNsdWRlIHRoZSB3aG9sZSBAZ3JwYy9ncnBjLWpzIGludG8gdGhlIGJyb3dzZXJcclxuLy8gYnVuZGxlIGp1c3QgdG8gaGF2ZSB0aGlzIHNtYWxsIGVudW0uXHJcbnZhciBTdGF0dXM7XHJcbihmdW5jdGlvbiAoU3RhdHVzKSB7XHJcbiAgICBTdGF0dXNbU3RhdHVzW1wiT0tcIl0gPSAwXSA9IFwiT0tcIjtcclxuICAgIFN0YXR1c1tTdGF0dXNbXCJDQU5DRUxMRURcIl0gPSAxXSA9IFwiQ0FOQ0VMTEVEXCI7XHJcbiAgICBTdGF0dXNbU3RhdHVzW1wiVU5LTk9XTlwiXSA9IDJdID0gXCJVTktOT1dOXCI7XHJcbiAgICBTdGF0dXNbU3RhdHVzW1wiSU5WQUxJRF9BUkdVTUVOVFwiXSA9IDNdID0gXCJJTlZBTElEX0FSR1VNRU5UXCI7XHJcbiAgICBTdGF0dXNbU3RhdHVzW1wiREVBRExJTkVfRVhDRUVERURcIl0gPSA0XSA9IFwiREVBRExJTkVfRVhDRUVERURcIjtcclxuICAgIFN0YXR1c1tTdGF0dXNbXCJOT1RfRk9VTkRcIl0gPSA1XSA9IFwiTk9UX0ZPVU5EXCI7XHJcbiAgICBTdGF0dXNbU3RhdHVzW1wiQUxSRUFEWV9FWElTVFNcIl0gPSA2XSA9IFwiQUxSRUFEWV9FWElTVFNcIjtcclxuICAgIFN0YXR1c1tTdGF0dXNbXCJQRVJNSVNTSU9OX0RFTklFRFwiXSA9IDddID0gXCJQRVJNSVNTSU9OX0RFTklFRFwiO1xyXG4gICAgU3RhdHVzW1N0YXR1c1tcIlJFU09VUkNFX0VYSEFVU1RFRFwiXSA9IDhdID0gXCJSRVNPVVJDRV9FWEhBVVNURURcIjtcclxuICAgIFN0YXR1c1tTdGF0dXNbXCJGQUlMRURfUFJFQ09ORElUSU9OXCJdID0gOV0gPSBcIkZBSUxFRF9QUkVDT05ESVRJT05cIjtcclxuICAgIFN0YXR1c1tTdGF0dXNbXCJBQk9SVEVEXCJdID0gMTBdID0gXCJBQk9SVEVEXCI7XHJcbiAgICBTdGF0dXNbU3RhdHVzW1wiT1VUX09GX1JBTkdFXCJdID0gMTFdID0gXCJPVVRfT0ZfUkFOR0VcIjtcclxuICAgIFN0YXR1c1tTdGF0dXNbXCJVTklNUExFTUVOVEVEXCJdID0gMTJdID0gXCJVTklNUExFTUVOVEVEXCI7XHJcbiAgICBTdGF0dXNbU3RhdHVzW1wiSU5URVJOQUxcIl0gPSAxM10gPSBcIklOVEVSTkFMXCI7XHJcbiAgICBTdGF0dXNbU3RhdHVzW1wiVU5BVkFJTEFCTEVcIl0gPSAxNF0gPSBcIlVOQVZBSUxBQkxFXCI7XHJcbiAgICBTdGF0dXNbU3RhdHVzW1wiREFUQV9MT1NTXCJdID0gMTVdID0gXCJEQVRBX0xPU1NcIjtcclxuICAgIFN0YXR1c1tTdGF0dXNbXCJVTkFVVEhFTlRJQ0FURURcIl0gPSAxNl0gPSBcIlVOQVVUSEVOVElDQVRFRFwiO1xyXG59KShTdGF0dXMgfHwgKGV4cG9ydHMuU3RhdHVzID0gU3RhdHVzID0ge30pKTtcclxuZXhwb3J0cy5IdHRwQ29kZVRvUnBjQ29kZU1hcCA9IG5ldyBNYXAoW1xyXG4gICAgWzQwMCwgU3RhdHVzLklOVkFMSURfQVJHVU1FTlRdLFxyXG4gICAgWzQwMSwgU3RhdHVzLlVOQVVUSEVOVElDQVRFRF0sXHJcbiAgICBbNDAzLCBTdGF0dXMuUEVSTUlTU0lPTl9ERU5JRURdLFxyXG4gICAgWzQwNCwgU3RhdHVzLk5PVF9GT1VORF0sXHJcbiAgICBbNDA5LCBTdGF0dXMuQUJPUlRFRF0sXHJcbiAgICBbNDE2LCBTdGF0dXMuT1VUX09GX1JBTkdFXSxcclxuICAgIFs0MjksIFN0YXR1cy5SRVNPVVJDRV9FWEhBVVNURURdLFxyXG4gICAgWzQ5OSwgU3RhdHVzLkNBTkNFTExFRF0sXHJcbiAgICBbNTAxLCBTdGF0dXMuVU5JTVBMRU1FTlRFRF0sXHJcbiAgICBbNTAzLCBTdGF0dXMuVU5BVkFJTEFCTEVdLFxyXG4gICAgWzUwNCwgU3RhdHVzLkRFQURMSU5FX0VYQ0VFREVEXSxcclxuXSk7XHJcbi8vIE1hcHMgSFRUUCBzdGF0dXMgY29kZXMgdG8gZ1JQQyBzdGF0dXMgY29kZXMgYWJvdmUuXHJcbmZ1bmN0aW9uIHJwY0NvZGVGcm9tSHR0cFN0YXR1c0NvZGUoaHR0cFN0YXR1c0NvZGUpIHtcclxuICAgIGlmIChleHBvcnRzLkh0dHBDb2RlVG9ScGNDb2RlTWFwLmhhcyhodHRwU3RhdHVzQ29kZSkpIHtcclxuICAgICAgICByZXR1cm4gZXhwb3J0cy5IdHRwQ29kZVRvUnBjQ29kZU1hcC5nZXQoaHR0cFN0YXR1c0NvZGUpO1xyXG4gICAgfVxyXG4gICAgLy8gQWxsIDJ4eFxyXG4gICAgaWYgKGh0dHBTdGF0dXNDb2RlID49IDIwMCAmJiBodHRwU3RhdHVzQ29kZSA8IDMwMCkge1xyXG4gICAgICAgIHJldHVybiBTdGF0dXMuT0s7XHJcbiAgICB9XHJcbiAgICAvLyBBbGwgb3RoZXIgNHh4XHJcbiAgICBpZiAoaHR0cFN0YXR1c0NvZGUgPj0gNDAwICYmIGh0dHBTdGF0dXNDb2RlIDwgNTAwKSB7XHJcbiAgICAgICAgcmV0dXJuIFN0YXR1cy5GQUlMRURfUFJFQ09ORElUSU9OO1xyXG4gICAgfVxyXG4gICAgLy8gQWxsIG90aGVyIDV4eFxyXG4gICAgaWYgKGh0dHBTdGF0dXNDb2RlID49IDUwMCAmJiBodHRwU3RhdHVzQ29kZSA8IDYwMCkge1xyXG4gICAgICAgIHJldHVybiBTdGF0dXMuSU5URVJOQUw7XHJcbiAgICB9XHJcbiAgICAvLyBFdmVyeXRoaW5nIGVsc2VcclxuICAgIHJldHVybiBTdGF0dXMuVU5LTk9XTjtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdGF0dXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/status.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/streamArrayParser.js":
/*!****************************************************************!*\
  !*** ./node_modules/google-gax/build/src/streamArrayParser.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\n/**\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.StreamArrayParser = void 0;\r\nconst abort_controller_1 = __webpack_require__(/*! abort-controller */ \"(rsc)/./node_modules/abort-controller/dist/abort-controller.js\");\r\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\r\nconst fallbackRest_1 = __webpack_require__(/*! ./fallbackRest */ \"(rsc)/./node_modules/google-gax/build/src/fallbackRest.js\");\r\nconst featureDetection_1 = __webpack_require__(/*! ./featureDetection */ \"(rsc)/./node_modules/google-gax/build/src/featureDetection.js\");\r\nclass StreamArrayParser extends stream_1.Transform {\r\n    _done;\r\n    _prevBlock;\r\n    _isInString;\r\n    _isSkipped;\r\n    _level;\r\n    rpc;\r\n    cancelController;\r\n    cancelSignal;\r\n    cancelRequested;\r\n    /**\r\n     * StreamArrayParser processes array of valid JSON objects in random chunks\r\n     * through readable stream, and produces a stream of plain Javascript objects\r\n     * where it converted from the corresponding protobuf message instance.\r\n     *\r\n     * The default JSON parser decodes the input stream under the\r\n     * following rules:\r\n     *  1. The stream represents a valid JSON array (must start with a \"[\" and\r\n     * close with the corresponding \"]\"). Each element of this array is assumed to\r\n     * be either an array or an object, and will be decoded as a JS object and\r\n     *    delivered.\r\n     *  2. All JSON elements in the buffer will be decoded and delivered in a\r\n     * stream.\r\n     *\r\n     * @private\r\n     * @constructor\r\n     * @param {protobuf.Method} rpc - the protobuf method produce array of JSON.\r\n     * @param {Object} options - the options pass to Transform Stream. See more\r\n     * details\r\n     * https://nodejs.org/api/stream.html#stream_new_stream_transform_options.\r\n     */\r\n    constructor(rpc, options) {\r\n        super(Object.assign({}, options, { readableObjectMode: true }));\r\n        this._done = false;\r\n        this._prevBlock = Buffer.from('');\r\n        this._isInString = false;\r\n        this._isSkipped = false;\r\n        this._level = 0;\r\n        this.rpc = rpc;\r\n        this.cancelController = (0, featureDetection_1.hasAbortController)()\r\n            ? new AbortController()\r\n            : new abort_controller_1.AbortController();\r\n        this.cancelSignal = this.cancelController.signal;\r\n        this.cancelRequested = false;\r\n    }\r\n    _transform(chunk, _, callback) {\r\n        let objectStart = 0;\r\n        let curIndex = 0;\r\n        if (this._level === 0 && curIndex === 0) {\r\n            if (String.fromCharCode(chunk[0]) !== '[') {\r\n                this.emit('error', new Error(`Internal Error: API service stream data must start with a '[' and close with the corresponding ']', but it start with ${String.fromCharCode(chunk[0])}`));\r\n            }\r\n            curIndex++;\r\n            this._level++;\r\n        }\r\n        while (curIndex < chunk.length) {\r\n            const curValue = String.fromCharCode(chunk[curIndex]);\r\n            if (!this._isSkipped) {\r\n                switch (curValue) {\r\n                    case '{':\r\n                        // Check if it's in string, we ignore the curly brace in string.\r\n                        // Otherwise the object level++.\r\n                        if (!this._isInString) {\r\n                            this._level++;\r\n                        }\r\n                        if (!this._isInString && this._level === 2) {\r\n                            objectStart = curIndex;\r\n                        }\r\n                        break;\r\n                    case '\"':\r\n                        // Flip the string status\r\n                        this._isInString = !this._isInString;\r\n                        break;\r\n                    case '}':\r\n                        // check if it's in string\r\n                        // if true, do nothing\r\n                        // if false and level = 0, push data\r\n                        if (!this._isInString) {\r\n                            this._level--;\r\n                        }\r\n                        if (!this._isInString && this._level === 1) {\r\n                            // find a object\r\n                            const objBuff = Buffer.concat([\r\n                                this._prevBlock,\r\n                                chunk.slice(objectStart, curIndex + 1),\r\n                            ]);\r\n                            try {\r\n                                // HTTP response.ok is true.\r\n                                const msgObj = (0, fallbackRest_1.decodeResponse)(this.rpc, true, objBuff);\r\n                                this.push(msgObj);\r\n                            }\r\n                            catch (err) {\r\n                                this.emit('error', err);\r\n                            }\r\n                            objectStart = curIndex + 1;\r\n                            this._prevBlock = Buffer.from('');\r\n                        }\r\n                        break;\r\n                    case ']':\r\n                        if (!this._isInString && this._level === 1) {\r\n                            this._done = true;\r\n                            this.push(null);\r\n                        }\r\n                        break;\r\n                    case '\\\\':\r\n                        // Escaping escape character.\r\n                        this._isSkipped = true;\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n            else {\r\n                this._isSkipped = false;\r\n            }\r\n            curIndex++;\r\n        }\r\n        if (this._level > 1) {\r\n            this._prevBlock = Buffer.concat([\r\n                this._prevBlock,\r\n                chunk.slice(objectStart, curIndex),\r\n            ]);\r\n        }\r\n        callback();\r\n    }\r\n    _flush(callback) {\r\n        callback();\r\n    }\r\n    cancel() {\r\n        this._done = true;\r\n        this.cancelRequested = true;\r\n        this.cancelController.abort();\r\n        this.end();\r\n    }\r\n}\r\nexports.StreamArrayParser = StreamArrayParser;\r\n//# sourceMappingURL=streamArrayParser.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/streamArrayParser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/streamingCalls/streamDescriptor.js":
/*!******************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/streamingCalls/streamDescriptor.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.StreamDescriptor = void 0;\r\nconst streamingApiCaller_1 = __webpack_require__(/*! ./streamingApiCaller */ \"(rsc)/./node_modules/google-gax/build/src/streamingCalls/streamingApiCaller.js\");\r\n/**\r\n * A descriptor for streaming calls.\r\n */\r\nclass StreamDescriptor {\r\n    type;\r\n    streaming; // needed for browser support\r\n    rest;\r\n    gaxStreamingRetries;\r\n    constructor(streamType, rest, gaxStreamingRetries) {\r\n        this.type = streamType;\r\n        this.streaming = true;\r\n        this.rest = rest;\r\n        this.gaxStreamingRetries = gaxStreamingRetries;\r\n    }\r\n    getApiCaller() {\r\n        // Right now retrying does not work with gRPC-streaming, because retryable\r\n        // assumes an API call returns an event emitter while gRPC-streaming methods\r\n        // return Stream.\r\n        return new streamingApiCaller_1.StreamingApiCaller(this);\r\n    }\r\n}\r\nexports.StreamDescriptor = StreamDescriptor;\r\n//# sourceMappingURL=streamDescriptor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvc3RyZWFtaW5nQ2FsbHMvc3RyZWFtRGVzY3JpcHRvci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx3QkFBd0I7QUFDeEIsNkJBQTZCLG1CQUFPLENBQUMsNEdBQXNCO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFuaXNoLWJ1ZGR5Ly4vbm9kZV9tb2R1bGVzL2dvb2dsZS1nYXgvYnVpbGQvc3JjL3N0cmVhbWluZ0NhbGxzL3N0cmVhbURlc2NyaXB0b3IuanM/OTQzNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuLyoqXHJcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLlN0cmVhbURlc2NyaXB0b3IgPSB2b2lkIDA7XHJcbmNvbnN0IHN0cmVhbWluZ0FwaUNhbGxlcl8xID0gcmVxdWlyZShcIi4vc3RyZWFtaW5nQXBpQ2FsbGVyXCIpO1xyXG4vKipcclxuICogQSBkZXNjcmlwdG9yIGZvciBzdHJlYW1pbmcgY2FsbHMuXHJcbiAqL1xyXG5jbGFzcyBTdHJlYW1EZXNjcmlwdG9yIHtcclxuICAgIHR5cGU7XHJcbiAgICBzdHJlYW1pbmc7IC8vIG5lZWRlZCBmb3IgYnJvd3NlciBzdXBwb3J0XHJcbiAgICByZXN0O1xyXG4gICAgZ2F4U3RyZWFtaW5nUmV0cmllcztcclxuICAgIGNvbnN0cnVjdG9yKHN0cmVhbVR5cGUsIHJlc3QsIGdheFN0cmVhbWluZ1JldHJpZXMpIHtcclxuICAgICAgICB0aGlzLnR5cGUgPSBzdHJlYW1UeXBlO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtaW5nID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnJlc3QgPSByZXN0O1xyXG4gICAgICAgIHRoaXMuZ2F4U3RyZWFtaW5nUmV0cmllcyA9IGdheFN0cmVhbWluZ1JldHJpZXM7XHJcbiAgICB9XHJcbiAgICBnZXRBcGlDYWxsZXIoKSB7XHJcbiAgICAgICAgLy8gUmlnaHQgbm93IHJldHJ5aW5nIGRvZXMgbm90IHdvcmsgd2l0aCBnUlBDLXN0cmVhbWluZywgYmVjYXVzZSByZXRyeWFibGVcclxuICAgICAgICAvLyBhc3N1bWVzIGFuIEFQSSBjYWxsIHJldHVybnMgYW4gZXZlbnQgZW1pdHRlciB3aGlsZSBnUlBDLXN0cmVhbWluZyBtZXRob2RzXHJcbiAgICAgICAgLy8gcmV0dXJuIFN0cmVhbS5cclxuICAgICAgICByZXR1cm4gbmV3IHN0cmVhbWluZ0FwaUNhbGxlcl8xLlN0cmVhbWluZ0FwaUNhbGxlcih0aGlzKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlN0cmVhbURlc2NyaXB0b3IgPSBTdHJlYW1EZXNjcmlwdG9yO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdHJlYW1EZXNjcmlwdG9yLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/streamingCalls/streamDescriptor.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/streamingCalls/streaming.js":
/*!***********************************************************************!*\
  !*** ./node_modules/google-gax/build/src/streamingCalls/streaming.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.StreamProxy = exports.StreamType = void 0;\r\nconst gax_1 = __webpack_require__(/*! ../gax */ \"(rsc)/./node_modules/google-gax/build/src/gax.js\");\r\nconst googleError_1 = __webpack_require__(/*! ../googleError */ \"(rsc)/./node_modules/google-gax/build/src/googleError.js\");\r\nconst status_1 = __webpack_require__(/*! ../status */ \"(rsc)/./node_modules/google-gax/build/src/status.js\");\r\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\r\n// eslint-disable-next-line @typescript-eslint/no-var-requires\r\nconst duplexify = __webpack_require__(/*! duplexify */ \"(rsc)/./node_modules/duplexify/index.js\");\r\n// eslint-disable-next-line @typescript-eslint/no-var-requires\r\nconst retryRequest = __webpack_require__(/*! retry-request */ \"(rsc)/./node_modules/retry-request/index.js\");\r\n/**\r\n * The type of gRPC streaming.\r\n * @enum {number}\r\n */\r\nvar StreamType;\r\n(function (StreamType) {\r\n    /** Client sends a single request, server streams responses. */\r\n    StreamType[StreamType[\"SERVER_STREAMING\"] = 1] = \"SERVER_STREAMING\";\r\n    /** Client streams requests, server returns a single response. */\r\n    StreamType[StreamType[\"CLIENT_STREAMING\"] = 2] = \"CLIENT_STREAMING\";\r\n    /** Both client and server stream objects. */\r\n    StreamType[StreamType[\"BIDI_STREAMING\"] = 3] = \"BIDI_STREAMING\";\r\n})(StreamType || (exports.StreamType = StreamType = {}));\r\n// In retry-request, you could pass parameters to request using the requestOpts parameter\r\n// when we called retry-request from gax, we always passed null\r\n// passing null here removes an unnecessary parameter from this implementation\r\nconst requestOps = null;\r\nclass StreamProxy extends duplexify {\r\n    type;\r\n    _callback;\r\n    _isCancelCalled;\r\n    stream;\r\n    _responseHasSent;\r\n    rest;\r\n    gaxServerStreamingRetries;\r\n    apiCall;\r\n    argument;\r\n    /**\r\n     * StreamProxy is a proxy to gRPC-streaming method.\r\n     *\r\n     * @private\r\n     * @constructor\r\n     * @param {StreamType} type - the type of gRPC stream.\r\n     * @param {ApiCallback} callback - the callback for further API call.\r\n     */\r\n    constructor(type, callback, rest, gaxServerStreamingRetries) {\r\n        super(undefined, undefined, {\r\n            objectMode: true,\r\n            readable: type !== StreamType.CLIENT_STREAMING,\r\n            writable: type !== StreamType.SERVER_STREAMING,\r\n        });\r\n        this.type = type;\r\n        this._callback = callback;\r\n        this._isCancelCalled = false;\r\n        this._responseHasSent = false;\r\n        this.rest = rest;\r\n        this.gaxServerStreamingRetries = gaxServerStreamingRetries;\r\n    }\r\n    shouldRetryRequest(error, retry) {\r\n        const e = googleError_1.GoogleError.parseGRPCStatusDetails(error);\r\n        let shouldRetry = this.defaultShouldRetry(e, retry);\r\n        if (retry.shouldRetryFn) {\r\n            shouldRetry = retry.shouldRetryFn(e);\r\n        }\r\n        return shouldRetry;\r\n    }\r\n    cancel() {\r\n        if (this.stream) {\r\n            this.stream.cancel();\r\n        }\r\n        else {\r\n            this._isCancelCalled = true;\r\n        }\r\n    }\r\n    /**\r\n     * Helper function to handle total timeout + max retry check for server streaming retries\r\n     * @param {number} deadline - the current retry deadline\r\n     * @param {number} maxRetries - maximum total number of retries\r\n     * @param {number} totalTimeoutMillis - total timeout in milliseconds used in timeout calculation\r\n     * @param {GoogleError} originalError - underlying error received by the stream\r\n     * @param {originalTimeout} originalTimeout - the original Timeout set in backoff settings\r\n     * @param {retries} retries - the number of retries the call has made so far\r\n     */\r\n    throwIfMaxRetriesOrTotalTimeoutExceeded(deadline, maxRetries, totalTimeoutMillis, originalError, originalTimeout, retries) {\r\n        const now = new Date();\r\n        const nowTime = now.getTime();\r\n        if (originalTimeout &&\r\n            (totalTimeoutMillis === 0 ||\r\n                totalTimeoutMillis < 0 ||\r\n                (deadline && nowTime >= deadline))) {\r\n            const error = new googleError_1.GoogleError(`Total timeout of API exceeded ${originalTimeout} milliseconds ${originalError ? `retrying error ${originalError} ` : ''} before any response was received.`);\r\n            error.code = status_1.Status.DEADLINE_EXCEEDED;\r\n            throw error;\r\n        }\r\n        if (maxRetries === 0) {\r\n            const error = originalError;\r\n            error.note = 'Max retries is set to zero.';\r\n            throw error;\r\n        }\r\n        if (retries && retries >= maxRetries) {\r\n            const error = new googleError_1.GoogleError('Exceeded maximum number of retries ' +\r\n                (originalError ? `retrying error ${originalError} ` : '') +\r\n                'before any response was received');\r\n            error.code = status_1.Status.DEADLINE_EXCEEDED;\r\n            throw error;\r\n        }\r\n    }\r\n    /**\r\n     * Forwards events from an API request stream to the user's stream.\r\n     * @param {Stream} stream - The API request stream.\r\n     */\r\n    eventForwardHelper(stream) {\r\n        const eventsToForward = ['metadata', 'response', 'status'];\r\n        eventsToForward.forEach(event => {\r\n            stream.on(event, this.emit.bind(this, event));\r\n        });\r\n    }\r\n    /**\r\n     * Helper function that emits a response on the stream after either a 'metadata'\r\n     * or a 'status' event - this helps streams to behave more like http consumers expect\r\n     * @param {Stream} stream - The API request stream.\r\n     */\r\n    statusMetadataHelper(stream) {\r\n        // gRPC is guaranteed emit the 'status' event but not 'metadata', and 'status' is the last event to emit.\r\n        // Emit the 'response' event if stream has no 'metadata' event.\r\n        // This avoids the stream swallowing the other events, such as 'end'.\r\n        stream.on('status', () => {\r\n            if (!this._responseHasSent) {\r\n                stream.emit('response', {\r\n                    code: 200,\r\n                    details: '',\r\n                    message: 'OK',\r\n                });\r\n            }\r\n        });\r\n        // We also want to supply the status data as 'response' event to support\r\n        // the behavior of google-cloud-node expects.\r\n        // see:\r\n        // https://github.com/GoogleCloudPlatform/google-cloud-node/pull/1775#issuecomment-259141029\r\n        // https://github.com/GoogleCloudPlatform/google-cloud-node/blob/116436fa789d8b0f7fc5100b19b424e3ec63e6bf/packages/common/src/grpc-service.js#L355\r\n        stream.on('metadata', metadata => {\r\n            // Create a response object with succeeds.\r\n            // TODO: unify this logic with the decoration of gRPC response when it's\r\n            // added. see: https://github.com/googleapis/gax-nodejs/issues/65\r\n            stream.emit('response', {\r\n                code: 200,\r\n                details: '',\r\n                message: 'OK',\r\n                metadata,\r\n            });\r\n            this._responseHasSent = true;\r\n        });\r\n    }\r\n    /**\r\n     * Forward events from an API request stream to the user's stream.\r\n     *  gRPC is guaranteed emit the 'status' event but not 'metadata'\r\n     * 'status' is the last event to emit; if 'metadata' emits, it will\r\n     * be the first event to emit. It should only emit once; if it emits\r\n     * more than once, unexpected side effects will occur.\r\n     *\r\n     * @param {Stream} stream - The API request stream.\r\n     * @param {RetryOptions} retry - Configures the exceptions upon which the\r\n     *   function should retry, and the parameters to the exponential backoff retry\r\n     *   algorithm.\r\n     */\r\n    forwardEvents(stream) {\r\n        this.eventForwardHelper(stream);\r\n        this.statusMetadataHelper(stream);\r\n        stream.on('error', error => {\r\n            googleError_1.GoogleError.parseGRPCStatusDetails(error);\r\n        });\r\n    }\r\n    /**\r\n     * Default mechanism for determining whether a streaming call should retry\r\n     * If a user passes in a \"shouldRetryFn\", this will not be used\r\n     * @param {GoogleError} errpr - The error we need to determine is retryable or not\r\n     * @param {RetryOptions} retry - Configures the exceptions upon which the\r\n     *   function should retry, and the parameters to the exponential backoff retry\r\n     *   algorithm.\r\n     */\r\n    defaultShouldRetry(error, retry) {\r\n        if ((retry.retryCodes.length > 0 &&\r\n            retry.retryCodes.indexOf(error.code) < 0) ||\r\n            retry.retryCodes.length === 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * Specifies the target stream.\r\n     * @param {ApiCall} apiCall - the API function to be called.\r\n     * @param {Object} argument - the argument to be passed to the apiCall.\r\n     * @param {RetryOptions} retry - Configures the exceptions upon which the\r\n     *   function should retry, and the parameters to the exponential backoff retry\r\n     *   algorithm.\r\n     */\r\n    setStream(apiCall, argument, retryRequestOptions = {}, retry) {\r\n        this.apiCall = apiCall;\r\n        this.argument = argument;\r\n        if (this.type === StreamType.SERVER_STREAMING) {\r\n            if (this.rest) {\r\n                const stream = apiCall(argument, this._callback);\r\n                this.stream = stream;\r\n                this.setReadable(stream);\r\n            }\r\n            else if (this.gaxServerStreamingRetries) {\r\n                const request = () => {\r\n                    if (this._isCancelCalled) {\r\n                        if (this.stream) {\r\n                            this.stream.cancel();\r\n                        }\r\n                        return;\r\n                    }\r\n                    const stream = apiCall(argument, this._callback);\r\n                    return stream;\r\n                };\r\n                const retryStream = this.newStreamingRetryRequest({ request, retry });\r\n                this.stream = retryStream;\r\n                this.eventForwardHelper(retryStream);\r\n                this.setReadable(retryStream);\r\n            }\r\n            else {\r\n                const retryStream = retryRequest(null, {\r\n                    objectMode: true,\r\n                    request: () => {\r\n                        if (this._isCancelCalled) {\r\n                            if (this.stream) {\r\n                                this.stream.cancel();\r\n                            }\r\n                            return;\r\n                        }\r\n                        const stream = apiCall(argument, this._callback);\r\n                        this.stream = stream;\r\n                        this.forwardEvents(stream);\r\n                        return stream;\r\n                    },\r\n                    retries: retryRequestOptions.retries,\r\n                    currentRetryAttempt: retryRequestOptions.currentRetryAttempt,\r\n                    noResponseRetries: retryRequestOptions.noResponseRetries,\r\n                    shouldRetryFn: retryRequestOptions.shouldRetryFn,\r\n                });\r\n                this.setReadable(retryStream);\r\n            }\r\n            return;\r\n        }\r\n        const stream = apiCall(argument, this._callback);\r\n        this.stream = stream;\r\n        this.forwardEvents(stream);\r\n        if (this.type === StreamType.CLIENT_STREAMING) {\r\n            this.setWritable(stream);\r\n        }\r\n        if (this.type === StreamType.BIDI_STREAMING) {\r\n            this.setReadable(stream);\r\n            this.setWritable(stream);\r\n        }\r\n        if (this._isCancelCalled && this.stream) {\r\n            this.stream.cancel();\r\n        }\r\n    }\r\n    /**\r\n     * Creates a new retry request stream -\r\n     *inner arrow function \"newMakeRequest\" handles retrying and resumption\r\n     * @param {streamingRetryRequestOptions} opts\r\n     *   {request} - the request to be made if the stream errors\r\n     *   {retry} - the retry options associated with the call\r\n     * @returns {CancellableStream} - the stream that handles retry logic\r\n     */\r\n    newStreamingRetryRequest(opts) {\r\n        // at this point, it would be unexpected if retry were undefined\r\n        // but if it is, provide a logical default so we don't run into trouble\r\n        const retry = opts.retry ?? {\r\n            retryCodes: [],\r\n            backoffSettings: (0, gax_1.createDefaultBackoffSettings)(),\r\n        };\r\n        let retries = 0;\r\n        const retryStream = new stream_1.PassThrough({\r\n            objectMode: true,\r\n        });\r\n        const totalTimeout = retry.backoffSettings.totalTimeoutMillis ?? undefined;\r\n        const maxRetries = retry.backoffSettings.maxRetries ?? undefined;\r\n        let timeout = retry.backoffSettings.initialRpcTimeoutMillis ?? undefined;\r\n        let now = new Date();\r\n        let deadline = 0;\r\n        if (totalTimeout) {\r\n            deadline = now.getTime() + totalTimeout;\r\n        }\r\n        const transientErrorHelper = (error, requestStream) => {\r\n            const e = googleError_1.GoogleError.parseGRPCStatusDetails(error);\r\n            e.note =\r\n                'Exception occurred in retry method that was ' +\r\n                    'not classified as transient';\r\n            // clean up the request stream and retryStreams, silently destroy it on the request stream\r\n            // but do raise it on destructin of the retryStream so the consumer can see it\r\n            requestStream.destroy();\r\n            retryStream.destroy(e);\r\n            return retryStream;\r\n        };\r\n        const newMakeRequest = (newopts) => {\r\n            let dataEnd = false;\r\n            let statusReceived = false;\r\n            let enteredError = false;\r\n            // make the request\r\n            const requestStream = newopts.request(requestOps);\r\n            retryStream.cancel = requestStream.cancel; // make sure the retryStream is also cancellable by the user\r\n            const eventsToForward = ['metadata', 'response', 'status'];\r\n            eventsToForward.forEach(event => {\r\n                requestStream.on(event, retryStream.emit.bind(retryStream, event));\r\n            });\r\n            this.statusMetadataHelper(requestStream);\r\n            // TODO - b/353262542 address buffer stuff\r\n            requestStream.on('data', (data) => {\r\n                retries = 0;\r\n                this.emit.bind(this, 'data')(data);\r\n            });\r\n            /* in retry-request, which previously handled retries,\r\n             * \"end\" could be emitted on a request stream before other gRPC events.\r\n             * To ensure it doesn't reach the consumer stream prematurely, retry-request piped\r\n             * two streams together (delayStream and retryStream)\r\n             * to ensure that \"end\" only emitted after a \"response\" event\r\n             *\r\n             * We are consciously NOT using pipeline or .pipe as part of similar logic here\r\n             * because we want more control over what happens during event handoff and we want to\r\n             * avoid the undesired behavior that can happen with error events\r\n             * if consumers in client libraries are also using pipes\r\n             *\r\n             * Since \"status\" is guaranteed to be the last event emitted by gRPC.\r\n             * If we have seen an \"end\" event, the dataEnd boolean will be true and we can safely\r\n             * end the stream.\r\n             *\r\n             * The \"statusReceived\" boolean covers the opposite case - that we receive the \"status\" event before\r\n             * a successful stream end event - this signals the .on('end') event handler that it's okay to end the stream\r\n             *\r\n             *\r\n             */\r\n            requestStream.on('status', () => {\r\n                statusReceived = true;\r\n                if (dataEnd) {\r\n                    retryStream.end();\r\n                }\r\n                return retryStream;\r\n            });\r\n            requestStream.on('end', () => {\r\n                if (!enteredError) {\r\n                    dataEnd = true;\r\n                    // in this case, we've already received \"status\"\r\n                    // which is the last event from gRPC, so it's cool to end the stream\r\n                    if (statusReceived) {\r\n                        retryStream.end();\r\n                    }\r\n                }\r\n                return retryStream;\r\n                // there is no else case because if enteredError\r\n                // is true, we will handle stream destruction as part of\r\n                // either retrying (where we don't want to end the stream)\r\n                // or as part of error handling, which will take care of stream destruction\r\n            });\r\n            requestStream.on('error', (error) => {\r\n                enteredError = true;\r\n                // type check for undefined instead of for truthiness in case maxRetries or timeout is equal to zero\r\n                if (typeof maxRetries !== undefined ||\r\n                    typeof totalTimeout !== undefined) {\r\n                    if (this.shouldRetryRequest(error, retry)) {\r\n                        if (maxRetries && totalTimeout) {\r\n                            const newError = new googleError_1.GoogleError('Cannot set both totalTimeoutMillis and maxRetries ' +\r\n                                'in backoffSettings.');\r\n                            newError.code = status_1.Status.INVALID_ARGUMENT;\r\n                            // clean up the request stream and retryStreams, silently destroy it on the request stream\r\n                            // but do raise it on destructin of the retryStream so the consumer can see it\r\n                            requestStream.destroy();\r\n                            retryStream.destroy(newError);\r\n                            return retryStream;\r\n                        }\r\n                        else {\r\n                            // check for exceeding timeout or max retries\r\n                            try {\r\n                                this.throwIfMaxRetriesOrTotalTimeoutExceeded(deadline, maxRetries, timeout, error, totalTimeout, retries);\r\n                            }\r\n                            catch (error) {\r\n                                const e = googleError_1.GoogleError.parseGRPCStatusDetails(error);\r\n                                // clean up the request stream and retryStreams, silently destroy it on the request stream\r\n                                // but do raise it on destruction of the retryStream so the consumer can see it\r\n                                requestStream.destroy();\r\n                                retryStream.destroy(e);\r\n                                return retryStream;\r\n                            }\r\n                            const delayMult = retry.backoffSettings.retryDelayMultiplier;\r\n                            const maxDelay = retry.backoffSettings.maxRetryDelayMillis;\r\n                            const timeoutMult = retry.backoffSettings.rpcTimeoutMultiplier;\r\n                            const maxTimeout = retry.backoffSettings.maxRpcTimeoutMillis;\r\n                            let delay = retry.backoffSettings.initialRetryDelayMillis;\r\n                            // calculate new deadlines\r\n                            const toSleep = Math.random() * delay;\r\n                            const calculateTimeoutAndResumptionFunction = () => {\r\n                                setTimeout(() => {\r\n                                    // only do timeout calculations if not using maxRetries\r\n                                    if (timeout) {\r\n                                        now = new Date();\r\n                                        delay = Math.min(delay * delayMult, maxDelay);\r\n                                        const timeoutCal = timeout && timeoutMult ? timeout * timeoutMult : 0;\r\n                                        const rpcTimeout = maxTimeout ? maxTimeout : 0;\r\n                                        const newDeadline = deadline ? deadline - now.getTime() : 0;\r\n                                        timeout = Math.min(timeoutCal, rpcTimeout, newDeadline);\r\n                                    }\r\n                                    retries++;\r\n                                    let retryArgument = this.argument;\r\n                                    // if resumption logic is passed, use it to determined the\r\n                                    // new argument for the new request made to the server\r\n                                    // otherwise, the original argument will be passed\r\n                                    if (retry.getResumptionRequestFn !== undefined) {\r\n                                        retryArgument = retry.getResumptionRequestFn(retryArgument);\r\n                                    }\r\n                                    const newRequest = () => {\r\n                                        if (this._isCancelCalled) {\r\n                                            if (this.stream) {\r\n                                                this.stream.cancel();\r\n                                            }\r\n                                            return;\r\n                                        }\r\n                                        const newStream = this.apiCall(retryArgument, this._callback);\r\n                                        return newStream;\r\n                                    };\r\n                                    opts.request = newRequest;\r\n                                    // make a request with the updated parameters\r\n                                    // based on the resumption strategy\r\n                                    return newMakeRequest(opts);\r\n                                }, toSleep);\r\n                            };\r\n                            return calculateTimeoutAndResumptionFunction();\r\n                        }\r\n                    }\r\n                    else {\r\n                        // non retryable error\r\n                        return transientErrorHelper(error, requestStream);\r\n                    }\r\n                }\r\n                else {\r\n                    // neither timeout nor maxRetries are defined, surface the error to the caller\r\n                    return transientErrorHelper(error, requestStream);\r\n                }\r\n            });\r\n            // return the stream if we didn't return it as\r\n            // part of an error state\r\n            return retryStream;\r\n        };\r\n        // this is the first make request call with the options the user passed in\r\n        return newMakeRequest(opts);\r\n    }\r\n}\r\nexports.StreamProxy = StreamProxy;\r\n//# sourceMappingURL=streaming.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvc3RyZWFtaW5nQ2FsbHMvc3RyZWFtaW5nLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG1CQUFtQixHQUFHLGtCQUFrQjtBQUN4QyxjQUFjLG1CQUFPLENBQUMsZ0VBQVE7QUFDOUIsc0JBQXNCLG1CQUFPLENBQUMsZ0ZBQWdCO0FBQzlDLGlCQUFpQixtQkFBTyxDQUFDLHNFQUFXO0FBQ3BDLGlCQUFpQixtQkFBTyxDQUFDLHNCQUFRO0FBQ2pDO0FBQ0Esa0JBQWtCLG1CQUFPLENBQUMsMERBQVc7QUFDckM7QUFDQSxxQkFBcUIsbUJBQU8sQ0FBQyxrRUFBZTtBQUM1QztBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsaUJBQWlCLGtCQUFrQixrQkFBa0I7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFlBQVk7QUFDM0IsZUFBZSxhQUFhO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsYUFBYTtBQUM1QixlQUFlLGlCQUFpQjtBQUNoQyxlQUFlLFNBQVM7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlGQUF5RixpQkFBaUIsZUFBZSxrQ0FBa0MsZUFBZSxRQUFRO0FBQ2xMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1ELGVBQWU7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkM7QUFDM0MsNkRBQTZEO0FBQzdEO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxjQUFjO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGFBQWE7QUFDNUIsZUFBZSxjQUFjO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxTQUFTO0FBQ3hCLGVBQWUsUUFBUTtBQUN2QixlQUFlLGNBQWM7QUFDN0I7QUFDQTtBQUNBO0FBQ0EseURBQXlEO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0VBQW9FLGdCQUFnQjtBQUNwRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSw4QkFBOEI7QUFDN0MsVUFBVSxTQUFTO0FBQ25CLFVBQVUsT0FBTztBQUNqQixpQkFBaUIsbUJBQW1CO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQ7QUFDdkQ7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFuaXNoLWJ1ZGR5Ly4vbm9kZV9tb2R1bGVzL2dvb2dsZS1nYXgvYnVpbGQvc3JjL3N0cmVhbWluZ0NhbGxzL3N0cmVhbWluZy5qcz80NDkwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG4vKipcclxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuU3RyZWFtUHJveHkgPSBleHBvcnRzLlN0cmVhbVR5cGUgPSB2b2lkIDA7XHJcbmNvbnN0IGdheF8xID0gcmVxdWlyZShcIi4uL2dheFwiKTtcclxuY29uc3QgZ29vZ2xlRXJyb3JfMSA9IHJlcXVpcmUoXCIuLi9nb29nbGVFcnJvclwiKTtcclxuY29uc3Qgc3RhdHVzXzEgPSByZXF1aXJlKFwiLi4vc3RhdHVzXCIpO1xyXG5jb25zdCBzdHJlYW1fMSA9IHJlcXVpcmUoXCJzdHJlYW1cIik7XHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdmFyLXJlcXVpcmVzXHJcbmNvbnN0IGR1cGxleGlmeSA9IHJlcXVpcmUoJ2R1cGxleGlmeScpO1xyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXZhci1yZXF1aXJlc1xyXG5jb25zdCByZXRyeVJlcXVlc3QgPSByZXF1aXJlKCdyZXRyeS1yZXF1ZXN0Jyk7XHJcbi8qKlxyXG4gKiBUaGUgdHlwZSBvZiBnUlBDIHN0cmVhbWluZy5cclxuICogQGVudW0ge251bWJlcn1cclxuICovXHJcbnZhciBTdHJlYW1UeXBlO1xyXG4oZnVuY3Rpb24gKFN0cmVhbVR5cGUpIHtcclxuICAgIC8qKiBDbGllbnQgc2VuZHMgYSBzaW5nbGUgcmVxdWVzdCwgc2VydmVyIHN0cmVhbXMgcmVzcG9uc2VzLiAqL1xyXG4gICAgU3RyZWFtVHlwZVtTdHJlYW1UeXBlW1wiU0VSVkVSX1NUUkVBTUlOR1wiXSA9IDFdID0gXCJTRVJWRVJfU1RSRUFNSU5HXCI7XHJcbiAgICAvKiogQ2xpZW50IHN0cmVhbXMgcmVxdWVzdHMsIHNlcnZlciByZXR1cm5zIGEgc2luZ2xlIHJlc3BvbnNlLiAqL1xyXG4gICAgU3RyZWFtVHlwZVtTdHJlYW1UeXBlW1wiQ0xJRU5UX1NUUkVBTUlOR1wiXSA9IDJdID0gXCJDTElFTlRfU1RSRUFNSU5HXCI7XHJcbiAgICAvKiogQm90aCBjbGllbnQgYW5kIHNlcnZlciBzdHJlYW0gb2JqZWN0cy4gKi9cclxuICAgIFN0cmVhbVR5cGVbU3RyZWFtVHlwZVtcIkJJRElfU1RSRUFNSU5HXCJdID0gM10gPSBcIkJJRElfU1RSRUFNSU5HXCI7XHJcbn0pKFN0cmVhbVR5cGUgfHwgKGV4cG9ydHMuU3RyZWFtVHlwZSA9IFN0cmVhbVR5cGUgPSB7fSkpO1xyXG4vLyBJbiByZXRyeS1yZXF1ZXN0LCB5b3UgY291bGQgcGFzcyBwYXJhbWV0ZXJzIHRvIHJlcXVlc3QgdXNpbmcgdGhlIHJlcXVlc3RPcHRzIHBhcmFtZXRlclxyXG4vLyB3aGVuIHdlIGNhbGxlZCByZXRyeS1yZXF1ZXN0IGZyb20gZ2F4LCB3ZSBhbHdheXMgcGFzc2VkIG51bGxcclxuLy8gcGFzc2luZyBudWxsIGhlcmUgcmVtb3ZlcyBhbiB1bm5lY2Vzc2FyeSBwYXJhbWV0ZXIgZnJvbSB0aGlzIGltcGxlbWVudGF0aW9uXHJcbmNvbnN0IHJlcXVlc3RPcHMgPSBudWxsO1xyXG5jbGFzcyBTdHJlYW1Qcm94eSBleHRlbmRzIGR1cGxleGlmeSB7XHJcbiAgICB0eXBlO1xyXG4gICAgX2NhbGxiYWNrO1xyXG4gICAgX2lzQ2FuY2VsQ2FsbGVkO1xyXG4gICAgc3RyZWFtO1xyXG4gICAgX3Jlc3BvbnNlSGFzU2VudDtcclxuICAgIHJlc3Q7XHJcbiAgICBnYXhTZXJ2ZXJTdHJlYW1pbmdSZXRyaWVzO1xyXG4gICAgYXBpQ2FsbDtcclxuICAgIGFyZ3VtZW50O1xyXG4gICAgLyoqXHJcbiAgICAgKiBTdHJlYW1Qcm94eSBpcyBhIHByb3h5IHRvIGdSUEMtc3RyZWFtaW5nIG1ldGhvZC5cclxuICAgICAqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICogQGNvbnN0cnVjdG9yXHJcbiAgICAgKiBAcGFyYW0ge1N0cmVhbVR5cGV9IHR5cGUgLSB0aGUgdHlwZSBvZiBnUlBDIHN0cmVhbS5cclxuICAgICAqIEBwYXJhbSB7QXBpQ2FsbGJhY2t9IGNhbGxiYWNrIC0gdGhlIGNhbGxiYWNrIGZvciBmdXJ0aGVyIEFQSSBjYWxsLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih0eXBlLCBjYWxsYmFjaywgcmVzdCwgZ2F4U2VydmVyU3RyZWFtaW5nUmV0cmllcykge1xyXG4gICAgICAgIHN1cGVyKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB7XHJcbiAgICAgICAgICAgIG9iamVjdE1vZGU6IHRydWUsXHJcbiAgICAgICAgICAgIHJlYWRhYmxlOiB0eXBlICE9PSBTdHJlYW1UeXBlLkNMSUVOVF9TVFJFQU1JTkcsXHJcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0eXBlICE9PSBTdHJlYW1UeXBlLlNFUlZFUl9TVFJFQU1JTkcsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcclxuICAgICAgICB0aGlzLl9jYWxsYmFjayA9IGNhbGxiYWNrO1xyXG4gICAgICAgIHRoaXMuX2lzQ2FuY2VsQ2FsbGVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5fcmVzcG9uc2VIYXNTZW50ID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5yZXN0ID0gcmVzdDtcclxuICAgICAgICB0aGlzLmdheFNlcnZlclN0cmVhbWluZ1JldHJpZXMgPSBnYXhTZXJ2ZXJTdHJlYW1pbmdSZXRyaWVzO1xyXG4gICAgfVxyXG4gICAgc2hvdWxkUmV0cnlSZXF1ZXN0KGVycm9yLCByZXRyeSkge1xyXG4gICAgICAgIGNvbnN0IGUgPSBnb29nbGVFcnJvcl8xLkdvb2dsZUVycm9yLnBhcnNlR1JQQ1N0YXR1c0RldGFpbHMoZXJyb3IpO1xyXG4gICAgICAgIGxldCBzaG91bGRSZXRyeSA9IHRoaXMuZGVmYXVsdFNob3VsZFJldHJ5KGUsIHJldHJ5KTtcclxuICAgICAgICBpZiAocmV0cnkuc2hvdWxkUmV0cnlGbikge1xyXG4gICAgICAgICAgICBzaG91bGRSZXRyeSA9IHJldHJ5LnNob3VsZFJldHJ5Rm4oZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzaG91bGRSZXRyeTtcclxuICAgIH1cclxuICAgIGNhbmNlbCgpIHtcclxuICAgICAgICBpZiAodGhpcy5zdHJlYW0pIHtcclxuICAgICAgICAgICAgdGhpcy5zdHJlYW0uY2FuY2VsKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9pc0NhbmNlbENhbGxlZCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBIZWxwZXIgZnVuY3Rpb24gdG8gaGFuZGxlIHRvdGFsIHRpbWVvdXQgKyBtYXggcmV0cnkgY2hlY2sgZm9yIHNlcnZlciBzdHJlYW1pbmcgcmV0cmllc1xyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRlYWRsaW5lIC0gdGhlIGN1cnJlbnQgcmV0cnkgZGVhZGxpbmVcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtYXhSZXRyaWVzIC0gbWF4aW11bSB0b3RhbCBudW1iZXIgb2YgcmV0cmllc1xyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHRvdGFsVGltZW91dE1pbGxpcyAtIHRvdGFsIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIHVzZWQgaW4gdGltZW91dCBjYWxjdWxhdGlvblxyXG4gICAgICogQHBhcmFtIHtHb29nbGVFcnJvcn0gb3JpZ2luYWxFcnJvciAtIHVuZGVybHlpbmcgZXJyb3IgcmVjZWl2ZWQgYnkgdGhlIHN0cmVhbVxyXG4gICAgICogQHBhcmFtIHtvcmlnaW5hbFRpbWVvdXR9IG9yaWdpbmFsVGltZW91dCAtIHRoZSBvcmlnaW5hbCBUaW1lb3V0IHNldCBpbiBiYWNrb2ZmIHNldHRpbmdzXHJcbiAgICAgKiBAcGFyYW0ge3JldHJpZXN9IHJldHJpZXMgLSB0aGUgbnVtYmVyIG9mIHJldHJpZXMgdGhlIGNhbGwgaGFzIG1hZGUgc28gZmFyXHJcbiAgICAgKi9cclxuICAgIHRocm93SWZNYXhSZXRyaWVzT3JUb3RhbFRpbWVvdXRFeGNlZWRlZChkZWFkbGluZSwgbWF4UmV0cmllcywgdG90YWxUaW1lb3V0TWlsbGlzLCBvcmlnaW5hbEVycm9yLCBvcmlnaW5hbFRpbWVvdXQsIHJldHJpZXMpIHtcclxuICAgICAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgIGNvbnN0IG5vd1RpbWUgPSBub3cuZ2V0VGltZSgpO1xyXG4gICAgICAgIGlmIChvcmlnaW5hbFRpbWVvdXQgJiZcclxuICAgICAgICAgICAgKHRvdGFsVGltZW91dE1pbGxpcyA9PT0gMCB8fFxyXG4gICAgICAgICAgICAgICAgdG90YWxUaW1lb3V0TWlsbGlzIDwgMCB8fFxyXG4gICAgICAgICAgICAgICAgKGRlYWRsaW5lICYmIG5vd1RpbWUgPj0gZGVhZGxpbmUpKSkge1xyXG4gICAgICAgICAgICBjb25zdCBlcnJvciA9IG5ldyBnb29nbGVFcnJvcl8xLkdvb2dsZUVycm9yKGBUb3RhbCB0aW1lb3V0IG9mIEFQSSBleGNlZWRlZCAke29yaWdpbmFsVGltZW91dH0gbWlsbGlzZWNvbmRzICR7b3JpZ2luYWxFcnJvciA/IGByZXRyeWluZyBlcnJvciAke29yaWdpbmFsRXJyb3J9IGAgOiAnJ30gYmVmb3JlIGFueSByZXNwb25zZSB3YXMgcmVjZWl2ZWQuYCk7XHJcbiAgICAgICAgICAgIGVycm9yLmNvZGUgPSBzdGF0dXNfMS5TdGF0dXMuREVBRExJTkVfRVhDRUVERUQ7XHJcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobWF4UmV0cmllcyA9PT0gMCkge1xyXG4gICAgICAgICAgICBjb25zdCBlcnJvciA9IG9yaWdpbmFsRXJyb3I7XHJcbiAgICAgICAgICAgIGVycm9yLm5vdGUgPSAnTWF4IHJldHJpZXMgaXMgc2V0IHRvIHplcm8uJztcclxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChyZXRyaWVzICYmIHJldHJpZXMgPj0gbWF4UmV0cmllcykge1xyXG4gICAgICAgICAgICBjb25zdCBlcnJvciA9IG5ldyBnb29nbGVFcnJvcl8xLkdvb2dsZUVycm9yKCdFeGNlZWRlZCBtYXhpbXVtIG51bWJlciBvZiByZXRyaWVzICcgK1xyXG4gICAgICAgICAgICAgICAgKG9yaWdpbmFsRXJyb3IgPyBgcmV0cnlpbmcgZXJyb3IgJHtvcmlnaW5hbEVycm9yfSBgIDogJycpICtcclxuICAgICAgICAgICAgICAgICdiZWZvcmUgYW55IHJlc3BvbnNlIHdhcyByZWNlaXZlZCcpO1xyXG4gICAgICAgICAgICBlcnJvci5jb2RlID0gc3RhdHVzXzEuU3RhdHVzLkRFQURMSU5FX0VYQ0VFREVEO1xyXG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEZvcndhcmRzIGV2ZW50cyBmcm9tIGFuIEFQSSByZXF1ZXN0IHN0cmVhbSB0byB0aGUgdXNlcidzIHN0cmVhbS5cclxuICAgICAqIEBwYXJhbSB7U3RyZWFtfSBzdHJlYW0gLSBUaGUgQVBJIHJlcXVlc3Qgc3RyZWFtLlxyXG4gICAgICovXHJcbiAgICBldmVudEZvcndhcmRIZWxwZXIoc3RyZWFtKSB7XHJcbiAgICAgICAgY29uc3QgZXZlbnRzVG9Gb3J3YXJkID0gWydtZXRhZGF0YScsICdyZXNwb25zZScsICdzdGF0dXMnXTtcclxuICAgICAgICBldmVudHNUb0ZvcndhcmQuZm9yRWFjaChldmVudCA9PiB7XHJcbiAgICAgICAgICAgIHN0cmVhbS5vbihldmVudCwgdGhpcy5lbWl0LmJpbmQodGhpcywgZXZlbnQpKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSGVscGVyIGZ1bmN0aW9uIHRoYXQgZW1pdHMgYSByZXNwb25zZSBvbiB0aGUgc3RyZWFtIGFmdGVyIGVpdGhlciBhICdtZXRhZGF0YSdcclxuICAgICAqIG9yIGEgJ3N0YXR1cycgZXZlbnQgLSB0aGlzIGhlbHBzIHN0cmVhbXMgdG8gYmVoYXZlIG1vcmUgbGlrZSBodHRwIGNvbnN1bWVycyBleHBlY3RcclxuICAgICAqIEBwYXJhbSB7U3RyZWFtfSBzdHJlYW0gLSBUaGUgQVBJIHJlcXVlc3Qgc3RyZWFtLlxyXG4gICAgICovXHJcbiAgICBzdGF0dXNNZXRhZGF0YUhlbHBlcihzdHJlYW0pIHtcclxuICAgICAgICAvLyBnUlBDIGlzIGd1YXJhbnRlZWQgZW1pdCB0aGUgJ3N0YXR1cycgZXZlbnQgYnV0IG5vdCAnbWV0YWRhdGEnLCBhbmQgJ3N0YXR1cycgaXMgdGhlIGxhc3QgZXZlbnQgdG8gZW1pdC5cclxuICAgICAgICAvLyBFbWl0IHRoZSAncmVzcG9uc2UnIGV2ZW50IGlmIHN0cmVhbSBoYXMgbm8gJ21ldGFkYXRhJyBldmVudC5cclxuICAgICAgICAvLyBUaGlzIGF2b2lkcyB0aGUgc3RyZWFtIHN3YWxsb3dpbmcgdGhlIG90aGVyIGV2ZW50cywgc3VjaCBhcyAnZW5kJy5cclxuICAgICAgICBzdHJlYW0ub24oJ3N0YXR1cycsICgpID0+IHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLl9yZXNwb25zZUhhc1NlbnQpIHtcclxuICAgICAgICAgICAgICAgIHN0cmVhbS5lbWl0KCdyZXNwb25zZScsIHtcclxuICAgICAgICAgICAgICAgICAgICBjb2RlOiAyMDAsXHJcbiAgICAgICAgICAgICAgICAgICAgZGV0YWlsczogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ09LJyxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gV2UgYWxzbyB3YW50IHRvIHN1cHBseSB0aGUgc3RhdHVzIGRhdGEgYXMgJ3Jlc3BvbnNlJyBldmVudCB0byBzdXBwb3J0XHJcbiAgICAgICAgLy8gdGhlIGJlaGF2aW9yIG9mIGdvb2dsZS1jbG91ZC1ub2RlIGV4cGVjdHMuXHJcbiAgICAgICAgLy8gc2VlOlxyXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9Hb29nbGVDbG91ZFBsYXRmb3JtL2dvb2dsZS1jbG91ZC1ub2RlL3B1bGwvMTc3NSNpc3N1ZWNvbW1lbnQtMjU5MTQxMDI5XHJcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL0dvb2dsZUNsb3VkUGxhdGZvcm0vZ29vZ2xlLWNsb3VkLW5vZGUvYmxvYi8xMTY0MzZmYTc4OWQ4YjBmN2ZjNTEwMGIxOWI0MjRlM2VjNjNlNmJmL3BhY2thZ2VzL2NvbW1vbi9zcmMvZ3JwYy1zZXJ2aWNlLmpzI0wzNTVcclxuICAgICAgICBzdHJlYW0ub24oJ21ldGFkYXRhJywgbWV0YWRhdGEgPT4ge1xyXG4gICAgICAgICAgICAvLyBDcmVhdGUgYSByZXNwb25zZSBvYmplY3Qgd2l0aCBzdWNjZWVkcy5cclxuICAgICAgICAgICAgLy8gVE9ETzogdW5pZnkgdGhpcyBsb2dpYyB3aXRoIHRoZSBkZWNvcmF0aW9uIG9mIGdSUEMgcmVzcG9uc2Ugd2hlbiBpdCdzXHJcbiAgICAgICAgICAgIC8vIGFkZGVkLiBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGVhcGlzL2dheC1ub2RlanMvaXNzdWVzLzY1XHJcbiAgICAgICAgICAgIHN0cmVhbS5lbWl0KCdyZXNwb25zZScsIHtcclxuICAgICAgICAgICAgICAgIGNvZGU6IDIwMCxcclxuICAgICAgICAgICAgICAgIGRldGFpbHM6ICcnLFxyXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ09LJyxcclxuICAgICAgICAgICAgICAgIG1ldGFkYXRhLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy5fcmVzcG9uc2VIYXNTZW50ID0gdHJ1ZTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogRm9yd2FyZCBldmVudHMgZnJvbSBhbiBBUEkgcmVxdWVzdCBzdHJlYW0gdG8gdGhlIHVzZXIncyBzdHJlYW0uXHJcbiAgICAgKiAgZ1JQQyBpcyBndWFyYW50ZWVkIGVtaXQgdGhlICdzdGF0dXMnIGV2ZW50IGJ1dCBub3QgJ21ldGFkYXRhJ1xyXG4gICAgICogJ3N0YXR1cycgaXMgdGhlIGxhc3QgZXZlbnQgdG8gZW1pdDsgaWYgJ21ldGFkYXRhJyBlbWl0cywgaXQgd2lsbFxyXG4gICAgICogYmUgdGhlIGZpcnN0IGV2ZW50IHRvIGVtaXQuIEl0IHNob3VsZCBvbmx5IGVtaXQgb25jZTsgaWYgaXQgZW1pdHNcclxuICAgICAqIG1vcmUgdGhhbiBvbmNlLCB1bmV4cGVjdGVkIHNpZGUgZWZmZWN0cyB3aWxsIG9jY3VyLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7U3RyZWFtfSBzdHJlYW0gLSBUaGUgQVBJIHJlcXVlc3Qgc3RyZWFtLlxyXG4gICAgICogQHBhcmFtIHtSZXRyeU9wdGlvbnN9IHJldHJ5IC0gQ29uZmlndXJlcyB0aGUgZXhjZXB0aW9ucyB1cG9uIHdoaWNoIHRoZVxyXG4gICAgICogICBmdW5jdGlvbiBzaG91bGQgcmV0cnksIGFuZCB0aGUgcGFyYW1ldGVycyB0byB0aGUgZXhwb25lbnRpYWwgYmFja29mZiByZXRyeVxyXG4gICAgICogICBhbGdvcml0aG0uXHJcbiAgICAgKi9cclxuICAgIGZvcndhcmRFdmVudHMoc3RyZWFtKSB7XHJcbiAgICAgICAgdGhpcy5ldmVudEZvcndhcmRIZWxwZXIoc3RyZWFtKTtcclxuICAgICAgICB0aGlzLnN0YXR1c01ldGFkYXRhSGVscGVyKHN0cmVhbSk7XHJcbiAgICAgICAgc3RyZWFtLm9uKCdlcnJvcicsIGVycm9yID0+IHtcclxuICAgICAgICAgICAgZ29vZ2xlRXJyb3JfMS5Hb29nbGVFcnJvci5wYXJzZUdSUENTdGF0dXNEZXRhaWxzKGVycm9yKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogRGVmYXVsdCBtZWNoYW5pc20gZm9yIGRldGVybWluaW5nIHdoZXRoZXIgYSBzdHJlYW1pbmcgY2FsbCBzaG91bGQgcmV0cnlcclxuICAgICAqIElmIGEgdXNlciBwYXNzZXMgaW4gYSBcInNob3VsZFJldHJ5Rm5cIiwgdGhpcyB3aWxsIG5vdCBiZSB1c2VkXHJcbiAgICAgKiBAcGFyYW0ge0dvb2dsZUVycm9yfSBlcnJwciAtIFRoZSBlcnJvciB3ZSBuZWVkIHRvIGRldGVybWluZSBpcyByZXRyeWFibGUgb3Igbm90XHJcbiAgICAgKiBAcGFyYW0ge1JldHJ5T3B0aW9uc30gcmV0cnkgLSBDb25maWd1cmVzIHRoZSBleGNlcHRpb25zIHVwb24gd2hpY2ggdGhlXHJcbiAgICAgKiAgIGZ1bmN0aW9uIHNob3VsZCByZXRyeSwgYW5kIHRoZSBwYXJhbWV0ZXJzIHRvIHRoZSBleHBvbmVudGlhbCBiYWNrb2ZmIHJldHJ5XHJcbiAgICAgKiAgIGFsZ29yaXRobS5cclxuICAgICAqL1xyXG4gICAgZGVmYXVsdFNob3VsZFJldHJ5KGVycm9yLCByZXRyeSkge1xyXG4gICAgICAgIGlmICgocmV0cnkucmV0cnlDb2Rlcy5sZW5ndGggPiAwICYmXHJcbiAgICAgICAgICAgIHJldHJ5LnJldHJ5Q29kZXMuaW5kZXhPZihlcnJvci5jb2RlKSA8IDApIHx8XHJcbiAgICAgICAgICAgIHJldHJ5LnJldHJ5Q29kZXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNwZWNpZmllcyB0aGUgdGFyZ2V0IHN0cmVhbS5cclxuICAgICAqIEBwYXJhbSB7QXBpQ2FsbH0gYXBpQ2FsbCAtIHRoZSBBUEkgZnVuY3Rpb24gdG8gYmUgY2FsbGVkLlxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGFyZ3VtZW50IC0gdGhlIGFyZ3VtZW50IHRvIGJlIHBhc3NlZCB0byB0aGUgYXBpQ2FsbC5cclxuICAgICAqIEBwYXJhbSB7UmV0cnlPcHRpb25zfSByZXRyeSAtIENvbmZpZ3VyZXMgdGhlIGV4Y2VwdGlvbnMgdXBvbiB3aGljaCB0aGVcclxuICAgICAqICAgZnVuY3Rpb24gc2hvdWxkIHJldHJ5LCBhbmQgdGhlIHBhcmFtZXRlcnMgdG8gdGhlIGV4cG9uZW50aWFsIGJhY2tvZmYgcmV0cnlcclxuICAgICAqICAgYWxnb3JpdGhtLlxyXG4gICAgICovXHJcbiAgICBzZXRTdHJlYW0oYXBpQ2FsbCwgYXJndW1lbnQsIHJldHJ5UmVxdWVzdE9wdGlvbnMgPSB7fSwgcmV0cnkpIHtcclxuICAgICAgICB0aGlzLmFwaUNhbGwgPSBhcGlDYWxsO1xyXG4gICAgICAgIHRoaXMuYXJndW1lbnQgPSBhcmd1bWVudDtcclxuICAgICAgICBpZiAodGhpcy50eXBlID09PSBTdHJlYW1UeXBlLlNFUlZFUl9TVFJFQU1JTkcpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMucmVzdCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3RyZWFtID0gYXBpQ2FsbChhcmd1bWVudCwgdGhpcy5fY2FsbGJhY2spO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdHJlYW0gPSBzdHJlYW07XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFJlYWRhYmxlKHN0cmVhbSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5nYXhTZXJ2ZXJTdHJlYW1pbmdSZXRyaWVzKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByZXF1ZXN0ID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9pc0NhbmNlbENhbGxlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zdHJlYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RyZWFtLmNhbmNlbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RyZWFtID0gYXBpQ2FsbChhcmd1bWVudCwgdGhpcy5fY2FsbGJhY2spO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHJlYW07XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmV0cnlTdHJlYW0gPSB0aGlzLm5ld1N0cmVhbWluZ1JldHJ5UmVxdWVzdCh7IHJlcXVlc3QsIHJldHJ5IH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdHJlYW0gPSByZXRyeVN0cmVhbTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRGb3J3YXJkSGVscGVyKHJldHJ5U3RyZWFtKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0UmVhZGFibGUocmV0cnlTdHJlYW0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmV0cnlTdHJlYW0gPSByZXRyeVJlcXVlc3QobnVsbCwge1xyXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdE1vZGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdDogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5faXNDYW5jZWxDYWxsZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnN0cmVhbSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RyZWFtLmNhbmNlbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0cmVhbSA9IGFwaUNhbGwoYXJndW1lbnQsIHRoaXMuX2NhbGxiYWNrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdHJlYW0gPSBzdHJlYW07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZm9yd2FyZEV2ZW50cyhzdHJlYW0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RyZWFtO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0cmllczogcmV0cnlSZXF1ZXN0T3B0aW9ucy5yZXRyaWVzLFxyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXRyeUF0dGVtcHQ6IHJldHJ5UmVxdWVzdE9wdGlvbnMuY3VycmVudFJldHJ5QXR0ZW1wdCxcclxuICAgICAgICAgICAgICAgICAgICBub1Jlc3BvbnNlUmV0cmllczogcmV0cnlSZXF1ZXN0T3B0aW9ucy5ub1Jlc3BvbnNlUmV0cmllcyxcclxuICAgICAgICAgICAgICAgICAgICBzaG91bGRSZXRyeUZuOiByZXRyeVJlcXVlc3RPcHRpb25zLnNob3VsZFJldHJ5Rm4sXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0UmVhZGFibGUocmV0cnlTdHJlYW0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3Qgc3RyZWFtID0gYXBpQ2FsbChhcmd1bWVudCwgdGhpcy5fY2FsbGJhY2spO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtID0gc3RyZWFtO1xyXG4gICAgICAgIHRoaXMuZm9yd2FyZEV2ZW50cyhzdHJlYW0pO1xyXG4gICAgICAgIGlmICh0aGlzLnR5cGUgPT09IFN0cmVhbVR5cGUuQ0xJRU5UX1NUUkVBTUlORykge1xyXG4gICAgICAgICAgICB0aGlzLnNldFdyaXRhYmxlKHN0cmVhbSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnR5cGUgPT09IFN0cmVhbVR5cGUuQklESV9TVFJFQU1JTkcpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRSZWFkYWJsZShzdHJlYW0pO1xyXG4gICAgICAgICAgICB0aGlzLnNldFdyaXRhYmxlKHN0cmVhbSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLl9pc0NhbmNlbENhbGxlZCAmJiB0aGlzLnN0cmVhbSkge1xyXG4gICAgICAgICAgICB0aGlzLnN0cmVhbS5jYW5jZWwoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgcmV0cnkgcmVxdWVzdCBzdHJlYW0gLVxyXG4gICAgICppbm5lciBhcnJvdyBmdW5jdGlvbiBcIm5ld01ha2VSZXF1ZXN0XCIgaGFuZGxlcyByZXRyeWluZyBhbmQgcmVzdW1wdGlvblxyXG4gICAgICogQHBhcmFtIHtzdHJlYW1pbmdSZXRyeVJlcXVlc3RPcHRpb25zfSBvcHRzXHJcbiAgICAgKiAgIHtyZXF1ZXN0fSAtIHRoZSByZXF1ZXN0IHRvIGJlIG1hZGUgaWYgdGhlIHN0cmVhbSBlcnJvcnNcclxuICAgICAqICAge3JldHJ5fSAtIHRoZSByZXRyeSBvcHRpb25zIGFzc29jaWF0ZWQgd2l0aCB0aGUgY2FsbFxyXG4gICAgICogQHJldHVybnMge0NhbmNlbGxhYmxlU3RyZWFtfSAtIHRoZSBzdHJlYW0gdGhhdCBoYW5kbGVzIHJldHJ5IGxvZ2ljXHJcbiAgICAgKi9cclxuICAgIG5ld1N0cmVhbWluZ1JldHJ5UmVxdWVzdChvcHRzKSB7XHJcbiAgICAgICAgLy8gYXQgdGhpcyBwb2ludCwgaXQgd291bGQgYmUgdW5leHBlY3RlZCBpZiByZXRyeSB3ZXJlIHVuZGVmaW5lZFxyXG4gICAgICAgIC8vIGJ1dCBpZiBpdCBpcywgcHJvdmlkZSBhIGxvZ2ljYWwgZGVmYXVsdCBzbyB3ZSBkb24ndCBydW4gaW50byB0cm91YmxlXHJcbiAgICAgICAgY29uc3QgcmV0cnkgPSBvcHRzLnJldHJ5ID8/IHtcclxuICAgICAgICAgICAgcmV0cnlDb2RlczogW10sXHJcbiAgICAgICAgICAgIGJhY2tvZmZTZXR0aW5nczogKDAsIGdheF8xLmNyZWF0ZURlZmF1bHRCYWNrb2ZmU2V0dGluZ3MpKCksXHJcbiAgICAgICAgfTtcclxuICAgICAgICBsZXQgcmV0cmllcyA9IDA7XHJcbiAgICAgICAgY29uc3QgcmV0cnlTdHJlYW0gPSBuZXcgc3RyZWFtXzEuUGFzc1Rocm91Z2goe1xyXG4gICAgICAgICAgICBvYmplY3RNb2RlOiB0cnVlLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNvbnN0IHRvdGFsVGltZW91dCA9IHJldHJ5LmJhY2tvZmZTZXR0aW5ncy50b3RhbFRpbWVvdXRNaWxsaXMgPz8gdW5kZWZpbmVkO1xyXG4gICAgICAgIGNvbnN0IG1heFJldHJpZXMgPSByZXRyeS5iYWNrb2ZmU2V0dGluZ3MubWF4UmV0cmllcyA/PyB1bmRlZmluZWQ7XHJcbiAgICAgICAgbGV0IHRpbWVvdXQgPSByZXRyeS5iYWNrb2ZmU2V0dGluZ3MuaW5pdGlhbFJwY1RpbWVvdXRNaWxsaXMgPz8gdW5kZWZpbmVkO1xyXG4gICAgICAgIGxldCBub3cgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgIGxldCBkZWFkbGluZSA9IDA7XHJcbiAgICAgICAgaWYgKHRvdGFsVGltZW91dCkge1xyXG4gICAgICAgICAgICBkZWFkbGluZSA9IG5vdy5nZXRUaW1lKCkgKyB0b3RhbFRpbWVvdXQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHRyYW5zaWVudEVycm9ySGVscGVyID0gKGVycm9yLCByZXF1ZXN0U3RyZWFtKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGUgPSBnb29nbGVFcnJvcl8xLkdvb2dsZUVycm9yLnBhcnNlR1JQQ1N0YXR1c0RldGFpbHMoZXJyb3IpO1xyXG4gICAgICAgICAgICBlLm5vdGUgPVxyXG4gICAgICAgICAgICAgICAgJ0V4Y2VwdGlvbiBvY2N1cnJlZCBpbiByZXRyeSBtZXRob2QgdGhhdCB3YXMgJyArXHJcbiAgICAgICAgICAgICAgICAgICAgJ25vdCBjbGFzc2lmaWVkIGFzIHRyYW5zaWVudCc7XHJcbiAgICAgICAgICAgIC8vIGNsZWFuIHVwIHRoZSByZXF1ZXN0IHN0cmVhbSBhbmQgcmV0cnlTdHJlYW1zLCBzaWxlbnRseSBkZXN0cm95IGl0IG9uIHRoZSByZXF1ZXN0IHN0cmVhbVxyXG4gICAgICAgICAgICAvLyBidXQgZG8gcmFpc2UgaXQgb24gZGVzdHJ1Y3RpbiBvZiB0aGUgcmV0cnlTdHJlYW0gc28gdGhlIGNvbnN1bWVyIGNhbiBzZWUgaXRcclxuICAgICAgICAgICAgcmVxdWVzdFN0cmVhbS5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgIHJldHJ5U3RyZWFtLmRlc3Ryb3koZSk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXRyeVN0cmVhbTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IG5ld01ha2VSZXF1ZXN0ID0gKG5ld29wdHMpID0+IHtcclxuICAgICAgICAgICAgbGV0IGRhdGFFbmQgPSBmYWxzZTtcclxuICAgICAgICAgICAgbGV0IHN0YXR1c1JlY2VpdmVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGxldCBlbnRlcmVkRXJyb3IgPSBmYWxzZTtcclxuICAgICAgICAgICAgLy8gbWFrZSB0aGUgcmVxdWVzdFxyXG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0U3RyZWFtID0gbmV3b3B0cy5yZXF1ZXN0KHJlcXVlc3RPcHMpO1xyXG4gICAgICAgICAgICByZXRyeVN0cmVhbS5jYW5jZWwgPSByZXF1ZXN0U3RyZWFtLmNhbmNlbDsgLy8gbWFrZSBzdXJlIHRoZSByZXRyeVN0cmVhbSBpcyBhbHNvIGNhbmNlbGxhYmxlIGJ5IHRoZSB1c2VyXHJcbiAgICAgICAgICAgIGNvbnN0IGV2ZW50c1RvRm9yd2FyZCA9IFsnbWV0YWRhdGEnLCAncmVzcG9uc2UnLCAnc3RhdHVzJ107XHJcbiAgICAgICAgICAgIGV2ZW50c1RvRm9yd2FyZC5mb3JFYWNoKGV2ZW50ID0+IHtcclxuICAgICAgICAgICAgICAgIHJlcXVlc3RTdHJlYW0ub24oZXZlbnQsIHJldHJ5U3RyZWFtLmVtaXQuYmluZChyZXRyeVN0cmVhbSwgZXZlbnQpKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhdHVzTWV0YWRhdGFIZWxwZXIocmVxdWVzdFN0cmVhbSk7XHJcbiAgICAgICAgICAgIC8vIFRPRE8gLSBiLzM1MzI2MjU0MiBhZGRyZXNzIGJ1ZmZlciBzdHVmZlxyXG4gICAgICAgICAgICByZXF1ZXN0U3RyZWFtLm9uKCdkYXRhJywgKGRhdGEpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHJpZXMgPSAwO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0LmJpbmQodGhpcywgJ2RhdGEnKShkYXRhKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIC8qIGluIHJldHJ5LXJlcXVlc3QsIHdoaWNoIHByZXZpb3VzbHkgaGFuZGxlZCByZXRyaWVzLFxyXG4gICAgICAgICAgICAgKiBcImVuZFwiIGNvdWxkIGJlIGVtaXR0ZWQgb24gYSByZXF1ZXN0IHN0cmVhbSBiZWZvcmUgb3RoZXIgZ1JQQyBldmVudHMuXHJcbiAgICAgICAgICAgICAqIFRvIGVuc3VyZSBpdCBkb2Vzbid0IHJlYWNoIHRoZSBjb25zdW1lciBzdHJlYW0gcHJlbWF0dXJlbHksIHJldHJ5LXJlcXVlc3QgcGlwZWRcclxuICAgICAgICAgICAgICogdHdvIHN0cmVhbXMgdG9nZXRoZXIgKGRlbGF5U3RyZWFtIGFuZCByZXRyeVN0cmVhbSlcclxuICAgICAgICAgICAgICogdG8gZW5zdXJlIHRoYXQgXCJlbmRcIiBvbmx5IGVtaXR0ZWQgYWZ0ZXIgYSBcInJlc3BvbnNlXCIgZXZlbnRcclxuICAgICAgICAgICAgICpcclxuICAgICAgICAgICAgICogV2UgYXJlIGNvbnNjaW91c2x5IE5PVCB1c2luZyBwaXBlbGluZSBvciAucGlwZSBhcyBwYXJ0IG9mIHNpbWlsYXIgbG9naWMgaGVyZVxyXG4gICAgICAgICAgICAgKiBiZWNhdXNlIHdlIHdhbnQgbW9yZSBjb250cm9sIG92ZXIgd2hhdCBoYXBwZW5zIGR1cmluZyBldmVudCBoYW5kb2ZmIGFuZCB3ZSB3YW50IHRvXHJcbiAgICAgICAgICAgICAqIGF2b2lkIHRoZSB1bmRlc2lyZWQgYmVoYXZpb3IgdGhhdCBjYW4gaGFwcGVuIHdpdGggZXJyb3IgZXZlbnRzXHJcbiAgICAgICAgICAgICAqIGlmIGNvbnN1bWVycyBpbiBjbGllbnQgbGlicmFyaWVzIGFyZSBhbHNvIHVzaW5nIHBpcGVzXHJcbiAgICAgICAgICAgICAqXHJcbiAgICAgICAgICAgICAqIFNpbmNlIFwic3RhdHVzXCIgaXMgZ3VhcmFudGVlZCB0byBiZSB0aGUgbGFzdCBldmVudCBlbWl0dGVkIGJ5IGdSUEMuXHJcbiAgICAgICAgICAgICAqIElmIHdlIGhhdmUgc2VlbiBhbiBcImVuZFwiIGV2ZW50LCB0aGUgZGF0YUVuZCBib29sZWFuIHdpbGwgYmUgdHJ1ZSBhbmQgd2UgY2FuIHNhZmVseVxyXG4gICAgICAgICAgICAgKiBlbmQgdGhlIHN0cmVhbS5cclxuICAgICAgICAgICAgICpcclxuICAgICAgICAgICAgICogVGhlIFwic3RhdHVzUmVjZWl2ZWRcIiBib29sZWFuIGNvdmVycyB0aGUgb3Bwb3NpdGUgY2FzZSAtIHRoYXQgd2UgcmVjZWl2ZSB0aGUgXCJzdGF0dXNcIiBldmVudCBiZWZvcmVcclxuICAgICAgICAgICAgICogYSBzdWNjZXNzZnVsIHN0cmVhbSBlbmQgZXZlbnQgLSB0aGlzIHNpZ25hbHMgdGhlIC5vbignZW5kJykgZXZlbnQgaGFuZGxlciB0aGF0IGl0J3Mgb2theSB0byBlbmQgdGhlIHN0cmVhbVxyXG4gICAgICAgICAgICAgKlxyXG4gICAgICAgICAgICAgKlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgcmVxdWVzdFN0cmVhbS5vbignc3RhdHVzJywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgc3RhdHVzUmVjZWl2ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGFFbmQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXRyeVN0cmVhbS5lbmQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiByZXRyeVN0cmVhbTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJlcXVlc3RTdHJlYW0ub24oJ2VuZCcsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghZW50ZXJlZEVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YUVuZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaW4gdGhpcyBjYXNlLCB3ZSd2ZSBhbHJlYWR5IHJlY2VpdmVkIFwic3RhdHVzXCJcclxuICAgICAgICAgICAgICAgICAgICAvLyB3aGljaCBpcyB0aGUgbGFzdCBldmVudCBmcm9tIGdSUEMsIHNvIGl0J3MgY29vbCB0byBlbmQgdGhlIHN0cmVhbVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0dXNSZWNlaXZlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXRyeVN0cmVhbS5lbmQoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmV0cnlTdHJlYW07XHJcbiAgICAgICAgICAgICAgICAvLyB0aGVyZSBpcyBubyBlbHNlIGNhc2UgYmVjYXVzZSBpZiBlbnRlcmVkRXJyb3JcclxuICAgICAgICAgICAgICAgIC8vIGlzIHRydWUsIHdlIHdpbGwgaGFuZGxlIHN0cmVhbSBkZXN0cnVjdGlvbiBhcyBwYXJ0IG9mXHJcbiAgICAgICAgICAgICAgICAvLyBlaXRoZXIgcmV0cnlpbmcgKHdoZXJlIHdlIGRvbid0IHdhbnQgdG8gZW5kIHRoZSBzdHJlYW0pXHJcbiAgICAgICAgICAgICAgICAvLyBvciBhcyBwYXJ0IG9mIGVycm9yIGhhbmRsaW5nLCB3aGljaCB3aWxsIHRha2UgY2FyZSBvZiBzdHJlYW0gZGVzdHJ1Y3Rpb25cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJlcXVlc3RTdHJlYW0ub24oJ2Vycm9yJywgKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBlbnRlcmVkRXJyb3IgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgLy8gdHlwZSBjaGVjayBmb3IgdW5kZWZpbmVkIGluc3RlYWQgb2YgZm9yIHRydXRoaW5lc3MgaW4gY2FzZSBtYXhSZXRyaWVzIG9yIHRpbWVvdXQgaXMgZXF1YWwgdG8gemVyb1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtYXhSZXRyaWVzICE9PSB1bmRlZmluZWQgfHxcclxuICAgICAgICAgICAgICAgICAgICB0eXBlb2YgdG90YWxUaW1lb3V0ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zaG91bGRSZXRyeVJlcXVlc3QoZXJyb3IsIHJldHJ5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF4UmV0cmllcyAmJiB0b3RhbFRpbWVvdXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0Vycm9yID0gbmV3IGdvb2dsZUVycm9yXzEuR29vZ2xlRXJyb3IoJ0Nhbm5vdCBzZXQgYm90aCB0b3RhbFRpbWVvdXRNaWxsaXMgYW5kIG1heFJldHJpZXMgJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2luIGJhY2tvZmZTZXR0aW5ncy4nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0Vycm9yLmNvZGUgPSBzdGF0dXNfMS5TdGF0dXMuSU5WQUxJRF9BUkdVTUVOVDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNsZWFuIHVwIHRoZSByZXF1ZXN0IHN0cmVhbSBhbmQgcmV0cnlTdHJlYW1zLCBzaWxlbnRseSBkZXN0cm95IGl0IG9uIHRoZSByZXF1ZXN0IHN0cmVhbVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYnV0IGRvIHJhaXNlIGl0IG9uIGRlc3RydWN0aW4gb2YgdGhlIHJldHJ5U3RyZWFtIHNvIHRoZSBjb25zdW1lciBjYW4gc2VlIGl0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0U3RyZWFtLmRlc3Ryb3koKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHJ5U3RyZWFtLmRlc3Ryb3kobmV3RXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldHJ5U3RyZWFtO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgZm9yIGV4Y2VlZGluZyB0aW1lb3V0IG9yIG1heCByZXRyaWVzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGhyb3dJZk1heFJldHJpZXNPclRvdGFsVGltZW91dEV4Y2VlZGVkKGRlYWRsaW5lLCBtYXhSZXRyaWVzLCB0aW1lb3V0LCBlcnJvciwgdG90YWxUaW1lb3V0LCByZXRyaWVzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBnb29nbGVFcnJvcl8xLkdvb2dsZUVycm9yLnBhcnNlR1JQQ1N0YXR1c0RldGFpbHMoZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNsZWFuIHVwIHRoZSByZXF1ZXN0IHN0cmVhbSBhbmQgcmV0cnlTdHJlYW1zLCBzaWxlbnRseSBkZXN0cm95IGl0IG9uIHRoZSByZXF1ZXN0IHN0cmVhbVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJ1dCBkbyByYWlzZSBpdCBvbiBkZXN0cnVjdGlvbiBvZiB0aGUgcmV0cnlTdHJlYW0gc28gdGhlIGNvbnN1bWVyIGNhbiBzZWUgaXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0U3RyZWFtLmRlc3Ryb3koKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXRyeVN0cmVhbS5kZXN0cm95KGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXRyeVN0cmVhbTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlbGF5TXVsdCA9IHJldHJ5LmJhY2tvZmZTZXR0aW5ncy5yZXRyeURlbGF5TXVsdGlwbGllcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1heERlbGF5ID0gcmV0cnkuYmFja29mZlNldHRpbmdzLm1heFJldHJ5RGVsYXlNaWxsaXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0aW1lb3V0TXVsdCA9IHJldHJ5LmJhY2tvZmZTZXR0aW5ncy5ycGNUaW1lb3V0TXVsdGlwbGllcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1heFRpbWVvdXQgPSByZXRyeS5iYWNrb2ZmU2V0dGluZ3MubWF4UnBjVGltZW91dE1pbGxpcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkZWxheSA9IHJldHJ5LmJhY2tvZmZTZXR0aW5ncy5pbml0aWFsUmV0cnlEZWxheU1pbGxpcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhbGN1bGF0ZSBuZXcgZGVhZGxpbmVzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0b1NsZWVwID0gTWF0aC5yYW5kb20oKSAqIGRlbGF5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2FsY3VsYXRlVGltZW91dEFuZFJlc3VtcHRpb25GdW5jdGlvbiA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gb25seSBkbyB0aW1lb3V0IGNhbGN1bGF0aW9ucyBpZiBub3QgdXNpbmcgbWF4UmV0cmllc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGltZW91dCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm93ID0gbmV3IERhdGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGF5ID0gTWF0aC5taW4oZGVsYXkgKiBkZWxheU11bHQsIG1heERlbGF5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRpbWVvdXRDYWwgPSB0aW1lb3V0ICYmIHRpbWVvdXRNdWx0ID8gdGltZW91dCAqIHRpbWVvdXRNdWx0IDogMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJwY1RpbWVvdXQgPSBtYXhUaW1lb3V0ID8gbWF4VGltZW91dCA6IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdEZWFkbGluZSA9IGRlYWRsaW5lID8gZGVhZGxpbmUgLSBub3cuZ2V0VGltZSgpIDogMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVvdXQgPSBNYXRoLm1pbih0aW1lb3V0Q2FsLCBycGNUaW1lb3V0LCBuZXdEZWFkbGluZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0cmllcysrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmV0cnlBcmd1bWVudCA9IHRoaXMuYXJndW1lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHJlc3VtcHRpb24gbG9naWMgaXMgcGFzc2VkLCB1c2UgaXQgdG8gZGV0ZXJtaW5lZCB0aGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbmV3IGFyZ3VtZW50IGZvciB0aGUgbmV3IHJlcXVlc3QgbWFkZSB0byB0aGUgc2VydmVyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG90aGVyd2lzZSwgdGhlIG9yaWdpbmFsIGFyZ3VtZW50IHdpbGwgYmUgcGFzc2VkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXRyeS5nZXRSZXN1bXB0aW9uUmVxdWVzdEZuICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHJ5QXJndW1lbnQgPSByZXRyeS5nZXRSZXN1bXB0aW9uUmVxdWVzdEZuKHJldHJ5QXJndW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld1JlcXVlc3QgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5faXNDYW5jZWxDYWxsZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zdHJlYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdHJlYW0uY2FuY2VsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld1N0cmVhbSA9IHRoaXMuYXBpQ2FsbChyZXRyeUFyZ3VtZW50LCB0aGlzLl9jYWxsYmFjayk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3U3RyZWFtO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRzLnJlcXVlc3QgPSBuZXdSZXF1ZXN0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBtYWtlIGEgcmVxdWVzdCB3aXRoIHRoZSB1cGRhdGVkIHBhcmFtZXRlcnNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYmFzZWQgb24gdGhlIHJlc3VtcHRpb24gc3RyYXRlZ3lcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ld01ha2VSZXF1ZXN0KG9wdHMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHRvU2xlZXApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxjdWxhdGVUaW1lb3V0QW5kUmVzdW1wdGlvbkZ1bmN0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5vbiByZXRyeWFibGUgZXJyb3JcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRyYW5zaWVudEVycm9ySGVscGVyKGVycm9yLCByZXF1ZXN0U3RyZWFtKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBuZWl0aGVyIHRpbWVvdXQgbm9yIG1heFJldHJpZXMgYXJlIGRlZmluZWQsIHN1cmZhY2UgdGhlIGVycm9yIHRvIHRoZSBjYWxsZXJcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJhbnNpZW50RXJyb3JIZWxwZXIoZXJyb3IsIHJlcXVlc3RTdHJlYW0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgLy8gcmV0dXJuIHRoZSBzdHJlYW0gaWYgd2UgZGlkbid0IHJldHVybiBpdCBhc1xyXG4gICAgICAgICAgICAvLyBwYXJ0IG9mIGFuIGVycm9yIHN0YXRlXHJcbiAgICAgICAgICAgIHJldHVybiByZXRyeVN0cmVhbTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vIHRoaXMgaXMgdGhlIGZpcnN0IG1ha2UgcmVxdWVzdCBjYWxsIHdpdGggdGhlIG9wdGlvbnMgdGhlIHVzZXIgcGFzc2VkIGluXHJcbiAgICAgICAgcmV0dXJuIG5ld01ha2VSZXF1ZXN0KG9wdHMpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuU3RyZWFtUHJveHkgPSBTdHJlYW1Qcm94eTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RyZWFtaW5nLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/streamingCalls/streaming.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/streamingCalls/streamingApiCaller.js":
/*!********************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/streamingCalls/streamingApiCaller.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.StreamingApiCaller = void 0;\r\nconst warnings_1 = __webpack_require__(/*! ../warnings */ \"(rsc)/./node_modules/google-gax/build/src/warnings.js\");\r\nconst streaming_1 = __webpack_require__(/*! ./streaming */ \"(rsc)/./node_modules/google-gax/build/src/streamingCalls/streaming.js\");\r\nclass StreamingApiCaller {\r\n    descriptor;\r\n    /**\r\n     * An API caller for methods of gRPC streaming.\r\n     * @private\r\n     * @constructor\r\n     * @param {StreamDescriptor} descriptor - the descriptor of the method structure.\r\n     */\r\n    constructor(descriptor) {\r\n        this.descriptor = descriptor;\r\n    }\r\n    init(callback) {\r\n        return new streaming_1.StreamProxy(this.descriptor.type, callback, this.descriptor.rest, this.descriptor.gaxStreamingRetries);\r\n    }\r\n    wrap(func) {\r\n        switch (this.descriptor.type) {\r\n            case streaming_1.StreamType.SERVER_STREAMING:\r\n                return (argument, metadata, options) => {\r\n                    return func(argument, metadata, options);\r\n                };\r\n            case streaming_1.StreamType.CLIENT_STREAMING:\r\n                return (argument, metadata, options, callback) => {\r\n                    return func(metadata, options, callback);\r\n                };\r\n            case streaming_1.StreamType.BIDI_STREAMING:\r\n                return (argument, metadata, options) => {\r\n                    return func(metadata, options);\r\n                };\r\n            default:\r\n                (0, warnings_1.warn)('streaming_wrap_unknown_stream_type', `Unknown stream type: ${this.descriptor.type}`);\r\n        }\r\n        return func;\r\n    }\r\n    call(apiCall, argument, settings, stream) {\r\n        stream.setStream(apiCall, argument, settings.retryRequestOptions, settings.retry);\r\n    }\r\n    fail(stream, err) {\r\n        stream.emit('error', err);\r\n    }\r\n    result(stream) {\r\n        return stream;\r\n    }\r\n}\r\nexports.StreamingApiCaller = StreamingApiCaller;\r\n//# sourceMappingURL=streamingApiCaller.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvc3RyZWFtaW5nQ2FsbHMvc3RyZWFtaW5nQXBpQ2FsbGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDBCQUEwQjtBQUMxQixtQkFBbUIsbUJBQU8sQ0FBQywwRUFBYTtBQUN4QyxvQkFBb0IsbUJBQU8sQ0FBQywwRkFBYTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGtCQUFrQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1HQUFtRyxxQkFBcUI7QUFDeEg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYW5pc2gtYnVkZHkvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvc3RyZWFtaW5nQ2FsbHMvc3RyZWFtaW5nQXBpQ2FsbGVyLmpzPzdhOTgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8qKlxyXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5TdHJlYW1pbmdBcGlDYWxsZXIgPSB2b2lkIDA7XHJcbmNvbnN0IHdhcm5pbmdzXzEgPSByZXF1aXJlKFwiLi4vd2FybmluZ3NcIik7XHJcbmNvbnN0IHN0cmVhbWluZ18xID0gcmVxdWlyZShcIi4vc3RyZWFtaW5nXCIpO1xyXG5jbGFzcyBTdHJlYW1pbmdBcGlDYWxsZXIge1xyXG4gICAgZGVzY3JpcHRvcjtcclxuICAgIC8qKlxyXG4gICAgICogQW4gQVBJIGNhbGxlciBmb3IgbWV0aG9kcyBvZiBnUlBDIHN0cmVhbWluZy5cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKiBAY29uc3RydWN0b3JcclxuICAgICAqIEBwYXJhbSB7U3RyZWFtRGVzY3JpcHRvcn0gZGVzY3JpcHRvciAtIHRoZSBkZXNjcmlwdG9yIG9mIHRoZSBtZXRob2Qgc3RydWN0dXJlLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihkZXNjcmlwdG9yKSB7XHJcbiAgICAgICAgdGhpcy5kZXNjcmlwdG9yID0gZGVzY3JpcHRvcjtcclxuICAgIH1cclxuICAgIGluaXQoY2FsbGJhY2spIHtcclxuICAgICAgICByZXR1cm4gbmV3IHN0cmVhbWluZ18xLlN0cmVhbVByb3h5KHRoaXMuZGVzY3JpcHRvci50eXBlLCBjYWxsYmFjaywgdGhpcy5kZXNjcmlwdG9yLnJlc3QsIHRoaXMuZGVzY3JpcHRvci5nYXhTdHJlYW1pbmdSZXRyaWVzKTtcclxuICAgIH1cclxuICAgIHdyYXAoZnVuYykge1xyXG4gICAgICAgIHN3aXRjaCAodGhpcy5kZXNjcmlwdG9yLnR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBzdHJlYW1pbmdfMS5TdHJlYW1UeXBlLlNFUlZFUl9TVFJFQU1JTkc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKGFyZ3VtZW50LCBtZXRhZGF0YSwgb3B0aW9ucykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jKGFyZ3VtZW50LCBtZXRhZGF0YSwgb3B0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBjYXNlIHN0cmVhbWluZ18xLlN0cmVhbVR5cGUuQ0xJRU5UX1NUUkVBTUlORzpcclxuICAgICAgICAgICAgICAgIHJldHVybiAoYXJndW1lbnQsIG1ldGFkYXRhLCBvcHRpb25zLCBjYWxsYmFjaykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jKG1ldGFkYXRhLCBvcHRpb25zLCBjYWxsYmFjayk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBjYXNlIHN0cmVhbWluZ18xLlN0cmVhbVR5cGUuQklESV9TVFJFQU1JTkc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKGFyZ3VtZW50LCBtZXRhZGF0YSwgb3B0aW9ucykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jKG1ldGFkYXRhLCBvcHRpb25zKTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAoMCwgd2FybmluZ3NfMS53YXJuKSgnc3RyZWFtaW5nX3dyYXBfdW5rbm93bl9zdHJlYW1fdHlwZScsIGBVbmtub3duIHN0cmVhbSB0eXBlOiAke3RoaXMuZGVzY3JpcHRvci50eXBlfWApO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZnVuYztcclxuICAgIH1cclxuICAgIGNhbGwoYXBpQ2FsbCwgYXJndW1lbnQsIHNldHRpbmdzLCBzdHJlYW0pIHtcclxuICAgICAgICBzdHJlYW0uc2V0U3RyZWFtKGFwaUNhbGwsIGFyZ3VtZW50LCBzZXR0aW5ncy5yZXRyeVJlcXVlc3RPcHRpb25zLCBzZXR0aW5ncy5yZXRyeSk7XHJcbiAgICB9XHJcbiAgICBmYWlsKHN0cmVhbSwgZXJyKSB7XHJcbiAgICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXJyKTtcclxuICAgIH1cclxuICAgIHJlc3VsdChzdHJlYW0pIHtcclxuICAgICAgICByZXR1cm4gc3RyZWFtO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuU3RyZWFtaW5nQXBpQ2FsbGVyID0gU3RyZWFtaW5nQXBpQ2FsbGVyO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdHJlYW1pbmdBcGlDYWxsZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/streamingCalls/streamingApiCaller.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/transcoding.js":
/*!**********************************************************!*\
  !*** ./node_modules/google-gax/build/src/transcoding.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.getField = getField;\r\nexports.deepCopyWithoutMatchedFields = deepCopyWithoutMatchedFields;\r\nexports.deleteField = deleteField;\r\nexports.buildQueryStringComponents = buildQueryStringComponents;\r\nexports.encodeWithSlashes = encodeWithSlashes;\r\nexports.encodeWithoutSlashes = encodeWithoutSlashes;\r\nexports.applyPattern = applyPattern;\r\nexports.match = match;\r\nexports.flattenObject = flattenObject;\r\nexports.isProto3OptionalField = isProto3OptionalField;\r\nexports.transcode = transcode;\r\nexports.overrideHttpRules = overrideHttpRules;\r\nconst util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/google-gax/build/src/util.js\");\r\nconst httpOptionName = '(google.api.http)';\r\nconst proto3OptionalName = 'proto3_optional';\r\n// List of methods as defined in google/api/http.proto (see HttpRule)\r\nconst supportedHttpMethods = ['get', 'post', 'put', 'patch', 'delete'];\r\nfunction getField(request, field, allowObjects = false) {\r\n    const parts = field.split('.');\r\n    let value = request;\r\n    for (const part of parts) {\r\n        if (typeof value !== 'object') {\r\n            return undefined;\r\n        }\r\n        value = value[part];\r\n    }\r\n    if (!allowObjects &&\r\n        typeof value === 'object' &&\r\n        !Array.isArray(value) &&\r\n        value !== null) {\r\n        return undefined;\r\n    }\r\n    return value;\r\n}\r\nfunction deepCopyWithoutMatchedFields(request, fieldsToSkip, fullNamePrefix = '') {\r\n    if (typeof request !== 'object' || request === null) {\r\n        return request;\r\n    }\r\n    const copy = Object.assign({}, request);\r\n    for (const key in copy) {\r\n        if (fieldsToSkip.has(`${fullNamePrefix}${key}`)) {\r\n            delete copy[key];\r\n            continue;\r\n        }\r\n        const nextFullNamePrefix = `${fullNamePrefix}${key}.`;\r\n        if (Array.isArray(copy[key])) {\r\n            // a field of an array cannot be addressed as \"request.field\", so we omit the skipping logic for array descendants\r\n            copy[key] = copy[key].map(value => deepCopyWithoutMatchedFields(value, new Set()));\r\n        }\r\n        else if (typeof copy[key] === 'object' && copy[key] !== null) {\r\n            copy[key] = deepCopyWithoutMatchedFields(copy[key], fieldsToSkip, nextFullNamePrefix);\r\n        }\r\n    }\r\n    return copy;\r\n}\r\nfunction deleteField(request, field) {\r\n    const parts = field.split('.');\r\n    while (parts.length > 1) {\r\n        if (typeof request !== 'object') {\r\n            return;\r\n        }\r\n        const part = parts.shift();\r\n        request = request[part];\r\n    }\r\n    const part = parts.shift();\r\n    if (typeof request !== 'object') {\r\n        return;\r\n    }\r\n    delete request[part];\r\n}\r\nfunction buildQueryStringComponents(request, prefix = '') {\r\n    const resultList = [];\r\n    for (const key in request) {\r\n        if (Array.isArray(request[key])) {\r\n            for (const value of request[key]) {\r\n                resultList.push(`${prefix}${encodeWithoutSlashes(key)}=${encodeWithoutSlashes(value.toString())}`);\r\n            }\r\n        }\r\n        else if (typeof request[key] === 'object' && request[key] !== null) {\r\n            resultList.push(...buildQueryStringComponents(request[key], `${key}.`));\r\n        }\r\n        else {\r\n            resultList.push(`${prefix}${encodeWithoutSlashes(key)}=${encodeWithoutSlashes(request[key] === null ? 'null' : request[key].toString())}`);\r\n        }\r\n    }\r\n    return resultList;\r\n}\r\nfunction encodeWithSlashes(str) {\r\n    return str\r\n        .split('')\r\n        .map(c => (c.match(/[-_.~0-9a-zA-Z]/) ? c : encodeURIComponent(c)))\r\n        .join('');\r\n}\r\nfunction encodeWithoutSlashes(str) {\r\n    return str\r\n        .split('')\r\n        .map(c => (c.match(/[-_.~0-9a-zA-Z/]/) ? c : encodeURIComponent(c)))\r\n        .join('');\r\n}\r\nfunction escapeRegExp(str) {\r\n    return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n}\r\nfunction applyPattern(pattern, fieldValue) {\r\n    if (!pattern || pattern === '*') {\r\n        return encodeWithSlashes(fieldValue);\r\n    }\r\n    if (!pattern.includes('*') && pattern !== fieldValue) {\r\n        return undefined;\r\n    }\r\n    // since we're converting the pattern to a regex, make necessary precautions:\r\n    const regex = new RegExp('^' +\r\n        escapeRegExp(pattern)\r\n            .replace(/\\\\\\*\\\\\\*/g, '(.+)')\r\n            .replace(/\\\\\\*/g, '([^/]+)') +\r\n        '$');\r\n    if (!fieldValue.match(regex)) {\r\n        return undefined;\r\n    }\r\n    return encodeWithoutSlashes(fieldValue);\r\n}\r\nfunction fieldToCamelCase(field) {\r\n    const parts = field.split('.');\r\n    return parts.map(part => (0, util_1.toCamelCase)(part)).join('.');\r\n}\r\nfunction match(request, pattern) {\r\n    let url = pattern;\r\n    const matchedFields = [];\r\n    for (;;) {\r\n        const match = url.match(/^(.*)\\{([^}=]+)(?:=([^}]*))?\\}(.*)/);\r\n        if (!match) {\r\n            break;\r\n        }\r\n        const [, before, field, pattern, after] = match;\r\n        const camelCasedField = fieldToCamelCase(field);\r\n        matchedFields.push(fieldToCamelCase(camelCasedField));\r\n        const fieldValue = getField(request, camelCasedField);\r\n        if (fieldValue === undefined) {\r\n            return undefined;\r\n        }\r\n        const appliedPattern = applyPattern(pattern, fieldValue === null ? 'null' : fieldValue.toString());\r\n        if (appliedPattern === undefined) {\r\n            return undefined;\r\n        }\r\n        url = before + appliedPattern + after;\r\n    }\r\n    return { matchedFields, url };\r\n}\r\nfunction flattenObject(request) {\r\n    const result = {};\r\n    for (const key in request) {\r\n        if (request[key] === undefined) {\r\n            continue;\r\n        }\r\n        if (Array.isArray(request[key])) {\r\n            // According to the http.proto comments, a repeated field may only\r\n            // contain primitive types, so no extra recursion here.\r\n            result[key] = request[key];\r\n            continue;\r\n        }\r\n        if (typeof request[key] === 'object' && request[key] !== null) {\r\n            const nested = flattenObject(request[key]);\r\n            for (const nestedKey in nested) {\r\n                result[`${key}.${nestedKey}`] = nested[nestedKey];\r\n            }\r\n            continue;\r\n        }\r\n        result[key] = request[key];\r\n    }\r\n    return result;\r\n}\r\nfunction isProto3OptionalField(field) {\r\n    return field && field.options && field.options[proto3OptionalName];\r\n}\r\nfunction transcode(request, parsedOptions) {\r\n    const httpRules = [];\r\n    for (const option of parsedOptions) {\r\n        if (!(httpOptionName in option)) {\r\n            continue;\r\n        }\r\n        const httpRule = option[httpOptionName];\r\n        httpRules.push(httpRule);\r\n        if (httpRule?.additional_bindings) {\r\n            const additionalBindings = Array.isArray(httpRule.additional_bindings)\r\n                ? httpRule.additional_bindings\r\n                : [httpRule.additional_bindings];\r\n            httpRules.push(...additionalBindings);\r\n        }\r\n    }\r\n    for (const httpRule of httpRules) {\r\n        for (const httpMethod of supportedHttpMethods) {\r\n            if (!(httpMethod in httpRule)) {\r\n                continue;\r\n            }\r\n            const pathTemplate = httpRule[httpMethod];\r\n            const matchResult = match(request, pathTemplate);\r\n            if (matchResult === undefined) {\r\n                continue;\r\n            }\r\n            const { url, matchedFields } = matchResult;\r\n            let data = deepCopyWithoutMatchedFields(request, new Set(matchedFields));\r\n            if (httpRule.body === '*') {\r\n                return { httpMethod, url, queryString: '', data };\r\n            }\r\n            // one field possibly goes to request data, others go to query string\r\n            const queryStringObject = data;\r\n            if (httpRule.body) {\r\n                data = getField(queryStringObject, fieldToCamelCase(httpRule.body), \r\n                /*allowObjects:*/ true);\r\n                deleteField(queryStringObject, fieldToCamelCase(httpRule.body));\r\n            }\r\n            else {\r\n                data = '';\r\n            }\r\n            const queryStringComponents = buildQueryStringComponents(queryStringObject);\r\n            const queryString = queryStringComponents.join('&');\r\n            if (!data ||\r\n                (typeof data === 'object' && Object.keys(data).length === 0)) {\r\n                data = '';\r\n            }\r\n            return { httpMethod, url, queryString, data };\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n// Override the protobuf json's the http rules.\r\nfunction overrideHttpRules(httpRules, protoJson) {\r\n    for (const rule of httpRules) {\r\n        if (!rule.selector) {\r\n            continue;\r\n        }\r\n        const rpc = protoJson.lookup(rule.selector);\r\n        // Not support override on non-exist RPC or a RPC without an annotation.\r\n        // We could reconsider if we have the use case later.\r\n        if (!rpc || !rpc.parsedOptions) {\r\n            continue;\r\n        }\r\n        for (const item of rpc.parsedOptions) {\r\n            if (!(httpOptionName in item)) {\r\n                continue;\r\n            }\r\n            const httpOptions = item[httpOptionName];\r\n            for (const httpMethod in httpOptions) {\r\n                if (httpMethod in rule) {\r\n                    if (httpMethod === 'additional_bindings') {\r\n                        continue;\r\n                    }\r\n                    httpOptions[httpMethod] =\r\n                        rule[httpMethod];\r\n                }\r\n                if (rule.additional_bindings) {\r\n                    httpOptions['additional_bindings'] = !httpOptions['additional_bindings']\r\n                        ? []\r\n                        : Array.isArray(httpOptions['additional_bindings'])\r\n                            ? httpOptions['additional_bindings']\r\n                            : [httpOptions['additional_bindings']];\r\n                    // Make the additional_binding to be an array if it is not.\r\n                    httpOptions['additional_bindings'].push(...rule.additional_bindings);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=transcoding.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvdHJhbnNjb2RpbmcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0JBQWdCO0FBQ2hCLG9DQUFvQztBQUNwQyxtQkFBbUI7QUFDbkIsa0NBQWtDO0FBQ2xDLHlCQUF5QjtBQUN6Qiw0QkFBNEI7QUFDNUIsb0JBQW9CO0FBQ3BCLGFBQWE7QUFDYixxQkFBcUI7QUFDckIsNkJBQTZCO0FBQzdCLGlCQUFpQjtBQUNqQix5QkFBeUI7QUFDekIsZUFBZSxtQkFBTyxDQUFDLGlFQUFRO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0EsZ0NBQWdDLGVBQWUsRUFBRSxJQUFJO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyxlQUFlLEVBQUUsSUFBSTtBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsT0FBTyxFQUFFLDBCQUEwQixHQUFHLHVDQUF1QztBQUNoSDtBQUNBO0FBQ0E7QUFDQSwyRUFBMkUsSUFBSTtBQUMvRTtBQUNBO0FBQ0EsK0JBQStCLE9BQU8sRUFBRSwwQkFBMEIsR0FBRywrRUFBK0U7QUFDcEo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLHdDQUF3QyxJQUFJLFlBQVksT0FBTztBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixJQUFJLEdBQUcsVUFBVTtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHFCQUFxQjtBQUN6QztBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYW5pc2gtYnVkZHkvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvdHJhbnNjb2RpbmcuanM/ODA5ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuLyoqXHJcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLmdldEZpZWxkID0gZ2V0RmllbGQ7XHJcbmV4cG9ydHMuZGVlcENvcHlXaXRob3V0TWF0Y2hlZEZpZWxkcyA9IGRlZXBDb3B5V2l0aG91dE1hdGNoZWRGaWVsZHM7XHJcbmV4cG9ydHMuZGVsZXRlRmllbGQgPSBkZWxldGVGaWVsZDtcclxuZXhwb3J0cy5idWlsZFF1ZXJ5U3RyaW5nQ29tcG9uZW50cyA9IGJ1aWxkUXVlcnlTdHJpbmdDb21wb25lbnRzO1xyXG5leHBvcnRzLmVuY29kZVdpdGhTbGFzaGVzID0gZW5jb2RlV2l0aFNsYXNoZXM7XHJcbmV4cG9ydHMuZW5jb2RlV2l0aG91dFNsYXNoZXMgPSBlbmNvZGVXaXRob3V0U2xhc2hlcztcclxuZXhwb3J0cy5hcHBseVBhdHRlcm4gPSBhcHBseVBhdHRlcm47XHJcbmV4cG9ydHMubWF0Y2ggPSBtYXRjaDtcclxuZXhwb3J0cy5mbGF0dGVuT2JqZWN0ID0gZmxhdHRlbk9iamVjdDtcclxuZXhwb3J0cy5pc1Byb3RvM09wdGlvbmFsRmllbGQgPSBpc1Byb3RvM09wdGlvbmFsRmllbGQ7XHJcbmV4cG9ydHMudHJhbnNjb2RlID0gdHJhbnNjb2RlO1xyXG5leHBvcnRzLm92ZXJyaWRlSHR0cFJ1bGVzID0gb3ZlcnJpZGVIdHRwUnVsZXM7XHJcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuL3V0aWxcIik7XHJcbmNvbnN0IGh0dHBPcHRpb25OYW1lID0gJyhnb29nbGUuYXBpLmh0dHApJztcclxuY29uc3QgcHJvdG8zT3B0aW9uYWxOYW1lID0gJ3Byb3RvM19vcHRpb25hbCc7XHJcbi8vIExpc3Qgb2YgbWV0aG9kcyBhcyBkZWZpbmVkIGluIGdvb2dsZS9hcGkvaHR0cC5wcm90byAoc2VlIEh0dHBSdWxlKVxyXG5jb25zdCBzdXBwb3J0ZWRIdHRwTWV0aG9kcyA9IFsnZ2V0JywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJywgJ2RlbGV0ZSddO1xyXG5mdW5jdGlvbiBnZXRGaWVsZChyZXF1ZXN0LCBmaWVsZCwgYWxsb3dPYmplY3RzID0gZmFsc2UpIHtcclxuICAgIGNvbnN0IHBhcnRzID0gZmllbGQuc3BsaXQoJy4nKTtcclxuICAgIGxldCB2YWx1ZSA9IHJlcXVlc3Q7XHJcbiAgICBmb3IgKGNvbnN0IHBhcnQgb2YgcGFydHMpIHtcclxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YWx1ZSA9IHZhbHVlW3BhcnRdO1xyXG4gICAgfVxyXG4gICAgaWYgKCFhbGxvd09iamVjdHMgJiZcclxuICAgICAgICB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmXHJcbiAgICAgICAgIUFycmF5LmlzQXJyYXkodmFsdWUpICYmXHJcbiAgICAgICAgdmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG59XHJcbmZ1bmN0aW9uIGRlZXBDb3B5V2l0aG91dE1hdGNoZWRGaWVsZHMocmVxdWVzdCwgZmllbGRzVG9Ta2lwLCBmdWxsTmFtZVByZWZpeCA9ICcnKSB7XHJcbiAgICBpZiAodHlwZW9mIHJlcXVlc3QgIT09ICdvYmplY3QnIHx8IHJlcXVlc3QgPT09IG51bGwpIHtcclxuICAgICAgICByZXR1cm4gcmVxdWVzdDtcclxuICAgIH1cclxuICAgIGNvbnN0IGNvcHkgPSBPYmplY3QuYXNzaWduKHt9LCByZXF1ZXN0KTtcclxuICAgIGZvciAoY29uc3Qga2V5IGluIGNvcHkpIHtcclxuICAgICAgICBpZiAoZmllbGRzVG9Ta2lwLmhhcyhgJHtmdWxsTmFtZVByZWZpeH0ke2tleX1gKSkge1xyXG4gICAgICAgICAgICBkZWxldGUgY29weVtrZXldO1xyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgbmV4dEZ1bGxOYW1lUHJlZml4ID0gYCR7ZnVsbE5hbWVQcmVmaXh9JHtrZXl9LmA7XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY29weVtrZXldKSkge1xyXG4gICAgICAgICAgICAvLyBhIGZpZWxkIG9mIGFuIGFycmF5IGNhbm5vdCBiZSBhZGRyZXNzZWQgYXMgXCJyZXF1ZXN0LmZpZWxkXCIsIHNvIHdlIG9taXQgdGhlIHNraXBwaW5nIGxvZ2ljIGZvciBhcnJheSBkZXNjZW5kYW50c1xyXG4gICAgICAgICAgICBjb3B5W2tleV0gPSBjb3B5W2tleV0ubWFwKHZhbHVlID0+IGRlZXBDb3B5V2l0aG91dE1hdGNoZWRGaWVsZHModmFsdWUsIG5ldyBTZXQoKSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgY29weVtrZXldID09PSAnb2JqZWN0JyAmJiBjb3B5W2tleV0gIT09IG51bGwpIHtcclxuICAgICAgICAgICAgY29weVtrZXldID0gZGVlcENvcHlXaXRob3V0TWF0Y2hlZEZpZWxkcyhjb3B5W2tleV0sIGZpZWxkc1RvU2tpcCwgbmV4dEZ1bGxOYW1lUHJlZml4KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY29weTtcclxufVxyXG5mdW5jdGlvbiBkZWxldGVGaWVsZChyZXF1ZXN0LCBmaWVsZCkge1xyXG4gICAgY29uc3QgcGFydHMgPSBmaWVsZC5zcGxpdCgnLicpO1xyXG4gICAgd2hpbGUgKHBhcnRzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICBpZiAodHlwZW9mIHJlcXVlc3QgIT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcGFydCA9IHBhcnRzLnNoaWZ0KCk7XHJcbiAgICAgICAgcmVxdWVzdCA9IHJlcXVlc3RbcGFydF07XHJcbiAgICB9XHJcbiAgICBjb25zdCBwYXJ0ID0gcGFydHMuc2hpZnQoKTtcclxuICAgIGlmICh0eXBlb2YgcmVxdWVzdCAhPT0gJ29iamVjdCcpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBkZWxldGUgcmVxdWVzdFtwYXJ0XTtcclxufVxyXG5mdW5jdGlvbiBidWlsZFF1ZXJ5U3RyaW5nQ29tcG9uZW50cyhyZXF1ZXN0LCBwcmVmaXggPSAnJykge1xyXG4gICAgY29uc3QgcmVzdWx0TGlzdCA9IFtdO1xyXG4gICAgZm9yIChjb25zdCBrZXkgaW4gcmVxdWVzdCkge1xyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHJlcXVlc3Rba2V5XSkpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCB2YWx1ZSBvZiByZXF1ZXN0W2tleV0pIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdExpc3QucHVzaChgJHtwcmVmaXh9JHtlbmNvZGVXaXRob3V0U2xhc2hlcyhrZXkpfT0ke2VuY29kZVdpdGhvdXRTbGFzaGVzKHZhbHVlLnRvU3RyaW5nKCkpfWApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiByZXF1ZXN0W2tleV0gPT09ICdvYmplY3QnICYmIHJlcXVlc3Rba2V5XSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXN1bHRMaXN0LnB1c2goLi4uYnVpbGRRdWVyeVN0cmluZ0NvbXBvbmVudHMocmVxdWVzdFtrZXldLCBgJHtrZXl9LmApKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJlc3VsdExpc3QucHVzaChgJHtwcmVmaXh9JHtlbmNvZGVXaXRob3V0U2xhc2hlcyhrZXkpfT0ke2VuY29kZVdpdGhvdXRTbGFzaGVzKHJlcXVlc3Rba2V5XSA9PT0gbnVsbCA/ICdudWxsJyA6IHJlcXVlc3Rba2V5XS50b1N0cmluZygpKX1gKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0TGlzdDtcclxufVxyXG5mdW5jdGlvbiBlbmNvZGVXaXRoU2xhc2hlcyhzdHIpIHtcclxuICAgIHJldHVybiBzdHJcclxuICAgICAgICAuc3BsaXQoJycpXHJcbiAgICAgICAgLm1hcChjID0+IChjLm1hdGNoKC9bLV8ufjAtOWEtekEtWl0vKSA/IGMgOiBlbmNvZGVVUklDb21wb25lbnQoYykpKVxyXG4gICAgICAgIC5qb2luKCcnKTtcclxufVxyXG5mdW5jdGlvbiBlbmNvZGVXaXRob3V0U2xhc2hlcyhzdHIpIHtcclxuICAgIHJldHVybiBzdHJcclxuICAgICAgICAuc3BsaXQoJycpXHJcbiAgICAgICAgLm1hcChjID0+IChjLm1hdGNoKC9bLV8ufjAtOWEtekEtWi9dLykgPyBjIDogZW5jb2RlVVJJQ29tcG9uZW50KGMpKSlcclxuICAgICAgICAuam9pbignJyk7XHJcbn1cclxuZnVuY3Rpb24gZXNjYXBlUmVnRXhwKHN0cikge1xyXG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKC9bLiorP14ke30oKXxbXFxdXFxcXF0vZywgJ1xcXFwkJicpO1xyXG59XHJcbmZ1bmN0aW9uIGFwcGx5UGF0dGVybihwYXR0ZXJuLCBmaWVsZFZhbHVlKSB7XHJcbiAgICBpZiAoIXBhdHRlcm4gfHwgcGF0dGVybiA9PT0gJyonKSB7XHJcbiAgICAgICAgcmV0dXJuIGVuY29kZVdpdGhTbGFzaGVzKGZpZWxkVmFsdWUpO1xyXG4gICAgfVxyXG4gICAgaWYgKCFwYXR0ZXJuLmluY2x1ZGVzKCcqJykgJiYgcGF0dGVybiAhPT0gZmllbGRWYWx1ZSkge1xyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbiAgICAvLyBzaW5jZSB3ZSdyZSBjb252ZXJ0aW5nIHRoZSBwYXR0ZXJuIHRvIGEgcmVnZXgsIG1ha2UgbmVjZXNzYXJ5IHByZWNhdXRpb25zOlxyXG4gICAgY29uc3QgcmVnZXggPSBuZXcgUmVnRXhwKCdeJyArXHJcbiAgICAgICAgZXNjYXBlUmVnRXhwKHBhdHRlcm4pXHJcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcXFwqXFxcXFxcKi9nLCAnKC4rKScpXHJcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcXFwqL2csICcoW14vXSspJykgK1xyXG4gICAgICAgICckJyk7XHJcbiAgICBpZiAoIWZpZWxkVmFsdWUubWF0Y2gocmVnZXgpKSB7XHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH1cclxuICAgIHJldHVybiBlbmNvZGVXaXRob3V0U2xhc2hlcyhmaWVsZFZhbHVlKTtcclxufVxyXG5mdW5jdGlvbiBmaWVsZFRvQ2FtZWxDYXNlKGZpZWxkKSB7XHJcbiAgICBjb25zdCBwYXJ0cyA9IGZpZWxkLnNwbGl0KCcuJyk7XHJcbiAgICByZXR1cm4gcGFydHMubWFwKHBhcnQgPT4gKDAsIHV0aWxfMS50b0NhbWVsQ2FzZSkocGFydCkpLmpvaW4oJy4nKTtcclxufVxyXG5mdW5jdGlvbiBtYXRjaChyZXF1ZXN0LCBwYXR0ZXJuKSB7XHJcbiAgICBsZXQgdXJsID0gcGF0dGVybjtcclxuICAgIGNvbnN0IG1hdGNoZWRGaWVsZHMgPSBbXTtcclxuICAgIGZvciAoOzspIHtcclxuICAgICAgICBjb25zdCBtYXRjaCA9IHVybC5tYXRjaCgvXiguKilcXHsoW159PV0rKSg/Oj0oW159XSopKT9cXH0oLiopLyk7XHJcbiAgICAgICAgaWYgKCFtYXRjaCkge1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgWywgYmVmb3JlLCBmaWVsZCwgcGF0dGVybiwgYWZ0ZXJdID0gbWF0Y2g7XHJcbiAgICAgICAgY29uc3QgY2FtZWxDYXNlZEZpZWxkID0gZmllbGRUb0NhbWVsQ2FzZShmaWVsZCk7XHJcbiAgICAgICAgbWF0Y2hlZEZpZWxkcy5wdXNoKGZpZWxkVG9DYW1lbENhc2UoY2FtZWxDYXNlZEZpZWxkKSk7XHJcbiAgICAgICAgY29uc3QgZmllbGRWYWx1ZSA9IGdldEZpZWxkKHJlcXVlc3QsIGNhbWVsQ2FzZWRGaWVsZCk7XHJcbiAgICAgICAgaWYgKGZpZWxkVmFsdWUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBhcHBsaWVkUGF0dGVybiA9IGFwcGx5UGF0dGVybihwYXR0ZXJuLCBmaWVsZFZhbHVlID09PSBudWxsID8gJ251bGwnIDogZmllbGRWYWx1ZS50b1N0cmluZygpKTtcclxuICAgICAgICBpZiAoYXBwbGllZFBhdHRlcm4gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICB1cmwgPSBiZWZvcmUgKyBhcHBsaWVkUGF0dGVybiArIGFmdGVyO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHsgbWF0Y2hlZEZpZWxkcywgdXJsIH07XHJcbn1cclxuZnVuY3Rpb24gZmxhdHRlbk9iamVjdChyZXF1ZXN0KSB7XHJcbiAgICBjb25zdCByZXN1bHQgPSB7fTtcclxuICAgIGZvciAoY29uc3Qga2V5IGluIHJlcXVlc3QpIHtcclxuICAgICAgICBpZiAocmVxdWVzdFtrZXldID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHJlcXVlc3Rba2V5XSkpIHtcclxuICAgICAgICAgICAgLy8gQWNjb3JkaW5nIHRvIHRoZSBodHRwLnByb3RvIGNvbW1lbnRzLCBhIHJlcGVhdGVkIGZpZWxkIG1heSBvbmx5XHJcbiAgICAgICAgICAgIC8vIGNvbnRhaW4gcHJpbWl0aXZlIHR5cGVzLCBzbyBubyBleHRyYSByZWN1cnNpb24gaGVyZS5cclxuICAgICAgICAgICAgcmVzdWx0W2tleV0gPSByZXF1ZXN0W2tleV07XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZW9mIHJlcXVlc3Rba2V5XSA9PT0gJ29iamVjdCcgJiYgcmVxdWVzdFtrZXldICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5lc3RlZCA9IGZsYXR0ZW5PYmplY3QocmVxdWVzdFtrZXldKTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBuZXN0ZWRLZXkgaW4gbmVzdGVkKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHRbYCR7a2V5fS4ke25lc3RlZEtleX1gXSA9IG5lc3RlZFtuZXN0ZWRLZXldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXN1bHRba2V5XSA9IHJlcXVlc3Rba2V5XTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuZnVuY3Rpb24gaXNQcm90bzNPcHRpb25hbEZpZWxkKGZpZWxkKSB7XHJcbiAgICByZXR1cm4gZmllbGQgJiYgZmllbGQub3B0aW9ucyAmJiBmaWVsZC5vcHRpb25zW3Byb3RvM09wdGlvbmFsTmFtZV07XHJcbn1cclxuZnVuY3Rpb24gdHJhbnNjb2RlKHJlcXVlc3QsIHBhcnNlZE9wdGlvbnMpIHtcclxuICAgIGNvbnN0IGh0dHBSdWxlcyA9IFtdO1xyXG4gICAgZm9yIChjb25zdCBvcHRpb24gb2YgcGFyc2VkT3B0aW9ucykge1xyXG4gICAgICAgIGlmICghKGh0dHBPcHRpb25OYW1lIGluIG9wdGlvbikpIHtcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGh0dHBSdWxlID0gb3B0aW9uW2h0dHBPcHRpb25OYW1lXTtcclxuICAgICAgICBodHRwUnVsZXMucHVzaChodHRwUnVsZSk7XHJcbiAgICAgICAgaWYgKGh0dHBSdWxlPy5hZGRpdGlvbmFsX2JpbmRpbmdzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGFkZGl0aW9uYWxCaW5kaW5ncyA9IEFycmF5LmlzQXJyYXkoaHR0cFJ1bGUuYWRkaXRpb25hbF9iaW5kaW5ncylcclxuICAgICAgICAgICAgICAgID8gaHR0cFJ1bGUuYWRkaXRpb25hbF9iaW5kaW5nc1xyXG4gICAgICAgICAgICAgICAgOiBbaHR0cFJ1bGUuYWRkaXRpb25hbF9iaW5kaW5nc107XHJcbiAgICAgICAgICAgIGh0dHBSdWxlcy5wdXNoKC4uLmFkZGl0aW9uYWxCaW5kaW5ncyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZm9yIChjb25zdCBodHRwUnVsZSBvZiBodHRwUnVsZXMpIHtcclxuICAgICAgICBmb3IgKGNvbnN0IGh0dHBNZXRob2Qgb2Ygc3VwcG9ydGVkSHR0cE1ldGhvZHMpIHtcclxuICAgICAgICAgICAgaWYgKCEoaHR0cE1ldGhvZCBpbiBodHRwUnVsZSkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHBhdGhUZW1wbGF0ZSA9IGh0dHBSdWxlW2h0dHBNZXRob2RdO1xyXG4gICAgICAgICAgICBjb25zdCBtYXRjaFJlc3VsdCA9IG1hdGNoKHJlcXVlc3QsIHBhdGhUZW1wbGF0ZSk7XHJcbiAgICAgICAgICAgIGlmIChtYXRjaFJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCB7IHVybCwgbWF0Y2hlZEZpZWxkcyB9ID0gbWF0Y2hSZXN1bHQ7XHJcbiAgICAgICAgICAgIGxldCBkYXRhID0gZGVlcENvcHlXaXRob3V0TWF0Y2hlZEZpZWxkcyhyZXF1ZXN0LCBuZXcgU2V0KG1hdGNoZWRGaWVsZHMpKTtcclxuICAgICAgICAgICAgaWYgKGh0dHBSdWxlLmJvZHkgPT09ICcqJykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgaHR0cE1ldGhvZCwgdXJsLCBxdWVyeVN0cmluZzogJycsIGRhdGEgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBvbmUgZmllbGQgcG9zc2libHkgZ29lcyB0byByZXF1ZXN0IGRhdGEsIG90aGVycyBnbyB0byBxdWVyeSBzdHJpbmdcclxuICAgICAgICAgICAgY29uc3QgcXVlcnlTdHJpbmdPYmplY3QgPSBkYXRhO1xyXG4gICAgICAgICAgICBpZiAoaHR0cFJ1bGUuYm9keSkge1xyXG4gICAgICAgICAgICAgICAgZGF0YSA9IGdldEZpZWxkKHF1ZXJ5U3RyaW5nT2JqZWN0LCBmaWVsZFRvQ2FtZWxDYXNlKGh0dHBSdWxlLmJvZHkpLCBcclxuICAgICAgICAgICAgICAgIC8qYWxsb3dPYmplY3RzOiovIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlRmllbGQocXVlcnlTdHJpbmdPYmplY3QsIGZpZWxkVG9DYW1lbENhc2UoaHR0cFJ1bGUuYm9keSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZGF0YSA9ICcnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHF1ZXJ5U3RyaW5nQ29tcG9uZW50cyA9IGJ1aWxkUXVlcnlTdHJpbmdDb21wb25lbnRzKHF1ZXJ5U3RyaW5nT2JqZWN0KTtcclxuICAgICAgICAgICAgY29uc3QgcXVlcnlTdHJpbmcgPSBxdWVyeVN0cmluZ0NvbXBvbmVudHMuam9pbignJicpO1xyXG4gICAgICAgICAgICBpZiAoIWRhdGEgfHxcclxuICAgICAgICAgICAgICAgICh0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCcgJiYgT2JqZWN0LmtleXMoZGF0YSkubGVuZ3RoID09PSAwKSkge1xyXG4gICAgICAgICAgICAgICAgZGF0YSA9ICcnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB7IGh0dHBNZXRob2QsIHVybCwgcXVlcnlTdHJpbmcsIGRhdGEgfTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG59XHJcbi8vIE92ZXJyaWRlIHRoZSBwcm90b2J1ZiBqc29uJ3MgdGhlIGh0dHAgcnVsZXMuXHJcbmZ1bmN0aW9uIG92ZXJyaWRlSHR0cFJ1bGVzKGh0dHBSdWxlcywgcHJvdG9Kc29uKSB7XHJcbiAgICBmb3IgKGNvbnN0IHJ1bGUgb2YgaHR0cFJ1bGVzKSB7XHJcbiAgICAgICAgaWYgKCFydWxlLnNlbGVjdG9yKSB7XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBycGMgPSBwcm90b0pzb24ubG9va3VwKHJ1bGUuc2VsZWN0b3IpO1xyXG4gICAgICAgIC8vIE5vdCBzdXBwb3J0IG92ZXJyaWRlIG9uIG5vbi1leGlzdCBSUEMgb3IgYSBSUEMgd2l0aG91dCBhbiBhbm5vdGF0aW9uLlxyXG4gICAgICAgIC8vIFdlIGNvdWxkIHJlY29uc2lkZXIgaWYgd2UgaGF2ZSB0aGUgdXNlIGNhc2UgbGF0ZXIuXHJcbiAgICAgICAgaWYgKCFycGMgfHwgIXJwYy5wYXJzZWRPcHRpb25zKSB7XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgcnBjLnBhcnNlZE9wdGlvbnMpIHtcclxuICAgICAgICAgICAgaWYgKCEoaHR0cE9wdGlvbk5hbWUgaW4gaXRlbSkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGh0dHBPcHRpb25zID0gaXRlbVtodHRwT3B0aW9uTmFtZV07XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgaHR0cE1ldGhvZCBpbiBodHRwT3B0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGh0dHBNZXRob2QgaW4gcnVsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChodHRwTWV0aG9kID09PSAnYWRkaXRpb25hbF9iaW5kaW5ncycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGh0dHBPcHRpb25zW2h0dHBNZXRob2RdID1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcnVsZVtodHRwTWV0aG9kXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChydWxlLmFkZGl0aW9uYWxfYmluZGluZ3MpIHtcclxuICAgICAgICAgICAgICAgICAgICBodHRwT3B0aW9uc1snYWRkaXRpb25hbF9iaW5kaW5ncyddID0gIWh0dHBPcHRpb25zWydhZGRpdGlvbmFsX2JpbmRpbmdzJ11cclxuICAgICAgICAgICAgICAgICAgICAgICAgPyBbXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IEFycmF5LmlzQXJyYXkoaHR0cE9wdGlvbnNbJ2FkZGl0aW9uYWxfYmluZGluZ3MnXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gaHR0cE9wdGlvbnNbJ2FkZGl0aW9uYWxfYmluZGluZ3MnXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBbaHR0cE9wdGlvbnNbJ2FkZGl0aW9uYWxfYmluZGluZ3MnXV07XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gTWFrZSB0aGUgYWRkaXRpb25hbF9iaW5kaW5nIHRvIGJlIGFuIGFycmF5IGlmIGl0IGlzIG5vdC5cclxuICAgICAgICAgICAgICAgICAgICBodHRwT3B0aW9uc1snYWRkaXRpb25hbF9iaW5kaW5ncyddLnB1c2goLi4ucnVsZS5hZGRpdGlvbmFsX2JpbmRpbmdzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD10cmFuc2NvZGluZy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/transcoding.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/util.js":
/*!***************************************************!*\
  !*** ./node_modules/google-gax/build/src/util.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.camelToSnakeCase = camelToSnakeCase;\r\nexports.toCamelCase = toCamelCase;\r\nexports.toLowerCamelCase = toLowerCamelCase;\r\nexports.makeUUID = makeUUID;\r\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst randomUUID = () => globalThis.crypto?.randomUUID() || (__webpack_require__(/*! crypto */ \"crypto\").randomUUID)();\r\nfunction words(str, normalize = false) {\r\n    if (normalize) {\r\n        // strings like somethingABCSomething are special case for protobuf.js,\r\n        // they should be split as \"something\", \"abc\", \"something\".\r\n        // Deal with sequences of capital letters first.\r\n        str = str.replace(/([A-Z])([A-Z]+)([A-Z])/g, (str) => {\r\n            return (str[0] +\r\n                str.slice(1, str.length - 1).toLowerCase() +\r\n                str[str.length - 1]);\r\n        });\r\n    }\r\n    // split on spaces, non-alphanumeric, or capital letters\r\n    // note: we keep the capitalization of the first word (special case: IPProtocol)\r\n    return str\r\n        .split(/(?=[A-Z])|[^A-Za-z0-9.]+/)\r\n        .filter(w => w.length > 0)\r\n        .map((w, index) => (index === 0 ? w : w.toLowerCase()));\r\n}\r\n/**\r\n * Converts the first character of the given string to lower case.\r\n */\r\nfunction lowercase(str) {\r\n    if (str.length === 0) {\r\n        return str;\r\n    }\r\n    return str[0].toLowerCase() + str.slice(1);\r\n}\r\n/**\r\n * Converts a given string from camelCase (used by protobuf.js and in JSON)\r\n * to snake_case (normally used in proto definitions).\r\n */\r\nfunction camelToSnakeCase(str) {\r\n    // Keep the first position capitalization, otherwise decapitalize with underscore.\r\n    const wordsList = words(str);\r\n    if (wordsList.length === 0) {\r\n        return str;\r\n    }\r\n    const result = [wordsList[0]];\r\n    result.push(...wordsList.slice(1).map(lowercase));\r\n    return result.join('_');\r\n}\r\n/**\r\n * Capitalizes the first character of the given string.\r\n */\r\nfunction capitalize(str) {\r\n    if (str.length === 0) {\r\n        return str;\r\n    }\r\n    return str[0].toUpperCase() + str.slice(1);\r\n}\r\n/**\r\n * Converts a given string from snake_case (normally used in proto definitions) or\r\n * PascalCase (also used in proto definitions) to camelCase (used by protobuf.js).\r\n * Preserves capitalization of the first character.\r\n */\r\nfunction toCamelCase(str) {\r\n    const wordsList = words(str, /*normalize:*/ true);\r\n    if (wordsList.length === 0) {\r\n        return str;\r\n    }\r\n    const result = [wordsList[0]];\r\n    result.push(...wordsList.slice(1).map(w => {\r\n        if (w.match(/^\\d+$/)) {\r\n            return '_' + w;\r\n        }\r\n        return capitalize(w);\r\n    }));\r\n    return result.join('');\r\n}\r\n/**\r\n * Converts a given string to lower camel case (forcing the first character to be\r\n * in lower case).\r\n */\r\nfunction toLowerCamelCase(str) {\r\n    const camelCase = toCamelCase(str);\r\n    if (camelCase.length === 0) {\r\n        return camelCase;\r\n    }\r\n    return camelCase[0].toLowerCase() + camelCase.slice(1);\r\n}\r\n/**\r\n * Converts a given string to lower camel case (forcing the first character to be\r\n * in lower case).\r\n */\r\nfunction makeUUID() {\r\n    return randomUUID();\r\n}\r\n//# sourceMappingURL=util.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvdXRpbC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx3QkFBd0I7QUFDeEIsbUJBQW1CO0FBQ25CLHdCQUF3QjtBQUN4QixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNERBQTRELHdEQUE0QjtBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYW5pc2gtYnVkZHkvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvdXRpbC5qcz8zODE3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuY2FtZWxUb1NuYWtlQ2FzZSA9IGNhbWVsVG9TbmFrZUNhc2U7XHJcbmV4cG9ydHMudG9DYW1lbENhc2UgPSB0b0NhbWVsQ2FzZTtcclxuZXhwb3J0cy50b0xvd2VyQ2FtZWxDYXNlID0gdG9Mb3dlckNhbWVsQ2FzZTtcclxuZXhwb3J0cy5tYWtlVVVJRCA9IG1ha2VVVUlEO1xyXG4vKipcclxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5jb25zdCByYW5kb21VVUlEID0gKCkgPT4gZ2xvYmFsVGhpcy5jcnlwdG8/LnJhbmRvbVVVSUQoKSB8fCByZXF1aXJlKCdjcnlwdG8nKS5yYW5kb21VVUlEKCk7XHJcbmZ1bmN0aW9uIHdvcmRzKHN0ciwgbm9ybWFsaXplID0gZmFsc2UpIHtcclxuICAgIGlmIChub3JtYWxpemUpIHtcclxuICAgICAgICAvLyBzdHJpbmdzIGxpa2Ugc29tZXRoaW5nQUJDU29tZXRoaW5nIGFyZSBzcGVjaWFsIGNhc2UgZm9yIHByb3RvYnVmLmpzLFxyXG4gICAgICAgIC8vIHRoZXkgc2hvdWxkIGJlIHNwbGl0IGFzIFwic29tZXRoaW5nXCIsIFwiYWJjXCIsIFwic29tZXRoaW5nXCIuXHJcbiAgICAgICAgLy8gRGVhbCB3aXRoIHNlcXVlbmNlcyBvZiBjYXBpdGFsIGxldHRlcnMgZmlyc3QuXHJcbiAgICAgICAgc3RyID0gc3RyLnJlcGxhY2UoLyhbQS1aXSkoW0EtWl0rKShbQS1aXSkvZywgKHN0cikgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gKHN0clswXSArXHJcbiAgICAgICAgICAgICAgICBzdHIuc2xpY2UoMSwgc3RyLmxlbmd0aCAtIDEpLnRvTG93ZXJDYXNlKCkgK1xyXG4gICAgICAgICAgICAgICAgc3RyW3N0ci5sZW5ndGggLSAxXSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvLyBzcGxpdCBvbiBzcGFjZXMsIG5vbi1hbHBoYW51bWVyaWMsIG9yIGNhcGl0YWwgbGV0dGVyc1xyXG4gICAgLy8gbm90ZTogd2Uga2VlcCB0aGUgY2FwaXRhbGl6YXRpb24gb2YgdGhlIGZpcnN0IHdvcmQgKHNwZWNpYWwgY2FzZTogSVBQcm90b2NvbClcclxuICAgIHJldHVybiBzdHJcclxuICAgICAgICAuc3BsaXQoLyg/PVtBLVpdKXxbXkEtWmEtejAtOS5dKy8pXHJcbiAgICAgICAgLmZpbHRlcih3ID0+IHcubGVuZ3RoID4gMClcclxuICAgICAgICAubWFwKCh3LCBpbmRleCkgPT4gKGluZGV4ID09PSAwID8gdyA6IHcudG9Mb3dlckNhc2UoKSkpO1xyXG59XHJcbi8qKlxyXG4gKiBDb252ZXJ0cyB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIHRoZSBnaXZlbiBzdHJpbmcgdG8gbG93ZXIgY2FzZS5cclxuICovXHJcbmZ1bmN0aW9uIGxvd2VyY2FzZShzdHIpIHtcclxuICAgIGlmIChzdHIubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIHN0cjtcclxuICAgIH1cclxuICAgIHJldHVybiBzdHJbMF0udG9Mb3dlckNhc2UoKSArIHN0ci5zbGljZSgxKTtcclxufVxyXG4vKipcclxuICogQ29udmVydHMgYSBnaXZlbiBzdHJpbmcgZnJvbSBjYW1lbENhc2UgKHVzZWQgYnkgcHJvdG9idWYuanMgYW5kIGluIEpTT04pXHJcbiAqIHRvIHNuYWtlX2Nhc2UgKG5vcm1hbGx5IHVzZWQgaW4gcHJvdG8gZGVmaW5pdGlvbnMpLlxyXG4gKi9cclxuZnVuY3Rpb24gY2FtZWxUb1NuYWtlQ2FzZShzdHIpIHtcclxuICAgIC8vIEtlZXAgdGhlIGZpcnN0IHBvc2l0aW9uIGNhcGl0YWxpemF0aW9uLCBvdGhlcndpc2UgZGVjYXBpdGFsaXplIHdpdGggdW5kZXJzY29yZS5cclxuICAgIGNvbnN0IHdvcmRzTGlzdCA9IHdvcmRzKHN0cik7XHJcbiAgICBpZiAod29yZHNMaXN0Lmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIHJldHVybiBzdHI7XHJcbiAgICB9XHJcbiAgICBjb25zdCByZXN1bHQgPSBbd29yZHNMaXN0WzBdXTtcclxuICAgIHJlc3VsdC5wdXNoKC4uLndvcmRzTGlzdC5zbGljZSgxKS5tYXAobG93ZXJjYXNlKSk7XHJcbiAgICByZXR1cm4gcmVzdWx0LmpvaW4oJ18nKTtcclxufVxyXG4vKipcclxuICogQ2FwaXRhbGl6ZXMgdGhlIGZpcnN0IGNoYXJhY3RlciBvZiB0aGUgZ2l2ZW4gc3RyaW5nLlxyXG4gKi9cclxuZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHIpIHtcclxuICAgIGlmIChzdHIubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIHN0cjtcclxuICAgIH1cclxuICAgIHJldHVybiBzdHJbMF0udG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKTtcclxufVxyXG4vKipcclxuICogQ29udmVydHMgYSBnaXZlbiBzdHJpbmcgZnJvbSBzbmFrZV9jYXNlIChub3JtYWxseSB1c2VkIGluIHByb3RvIGRlZmluaXRpb25zKSBvclxyXG4gKiBQYXNjYWxDYXNlIChhbHNvIHVzZWQgaW4gcHJvdG8gZGVmaW5pdGlvbnMpIHRvIGNhbWVsQ2FzZSAodXNlZCBieSBwcm90b2J1Zi5qcykuXHJcbiAqIFByZXNlcnZlcyBjYXBpdGFsaXphdGlvbiBvZiB0aGUgZmlyc3QgY2hhcmFjdGVyLlxyXG4gKi9cclxuZnVuY3Rpb24gdG9DYW1lbENhc2Uoc3RyKSB7XHJcbiAgICBjb25zdCB3b3Jkc0xpc3QgPSB3b3JkcyhzdHIsIC8qbm9ybWFsaXplOiovIHRydWUpO1xyXG4gICAgaWYgKHdvcmRzTGlzdC5sZW5ndGggPT09IDApIHtcclxuICAgICAgICByZXR1cm4gc3RyO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcmVzdWx0ID0gW3dvcmRzTGlzdFswXV07XHJcbiAgICByZXN1bHQucHVzaCguLi53b3Jkc0xpc3Quc2xpY2UoMSkubWFwKHcgPT4ge1xyXG4gICAgICAgIGlmICh3Lm1hdGNoKC9eXFxkKyQvKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gJ18nICsgdztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNhcGl0YWxpemUodyk7XHJcbiAgICB9KSk7XHJcbiAgICByZXR1cm4gcmVzdWx0LmpvaW4oJycpO1xyXG59XHJcbi8qKlxyXG4gKiBDb252ZXJ0cyBhIGdpdmVuIHN0cmluZyB0byBsb3dlciBjYW1lbCBjYXNlIChmb3JjaW5nIHRoZSBmaXJzdCBjaGFyYWN0ZXIgdG8gYmVcclxuICogaW4gbG93ZXIgY2FzZSkuXHJcbiAqL1xyXG5mdW5jdGlvbiB0b0xvd2VyQ2FtZWxDYXNlKHN0cikge1xyXG4gICAgY29uc3QgY2FtZWxDYXNlID0gdG9DYW1lbENhc2Uoc3RyKTtcclxuICAgIGlmIChjYW1lbENhc2UubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIGNhbWVsQ2FzZTtcclxuICAgIH1cclxuICAgIHJldHVybiBjYW1lbENhc2VbMF0udG9Mb3dlckNhc2UoKSArIGNhbWVsQ2FzZS5zbGljZSgxKTtcclxufVxyXG4vKipcclxuICogQ29udmVydHMgYSBnaXZlbiBzdHJpbmcgdG8gbG93ZXIgY2FtZWwgY2FzZSAoZm9yY2luZyB0aGUgZmlyc3QgY2hhcmFjdGVyIHRvIGJlXHJcbiAqIGluIGxvd2VyIGNhc2UpLlxyXG4gKi9cclxuZnVuY3Rpb24gbWFrZVVVSUQoKSB7XHJcbiAgICByZXR1cm4gcmFuZG9tVVVJRCgpO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWwuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/warnings.js":
/*!*******************************************************!*\
  !*** ./node_modules/google-gax/build/src/warnings.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\r\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.warn = warn;\r\nconst featureDetection_1 = __webpack_require__(/*! ./featureDetection */ \"(rsc)/./node_modules/google-gax/build/src/featureDetection.js\");\r\nconst emittedWarnings = new Set();\r\n// warnType is the type of warning (e.g. 'DeprecationWarning', 'ExperimentalWarning', etc.)\r\nfunction warn(code, message, warnType) {\r\n    // Only show a given warning once\r\n    if (emittedWarnings.has(code)) {\r\n        return;\r\n    }\r\n    emittedWarnings.add(code);\r\n    if (!(0, featureDetection_1.isNodeJS)()) {\r\n        console.warn(message);\r\n    }\r\n    else if (typeof warnType !== 'undefined') {\r\n        process.emitWarning(message, {\r\n            type: warnType,\r\n        });\r\n    }\r\n    else {\r\n        process.emitWarning(message);\r\n    }\r\n}\r\n//# sourceMappingURL=warnings.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9idWlsZC9zcmMvd2FybmluZ3MuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsWUFBWTtBQUNaLDJCQUEyQixtQkFBTyxDQUFDLHlGQUFvQjtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2RhbmlzaC1idWRkeS8uL25vZGVfbW9kdWxlcy9nb29nbGUtZ2F4L2J1aWxkL3NyYy93YXJuaW5ncy5qcz81ODY5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG4vKipcclxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMud2FybiA9IHdhcm47XHJcbmNvbnN0IGZlYXR1cmVEZXRlY3Rpb25fMSA9IHJlcXVpcmUoXCIuL2ZlYXR1cmVEZXRlY3Rpb25cIik7XHJcbmNvbnN0IGVtaXR0ZWRXYXJuaW5ncyA9IG5ldyBTZXQoKTtcclxuLy8gd2FyblR5cGUgaXMgdGhlIHR5cGUgb2Ygd2FybmluZyAoZS5nLiAnRGVwcmVjYXRpb25XYXJuaW5nJywgJ0V4cGVyaW1lbnRhbFdhcm5pbmcnLCBldGMuKVxyXG5mdW5jdGlvbiB3YXJuKGNvZGUsIG1lc3NhZ2UsIHdhcm5UeXBlKSB7XHJcbiAgICAvLyBPbmx5IHNob3cgYSBnaXZlbiB3YXJuaW5nIG9uY2VcclxuICAgIGlmIChlbWl0dGVkV2FybmluZ3MuaGFzKGNvZGUpKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgZW1pdHRlZFdhcm5pbmdzLmFkZChjb2RlKTtcclxuICAgIGlmICghKDAsIGZlYXR1cmVEZXRlY3Rpb25fMS5pc05vZGVKUykoKSkge1xyXG4gICAgICAgIGNvbnNvbGUud2FybihtZXNzYWdlKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHR5cGVvZiB3YXJuVHlwZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICBwcm9jZXNzLmVtaXRXYXJuaW5nKG1lc3NhZ2UsIHtcclxuICAgICAgICAgICAgdHlwZTogd2FyblR5cGUsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBwcm9jZXNzLmVtaXRXYXJuaW5nKG1lc3NhZ2UpO1xyXG4gICAgfVxyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdhcm5pbmdzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/build/src/warnings.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/node-fetch/src/body.js":
/*!*********************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/node-fetch/src/body.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clone: () => (/* binding */ clone),\n/* harmony export */   \"default\": () => (/* binding */ Body),\n/* harmony export */   extractContentType: () => (/* binding */ extractContentType),\n/* harmony export */   getTotalBytes: () => (/* binding */ getTotalBytes),\n/* harmony export */   writeToStream: () => (/* binding */ writeToStream)\n/* harmony export */ });\n/* harmony import */ var node_stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:stream */ \"node:stream\");\n/* harmony import */ var node_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:util */ \"node:util\");\n/* harmony import */ var node_buffer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! node:buffer */ \"node:buffer\");\n/* harmony import */ var fetch_blob__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! fetch-blob */ \"(rsc)/./node_modules/fetch-blob/index.js\");\n/* harmony import */ var formdata_polyfill_esm_min_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! formdata-polyfill/esm.min.js */ \"(rsc)/./node_modules/formdata-polyfill/esm.min.js\");\n/* harmony import */ var _errors_fetch_error_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./errors/fetch-error.js */ \"(rsc)/./node_modules/google-gax/node_modules/node-fetch/src/errors/fetch-error.js\");\n/* harmony import */ var _errors_base_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./errors/base.js */ \"(rsc)/./node_modules/google-gax/node_modules/node-fetch/src/errors/base.js\");\n/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/is.js */ \"(rsc)/./node_modules/google-gax/node_modules/node-fetch/src/utils/is.js\");\n\r\n/**\r\n * Body.js\r\n *\r\n * Body interface provides common methods for Request and Response\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst pipeline = (0,node_util__WEBPACK_IMPORTED_MODULE_1__.promisify)(node_stream__WEBPACK_IMPORTED_MODULE_0__.pipeline);\r\nconst INTERNALS = Symbol('Body internals');\r\n\r\n/**\r\n * Body mixin\r\n *\r\n * Ref: https://fetch.spec.whatwg.org/#body\r\n *\r\n * @param   Stream  body  Readable stream\r\n * @param   Object  opts  Response options\r\n * @return  Void\r\n */\r\nclass Body {\r\n\tconstructor(body, {\r\n\t\tsize = 0\r\n\t} = {}) {\r\n\t\tlet boundary = null;\r\n\r\n\t\tif (body === null) {\r\n\t\t\t// Body is undefined or null\r\n\t\t\tbody = null;\r\n\t\t} else if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_5__.isURLSearchParameters)(body)) {\r\n\t\t\t// Body is a URLSearchParams\r\n\t\t\tbody = node_buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.from(body.toString());\r\n\t\t} else if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_5__.isBlob)(body)) {\r\n\t\t\t// Body is blob\r\n\t\t} else if (node_buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.isBuffer(body)) {\r\n\t\t\t// Body is Buffer\r\n\t\t} else if (node_util__WEBPACK_IMPORTED_MODULE_1__.types.isAnyArrayBuffer(body)) {\r\n\t\t\t// Body is ArrayBuffer\r\n\t\t\tbody = node_buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.from(body);\r\n\t\t} else if (ArrayBuffer.isView(body)) {\r\n\t\t\t// Body is ArrayBufferView\r\n\t\t\tbody = node_buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.from(body.buffer, body.byteOffset, body.byteLength);\r\n\t\t} else if (body instanceof node_stream__WEBPACK_IMPORTED_MODULE_0__) {\r\n\t\t\t// Body is stream\r\n\t\t} else if (body instanceof formdata_polyfill_esm_min_js__WEBPACK_IMPORTED_MODULE_4__.FormData) {\r\n\t\t\t// Body is FormData\r\n\t\t\tbody = (0,formdata_polyfill_esm_min_js__WEBPACK_IMPORTED_MODULE_4__.formDataToBlob)(body);\r\n\t\t\tboundary = body.type.split('=')[1];\r\n\t\t} else {\r\n\t\t\t// None of the above\r\n\t\t\t// coerce to string then buffer\r\n\t\t\tbody = node_buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.from(String(body));\r\n\t\t}\r\n\r\n\t\tlet stream = body;\r\n\r\n\t\tif (node_buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.isBuffer(body)) {\r\n\t\t\tstream = node_stream__WEBPACK_IMPORTED_MODULE_0__.Readable.from(body);\r\n\t\t} else if ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_5__.isBlob)(body)) {\r\n\t\t\tstream = node_stream__WEBPACK_IMPORTED_MODULE_0__.Readable.from(body.stream());\r\n\t\t}\r\n\r\n\t\tthis[INTERNALS] = {\r\n\t\t\tbody,\r\n\t\t\tstream,\r\n\t\t\tboundary,\r\n\t\t\tdisturbed: false,\r\n\t\t\terror: null\r\n\t\t};\r\n\t\tthis.size = size;\r\n\r\n\t\tif (body instanceof node_stream__WEBPACK_IMPORTED_MODULE_0__) {\r\n\t\t\tbody.on('error', error_ => {\r\n\t\t\t\tconst error = error_ instanceof _errors_base_js__WEBPACK_IMPORTED_MODULE_6__.FetchBaseError ?\r\n\t\t\t\t\terror_ :\r\n\t\t\t\t\tnew _errors_fetch_error_js__WEBPACK_IMPORTED_MODULE_7__.FetchError(`Invalid response body while trying to fetch ${this.url}: ${error_.message}`, 'system', error_);\r\n\t\t\t\tthis[INTERNALS].error = error;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tget body() {\r\n\t\treturn this[INTERNALS].stream;\r\n\t}\r\n\r\n\tget bodyUsed() {\r\n\t\treturn this[INTERNALS].disturbed;\r\n\t}\r\n\r\n\t/**\r\n\t * Decode response as ArrayBuffer\r\n\t *\r\n\t * @return  Promise\r\n\t */\r\n\tasync arrayBuffer() {\r\n\t\tconst {buffer, byteOffset, byteLength} = await consumeBody(this);\r\n\t\treturn buffer.slice(byteOffset, byteOffset + byteLength);\r\n\t}\r\n\r\n\tasync formData() {\r\n\t\tconst ct = this.headers.get('content-type');\r\n\r\n\t\tif (ct.startsWith('application/x-www-form-urlencoded')) {\r\n\t\t\tconst formData = new formdata_polyfill_esm_min_js__WEBPACK_IMPORTED_MODULE_4__.FormData();\r\n\t\t\tconst parameters = new URLSearchParams(await this.text());\r\n\r\n\t\t\tfor (const [name, value] of parameters) {\r\n\t\t\t\tformData.append(name, value);\r\n\t\t\t}\r\n\r\n\t\t\treturn formData;\r\n\t\t}\r\n\r\n\t\tconst {toFormData} = await __webpack_require__.e(/*! import() */ \"vendor-chunks/google-gax\").then(__webpack_require__.bind(__webpack_require__, /*! ./utils/multipart-parser.js */ \"(rsc)/./node_modules/google-gax/node_modules/node-fetch/src/utils/multipart-parser.js\"));\r\n\t\treturn toFormData(this.body, ct);\r\n\t}\r\n\r\n\t/**\r\n\t * Return raw response as Blob\r\n\t *\r\n\t * @return Promise\r\n\t */\r\n\tasync blob() {\r\n\t\tconst ct = (this.headers && this.headers.get('content-type')) || (this[INTERNALS].body && this[INTERNALS].body.type) || '';\r\n\t\tconst buf = await this.arrayBuffer();\r\n\r\n\t\treturn new fetch_blob__WEBPACK_IMPORTED_MODULE_3__[\"default\"]([buf], {\r\n\t\t\ttype: ct\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Decode response as json\r\n\t *\r\n\t * @return  Promise\r\n\t */\r\n\tasync json() {\r\n\t\tconst text = await this.text();\r\n\t\treturn JSON.parse(text);\r\n\t}\r\n\r\n\t/**\r\n\t * Decode response as text\r\n\t *\r\n\t * @return  Promise\r\n\t */\r\n\tasync text() {\r\n\t\tconst buffer = await consumeBody(this);\r\n\t\treturn new TextDecoder().decode(buffer);\r\n\t}\r\n\r\n\t/**\r\n\t * Decode response as buffer (non-spec api)\r\n\t *\r\n\t * @return  Promise\r\n\t */\r\n\tbuffer() {\r\n\t\treturn consumeBody(this);\r\n\t}\r\n}\r\n\r\nBody.prototype.buffer = (0,node_util__WEBPACK_IMPORTED_MODULE_1__.deprecate)(Body.prototype.buffer, 'Please use \\'response.arrayBuffer()\\' instead of \\'response.buffer()\\'', 'node-fetch#buffer');\r\n\r\n// In browsers, all properties are enumerable.\r\nObject.defineProperties(Body.prototype, {\r\n\tbody: {enumerable: true},\r\n\tbodyUsed: {enumerable: true},\r\n\tarrayBuffer: {enumerable: true},\r\n\tblob: {enumerable: true},\r\n\tjson: {enumerable: true},\r\n\ttext: {enumerable: true},\r\n\tdata: {get: (0,node_util__WEBPACK_IMPORTED_MODULE_1__.deprecate)(() => {},\r\n\t\t'data doesn\\'t exist, use json(), text(), arrayBuffer(), or body instead',\r\n\t\t'https://github.com/node-fetch/node-fetch/issues/1000 (response)')}\r\n});\r\n\r\n/**\r\n * Consume and convert an entire Body to a Buffer.\r\n *\r\n * Ref: https://fetch.spec.whatwg.org/#concept-body-consume-body\r\n *\r\n * @return Promise\r\n */\r\nasync function consumeBody(data) {\r\n\tif (data[INTERNALS].disturbed) {\r\n\t\tthrow new TypeError(`body used already for: ${data.url}`);\r\n\t}\r\n\r\n\tdata[INTERNALS].disturbed = true;\r\n\r\n\tif (data[INTERNALS].error) {\r\n\t\tthrow data[INTERNALS].error;\r\n\t}\r\n\r\n\tconst {body} = data;\r\n\r\n\t// Body is null\r\n\tif (body === null) {\r\n\t\treturn node_buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.alloc(0);\r\n\t}\r\n\r\n\t/* c8 ignore next 3 */\r\n\tif (!(body instanceof node_stream__WEBPACK_IMPORTED_MODULE_0__)) {\r\n\t\treturn node_buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.alloc(0);\r\n\t}\r\n\r\n\t// Body is stream\r\n\t// get ready to actually consume the body\r\n\tconst accum = [];\r\n\tlet accumBytes = 0;\r\n\r\n\ttry {\r\n\t\tfor await (const chunk of body) {\r\n\t\t\tif (data.size > 0 && accumBytes + chunk.length > data.size) {\r\n\t\t\t\tconst error = new _errors_fetch_error_js__WEBPACK_IMPORTED_MODULE_7__.FetchError(`content size at ${data.url} over limit: ${data.size}`, 'max-size');\r\n\t\t\t\tbody.destroy(error);\r\n\t\t\t\tthrow error;\r\n\t\t\t}\r\n\r\n\t\t\taccumBytes += chunk.length;\r\n\t\t\taccum.push(chunk);\r\n\t\t}\r\n\t} catch (error) {\r\n\t\tconst error_ = error instanceof _errors_base_js__WEBPACK_IMPORTED_MODULE_6__.FetchBaseError ? error : new _errors_fetch_error_js__WEBPACK_IMPORTED_MODULE_7__.FetchError(`Invalid response body while trying to fetch ${data.url}: ${error.message}`, 'system', error);\r\n\t\tthrow error_;\r\n\t}\r\n\r\n\tif (body.readableEnded === true || body._readableState.ended === true) {\r\n\t\ttry {\r\n\t\t\tif (accum.every(c => typeof c === 'string')) {\r\n\t\t\t\treturn node_buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.from(accum.join(''));\r\n\t\t\t}\r\n\r\n\t\t\treturn node_buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.concat(accum, accumBytes);\r\n\t\t} catch (error) {\r\n\t\t\tthrow new _errors_fetch_error_js__WEBPACK_IMPORTED_MODULE_7__.FetchError(`Could not create Buffer from response body for ${data.url}: ${error.message}`, 'system', error);\r\n\t\t}\r\n\t} else {\r\n\t\tthrow new _errors_fetch_error_js__WEBPACK_IMPORTED_MODULE_7__.FetchError(`Premature close of server response while trying to fetch ${data.url}`);\r\n\t}\r\n}\r\n\r\n/**\r\n * Clone body given Res/Req instance\r\n *\r\n * @param   Mixed   instance       Response or Request instance\r\n * @param   String  highWaterMark  highWaterMark for both PassThrough body streams\r\n * @return  Mixed\r\n */\r\nconst clone = (instance, highWaterMark) => {\r\n\tlet p1;\r\n\tlet p2;\r\n\tlet {body} = instance[INTERNALS];\r\n\r\n\t// Don't allow cloning a used body\r\n\tif (instance.bodyUsed) {\r\n\t\tthrow new Error('cannot clone body after it is used');\r\n\t}\r\n\r\n\t// Check that body is a stream and not form-data object\r\n\t// note: we can't clone the form-data object without having it as a dependency\r\n\tif ((body instanceof node_stream__WEBPACK_IMPORTED_MODULE_0__) && (typeof body.getBoundary !== 'function')) {\r\n\t\t// Tee instance body\r\n\t\tp1 = new node_stream__WEBPACK_IMPORTED_MODULE_0__.PassThrough({highWaterMark});\r\n\t\tp2 = new node_stream__WEBPACK_IMPORTED_MODULE_0__.PassThrough({highWaterMark});\r\n\t\tbody.pipe(p1);\r\n\t\tbody.pipe(p2);\r\n\t\t// Set instance body to teed body and return the other teed body\r\n\t\tinstance[INTERNALS].stream = p1;\r\n\t\tbody = p2;\r\n\t}\r\n\r\n\treturn body;\r\n};\r\n\r\nconst getNonSpecFormDataBoundary = (0,node_util__WEBPACK_IMPORTED_MODULE_1__.deprecate)(\r\n\tbody => body.getBoundary(),\r\n\t'form-data doesn\\'t follow the spec and requires special treatment. Use alternative package',\r\n\t'https://github.com/node-fetch/node-fetch/issues/1167'\r\n);\r\n\r\n/**\r\n * Performs the operation \"extract a `Content-Type` value from |object|\" as\r\n * specified in the specification:\r\n * https://fetch.spec.whatwg.org/#concept-bodyinit-extract\r\n *\r\n * This function assumes that instance.body is present.\r\n *\r\n * @param {any} body Any options.body input\r\n * @returns {string | null}\r\n */\r\nconst extractContentType = (body, request) => {\r\n\t// Body is null or undefined\r\n\tif (body === null) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\t// Body is string\r\n\tif (typeof body === 'string') {\r\n\t\treturn 'text/plain;charset=UTF-8';\r\n\t}\r\n\r\n\t// Body is a URLSearchParams\r\n\tif ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_5__.isURLSearchParameters)(body)) {\r\n\t\treturn 'application/x-www-form-urlencoded;charset=UTF-8';\r\n\t}\r\n\r\n\t// Body is blob\r\n\tif ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_5__.isBlob)(body)) {\r\n\t\treturn body.type || null;\r\n\t}\r\n\r\n\t// Body is a Buffer (Buffer, ArrayBuffer or ArrayBufferView)\r\n\tif (node_buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.isBuffer(body) || node_util__WEBPACK_IMPORTED_MODULE_1__.types.isAnyArrayBuffer(body) || ArrayBuffer.isView(body)) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\tif (body instanceof formdata_polyfill_esm_min_js__WEBPACK_IMPORTED_MODULE_4__.FormData) {\r\n\t\treturn `multipart/form-data; boundary=${request[INTERNALS].boundary}`;\r\n\t}\r\n\r\n\t// Detect form data input from form-data module\r\n\tif (body && typeof body.getBoundary === 'function') {\r\n\t\treturn `multipart/form-data;boundary=${getNonSpecFormDataBoundary(body)}`;\r\n\t}\r\n\r\n\t// Body is stream - can't really do much about this\r\n\tif (body instanceof node_stream__WEBPACK_IMPORTED_MODULE_0__) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\t// Body constructor defaults other things to string\r\n\treturn 'text/plain;charset=UTF-8';\r\n};\r\n\r\n/**\r\n * The Fetch Standard treats this as if \"total bytes\" is a property on the body.\r\n * For us, we have to explicitly get it with a function.\r\n *\r\n * ref: https://fetch.spec.whatwg.org/#concept-body-total-bytes\r\n *\r\n * @param {any} obj.body Body object from the Body instance.\r\n * @returns {number | null}\r\n */\r\nconst getTotalBytes = request => {\r\n\tconst {body} = request[INTERNALS];\r\n\r\n\t// Body is null or undefined\r\n\tif (body === null) {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t// Body is Blob\r\n\tif ((0,_utils_is_js__WEBPACK_IMPORTED_MODULE_5__.isBlob)(body)) {\r\n\t\treturn body.size;\r\n\t}\r\n\r\n\t// Body is Buffer\r\n\tif (node_buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.isBuffer(body)) {\r\n\t\treturn body.length;\r\n\t}\r\n\r\n\t// Detect form data input from form-data module\r\n\tif (body && typeof body.getLengthSync === 'function') {\r\n\t\treturn body.hasKnownLength && body.hasKnownLength() ? body.getLengthSync() : null;\r\n\t}\r\n\r\n\t// Body is stream\r\n\treturn null;\r\n};\r\n\r\n/**\r\n * Write a Body to a Node.js WritableStream (e.g. http.Request) object.\r\n *\r\n * @param {Stream.Writable} dest The stream to write to.\r\n * @param obj.body Body object from the Body instance.\r\n * @returns {Promise<void>}\r\n */\r\nconst writeToStream = async (dest, {body}) => {\r\n\tif (body === null) {\r\n\t\t// Body is null\r\n\t\tdest.end();\r\n\t} else {\r\n\t\t// Body is stream\r\n\t\tawait pipeline(body, dest);\r\n\t}\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/node-fetch/src/body.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/node-fetch/src/errors/abort-error.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/node-fetch/src/errors/abort-error.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbortError: () => (/* binding */ AbortError)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/google-gax/node_modules/node-fetch/src/errors/base.js\");\n\r\n\r\n/**\r\n * AbortError interface for cancelled requests\r\n */\r\nclass AbortError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.FetchBaseError {\r\n\tconstructor(message, type = 'aborted') {\r\n\t\tsuper(message, type);\r\n\t}\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9ub2RlX21vZHVsZXMvbm9kZS1mZXRjaC9zcmMvZXJyb3JzL2Fib3J0LWVycm9yLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXlDO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ08seUJBQXlCLG9EQUFjO0FBQzlDO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFuaXNoLWJ1ZGR5Ly4vbm9kZV9tb2R1bGVzL2dvb2dsZS1nYXgvbm9kZV9tb2R1bGVzL25vZGUtZmV0Y2gvc3JjL2Vycm9ycy9hYm9ydC1lcnJvci5qcz80NzRjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RmV0Y2hCYXNlRXJyb3J9IGZyb20gJy4vYmFzZS5qcyc7XHJcblxyXG4vKipcclxuICogQWJvcnRFcnJvciBpbnRlcmZhY2UgZm9yIGNhbmNlbGxlZCByZXF1ZXN0c1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEFib3J0RXJyb3IgZXh0ZW5kcyBGZXRjaEJhc2VFcnJvciB7XHJcblx0Y29uc3RydWN0b3IobWVzc2FnZSwgdHlwZSA9ICdhYm9ydGVkJykge1xyXG5cdFx0c3VwZXIobWVzc2FnZSwgdHlwZSk7XHJcblx0fVxyXG59XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/node-fetch/src/errors/abort-error.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/node-fetch/src/errors/base.js":
/*!****************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/node-fetch/src/errors/base.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FetchBaseError: () => (/* binding */ FetchBaseError)\n/* harmony export */ });\nclass FetchBaseError extends Error {\r\n\tconstructor(message, type) {\r\n\t\tsuper(message);\r\n\t\t// Hide custom error implementation details from end-users\r\n\t\tError.captureStackTrace(this, this.constructor);\r\n\r\n\t\tthis.type = type;\r\n\t}\r\n\r\n\tget name() {\r\n\t\treturn this.constructor.name;\r\n\t}\r\n\r\n\tget [Symbol.toStringTag]() {\r\n\t\treturn this.constructor.name;\r\n\t}\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9ub2RlX21vZHVsZXMvbm9kZS1mZXRjaC9zcmMvZXJyb3JzL2Jhc2UuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYW5pc2gtYnVkZHkvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9ub2RlX21vZHVsZXMvbm9kZS1mZXRjaC9zcmMvZXJyb3JzL2Jhc2UuanM/Y2E1OSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgRmV0Y2hCYXNlRXJyb3IgZXh0ZW5kcyBFcnJvciB7XHJcblx0Y29uc3RydWN0b3IobWVzc2FnZSwgdHlwZSkge1xyXG5cdFx0c3VwZXIobWVzc2FnZSk7XHJcblx0XHQvLyBIaWRlIGN1c3RvbSBlcnJvciBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIGZyb20gZW5kLXVzZXJzXHJcblx0XHRFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCB0aGlzLmNvbnN0cnVjdG9yKTtcclxuXHJcblx0XHR0aGlzLnR5cGUgPSB0eXBlO1xyXG5cdH1cclxuXHJcblx0Z2V0IG5hbWUoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lO1xyXG5cdH1cclxuXHJcblx0Z2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuY29uc3RydWN0b3IubmFtZTtcclxuXHR9XHJcbn1cclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/node-fetch/src/errors/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/node-fetch/src/errors/fetch-error.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/node-fetch/src/errors/fetch-error.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FetchError: () => (/* binding */ FetchError)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/google-gax/node_modules/node-fetch/src/errors/base.js\");\n\r\n\r\n\r\n/**\r\n * @typedef {{ address?: string, code: string, dest?: string, errno: number, info?: object, message: string, path?: string, port?: number, syscall: string}} SystemError\r\n*/\r\n\r\n/**\r\n * FetchError interface for operational errors\r\n */\r\nclass FetchError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.FetchBaseError {\r\n\t/**\r\n\t * @param  {string} message -      Error message for human\r\n\t * @param  {string} [type] -        Error type for machine\r\n\t * @param  {SystemError} [systemError] - For Node.js system error\r\n\t */\r\n\tconstructor(message, type, systemError) {\r\n\t\tsuper(message, type);\r\n\t\t// When err.type is `system`, err.erroredSysCall contains system error and err.code contains system error code\r\n\t\tif (systemError) {\r\n\t\t\t// eslint-disable-next-line no-multi-assign\r\n\t\t\tthis.code = this.errno = systemError.code;\r\n\t\t\tthis.erroredSysCall = systemError.syscall;\r\n\t\t}\r\n\t}\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9ub2RlX21vZHVsZXMvbm9kZS1mZXRjaC9zcmMvZXJyb3JzL2ZldGNoLWVycm9yLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDeUM7QUFDekM7QUFDQTtBQUNBLGVBQWUsOElBQThJO0FBQzdKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyx5QkFBeUIsb0RBQWM7QUFDOUM7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsYUFBYTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFuaXNoLWJ1ZGR5Ly4vbm9kZV9tb2R1bGVzL2dvb2dsZS1nYXgvbm9kZV9tb2R1bGVzL25vZGUtZmV0Y2gvc3JjL2Vycm9ycy9mZXRjaC1lcnJvci5qcz84MjhmIl0sInNvdXJjZXNDb250ZW50IjpbIlxyXG5pbXBvcnQge0ZldGNoQmFzZUVycm9yfSBmcm9tICcuL2Jhc2UuanMnO1xyXG5cclxuLyoqXHJcbiAqIEB0eXBlZGVmIHt7IGFkZHJlc3M/OiBzdHJpbmcsIGNvZGU6IHN0cmluZywgZGVzdD86IHN0cmluZywgZXJybm86IG51bWJlciwgaW5mbz86IG9iamVjdCwgbWVzc2FnZTogc3RyaW5nLCBwYXRoPzogc3RyaW5nLCBwb3J0PzogbnVtYmVyLCBzeXNjYWxsOiBzdHJpbmd9fSBTeXN0ZW1FcnJvclxyXG4qL1xyXG5cclxuLyoqXHJcbiAqIEZldGNoRXJyb3IgaW50ZXJmYWNlIGZvciBvcGVyYXRpb25hbCBlcnJvcnNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBGZXRjaEVycm9yIGV4dGVuZHMgRmV0Y2hCYXNlRXJyb3Ige1xyXG5cdC8qKlxyXG5cdCAqIEBwYXJhbSAge3N0cmluZ30gbWVzc2FnZSAtICAgICAgRXJyb3IgbWVzc2FnZSBmb3IgaHVtYW5cclxuXHQgKiBAcGFyYW0gIHtzdHJpbmd9IFt0eXBlXSAtICAgICAgICBFcnJvciB0eXBlIGZvciBtYWNoaW5lXHJcblx0ICogQHBhcmFtICB7U3lzdGVtRXJyb3J9IFtzeXN0ZW1FcnJvcl0gLSBGb3IgTm9kZS5qcyBzeXN0ZW0gZXJyb3JcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3RvcihtZXNzYWdlLCB0eXBlLCBzeXN0ZW1FcnJvcikge1xyXG5cdFx0c3VwZXIobWVzc2FnZSwgdHlwZSk7XHJcblx0XHQvLyBXaGVuIGVyci50eXBlIGlzIGBzeXN0ZW1gLCBlcnIuZXJyb3JlZFN5c0NhbGwgY29udGFpbnMgc3lzdGVtIGVycm9yIGFuZCBlcnIuY29kZSBjb250YWlucyBzeXN0ZW0gZXJyb3IgY29kZVxyXG5cdFx0aWYgKHN5c3RlbUVycm9yKSB7XHJcblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1tdWx0aS1hc3NpZ25cclxuXHRcdFx0dGhpcy5jb2RlID0gdGhpcy5lcnJubyA9IHN5c3RlbUVycm9yLmNvZGU7XHJcblx0XHRcdHRoaXMuZXJyb3JlZFN5c0NhbGwgPSBzeXN0ZW1FcnJvci5zeXNjYWxsO1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/node-fetch/src/errors/fetch-error.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/node-fetch/src/headers.js":
/*!************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/node-fetch/src/headers.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Headers),\n/* harmony export */   fromRawHeaders: () => (/* binding */ fromRawHeaders)\n/* harmony export */ });\n/* harmony import */ var node_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:util */ \"node:util\");\n/* harmony import */ var node_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:http */ \"node:http\");\n/**\r\n * Headers.js\r\n *\r\n * Headers class offers convenient helpers\r\n */\r\n\r\n\r\n\r\n\r\n/* c8 ignore next 9 */\r\nconst validateHeaderName = typeof node_http__WEBPACK_IMPORTED_MODULE_1__.validateHeaderName === 'function' ?\r\n\tnode_http__WEBPACK_IMPORTED_MODULE_1__.validateHeaderName :\r\n\tname => {\r\n\t\tif (!/^[\\^`\\-\\w!#$%&'*+.|~]+$/.test(name)) {\r\n\t\t\tconst error = new TypeError(`Header name must be a valid HTTP token [${name}]`);\r\n\t\t\tObject.defineProperty(error, 'code', {value: 'ERR_INVALID_HTTP_TOKEN'});\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t};\r\n\r\n/* c8 ignore next 9 */\r\nconst validateHeaderValue = typeof node_http__WEBPACK_IMPORTED_MODULE_1__.validateHeaderValue === 'function' ?\r\n\tnode_http__WEBPACK_IMPORTED_MODULE_1__.validateHeaderValue :\r\n\t(name, value) => {\r\n\t\tif (/[^\\t\\u0020-\\u007E\\u0080-\\u00FF]/.test(value)) {\r\n\t\t\tconst error = new TypeError(`Invalid character in header content [\"${name}\"]`);\r\n\t\t\tObject.defineProperty(error, 'code', {value: 'ERR_INVALID_CHAR'});\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t};\r\n\r\n/**\r\n * @typedef {Headers | Record<string, string> | Iterable<readonly [string, string]> | Iterable<Iterable<string>>} HeadersInit\r\n */\r\n\r\n/**\r\n * This Fetch API interface allows you to perform various actions on HTTP request and response headers.\r\n * These actions include retrieving, setting, adding to, and removing.\r\n * A Headers object has an associated header list, which is initially empty and consists of zero or more name and value pairs.\r\n * You can add to this using methods like append() (see Examples.)\r\n * In all methods of this interface, header names are matched by case-insensitive byte sequence.\r\n *\r\n */\r\nclass Headers extends URLSearchParams {\r\n\t/**\r\n\t * Headers class\r\n\t *\r\n\t * @constructor\r\n\t * @param {HeadersInit} [init] - Response headers\r\n\t */\r\n\tconstructor(init) {\r\n\t\t// Validate and normalize init object in [name, value(s)][]\r\n\t\t/** @type {string[][]} */\r\n\t\tlet result = [];\r\n\t\tif (init instanceof Headers) {\r\n\t\t\tconst raw = init.raw();\r\n\t\t\tfor (const [name, values] of Object.entries(raw)) {\r\n\t\t\t\tresult.push(...values.map(value => [name, value]));\r\n\t\t\t}\r\n\t\t} else if (init == null) { // eslint-disable-line no-eq-null, eqeqeq\r\n\t\t\t// No op\r\n\t\t} else if (typeof init === 'object' && !node_util__WEBPACK_IMPORTED_MODULE_0__.types.isBoxedPrimitive(init)) {\r\n\t\t\tconst method = init[Symbol.iterator];\r\n\t\t\t// eslint-disable-next-line no-eq-null, eqeqeq\r\n\t\t\tif (method == null) {\r\n\t\t\t\t// Record<ByteString, ByteString>\r\n\t\t\t\tresult.push(...Object.entries(init));\r\n\t\t\t} else {\r\n\t\t\t\tif (typeof method !== 'function') {\r\n\t\t\t\t\tthrow new TypeError('Header pairs must be iterable');\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Sequence<sequence<ByteString>>\r\n\t\t\t\t// Note: per spec we have to first exhaust the lists then process them\r\n\t\t\t\tresult = [...init]\r\n\t\t\t\t\t.map(pair => {\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\ttypeof pair !== 'object' || node_util__WEBPACK_IMPORTED_MODULE_0__.types.isBoxedPrimitive(pair)\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\tthrow new TypeError('Each header pair must be an iterable object');\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn [...pair];\r\n\t\t\t\t\t}).map(pair => {\r\n\t\t\t\t\t\tif (pair.length !== 2) {\r\n\t\t\t\t\t\t\tthrow new TypeError('Each header pair must be a name/value tuple');\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn [...pair];\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthrow new TypeError('Failed to construct \\'Headers\\': The provided value is not of type \\'(sequence<sequence<ByteString>> or record<ByteString, ByteString>)');\r\n\t\t}\r\n\r\n\t\t// Validate and lowercase\r\n\t\tresult =\r\n\t\t\tresult.length > 0 ?\r\n\t\t\t\tresult.map(([name, value]) => {\r\n\t\t\t\t\tvalidateHeaderName(name);\r\n\t\t\t\t\tvalidateHeaderValue(name, String(value));\r\n\t\t\t\t\treturn [String(name).toLowerCase(), String(value)];\r\n\t\t\t\t}) :\r\n\t\t\t\tundefined;\r\n\r\n\t\tsuper(result);\r\n\r\n\t\t// Returning a Proxy that will lowercase key names, validate parameters and sort keys\r\n\t\t// eslint-disable-next-line no-constructor-return\r\n\t\treturn new Proxy(this, {\r\n\t\t\tget(target, p, receiver) {\r\n\t\t\t\tswitch (p) {\r\n\t\t\t\t\tcase 'append':\r\n\t\t\t\t\tcase 'set':\r\n\t\t\t\t\t\treturn (name, value) => {\r\n\t\t\t\t\t\t\tvalidateHeaderName(name);\r\n\t\t\t\t\t\t\tvalidateHeaderValue(name, String(value));\r\n\t\t\t\t\t\t\treturn URLSearchParams.prototype[p].call(\r\n\t\t\t\t\t\t\t\ttarget,\r\n\t\t\t\t\t\t\t\tString(name).toLowerCase(),\r\n\t\t\t\t\t\t\t\tString(value)\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\tcase 'delete':\r\n\t\t\t\t\tcase 'has':\r\n\t\t\t\t\tcase 'getAll':\r\n\t\t\t\t\t\treturn name => {\r\n\t\t\t\t\t\t\tvalidateHeaderName(name);\r\n\t\t\t\t\t\t\treturn URLSearchParams.prototype[p].call(\r\n\t\t\t\t\t\t\t\ttarget,\r\n\t\t\t\t\t\t\t\tString(name).toLowerCase()\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\tcase 'keys':\r\n\t\t\t\t\t\treturn () => {\r\n\t\t\t\t\t\t\ttarget.sort();\r\n\t\t\t\t\t\t\treturn new Set(URLSearchParams.prototype.keys.call(target)).keys();\r\n\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Reflect.get(target, p, receiver);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\t/* c8 ignore next */\r\n\t}\r\n\r\n\tget [Symbol.toStringTag]() {\r\n\t\treturn this.constructor.name;\r\n\t}\r\n\r\n\ttoString() {\r\n\t\treturn Object.prototype.toString.call(this);\r\n\t}\r\n\r\n\tget(name) {\r\n\t\tconst values = this.getAll(name);\r\n\t\tif (values.length === 0) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tlet value = values.join(', ');\r\n\t\tif (/^content-encoding$/i.test(name)) {\r\n\t\t\tvalue = value.toLowerCase();\r\n\t\t}\r\n\r\n\t\treturn value;\r\n\t}\r\n\r\n\tforEach(callback, thisArg = undefined) {\r\n\t\tfor (const name of this.keys()) {\r\n\t\t\tReflect.apply(callback, thisArg, [this.get(name), name, this]);\r\n\t\t}\r\n\t}\r\n\r\n\t* values() {\r\n\t\tfor (const name of this.keys()) {\r\n\t\t\tyield this.get(name);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @type {() => IterableIterator<[string, string]>}\r\n\t */\r\n\t* entries() {\r\n\t\tfor (const name of this.keys()) {\r\n\t\t\tyield [name, this.get(name)];\r\n\t\t}\r\n\t}\r\n\r\n\t[Symbol.iterator]() {\r\n\t\treturn this.entries();\r\n\t}\r\n\r\n\t/**\r\n\t * Node-fetch non-spec method\r\n\t * returning all headers and their values as array\r\n\t * @returns {Record<string, string[]>}\r\n\t */\r\n\traw() {\r\n\t\treturn [...this.keys()].reduce((result, key) => {\r\n\t\t\tresult[key] = this.getAll(key);\r\n\t\t\treturn result;\r\n\t\t}, {});\r\n\t}\r\n\r\n\t/**\r\n\t * For better console.log(headers) and also to convert Headers into Node.js Request compatible format\r\n\t */\r\n\t[Symbol.for('nodejs.util.inspect.custom')]() {\r\n\t\treturn [...this.keys()].reduce((result, key) => {\r\n\t\t\tconst values = this.getAll(key);\r\n\t\t\t// Http.request() only supports string as Host header.\r\n\t\t\t// This hack makes specifying custom Host header possible.\r\n\t\t\tif (key === 'host') {\r\n\t\t\t\tresult[key] = values[0];\r\n\t\t\t} else {\r\n\t\t\t\tresult[key] = values.length > 1 ? values : values[0];\r\n\t\t\t}\r\n\r\n\t\t\treturn result;\r\n\t\t}, {});\r\n\t}\r\n}\r\n\r\n/**\r\n * Re-shaping object for Web IDL tests\r\n * Only need to do it for overridden methods\r\n */\r\nObject.defineProperties(\r\n\tHeaders.prototype,\r\n\t['get', 'entries', 'forEach', 'values'].reduce((result, property) => {\r\n\t\tresult[property] = {enumerable: true};\r\n\t\treturn result;\r\n\t}, {})\r\n);\r\n\r\n/**\r\n * Create a Headers object from an http.IncomingMessage.rawHeaders, ignoring those that do\r\n * not conform to HTTP grammar productions.\r\n * @param {import('http').IncomingMessage['rawHeaders']} headers\r\n */\r\nfunction fromRawHeaders(headers = []) {\r\n\treturn new Headers(\r\n\t\theaders\r\n\t\t\t// Split into pairs\r\n\t\t\t.reduce((result, value, index, array) => {\r\n\t\t\t\tif (index % 2 === 0) {\r\n\t\t\t\t\tresult.push(array.slice(index, index + 2));\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn result;\r\n\t\t\t}, [])\r\n\t\t\t.filter(([name, value]) => {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tvalidateHeaderName(name);\r\n\t\t\t\t\tvalidateHeaderValue(name, String(value));\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} catch {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t);\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/node-fetch/src/headers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/node-fetch/src/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/node-fetch/src/index.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbortError: () => (/* reexport safe */ _errors_abort_error_js__WEBPACK_IMPORTED_MODULE_12__.AbortError),\n/* harmony export */   Blob: () => (/* reexport safe */ fetch_blob_from_js__WEBPACK_IMPORTED_MODULE_7__.Blob),\n/* harmony export */   FetchError: () => (/* reexport safe */ _errors_fetch_error_js__WEBPACK_IMPORTED_MODULE_11__.FetchError),\n/* harmony export */   File: () => (/* reexport safe */ fetch_blob_from_js__WEBPACK_IMPORTED_MODULE_7__.File),\n/* harmony export */   FormData: () => (/* reexport safe */ formdata_polyfill_esm_min_js__WEBPACK_IMPORTED_MODULE_6__.FormData),\n/* harmony export */   Headers: () => (/* reexport safe */ _headers_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"]),\n/* harmony export */   Request: () => (/* reexport safe */ _request_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"]),\n/* harmony export */   Response: () => (/* reexport safe */ _response_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"]),\n/* harmony export */   blobFrom: () => (/* reexport safe */ fetch_blob_from_js__WEBPACK_IMPORTED_MODULE_7__.blobFrom),\n/* harmony export */   blobFromSync: () => (/* reexport safe */ fetch_blob_from_js__WEBPACK_IMPORTED_MODULE_7__.blobFromSync),\n/* harmony export */   \"default\": () => (/* binding */ fetch),\n/* harmony export */   fileFrom: () => (/* reexport safe */ fetch_blob_from_js__WEBPACK_IMPORTED_MODULE_7__.fileFrom),\n/* harmony export */   fileFromSync: () => (/* reexport safe */ fetch_blob_from_js__WEBPACK_IMPORTED_MODULE_7__.fileFromSync),\n/* harmony export */   isRedirect: () => (/* reexport safe */ _utils_is_redirect_js__WEBPACK_IMPORTED_MODULE_13__.isRedirect)\n/* harmony export */ });\n/* harmony import */ var node_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:http */ \"node:http\");\n/* harmony import */ var node_https__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:https */ \"node:https\");\n/* harmony import */ var node_zlib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! node:zlib */ \"node:zlib\");\n/* harmony import */ var node_stream__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! node:stream */ \"node:stream\");\n/* harmony import */ var node_buffer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! node:buffer */ \"node:buffer\");\n/* harmony import */ var data_uri_to_buffer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! data-uri-to-buffer */ \"(rsc)/./node_modules/data-uri-to-buffer/dist/index.js\");\n/* harmony import */ var _body_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./body.js */ \"(rsc)/./node_modules/google-gax/node_modules/node-fetch/src/body.js\");\n/* harmony import */ var _response_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./response.js */ \"(rsc)/./node_modules/google-gax/node_modules/node-fetch/src/response.js\");\n/* harmony import */ var _headers_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./headers.js */ \"(rsc)/./node_modules/google-gax/node_modules/node-fetch/src/headers.js\");\n/* harmony import */ var _request_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./request.js */ \"(rsc)/./node_modules/google-gax/node_modules/node-fetch/src/request.js\");\n/* harmony import */ var _errors_fetch_error_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./errors/fetch-error.js */ \"(rsc)/./node_modules/google-gax/node_modules/node-fetch/src/errors/fetch-error.js\");\n/* harmony import */ var _errors_abort_error_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./errors/abort-error.js */ \"(rsc)/./node_modules/google-gax/node_modules/node-fetch/src/errors/abort-error.js\");\n/* harmony import */ var _utils_is_redirect_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./utils/is-redirect.js */ \"(rsc)/./node_modules/google-gax/node_modules/node-fetch/src/utils/is-redirect.js\");\n/* harmony import */ var formdata_polyfill_esm_min_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! formdata-polyfill/esm.min.js */ \"(rsc)/./node_modules/formdata-polyfill/esm.min.js\");\n/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./utils/is.js */ \"(rsc)/./node_modules/google-gax/node_modules/node-fetch/src/utils/is.js\");\n/* harmony import */ var _utils_referrer_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./utils/referrer.js */ \"(rsc)/./node_modules/google-gax/node_modules/node-fetch/src/utils/referrer.js\");\n/* harmony import */ var fetch_blob_from_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! fetch-blob/from.js */ \"(rsc)/./node_modules/fetch-blob/from.js\");\n/**\r\n * Index.js\r\n *\r\n * a request API compatible with window.fetch\r\n *\r\n * All spec algorithm step numbers are based on https://fetch.spec.whatwg.org/commit-snapshots/ae716822cb3a61843226cd090eefc6589446c1d2/.\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst supportedSchemas = new Set(['data:', 'http:', 'https:']);\r\n\r\n/**\r\n * Fetch function\r\n *\r\n * @param   {string | URL | import('./request').default} url - Absolute url or Request instance\r\n * @param   {*} [options_] - Fetch options\r\n * @return  {Promise<import('./response').default>}\r\n */\r\nasync function fetch(url, options_) {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\t// Build request object\r\n\t\tconst request = new _request_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"](url, options_);\r\n\t\tconst {parsedURL, options} = (0,_request_js__WEBPACK_IMPORTED_MODULE_9__.getNodeRequestOptions)(request);\r\n\t\tif (!supportedSchemas.has(parsedURL.protocol)) {\r\n\t\t\tthrow new TypeError(`node-fetch cannot load ${url}. URL scheme \"${parsedURL.protocol.replace(/:$/, '')}\" is not supported.`);\r\n\t\t}\r\n\r\n\t\tif (parsedURL.protocol === 'data:') {\r\n\t\t\tconst data = (0,data_uri_to_buffer__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(request.url);\r\n\t\t\tconst response = new _response_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"](data, {headers: {'Content-Type': data.typeFull}});\r\n\t\t\tresolve(response);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Wrap http.request into fetch\r\n\t\tconst send = (parsedURL.protocol === 'https:' ? node_https__WEBPACK_IMPORTED_MODULE_1__ : node_http__WEBPACK_IMPORTED_MODULE_0__).request;\r\n\t\tconst {signal} = request;\r\n\t\tlet response = null;\r\n\r\n\t\tconst abort = () => {\r\n\t\t\tconst error = new _errors_abort_error_js__WEBPACK_IMPORTED_MODULE_12__.AbortError('The operation was aborted.');\r\n\t\t\treject(error);\r\n\t\t\tif (request.body && request.body instanceof node_stream__WEBPACK_IMPORTED_MODULE_3__.Readable) {\r\n\t\t\t\trequest.body.destroy(error);\r\n\t\t\t}\r\n\r\n\t\t\tif (!response || !response.body) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tresponse.body.emit('error', error);\r\n\t\t};\r\n\r\n\t\tif (signal && signal.aborted) {\r\n\t\t\tabort();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst abortAndFinalize = () => {\r\n\t\t\tabort();\r\n\t\t\tfinalize();\r\n\t\t};\r\n\r\n\t\t// Send request\r\n\t\tconst request_ = send(parsedURL.toString(), options);\r\n\r\n\t\tif (signal) {\r\n\t\t\tsignal.addEventListener('abort', abortAndFinalize);\r\n\t\t}\r\n\r\n\t\tconst finalize = () => {\r\n\t\t\trequest_.abort();\r\n\t\t\tif (signal) {\r\n\t\t\t\tsignal.removeEventListener('abort', abortAndFinalize);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\trequest_.on('error', error => {\r\n\t\t\treject(new _errors_fetch_error_js__WEBPACK_IMPORTED_MODULE_11__.FetchError(`request to ${request.url} failed, reason: ${error.message}`, 'system', error));\r\n\t\t\tfinalize();\r\n\t\t});\r\n\r\n\t\tfixResponseChunkedTransferBadEnding(request_, error => {\r\n\t\t\tif (response && response.body) {\r\n\t\t\t\tresponse.body.destroy(error);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t/* c8 ignore next 18 */\r\n\t\tif (process.version < 'v14') {\r\n\t\t\t// Before Node.js 14, pipeline() does not fully support async iterators and does not always\r\n\t\t\t// properly handle when the socket close/end events are out of order.\r\n\t\t\trequest_.on('socket', s => {\r\n\t\t\t\tlet endedWithEventsCount;\r\n\t\t\t\ts.prependListener('end', () => {\r\n\t\t\t\t\tendedWithEventsCount = s._eventsCount;\r\n\t\t\t\t});\r\n\t\t\t\ts.prependListener('close', hadError => {\r\n\t\t\t\t\t// if end happened before close but the socket didn't emit an error, do it now\r\n\t\t\t\t\tif (response && endedWithEventsCount < s._eventsCount && !hadError) {\r\n\t\t\t\t\t\tconst error = new Error('Premature close');\r\n\t\t\t\t\t\terror.code = 'ERR_STREAM_PREMATURE_CLOSE';\r\n\t\t\t\t\t\tresponse.body.emit('error', error);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\trequest_.on('response', response_ => {\r\n\t\t\trequest_.setTimeout(0);\r\n\t\t\tconst headers = (0,_headers_js__WEBPACK_IMPORTED_MODULE_8__.fromRawHeaders)(response_.rawHeaders);\r\n\r\n\t\t\t// HTTP fetch step 5\r\n\t\t\tif ((0,_utils_is_redirect_js__WEBPACK_IMPORTED_MODULE_13__.isRedirect)(response_.statusCode)) {\r\n\t\t\t\t// HTTP fetch step 5.2\r\n\t\t\t\tconst location = headers.get('Location');\r\n\r\n\t\t\t\t// HTTP fetch step 5.3\r\n\t\t\t\tlet locationURL = null;\r\n\t\t\t\ttry {\r\n\t\t\t\t\tlocationURL = location === null ? null : new URL(location, request.url);\r\n\t\t\t\t} catch {\r\n\t\t\t\t\t// error here can only be invalid URL in Location: header\r\n\t\t\t\t\t// do not throw when options.redirect == manual\r\n\t\t\t\t\t// let the user extract the errorneous redirect URL\r\n\t\t\t\t\tif (request.redirect !== 'manual') {\r\n\t\t\t\t\t\treject(new _errors_fetch_error_js__WEBPACK_IMPORTED_MODULE_11__.FetchError(`uri requested responds with an invalid redirect URL: ${location}`, 'invalid-redirect'));\r\n\t\t\t\t\t\tfinalize();\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// HTTP fetch step 5.5\r\n\t\t\t\tswitch (request.redirect) {\r\n\t\t\t\t\tcase 'error':\r\n\t\t\t\t\t\treject(new _errors_fetch_error_js__WEBPACK_IMPORTED_MODULE_11__.FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, 'no-redirect'));\r\n\t\t\t\t\t\tfinalize();\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\tcase 'manual':\r\n\t\t\t\t\t\t// Nothing to do\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'follow': {\r\n\t\t\t\t\t\t// HTTP-redirect fetch step 2\r\n\t\t\t\t\t\tif (locationURL === null) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// HTTP-redirect fetch step 5\r\n\t\t\t\t\t\tif (request.counter >= request.follow) {\r\n\t\t\t\t\t\t\treject(new _errors_fetch_error_js__WEBPACK_IMPORTED_MODULE_11__.FetchError(`maximum redirect reached at: ${request.url}`, 'max-redirect'));\r\n\t\t\t\t\t\t\tfinalize();\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// HTTP-redirect fetch step 6 (counter increment)\r\n\t\t\t\t\t\t// Create a new Request object.\r\n\t\t\t\t\t\tconst requestOptions = {\r\n\t\t\t\t\t\t\theaders: new _headers_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"](request.headers),\r\n\t\t\t\t\t\t\tfollow: request.follow,\r\n\t\t\t\t\t\t\tcounter: request.counter + 1,\r\n\t\t\t\t\t\t\tagent: request.agent,\r\n\t\t\t\t\t\t\tcompress: request.compress,\r\n\t\t\t\t\t\t\tmethod: request.method,\r\n\t\t\t\t\t\t\tbody: (0,_body_js__WEBPACK_IMPORTED_MODULE_14__.clone)(request),\r\n\t\t\t\t\t\t\tsignal: request.signal,\r\n\t\t\t\t\t\t\tsize: request.size,\r\n\t\t\t\t\t\t\treferrer: request.referrer,\r\n\t\t\t\t\t\t\treferrerPolicy: request.referrerPolicy\r\n\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\t// when forwarding sensitive headers like \"Authorization\",\r\n\t\t\t\t\t\t// \"WWW-Authenticate\", and \"Cookie\" to untrusted targets,\r\n\t\t\t\t\t\t// headers will be ignored when following a redirect to a domain\r\n\t\t\t\t\t\t// that is not a subdomain match or exact match of the initial domain.\r\n\t\t\t\t\t\t// For example, a redirect from \"foo.com\" to either \"foo.com\" or \"sub.foo.com\"\r\n\t\t\t\t\t\t// will forward the sensitive headers, but a redirect to \"bar.com\" will not.\r\n\t\t\t\t\t\t// headers will also be ignored when following a redirect to a domain using\r\n\t\t\t\t\t\t// a different protocol. For example, a redirect from \"https://foo.com\" to \"http://foo.com\"\r\n\t\t\t\t\t\t// will not forward the sensitive headers\r\n\t\t\t\t\t\tif (!(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_15__.isDomainOrSubdomain)(request.url, locationURL) || !(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_15__.isSameProtocol)(request.url, locationURL)) {\r\n\t\t\t\t\t\t\tfor (const name of ['authorization', 'www-authenticate', 'cookie', 'cookie2']) {\r\n\t\t\t\t\t\t\t\trequestOptions.headers.delete(name);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// HTTP-redirect fetch step 9\r\n\t\t\t\t\t\tif (response_.statusCode !== 303 && request.body && options_.body instanceof node_stream__WEBPACK_IMPORTED_MODULE_3__.Readable) {\r\n\t\t\t\t\t\t\treject(new _errors_fetch_error_js__WEBPACK_IMPORTED_MODULE_11__.FetchError('Cannot follow redirect with body being a readable stream', 'unsupported-redirect'));\r\n\t\t\t\t\t\t\tfinalize();\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// HTTP-redirect fetch step 11\r\n\t\t\t\t\t\tif (response_.statusCode === 303 || ((response_.statusCode === 301 || response_.statusCode === 302) && request.method === 'POST')) {\r\n\t\t\t\t\t\t\trequestOptions.method = 'GET';\r\n\t\t\t\t\t\t\trequestOptions.body = undefined;\r\n\t\t\t\t\t\t\trequestOptions.headers.delete('content-length');\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// HTTP-redirect fetch step 14\r\n\t\t\t\t\t\tconst responseReferrerPolicy = (0,_utils_referrer_js__WEBPACK_IMPORTED_MODULE_16__.parseReferrerPolicyFromHeader)(headers);\r\n\t\t\t\t\t\tif (responseReferrerPolicy) {\r\n\t\t\t\t\t\t\trequestOptions.referrerPolicy = responseReferrerPolicy;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// HTTP-redirect fetch step 15\r\n\t\t\t\t\t\tresolve(fetch(new _request_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"](locationURL, requestOptions)));\r\n\t\t\t\t\t\tfinalize();\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn reject(new TypeError(`Redirect option '${request.redirect}' is not a valid value of RequestRedirect`));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Prepare response\r\n\t\t\tif (signal) {\r\n\t\t\t\tresponse_.once('end', () => {\r\n\t\t\t\t\tsignal.removeEventListener('abort', abortAndFinalize);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tlet body = (0,node_stream__WEBPACK_IMPORTED_MODULE_3__.pipeline)(response_, new node_stream__WEBPACK_IMPORTED_MODULE_3__.PassThrough(), error => {\r\n\t\t\t\tif (error) {\r\n\t\t\t\t\treject(error);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t// see https://github.com/nodejs/node/pull/29376\r\n\t\t\t/* c8 ignore next 3 */\r\n\t\t\tif (process.version < 'v12.10') {\r\n\t\t\t\tresponse_.on('aborted', abortAndFinalize);\r\n\t\t\t}\r\n\r\n\t\t\tconst responseOptions = {\r\n\t\t\t\turl: request.url,\r\n\t\t\t\tstatus: response_.statusCode,\r\n\t\t\t\tstatusText: response_.statusMessage,\r\n\t\t\t\theaders,\r\n\t\t\t\tsize: request.size,\r\n\t\t\t\tcounter: request.counter,\r\n\t\t\t\thighWaterMark: request.highWaterMark\r\n\t\t\t};\r\n\r\n\t\t\t// HTTP-network fetch step 12.1.1.3\r\n\t\t\tconst codings = headers.get('Content-Encoding');\r\n\r\n\t\t\t// HTTP-network fetch step 12.1.1.4: handle content codings\r\n\r\n\t\t\t// in following scenarios we ignore compression support\r\n\t\t\t// 1. compression support is disabled\r\n\t\t\t// 2. HEAD request\r\n\t\t\t// 3. no Content-Encoding header\r\n\t\t\t// 4. no content response (204)\r\n\t\t\t// 5. content not modified response (304)\r\n\t\t\tif (!request.compress || request.method === 'HEAD' || codings === null || response_.statusCode === 204 || response_.statusCode === 304) {\r\n\t\t\t\tresponse = new _response_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"](body, responseOptions);\r\n\t\t\t\tresolve(response);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// For Node v6+\r\n\t\t\t// Be less strict when decoding compressed responses, since sometimes\r\n\t\t\t// servers send slightly invalid responses that are still accepted\r\n\t\t\t// by common browsers.\r\n\t\t\t// Always using Z_SYNC_FLUSH is what cURL does.\r\n\t\t\tconst zlibOptions = {\r\n\t\t\t\tflush: node_zlib__WEBPACK_IMPORTED_MODULE_2__.Z_SYNC_FLUSH,\r\n\t\t\t\tfinishFlush: node_zlib__WEBPACK_IMPORTED_MODULE_2__.Z_SYNC_FLUSH\r\n\t\t\t};\r\n\r\n\t\t\t// For gzip\r\n\t\t\tif (codings === 'gzip' || codings === 'x-gzip') {\r\n\t\t\t\tbody = (0,node_stream__WEBPACK_IMPORTED_MODULE_3__.pipeline)(body, node_zlib__WEBPACK_IMPORTED_MODULE_2__.createGunzip(zlibOptions), error => {\r\n\t\t\t\t\tif (error) {\r\n\t\t\t\t\t\treject(error);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tresponse = new _response_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"](body, responseOptions);\r\n\t\t\t\tresolve(response);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// For deflate\r\n\t\t\tif (codings === 'deflate' || codings === 'x-deflate') {\r\n\t\t\t\t// Handle the infamous raw deflate response from old servers\r\n\t\t\t\t// a hack for old IIS and Apache servers\r\n\t\t\t\tconst raw = (0,node_stream__WEBPACK_IMPORTED_MODULE_3__.pipeline)(response_, new node_stream__WEBPACK_IMPORTED_MODULE_3__.PassThrough(), error => {\r\n\t\t\t\t\tif (error) {\r\n\t\t\t\t\t\treject(error);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\traw.once('data', chunk => {\r\n\t\t\t\t\t// See http://stackoverflow.com/questions/37519828\r\n\t\t\t\t\tif ((chunk[0] & 0x0F) === 0x08) {\r\n\t\t\t\t\t\tbody = (0,node_stream__WEBPACK_IMPORTED_MODULE_3__.pipeline)(body, node_zlib__WEBPACK_IMPORTED_MODULE_2__.createInflate(), error => {\r\n\t\t\t\t\t\t\tif (error) {\r\n\t\t\t\t\t\t\t\treject(error);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tbody = (0,node_stream__WEBPACK_IMPORTED_MODULE_3__.pipeline)(body, node_zlib__WEBPACK_IMPORTED_MODULE_2__.createInflateRaw(), error => {\r\n\t\t\t\t\t\t\tif (error) {\r\n\t\t\t\t\t\t\t\treject(error);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tresponse = new _response_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"](body, responseOptions);\r\n\t\t\t\t\tresolve(response);\r\n\t\t\t\t});\r\n\t\t\t\traw.once('end', () => {\r\n\t\t\t\t\t// Some old IIS servers return zero-length OK deflate responses, so\r\n\t\t\t\t\t// 'data' is never emitted. See https://github.com/node-fetch/node-fetch/pull/903\r\n\t\t\t\t\tif (!response) {\r\n\t\t\t\t\t\tresponse = new _response_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"](body, responseOptions);\r\n\t\t\t\t\t\tresolve(response);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// For br\r\n\t\t\tif (codings === 'br') {\r\n\t\t\t\tbody = (0,node_stream__WEBPACK_IMPORTED_MODULE_3__.pipeline)(body, node_zlib__WEBPACK_IMPORTED_MODULE_2__.createBrotliDecompress(), error => {\r\n\t\t\t\t\tif (error) {\r\n\t\t\t\t\t\treject(error);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tresponse = new _response_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"](body, responseOptions);\r\n\t\t\t\tresolve(response);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Otherwise, use response as-is\r\n\t\t\tresponse = new _response_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"](body, responseOptions);\r\n\t\t\tresolve(response);\r\n\t\t});\r\n\r\n\t\t// eslint-disable-next-line promise/prefer-await-to-then\r\n\t\t(0,_body_js__WEBPACK_IMPORTED_MODULE_14__.writeToStream)(request_, request).catch(reject);\r\n\t});\r\n}\r\n\r\nfunction fixResponseChunkedTransferBadEnding(request, errorCallback) {\r\n\tconst LAST_CHUNK = node_buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer.from('0\\r\\n\\r\\n');\r\n\r\n\tlet isChunkedTransfer = false;\r\n\tlet properLastChunkReceived = false;\r\n\tlet previousChunk;\r\n\r\n\trequest.on('response', response => {\r\n\t\tconst {headers} = response;\r\n\t\tisChunkedTransfer = headers['transfer-encoding'] === 'chunked' && !headers['content-length'];\r\n\t});\r\n\r\n\trequest.on('socket', socket => {\r\n\t\tconst onSocketClose = () => {\r\n\t\t\tif (isChunkedTransfer && !properLastChunkReceived) {\r\n\t\t\t\tconst error = new Error('Premature close');\r\n\t\t\t\terror.code = 'ERR_STREAM_PREMATURE_CLOSE';\r\n\t\t\t\terrorCallback(error);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tconst onData = buf => {\r\n\t\t\tproperLastChunkReceived = node_buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer.compare(buf.slice(-5), LAST_CHUNK) === 0;\r\n\r\n\t\t\t// Sometimes final 0-length chunk and end of message code are in separate packets\r\n\t\t\tif (!properLastChunkReceived && previousChunk) {\r\n\t\t\t\tproperLastChunkReceived = (\r\n\t\t\t\t\tnode_buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer.compare(previousChunk.slice(-3), LAST_CHUNK.slice(0, 3)) === 0 &&\r\n\t\t\t\t\tnode_buffer__WEBPACK_IMPORTED_MODULE_4__.Buffer.compare(buf.slice(-2), LAST_CHUNK.slice(3)) === 0\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\tpreviousChunk = buf;\r\n\t\t};\r\n\r\n\t\tsocket.prependListener('close', onSocketClose);\r\n\t\tsocket.on('data', onData);\r\n\r\n\t\trequest.on('close', () => {\r\n\t\t\tsocket.removeListener('close', onSocketClose);\r\n\t\t\tsocket.removeListener('data', onData);\r\n\t\t});\r\n\t});\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9ub2RlX21vZHVsZXMvbm9kZS1mZXRjaC9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDNkI7QUFDRTtBQUNGO0FBQ3FDO0FBQy9CO0FBQ25DO0FBQ2lEO0FBQ2pEO0FBQytDO0FBQ1Y7QUFDZ0I7QUFDTztBQUNUO0FBQ0E7QUFDRDtBQUNJO0FBQ1k7QUFDQTtBQVF0QztBQUM1QjtBQUNrRjtBQUNkO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsNENBQTRDO0FBQ3pELGFBQWEsR0FBRztBQUNoQixhQUFhO0FBQ2I7QUFDZTtBQUNmO0FBQ0E7QUFDQSxzQkFBc0IsbURBQU87QUFDN0IsU0FBUyxvQkFBb0IsRUFBRSxrRUFBcUI7QUFDcEQ7QUFDQSxpREFBaUQsSUFBSSxnQkFBZ0IscUNBQXFDO0FBQzFHO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiw4REFBZTtBQUMvQix3QkFBd0IscURBQVEsUUFBUSxVQUFVLCtCQUErQjtBQUNqRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELHVDQUFLLEdBQUcsc0NBQUk7QUFDOUQsU0FBUyxRQUFRO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiwrREFBVTtBQUMvQjtBQUNBLCtDQUErQyxpREFBZTtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYywrREFBVSxlQUFlLGFBQWEsa0JBQWtCLGNBQWM7QUFDcEY7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLDJEQUFjO0FBQ2pDO0FBQ0E7QUFDQSxPQUFPLGtFQUFVO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLCtEQUFVLHlEQUF5RCxTQUFTO0FBQzdGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsK0RBQVUsMkVBQTJFLFlBQVk7QUFDbEg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsK0RBQVUsaUNBQWlDLFlBQVk7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsbURBQU87QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsZ0RBQUs7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxrRUFBbUIsK0JBQStCLDZEQUFjO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1GQUFtRixpREFBZTtBQUNsRyxrQkFBa0IsK0RBQVU7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLGtGQUE2QjtBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLG1EQUFPO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsaUJBQWlCO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxjQUFjLHFEQUFJLGdCQUFnQixvREFBVztBQUM3QztBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIscURBQVE7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLG1EQUFpQjtBQUM1QixpQkFBaUIsbURBQWlCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxxREFBSSxPQUFPLG1EQUFpQjtBQUN2QztBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsbUJBQW1CLHFEQUFRO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IscURBQUksZ0JBQWdCLG9EQUFXO0FBQy9DO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxhQUFhLHFEQUFJLE9BQU8sb0RBQWtCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxPQUFPO0FBQ1AsYUFBYSxxREFBSSxPQUFPLHVEQUFxQjtBQUM3QztBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLG9CQUFvQixxREFBUTtBQUM1QjtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixxREFBUTtBQUM3QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHFEQUFJLE9BQU8sNkRBQTJCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxtQkFBbUIscURBQVE7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixxREFBUTtBQUMxQjtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsRUFBRSx3REFBYTtBQUNmLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsK0NBQU07QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxTQUFTO0FBQ2xCO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsK0NBQU07QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLLCtDQUFNO0FBQ1gsS0FBSywrQ0FBTTtBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxFQUFFO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYW5pc2gtYnVkZHkvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9ub2RlX21vZHVsZXMvbm9kZS1mZXRjaC9zcmMvaW5kZXguanM/MGE3YSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogSW5kZXguanNcclxuICpcclxuICogYSByZXF1ZXN0IEFQSSBjb21wYXRpYmxlIHdpdGggd2luZG93LmZldGNoXHJcbiAqXHJcbiAqIEFsbCBzcGVjIGFsZ29yaXRobSBzdGVwIG51bWJlcnMgYXJlIGJhc2VkIG9uIGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnL2NvbW1pdC1zbmFwc2hvdHMvYWU3MTY4MjJjYjNhNjE4NDMyMjZjZDA5MGVlZmM2NTg5NDQ2YzFkMi8uXHJcbiAqL1xyXG5cclxuaW1wb3J0IGh0dHAgZnJvbSAnbm9kZTpodHRwJztcclxuaW1wb3J0IGh0dHBzIGZyb20gJ25vZGU6aHR0cHMnO1xyXG5pbXBvcnQgemxpYiBmcm9tICdub2RlOnpsaWInO1xyXG5pbXBvcnQgU3RyZWFtLCB7UGFzc1Rocm91Z2gsIHBpcGVsaW5lIGFzIHB1bXB9IGZyb20gJ25vZGU6c3RyZWFtJztcclxuaW1wb3J0IHtCdWZmZXJ9IGZyb20gJ25vZGU6YnVmZmVyJztcclxuXHJcbmltcG9ydCBkYXRhVXJpVG9CdWZmZXIgZnJvbSAnZGF0YS11cmktdG8tYnVmZmVyJztcclxuXHJcbmltcG9ydCB7d3JpdGVUb1N0cmVhbSwgY2xvbmV9IGZyb20gJy4vYm9keS5qcyc7XHJcbmltcG9ydCBSZXNwb25zZSBmcm9tICcuL3Jlc3BvbnNlLmpzJztcclxuaW1wb3J0IEhlYWRlcnMsIHtmcm9tUmF3SGVhZGVyc30gZnJvbSAnLi9oZWFkZXJzLmpzJztcclxuaW1wb3J0IFJlcXVlc3QsIHtnZXROb2RlUmVxdWVzdE9wdGlvbnN9IGZyb20gJy4vcmVxdWVzdC5qcyc7XHJcbmltcG9ydCB7RmV0Y2hFcnJvcn0gZnJvbSAnLi9lcnJvcnMvZmV0Y2gtZXJyb3IuanMnO1xyXG5pbXBvcnQge0Fib3J0RXJyb3J9IGZyb20gJy4vZXJyb3JzL2Fib3J0LWVycm9yLmpzJztcclxuaW1wb3J0IHtpc1JlZGlyZWN0fSBmcm9tICcuL3V0aWxzL2lzLXJlZGlyZWN0LmpzJztcclxuaW1wb3J0IHtGb3JtRGF0YX0gZnJvbSAnZm9ybWRhdGEtcG9seWZpbGwvZXNtLm1pbi5qcyc7XHJcbmltcG9ydCB7aXNEb21haW5PclN1YmRvbWFpbiwgaXNTYW1lUHJvdG9jb2x9IGZyb20gJy4vdXRpbHMvaXMuanMnO1xyXG5pbXBvcnQge3BhcnNlUmVmZXJyZXJQb2xpY3lGcm9tSGVhZGVyfSBmcm9tICcuL3V0aWxzL3JlZmVycmVyLmpzJztcclxuaW1wb3J0IHtcclxuXHRCbG9iLFxyXG5cdEZpbGUsXHJcblx0ZmlsZUZyb21TeW5jLFxyXG5cdGZpbGVGcm9tLFxyXG5cdGJsb2JGcm9tU3luYyxcclxuXHRibG9iRnJvbVxyXG59IGZyb20gJ2ZldGNoLWJsb2IvZnJvbS5qcyc7XHJcblxyXG5leHBvcnQge0Zvcm1EYXRhLCBIZWFkZXJzLCBSZXF1ZXN0LCBSZXNwb25zZSwgRmV0Y2hFcnJvciwgQWJvcnRFcnJvciwgaXNSZWRpcmVjdH07XHJcbmV4cG9ydCB7QmxvYiwgRmlsZSwgZmlsZUZyb21TeW5jLCBmaWxlRnJvbSwgYmxvYkZyb21TeW5jLCBibG9iRnJvbX07XHJcblxyXG5jb25zdCBzdXBwb3J0ZWRTY2hlbWFzID0gbmV3IFNldChbJ2RhdGE6JywgJ2h0dHA6JywgJ2h0dHBzOiddKTtcclxuXHJcbi8qKlxyXG4gKiBGZXRjaCBmdW5jdGlvblxyXG4gKlxyXG4gKiBAcGFyYW0gICB7c3RyaW5nIHwgVVJMIHwgaW1wb3J0KCcuL3JlcXVlc3QnKS5kZWZhdWx0fSB1cmwgLSBBYnNvbHV0ZSB1cmwgb3IgUmVxdWVzdCBpbnN0YW5jZVxyXG4gKiBAcGFyYW0gICB7Kn0gW29wdGlvbnNfXSAtIEZldGNoIG9wdGlvbnNcclxuICogQHJldHVybiAge1Byb21pc2U8aW1wb3J0KCcuL3Jlc3BvbnNlJykuZGVmYXVsdD59XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBmZXRjaCh1cmwsIG9wdGlvbnNfKSB7XHJcblx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuXHRcdC8vIEJ1aWxkIHJlcXVlc3Qgb2JqZWN0XHJcblx0XHRjb25zdCByZXF1ZXN0ID0gbmV3IFJlcXVlc3QodXJsLCBvcHRpb25zXyk7XHJcblx0XHRjb25zdCB7cGFyc2VkVVJMLCBvcHRpb25zfSA9IGdldE5vZGVSZXF1ZXN0T3B0aW9ucyhyZXF1ZXN0KTtcclxuXHRcdGlmICghc3VwcG9ydGVkU2NoZW1hcy5oYXMocGFyc2VkVVJMLnByb3RvY29sKSkge1xyXG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKGBub2RlLWZldGNoIGNhbm5vdCBsb2FkICR7dXJsfS4gVVJMIHNjaGVtZSBcIiR7cGFyc2VkVVJMLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpfVwiIGlzIG5vdCBzdXBwb3J0ZWQuYCk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHBhcnNlZFVSTC5wcm90b2NvbCA9PT0gJ2RhdGE6Jykge1xyXG5cdFx0XHRjb25zdCBkYXRhID0gZGF0YVVyaVRvQnVmZmVyKHJlcXVlc3QudXJsKTtcclxuXHRcdFx0Y29uc3QgcmVzcG9uc2UgPSBuZXcgUmVzcG9uc2UoZGF0YSwge2hlYWRlcnM6IHsnQ29udGVudC1UeXBlJzogZGF0YS50eXBlRnVsbH19KTtcclxuXHRcdFx0cmVzb2x2ZShyZXNwb25zZSk7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBXcmFwIGh0dHAucmVxdWVzdCBpbnRvIGZldGNoXHJcblx0XHRjb25zdCBzZW5kID0gKHBhcnNlZFVSTC5wcm90b2NvbCA9PT0gJ2h0dHBzOicgPyBodHRwcyA6IGh0dHApLnJlcXVlc3Q7XHJcblx0XHRjb25zdCB7c2lnbmFsfSA9IHJlcXVlc3Q7XHJcblx0XHRsZXQgcmVzcG9uc2UgPSBudWxsO1xyXG5cclxuXHRcdGNvbnN0IGFib3J0ID0gKCkgPT4ge1xyXG5cdFx0XHRjb25zdCBlcnJvciA9IG5ldyBBYm9ydEVycm9yKCdUaGUgb3BlcmF0aW9uIHdhcyBhYm9ydGVkLicpO1xyXG5cdFx0XHRyZWplY3QoZXJyb3IpO1xyXG5cdFx0XHRpZiAocmVxdWVzdC5ib2R5ICYmIHJlcXVlc3QuYm9keSBpbnN0YW5jZW9mIFN0cmVhbS5SZWFkYWJsZSkge1xyXG5cdFx0XHRcdHJlcXVlc3QuYm9keS5kZXN0cm95KGVycm9yKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCFyZXNwb25zZSB8fCAhcmVzcG9uc2UuYm9keSkge1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmVzcG9uc2UuYm9keS5lbWl0KCdlcnJvcicsIGVycm9yKTtcclxuXHRcdH07XHJcblxyXG5cdFx0aWYgKHNpZ25hbCAmJiBzaWduYWwuYWJvcnRlZCkge1xyXG5cdFx0XHRhYm9ydCgpO1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3QgYWJvcnRBbmRGaW5hbGl6ZSA9ICgpID0+IHtcclxuXHRcdFx0YWJvcnQoKTtcclxuXHRcdFx0ZmluYWxpemUoKTtcclxuXHRcdH07XHJcblxyXG5cdFx0Ly8gU2VuZCByZXF1ZXN0XHJcblx0XHRjb25zdCByZXF1ZXN0XyA9IHNlbmQocGFyc2VkVVJMLnRvU3RyaW5nKCksIG9wdGlvbnMpO1xyXG5cclxuXHRcdGlmIChzaWduYWwpIHtcclxuXHRcdFx0c2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgYWJvcnRBbmRGaW5hbGl6ZSk7XHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3QgZmluYWxpemUgPSAoKSA9PiB7XHJcblx0XHRcdHJlcXVlc3RfLmFib3J0KCk7XHJcblx0XHRcdGlmIChzaWduYWwpIHtcclxuXHRcdFx0XHRzaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBhYm9ydEFuZEZpbmFsaXplKTtcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHJcblx0XHRyZXF1ZXN0Xy5vbignZXJyb3InLCBlcnJvciA9PiB7XHJcblx0XHRcdHJlamVjdChuZXcgRmV0Y2hFcnJvcihgcmVxdWVzdCB0byAke3JlcXVlc3QudXJsfSBmYWlsZWQsIHJlYXNvbjogJHtlcnJvci5tZXNzYWdlfWAsICdzeXN0ZW0nLCBlcnJvcikpO1xyXG5cdFx0XHRmaW5hbGl6ZSgpO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0Zml4UmVzcG9uc2VDaHVua2VkVHJhbnNmZXJCYWRFbmRpbmcocmVxdWVzdF8sIGVycm9yID0+IHtcclxuXHRcdFx0aWYgKHJlc3BvbnNlICYmIHJlc3BvbnNlLmJvZHkpIHtcclxuXHRcdFx0XHRyZXNwb25zZS5ib2R5LmRlc3Ryb3koZXJyb3IpO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHJcblx0XHQvKiBjOCBpZ25vcmUgbmV4dCAxOCAqL1xyXG5cdFx0aWYgKHByb2Nlc3MudmVyc2lvbiA8ICd2MTQnKSB7XHJcblx0XHRcdC8vIEJlZm9yZSBOb2RlLmpzIDE0LCBwaXBlbGluZSgpIGRvZXMgbm90IGZ1bGx5IHN1cHBvcnQgYXN5bmMgaXRlcmF0b3JzIGFuZCBkb2VzIG5vdCBhbHdheXNcclxuXHRcdFx0Ly8gcHJvcGVybHkgaGFuZGxlIHdoZW4gdGhlIHNvY2tldCBjbG9zZS9lbmQgZXZlbnRzIGFyZSBvdXQgb2Ygb3JkZXIuXHJcblx0XHRcdHJlcXVlc3RfLm9uKCdzb2NrZXQnLCBzID0+IHtcclxuXHRcdFx0XHRsZXQgZW5kZWRXaXRoRXZlbnRzQ291bnQ7XHJcblx0XHRcdFx0cy5wcmVwZW5kTGlzdGVuZXIoJ2VuZCcsICgpID0+IHtcclxuXHRcdFx0XHRcdGVuZGVkV2l0aEV2ZW50c0NvdW50ID0gcy5fZXZlbnRzQ291bnQ7XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdFx0cy5wcmVwZW5kTGlzdGVuZXIoJ2Nsb3NlJywgaGFkRXJyb3IgPT4ge1xyXG5cdFx0XHRcdFx0Ly8gaWYgZW5kIGhhcHBlbmVkIGJlZm9yZSBjbG9zZSBidXQgdGhlIHNvY2tldCBkaWRuJ3QgZW1pdCBhbiBlcnJvciwgZG8gaXQgbm93XHJcblx0XHRcdFx0XHRpZiAocmVzcG9uc2UgJiYgZW5kZWRXaXRoRXZlbnRzQ291bnQgPCBzLl9ldmVudHNDb3VudCAmJiAhaGFkRXJyb3IpIHtcclxuXHRcdFx0XHRcdFx0Y29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoJ1ByZW1hdHVyZSBjbG9zZScpO1xyXG5cdFx0XHRcdFx0XHRlcnJvci5jb2RlID0gJ0VSUl9TVFJFQU1fUFJFTUFUVVJFX0NMT1NFJztcclxuXHRcdFx0XHRcdFx0cmVzcG9uc2UuYm9keS5lbWl0KCdlcnJvcicsIGVycm9yKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmVxdWVzdF8ub24oJ3Jlc3BvbnNlJywgcmVzcG9uc2VfID0+IHtcclxuXHRcdFx0cmVxdWVzdF8uc2V0VGltZW91dCgwKTtcclxuXHRcdFx0Y29uc3QgaGVhZGVycyA9IGZyb21SYXdIZWFkZXJzKHJlc3BvbnNlXy5yYXdIZWFkZXJzKTtcclxuXHJcblx0XHRcdC8vIEhUVFAgZmV0Y2ggc3RlcCA1XHJcblx0XHRcdGlmIChpc1JlZGlyZWN0KHJlc3BvbnNlXy5zdGF0dXNDb2RlKSkge1xyXG5cdFx0XHRcdC8vIEhUVFAgZmV0Y2ggc3RlcCA1LjJcclxuXHRcdFx0XHRjb25zdCBsb2NhdGlvbiA9IGhlYWRlcnMuZ2V0KCdMb2NhdGlvbicpO1xyXG5cclxuXHRcdFx0XHQvLyBIVFRQIGZldGNoIHN0ZXAgNS4zXHJcblx0XHRcdFx0bGV0IGxvY2F0aW9uVVJMID0gbnVsbDtcclxuXHRcdFx0XHR0cnkge1xyXG5cdFx0XHRcdFx0bG9jYXRpb25VUkwgPSBsb2NhdGlvbiA9PT0gbnVsbCA/IG51bGwgOiBuZXcgVVJMKGxvY2F0aW9uLCByZXF1ZXN0LnVybCk7XHJcblx0XHRcdFx0fSBjYXRjaCB7XHJcblx0XHRcdFx0XHQvLyBlcnJvciBoZXJlIGNhbiBvbmx5IGJlIGludmFsaWQgVVJMIGluIExvY2F0aW9uOiBoZWFkZXJcclxuXHRcdFx0XHRcdC8vIGRvIG5vdCB0aHJvdyB3aGVuIG9wdGlvbnMucmVkaXJlY3QgPT0gbWFudWFsXHJcblx0XHRcdFx0XHQvLyBsZXQgdGhlIHVzZXIgZXh0cmFjdCB0aGUgZXJyb3JuZW91cyByZWRpcmVjdCBVUkxcclxuXHRcdFx0XHRcdGlmIChyZXF1ZXN0LnJlZGlyZWN0ICE9PSAnbWFudWFsJykge1xyXG5cdFx0XHRcdFx0XHRyZWplY3QobmV3IEZldGNoRXJyb3IoYHVyaSByZXF1ZXN0ZWQgcmVzcG9uZHMgd2l0aCBhbiBpbnZhbGlkIHJlZGlyZWN0IFVSTDogJHtsb2NhdGlvbn1gLCAnaW52YWxpZC1yZWRpcmVjdCcpKTtcclxuXHRcdFx0XHRcdFx0ZmluYWxpemUoKTtcclxuXHRcdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gSFRUUCBmZXRjaCBzdGVwIDUuNVxyXG5cdFx0XHRcdHN3aXRjaCAocmVxdWVzdC5yZWRpcmVjdCkge1xyXG5cdFx0XHRcdFx0Y2FzZSAnZXJyb3InOlxyXG5cdFx0XHRcdFx0XHRyZWplY3QobmV3IEZldGNoRXJyb3IoYHVyaSByZXF1ZXN0ZWQgcmVzcG9uZHMgd2l0aCBhIHJlZGlyZWN0LCByZWRpcmVjdCBtb2RlIGlzIHNldCB0byBlcnJvcjogJHtyZXF1ZXN0LnVybH1gLCAnbm8tcmVkaXJlY3QnKSk7XHJcblx0XHRcdFx0XHRcdGZpbmFsaXplKCk7XHJcblx0XHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHRcdGNhc2UgJ21hbnVhbCc6XHJcblx0XHRcdFx0XHRcdC8vIE5vdGhpbmcgdG8gZG9cclxuXHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRjYXNlICdmb2xsb3cnOiB7XHJcblx0XHRcdFx0XHRcdC8vIEhUVFAtcmVkaXJlY3QgZmV0Y2ggc3RlcCAyXHJcblx0XHRcdFx0XHRcdGlmIChsb2NhdGlvblVSTCA9PT0gbnVsbCkge1xyXG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBIVFRQLXJlZGlyZWN0IGZldGNoIHN0ZXAgNVxyXG5cdFx0XHRcdFx0XHRpZiAocmVxdWVzdC5jb3VudGVyID49IHJlcXVlc3QuZm9sbG93KSB7XHJcblx0XHRcdFx0XHRcdFx0cmVqZWN0KG5ldyBGZXRjaEVycm9yKGBtYXhpbXVtIHJlZGlyZWN0IHJlYWNoZWQgYXQ6ICR7cmVxdWVzdC51cmx9YCwgJ21heC1yZWRpcmVjdCcpKTtcclxuXHRcdFx0XHRcdFx0XHRmaW5hbGl6ZSgpO1xyXG5cdFx0XHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0Ly8gSFRUUC1yZWRpcmVjdCBmZXRjaCBzdGVwIDYgKGNvdW50ZXIgaW5jcmVtZW50KVxyXG5cdFx0XHRcdFx0XHQvLyBDcmVhdGUgYSBuZXcgUmVxdWVzdCBvYmplY3QuXHJcblx0XHRcdFx0XHRcdGNvbnN0IHJlcXVlc3RPcHRpb25zID0ge1xyXG5cdFx0XHRcdFx0XHRcdGhlYWRlcnM6IG5ldyBIZWFkZXJzKHJlcXVlc3QuaGVhZGVycyksXHJcblx0XHRcdFx0XHRcdFx0Zm9sbG93OiByZXF1ZXN0LmZvbGxvdyxcclxuXHRcdFx0XHRcdFx0XHRjb3VudGVyOiByZXF1ZXN0LmNvdW50ZXIgKyAxLFxyXG5cdFx0XHRcdFx0XHRcdGFnZW50OiByZXF1ZXN0LmFnZW50LFxyXG5cdFx0XHRcdFx0XHRcdGNvbXByZXNzOiByZXF1ZXN0LmNvbXByZXNzLFxyXG5cdFx0XHRcdFx0XHRcdG1ldGhvZDogcmVxdWVzdC5tZXRob2QsXHJcblx0XHRcdFx0XHRcdFx0Ym9keTogY2xvbmUocmVxdWVzdCksXHJcblx0XHRcdFx0XHRcdFx0c2lnbmFsOiByZXF1ZXN0LnNpZ25hbCxcclxuXHRcdFx0XHRcdFx0XHRzaXplOiByZXF1ZXN0LnNpemUsXHJcblx0XHRcdFx0XHRcdFx0cmVmZXJyZXI6IHJlcXVlc3QucmVmZXJyZXIsXHJcblx0XHRcdFx0XHRcdFx0cmVmZXJyZXJQb2xpY3k6IHJlcXVlc3QucmVmZXJyZXJQb2xpY3lcclxuXHRcdFx0XHRcdFx0fTtcclxuXHJcblx0XHRcdFx0XHRcdC8vIHdoZW4gZm9yd2FyZGluZyBzZW5zaXRpdmUgaGVhZGVycyBsaWtlIFwiQXV0aG9yaXphdGlvblwiLFxyXG5cdFx0XHRcdFx0XHQvLyBcIldXVy1BdXRoZW50aWNhdGVcIiwgYW5kIFwiQ29va2llXCIgdG8gdW50cnVzdGVkIHRhcmdldHMsXHJcblx0XHRcdFx0XHRcdC8vIGhlYWRlcnMgd2lsbCBiZSBpZ25vcmVkIHdoZW4gZm9sbG93aW5nIGEgcmVkaXJlY3QgdG8gYSBkb21haW5cclxuXHRcdFx0XHRcdFx0Ly8gdGhhdCBpcyBub3QgYSBzdWJkb21haW4gbWF0Y2ggb3IgZXhhY3QgbWF0Y2ggb2YgdGhlIGluaXRpYWwgZG9tYWluLlxyXG5cdFx0XHRcdFx0XHQvLyBGb3IgZXhhbXBsZSwgYSByZWRpcmVjdCBmcm9tIFwiZm9vLmNvbVwiIHRvIGVpdGhlciBcImZvby5jb21cIiBvciBcInN1Yi5mb28uY29tXCJcclxuXHRcdFx0XHRcdFx0Ly8gd2lsbCBmb3J3YXJkIHRoZSBzZW5zaXRpdmUgaGVhZGVycywgYnV0IGEgcmVkaXJlY3QgdG8gXCJiYXIuY29tXCIgd2lsbCBub3QuXHJcblx0XHRcdFx0XHRcdC8vIGhlYWRlcnMgd2lsbCBhbHNvIGJlIGlnbm9yZWQgd2hlbiBmb2xsb3dpbmcgYSByZWRpcmVjdCB0byBhIGRvbWFpbiB1c2luZ1xyXG5cdFx0XHRcdFx0XHQvLyBhIGRpZmZlcmVudCBwcm90b2NvbC4gRm9yIGV4YW1wbGUsIGEgcmVkaXJlY3QgZnJvbSBcImh0dHBzOi8vZm9vLmNvbVwiIHRvIFwiaHR0cDovL2Zvby5jb21cIlxyXG5cdFx0XHRcdFx0XHQvLyB3aWxsIG5vdCBmb3J3YXJkIHRoZSBzZW5zaXRpdmUgaGVhZGVyc1xyXG5cdFx0XHRcdFx0XHRpZiAoIWlzRG9tYWluT3JTdWJkb21haW4ocmVxdWVzdC51cmwsIGxvY2F0aW9uVVJMKSB8fCAhaXNTYW1lUHJvdG9jb2wocmVxdWVzdC51cmwsIGxvY2F0aW9uVVJMKSkge1xyXG5cdFx0XHRcdFx0XHRcdGZvciAoY29uc3QgbmFtZSBvZiBbJ2F1dGhvcml6YXRpb24nLCAnd3d3LWF1dGhlbnRpY2F0ZScsICdjb29raWUnLCAnY29va2llMiddKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRyZXF1ZXN0T3B0aW9ucy5oZWFkZXJzLmRlbGV0ZShuYW1lKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdC8vIEhUVFAtcmVkaXJlY3QgZmV0Y2ggc3RlcCA5XHJcblx0XHRcdFx0XHRcdGlmIChyZXNwb25zZV8uc3RhdHVzQ29kZSAhPT0gMzAzICYmIHJlcXVlc3QuYm9keSAmJiBvcHRpb25zXy5ib2R5IGluc3RhbmNlb2YgU3RyZWFtLlJlYWRhYmxlKSB7XHJcblx0XHRcdFx0XHRcdFx0cmVqZWN0KG5ldyBGZXRjaEVycm9yKCdDYW5ub3QgZm9sbG93IHJlZGlyZWN0IHdpdGggYm9keSBiZWluZyBhIHJlYWRhYmxlIHN0cmVhbScsICd1bnN1cHBvcnRlZC1yZWRpcmVjdCcpKTtcclxuXHRcdFx0XHRcdFx0XHRmaW5hbGl6ZSgpO1xyXG5cdFx0XHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0Ly8gSFRUUC1yZWRpcmVjdCBmZXRjaCBzdGVwIDExXHJcblx0XHRcdFx0XHRcdGlmIChyZXNwb25zZV8uc3RhdHVzQ29kZSA9PT0gMzAzIHx8ICgocmVzcG9uc2VfLnN0YXR1c0NvZGUgPT09IDMwMSB8fCByZXNwb25zZV8uc3RhdHVzQ29kZSA9PT0gMzAyKSAmJiByZXF1ZXN0Lm1ldGhvZCA9PT0gJ1BPU1QnKSkge1xyXG5cdFx0XHRcdFx0XHRcdHJlcXVlc3RPcHRpb25zLm1ldGhvZCA9ICdHRVQnO1xyXG5cdFx0XHRcdFx0XHRcdHJlcXVlc3RPcHRpb25zLmJvZHkgPSB1bmRlZmluZWQ7XHJcblx0XHRcdFx0XHRcdFx0cmVxdWVzdE9wdGlvbnMuaGVhZGVycy5kZWxldGUoJ2NvbnRlbnQtbGVuZ3RoJyk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdC8vIEhUVFAtcmVkaXJlY3QgZmV0Y2ggc3RlcCAxNFxyXG5cdFx0XHRcdFx0XHRjb25zdCByZXNwb25zZVJlZmVycmVyUG9saWN5ID0gcGFyc2VSZWZlcnJlclBvbGljeUZyb21IZWFkZXIoaGVhZGVycyk7XHJcblx0XHRcdFx0XHRcdGlmIChyZXNwb25zZVJlZmVycmVyUG9saWN5KSB7XHJcblx0XHRcdFx0XHRcdFx0cmVxdWVzdE9wdGlvbnMucmVmZXJyZXJQb2xpY3kgPSByZXNwb25zZVJlZmVycmVyUG9saWN5O1xyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBIVFRQLXJlZGlyZWN0IGZldGNoIHN0ZXAgMTVcclxuXHRcdFx0XHRcdFx0cmVzb2x2ZShmZXRjaChuZXcgUmVxdWVzdChsb2NhdGlvblVSTCwgcmVxdWVzdE9wdGlvbnMpKSk7XHJcblx0XHRcdFx0XHRcdGZpbmFsaXplKCk7XHJcblx0XHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRkZWZhdWx0OlxyXG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVqZWN0KG5ldyBUeXBlRXJyb3IoYFJlZGlyZWN0IG9wdGlvbiAnJHtyZXF1ZXN0LnJlZGlyZWN0fScgaXMgbm90IGEgdmFsaWQgdmFsdWUgb2YgUmVxdWVzdFJlZGlyZWN0YCkpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gUHJlcGFyZSByZXNwb25zZVxyXG5cdFx0XHRpZiAoc2lnbmFsKSB7XHJcblx0XHRcdFx0cmVzcG9uc2VfLm9uY2UoJ2VuZCcsICgpID0+IHtcclxuXHRcdFx0XHRcdHNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKCdhYm9ydCcsIGFib3J0QW5kRmluYWxpemUpO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRsZXQgYm9keSA9IHB1bXAocmVzcG9uc2VfLCBuZXcgUGFzc1Rocm91Z2goKSwgZXJyb3IgPT4ge1xyXG5cdFx0XHRcdGlmIChlcnJvcikge1xyXG5cdFx0XHRcdFx0cmVqZWN0KGVycm9yKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0XHQvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL3B1bGwvMjkzNzZcclxuXHRcdFx0LyogYzggaWdub3JlIG5leHQgMyAqL1xyXG5cdFx0XHRpZiAocHJvY2Vzcy52ZXJzaW9uIDwgJ3YxMi4xMCcpIHtcclxuXHRcdFx0XHRyZXNwb25zZV8ub24oJ2Fib3J0ZWQnLCBhYm9ydEFuZEZpbmFsaXplKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Y29uc3QgcmVzcG9uc2VPcHRpb25zID0ge1xyXG5cdFx0XHRcdHVybDogcmVxdWVzdC51cmwsXHJcblx0XHRcdFx0c3RhdHVzOiByZXNwb25zZV8uc3RhdHVzQ29kZSxcclxuXHRcdFx0XHRzdGF0dXNUZXh0OiByZXNwb25zZV8uc3RhdHVzTWVzc2FnZSxcclxuXHRcdFx0XHRoZWFkZXJzLFxyXG5cdFx0XHRcdHNpemU6IHJlcXVlc3Quc2l6ZSxcclxuXHRcdFx0XHRjb3VudGVyOiByZXF1ZXN0LmNvdW50ZXIsXHJcblx0XHRcdFx0aGlnaFdhdGVyTWFyazogcmVxdWVzdC5oaWdoV2F0ZXJNYXJrXHJcblx0XHRcdH07XHJcblxyXG5cdFx0XHQvLyBIVFRQLW5ldHdvcmsgZmV0Y2ggc3RlcCAxMi4xLjEuM1xyXG5cdFx0XHRjb25zdCBjb2RpbmdzID0gaGVhZGVycy5nZXQoJ0NvbnRlbnQtRW5jb2RpbmcnKTtcclxuXHJcblx0XHRcdC8vIEhUVFAtbmV0d29yayBmZXRjaCBzdGVwIDEyLjEuMS40OiBoYW5kbGUgY29udGVudCBjb2RpbmdzXHJcblxyXG5cdFx0XHQvLyBpbiBmb2xsb3dpbmcgc2NlbmFyaW9zIHdlIGlnbm9yZSBjb21wcmVzc2lvbiBzdXBwb3J0XHJcblx0XHRcdC8vIDEuIGNvbXByZXNzaW9uIHN1cHBvcnQgaXMgZGlzYWJsZWRcclxuXHRcdFx0Ly8gMi4gSEVBRCByZXF1ZXN0XHJcblx0XHRcdC8vIDMuIG5vIENvbnRlbnQtRW5jb2RpbmcgaGVhZGVyXHJcblx0XHRcdC8vIDQuIG5vIGNvbnRlbnQgcmVzcG9uc2UgKDIwNClcclxuXHRcdFx0Ly8gNS4gY29udGVudCBub3QgbW9kaWZpZWQgcmVzcG9uc2UgKDMwNClcclxuXHRcdFx0aWYgKCFyZXF1ZXN0LmNvbXByZXNzIHx8IHJlcXVlc3QubWV0aG9kID09PSAnSEVBRCcgfHwgY29kaW5ncyA9PT0gbnVsbCB8fCByZXNwb25zZV8uc3RhdHVzQ29kZSA9PT0gMjA0IHx8IHJlc3BvbnNlXy5zdGF0dXNDb2RlID09PSAzMDQpIHtcclxuXHRcdFx0XHRyZXNwb25zZSA9IG5ldyBSZXNwb25zZShib2R5LCByZXNwb25zZU9wdGlvbnMpO1xyXG5cdFx0XHRcdHJlc29sdmUocmVzcG9uc2UpO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gRm9yIE5vZGUgdjYrXHJcblx0XHRcdC8vIEJlIGxlc3Mgc3RyaWN0IHdoZW4gZGVjb2RpbmcgY29tcHJlc3NlZCByZXNwb25zZXMsIHNpbmNlIHNvbWV0aW1lc1xyXG5cdFx0XHQvLyBzZXJ2ZXJzIHNlbmQgc2xpZ2h0bHkgaW52YWxpZCByZXNwb25zZXMgdGhhdCBhcmUgc3RpbGwgYWNjZXB0ZWRcclxuXHRcdFx0Ly8gYnkgY29tbW9uIGJyb3dzZXJzLlxyXG5cdFx0XHQvLyBBbHdheXMgdXNpbmcgWl9TWU5DX0ZMVVNIIGlzIHdoYXQgY1VSTCBkb2VzLlxyXG5cdFx0XHRjb25zdCB6bGliT3B0aW9ucyA9IHtcclxuXHRcdFx0XHRmbHVzaDogemxpYi5aX1NZTkNfRkxVU0gsXHJcblx0XHRcdFx0ZmluaXNoRmx1c2g6IHpsaWIuWl9TWU5DX0ZMVVNIXHJcblx0XHRcdH07XHJcblxyXG5cdFx0XHQvLyBGb3IgZ3ppcFxyXG5cdFx0XHRpZiAoY29kaW5ncyA9PT0gJ2d6aXAnIHx8IGNvZGluZ3MgPT09ICd4LWd6aXAnKSB7XHJcblx0XHRcdFx0Ym9keSA9IHB1bXAoYm9keSwgemxpYi5jcmVhdGVHdW56aXAoemxpYk9wdGlvbnMpLCBlcnJvciA9PiB7XHJcblx0XHRcdFx0XHRpZiAoZXJyb3IpIHtcclxuXHRcdFx0XHRcdFx0cmVqZWN0KGVycm9yKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0XHRyZXNwb25zZSA9IG5ldyBSZXNwb25zZShib2R5LCByZXNwb25zZU9wdGlvbnMpO1xyXG5cdFx0XHRcdHJlc29sdmUocmVzcG9uc2UpO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gRm9yIGRlZmxhdGVcclxuXHRcdFx0aWYgKGNvZGluZ3MgPT09ICdkZWZsYXRlJyB8fCBjb2RpbmdzID09PSAneC1kZWZsYXRlJykge1xyXG5cdFx0XHRcdC8vIEhhbmRsZSB0aGUgaW5mYW1vdXMgcmF3IGRlZmxhdGUgcmVzcG9uc2UgZnJvbSBvbGQgc2VydmVyc1xyXG5cdFx0XHRcdC8vIGEgaGFjayBmb3Igb2xkIElJUyBhbmQgQXBhY2hlIHNlcnZlcnNcclxuXHRcdFx0XHRjb25zdCByYXcgPSBwdW1wKHJlc3BvbnNlXywgbmV3IFBhc3NUaHJvdWdoKCksIGVycm9yID0+IHtcclxuXHRcdFx0XHRcdGlmIChlcnJvcikge1xyXG5cdFx0XHRcdFx0XHRyZWplY3QoZXJyb3IpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHRcdHJhdy5vbmNlKCdkYXRhJywgY2h1bmsgPT4ge1xyXG5cdFx0XHRcdFx0Ly8gU2VlIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzc1MTk4MjhcclxuXHRcdFx0XHRcdGlmICgoY2h1bmtbMF0gJiAweDBGKSA9PT0gMHgwOCkge1xyXG5cdFx0XHRcdFx0XHRib2R5ID0gcHVtcChib2R5LCB6bGliLmNyZWF0ZUluZmxhdGUoKSwgZXJyb3IgPT4ge1xyXG5cdFx0XHRcdFx0XHRcdGlmIChlcnJvcikge1xyXG5cdFx0XHRcdFx0XHRcdFx0cmVqZWN0KGVycm9yKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0Ym9keSA9IHB1bXAoYm9keSwgemxpYi5jcmVhdGVJbmZsYXRlUmF3KCksIGVycm9yID0+IHtcclxuXHRcdFx0XHRcdFx0XHRpZiAoZXJyb3IpIHtcclxuXHRcdFx0XHRcdFx0XHRcdHJlamVjdChlcnJvcik7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRyZXNwb25zZSA9IG5ldyBSZXNwb25zZShib2R5LCByZXNwb25zZU9wdGlvbnMpO1xyXG5cdFx0XHRcdFx0cmVzb2x2ZShyZXNwb25zZSk7XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdFx0cmF3Lm9uY2UoJ2VuZCcsICgpID0+IHtcclxuXHRcdFx0XHRcdC8vIFNvbWUgb2xkIElJUyBzZXJ2ZXJzIHJldHVybiB6ZXJvLWxlbmd0aCBPSyBkZWZsYXRlIHJlc3BvbnNlcywgc29cclxuXHRcdFx0XHRcdC8vICdkYXRhJyBpcyBuZXZlciBlbWl0dGVkLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL25vZGUtZmV0Y2gvbm9kZS1mZXRjaC9wdWxsLzkwM1xyXG5cdFx0XHRcdFx0aWYgKCFyZXNwb25zZSkge1xyXG5cdFx0XHRcdFx0XHRyZXNwb25zZSA9IG5ldyBSZXNwb25zZShib2R5LCByZXNwb25zZU9wdGlvbnMpO1xyXG5cdFx0XHRcdFx0XHRyZXNvbHZlKHJlc3BvbnNlKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIEZvciBiclxyXG5cdFx0XHRpZiAoY29kaW5ncyA9PT0gJ2JyJykge1xyXG5cdFx0XHRcdGJvZHkgPSBwdW1wKGJvZHksIHpsaWIuY3JlYXRlQnJvdGxpRGVjb21wcmVzcygpLCBlcnJvciA9PiB7XHJcblx0XHRcdFx0XHRpZiAoZXJyb3IpIHtcclxuXHRcdFx0XHRcdFx0cmVqZWN0KGVycm9yKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0XHRyZXNwb25zZSA9IG5ldyBSZXNwb25zZShib2R5LCByZXNwb25zZU9wdGlvbnMpO1xyXG5cdFx0XHRcdHJlc29sdmUocmVzcG9uc2UpO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gT3RoZXJ3aXNlLCB1c2UgcmVzcG9uc2UgYXMtaXNcclxuXHRcdFx0cmVzcG9uc2UgPSBuZXcgUmVzcG9uc2UoYm9keSwgcmVzcG9uc2VPcHRpb25zKTtcclxuXHRcdFx0cmVzb2x2ZShyZXNwb25zZSk7XHJcblx0XHR9KTtcclxuXHJcblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJvbWlzZS9wcmVmZXItYXdhaXQtdG8tdGhlblxyXG5cdFx0d3JpdGVUb1N0cmVhbShyZXF1ZXN0XywgcmVxdWVzdCkuY2F0Y2gocmVqZWN0KTtcclxuXHR9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gZml4UmVzcG9uc2VDaHVua2VkVHJhbnNmZXJCYWRFbmRpbmcocmVxdWVzdCwgZXJyb3JDYWxsYmFjaykge1xyXG5cdGNvbnN0IExBU1RfQ0hVTksgPSBCdWZmZXIuZnJvbSgnMFxcclxcblxcclxcbicpO1xyXG5cclxuXHRsZXQgaXNDaHVua2VkVHJhbnNmZXIgPSBmYWxzZTtcclxuXHRsZXQgcHJvcGVyTGFzdENodW5rUmVjZWl2ZWQgPSBmYWxzZTtcclxuXHRsZXQgcHJldmlvdXNDaHVuaztcclxuXHJcblx0cmVxdWVzdC5vbigncmVzcG9uc2UnLCByZXNwb25zZSA9PiB7XHJcblx0XHRjb25zdCB7aGVhZGVyc30gPSByZXNwb25zZTtcclxuXHRcdGlzQ2h1bmtlZFRyYW5zZmVyID0gaGVhZGVyc1sndHJhbnNmZXItZW5jb2RpbmcnXSA9PT0gJ2NodW5rZWQnICYmICFoZWFkZXJzWydjb250ZW50LWxlbmd0aCddO1xyXG5cdH0pO1xyXG5cclxuXHRyZXF1ZXN0Lm9uKCdzb2NrZXQnLCBzb2NrZXQgPT4ge1xyXG5cdFx0Y29uc3Qgb25Tb2NrZXRDbG9zZSA9ICgpID0+IHtcclxuXHRcdFx0aWYgKGlzQ2h1bmtlZFRyYW5zZmVyICYmICFwcm9wZXJMYXN0Q2h1bmtSZWNlaXZlZCkge1xyXG5cdFx0XHRcdGNvbnN0IGVycm9yID0gbmV3IEVycm9yKCdQcmVtYXR1cmUgY2xvc2UnKTtcclxuXHRcdFx0XHRlcnJvci5jb2RlID0gJ0VSUl9TVFJFQU1fUFJFTUFUVVJFX0NMT1NFJztcclxuXHRcdFx0XHRlcnJvckNhbGxiYWNrKGVycm9yKTtcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHJcblx0XHRjb25zdCBvbkRhdGEgPSBidWYgPT4ge1xyXG5cdFx0XHRwcm9wZXJMYXN0Q2h1bmtSZWNlaXZlZCA9IEJ1ZmZlci5jb21wYXJlKGJ1Zi5zbGljZSgtNSksIExBU1RfQ0hVTkspID09PSAwO1xyXG5cclxuXHRcdFx0Ly8gU29tZXRpbWVzIGZpbmFsIDAtbGVuZ3RoIGNodW5rIGFuZCBlbmQgb2YgbWVzc2FnZSBjb2RlIGFyZSBpbiBzZXBhcmF0ZSBwYWNrZXRzXHJcblx0XHRcdGlmICghcHJvcGVyTGFzdENodW5rUmVjZWl2ZWQgJiYgcHJldmlvdXNDaHVuaykge1xyXG5cdFx0XHRcdHByb3Blckxhc3RDaHVua1JlY2VpdmVkID0gKFxyXG5cdFx0XHRcdFx0QnVmZmVyLmNvbXBhcmUocHJldmlvdXNDaHVuay5zbGljZSgtMyksIExBU1RfQ0hVTksuc2xpY2UoMCwgMykpID09PSAwICYmXHJcblx0XHRcdFx0XHRCdWZmZXIuY29tcGFyZShidWYuc2xpY2UoLTIpLCBMQVNUX0NIVU5LLnNsaWNlKDMpKSA9PT0gMFxyXG5cdFx0XHRcdCk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHByZXZpb3VzQ2h1bmsgPSBidWY7XHJcblx0XHR9O1xyXG5cclxuXHRcdHNvY2tldC5wcmVwZW5kTGlzdGVuZXIoJ2Nsb3NlJywgb25Tb2NrZXRDbG9zZSk7XHJcblx0XHRzb2NrZXQub24oJ2RhdGEnLCBvbkRhdGEpO1xyXG5cclxuXHRcdHJlcXVlc3Qub24oJ2Nsb3NlJywgKCkgPT4ge1xyXG5cdFx0XHRzb2NrZXQucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25Tb2NrZXRDbG9zZSk7XHJcblx0XHRcdHNvY2tldC5yZW1vdmVMaXN0ZW5lcignZGF0YScsIG9uRGF0YSk7XHJcblx0XHR9KTtcclxuXHR9KTtcclxufVxyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/node-fetch/src/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/node-fetch/src/request.js":
/*!************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/node-fetch/src/request.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Request),\n/* harmony export */   getNodeRequestOptions: () => (/* binding */ getNodeRequestOptions)\n/* harmony export */ });\n/* harmony import */ var node_url__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:url */ \"node:url\");\n/* harmony import */ var node_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:util */ \"node:util\");\n/* harmony import */ var _headers_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./headers.js */ \"(rsc)/./node_modules/google-gax/node_modules/node-fetch/src/headers.js\");\n/* harmony import */ var _body_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./body.js */ \"(rsc)/./node_modules/google-gax/node_modules/node-fetch/src/body.js\");\n/* harmony import */ var _utils_is_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/is.js */ \"(rsc)/./node_modules/google-gax/node_modules/node-fetch/src/utils/is.js\");\n/* harmony import */ var _utils_get_search_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/get-search.js */ \"(rsc)/./node_modules/google-gax/node_modules/node-fetch/src/utils/get-search.js\");\n/* harmony import */ var _utils_referrer_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/referrer.js */ \"(rsc)/./node_modules/google-gax/node_modules/node-fetch/src/utils/referrer.js\");\n/**\r\n * Request.js\r\n *\r\n * Request class contains server only options\r\n *\r\n * All spec algorithm step numbers are based on https://fetch.spec.whatwg.org/commit-snapshots/ae716822cb3a61843226cd090eefc6589446c1d2/.\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst INTERNALS = Symbol('Request internals');\r\n\r\n/**\r\n * Check if `obj` is an instance of Request.\r\n *\r\n * @param  {*} object\r\n * @return {boolean}\r\n */\r\nconst isRequest = object => {\r\n\treturn (\r\n\t\ttypeof object === 'object' &&\r\n\t\ttypeof object[INTERNALS] === 'object'\r\n\t);\r\n};\r\n\r\nconst doBadDataWarn = (0,node_util__WEBPACK_IMPORTED_MODULE_1__.deprecate)(() => {},\r\n\t'.data is not a valid RequestInit property, use .body instead',\r\n\t'https://github.com/node-fetch/node-fetch/issues/1000 (request)');\r\n\r\n/**\r\n * Request class\r\n *\r\n * Ref: https://fetch.spec.whatwg.org/#request-class\r\n *\r\n * @param   Mixed   input  Url or Request instance\r\n * @param   Object  init   Custom options\r\n * @return  Void\r\n */\r\nclass Request extends _body_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\r\n\tconstructor(input, init = {}) {\r\n\t\tlet parsedURL;\r\n\r\n\t\t// Normalize input and force URL to be encoded as UTF-8 (https://github.com/node-fetch/node-fetch/issues/245)\r\n\t\tif (isRequest(input)) {\r\n\t\t\tparsedURL = new URL(input.url);\r\n\t\t} else {\r\n\t\t\tparsedURL = new URL(input);\r\n\t\t\tinput = {};\r\n\t\t}\r\n\r\n\t\tif (parsedURL.username !== '' || parsedURL.password !== '') {\r\n\t\t\tthrow new TypeError(`${parsedURL} is an url with embedded credentials.`);\r\n\t\t}\r\n\r\n\t\tlet method = init.method || input.method || 'GET';\r\n\t\tif (/^(delete|get|head|options|post|put)$/i.test(method)) {\r\n\t\t\tmethod = method.toUpperCase();\r\n\t\t}\r\n\r\n\t\tif (!isRequest(init) && 'data' in init) {\r\n\t\t\tdoBadDataWarn();\r\n\t\t}\r\n\r\n\t\t// eslint-disable-next-line no-eq-null, eqeqeq\r\n\t\tif ((init.body != null || (isRequest(input) && input.body !== null)) &&\r\n\t\t\t(method === 'GET' || method === 'HEAD')) {\r\n\t\t\tthrow new TypeError('Request with GET/HEAD method cannot have body');\r\n\t\t}\r\n\r\n\t\tconst inputBody = init.body ?\r\n\t\t\tinit.body :\r\n\t\t\t(isRequest(input) && input.body !== null ?\r\n\t\t\t\t(0,_body_js__WEBPACK_IMPORTED_MODULE_2__.clone)(input) :\r\n\t\t\t\tnull);\r\n\r\n\t\tsuper(inputBody, {\r\n\t\t\tsize: init.size || input.size || 0\r\n\t\t});\r\n\r\n\t\tconst headers = new _headers_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"](init.headers || input.headers || {});\r\n\r\n\t\tif (inputBody !== null && !headers.has('Content-Type')) {\r\n\t\t\tconst contentType = (0,_body_js__WEBPACK_IMPORTED_MODULE_2__.extractContentType)(inputBody, this);\r\n\t\t\tif (contentType) {\r\n\t\t\t\theaders.set('Content-Type', contentType);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet signal = isRequest(input) ?\r\n\t\t\tinput.signal :\r\n\t\t\tnull;\r\n\t\tif ('signal' in init) {\r\n\t\t\tsignal = init.signal;\r\n\t\t}\r\n\r\n\t\t// eslint-disable-next-line no-eq-null, eqeqeq\r\n\t\tif (signal != null && !(0,_utils_is_js__WEBPACK_IMPORTED_MODULE_4__.isAbortSignal)(signal)) {\r\n\t\t\tthrow new TypeError('Expected signal to be an instanceof AbortSignal or EventTarget');\r\n\t\t}\r\n\r\n\t\t// §5.4, Request constructor steps, step 15.1\r\n\t\t// eslint-disable-next-line no-eq-null, eqeqeq\r\n\t\tlet referrer = init.referrer == null ? input.referrer : init.referrer;\r\n\t\tif (referrer === '') {\r\n\t\t\t// §5.4, Request constructor steps, step 15.2\r\n\t\t\treferrer = 'no-referrer';\r\n\t\t} else if (referrer) {\r\n\t\t\t// §5.4, Request constructor steps, step 15.3.1, 15.3.2\r\n\t\t\tconst parsedReferrer = new URL(referrer);\r\n\t\t\t// §5.4, Request constructor steps, step 15.3.3, 15.3.4\r\n\t\t\treferrer = /^about:(\\/\\/)?client$/.test(parsedReferrer) ? 'client' : parsedReferrer;\r\n\t\t} else {\r\n\t\t\treferrer = undefined;\r\n\t\t}\r\n\r\n\t\tthis[INTERNALS] = {\r\n\t\t\tmethod,\r\n\t\t\tredirect: init.redirect || input.redirect || 'follow',\r\n\t\t\theaders,\r\n\t\t\tparsedURL,\r\n\t\t\tsignal,\r\n\t\t\treferrer\r\n\t\t};\r\n\r\n\t\t// Node-fetch-only options\r\n\t\tthis.follow = init.follow === undefined ? (input.follow === undefined ? 20 : input.follow) : init.follow;\r\n\t\tthis.compress = init.compress === undefined ? (input.compress === undefined ? true : input.compress) : init.compress;\r\n\t\tthis.counter = init.counter || input.counter || 0;\r\n\t\tthis.agent = init.agent || input.agent;\r\n\t\tthis.highWaterMark = init.highWaterMark || input.highWaterMark || 16384;\r\n\t\tthis.insecureHTTPParser = init.insecureHTTPParser || input.insecureHTTPParser || false;\r\n\r\n\t\t// §5.4, Request constructor steps, step 16.\r\n\t\t// Default is empty string per https://fetch.spec.whatwg.org/#concept-request-referrer-policy\r\n\t\tthis.referrerPolicy = init.referrerPolicy || input.referrerPolicy || '';\r\n\t}\r\n\r\n\t/** @returns {string} */\r\n\tget method() {\r\n\t\treturn this[INTERNALS].method;\r\n\t}\r\n\r\n\t/** @returns {string} */\r\n\tget url() {\r\n\t\treturn (0,node_url__WEBPACK_IMPORTED_MODULE_0__.format)(this[INTERNALS].parsedURL);\r\n\t}\r\n\r\n\t/** @returns {Headers} */\r\n\tget headers() {\r\n\t\treturn this[INTERNALS].headers;\r\n\t}\r\n\r\n\tget redirect() {\r\n\t\treturn this[INTERNALS].redirect;\r\n\t}\r\n\r\n\t/** @returns {AbortSignal} */\r\n\tget signal() {\r\n\t\treturn this[INTERNALS].signal;\r\n\t}\r\n\r\n\t// https://fetch.spec.whatwg.org/#dom-request-referrer\r\n\tget referrer() {\r\n\t\tif (this[INTERNALS].referrer === 'no-referrer') {\r\n\t\t\treturn '';\r\n\t\t}\r\n\r\n\t\tif (this[INTERNALS].referrer === 'client') {\r\n\t\t\treturn 'about:client';\r\n\t\t}\r\n\r\n\t\tif (this[INTERNALS].referrer) {\r\n\t\t\treturn this[INTERNALS].referrer.toString();\r\n\t\t}\r\n\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\tget referrerPolicy() {\r\n\t\treturn this[INTERNALS].referrerPolicy;\r\n\t}\r\n\r\n\tset referrerPolicy(referrerPolicy) {\r\n\t\tthis[INTERNALS].referrerPolicy = (0,_utils_referrer_js__WEBPACK_IMPORTED_MODULE_5__.validateReferrerPolicy)(referrerPolicy);\r\n\t}\r\n\r\n\t/**\r\n\t * Clone this request\r\n\t *\r\n\t * @return  Request\r\n\t */\r\n\tclone() {\r\n\t\treturn new Request(this);\r\n\t}\r\n\r\n\tget [Symbol.toStringTag]() {\r\n\t\treturn 'Request';\r\n\t}\r\n}\r\n\r\nObject.defineProperties(Request.prototype, {\r\n\tmethod: {enumerable: true},\r\n\turl: {enumerable: true},\r\n\theaders: {enumerable: true},\r\n\tredirect: {enumerable: true},\r\n\tclone: {enumerable: true},\r\n\tsignal: {enumerable: true},\r\n\treferrer: {enumerable: true},\r\n\treferrerPolicy: {enumerable: true}\r\n});\r\n\r\n/**\r\n * Convert a Request to Node.js http request options.\r\n *\r\n * @param {Request} request - A Request instance\r\n * @return The options object to be passed to http.request\r\n */\r\nconst getNodeRequestOptions = request => {\r\n\tconst {parsedURL} = request[INTERNALS];\r\n\tconst headers = new _headers_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"](request[INTERNALS].headers);\r\n\r\n\t// Fetch step 1.3\r\n\tif (!headers.has('Accept')) {\r\n\t\theaders.set('Accept', '*/*');\r\n\t}\r\n\r\n\t// HTTP-network-or-cache fetch steps 2.4-2.7\r\n\tlet contentLengthValue = null;\r\n\tif (request.body === null && /^(post|put)$/i.test(request.method)) {\r\n\t\tcontentLengthValue = '0';\r\n\t}\r\n\r\n\tif (request.body !== null) {\r\n\t\tconst totalBytes = (0,_body_js__WEBPACK_IMPORTED_MODULE_2__.getTotalBytes)(request);\r\n\t\t// Set Content-Length if totalBytes is a number (that is not NaN)\r\n\t\tif (typeof totalBytes === 'number' && !Number.isNaN(totalBytes)) {\r\n\t\t\tcontentLengthValue = String(totalBytes);\r\n\t\t}\r\n\t}\r\n\r\n\tif (contentLengthValue) {\r\n\t\theaders.set('Content-Length', contentLengthValue);\r\n\t}\r\n\r\n\t// 4.1. Main fetch, step 2.6\r\n\t// > If request's referrer policy is the empty string, then set request's referrer policy to the\r\n\t// > default referrer policy.\r\n\tif (request.referrerPolicy === '') {\r\n\t\trequest.referrerPolicy = _utils_referrer_js__WEBPACK_IMPORTED_MODULE_5__.DEFAULT_REFERRER_POLICY;\r\n\t}\r\n\r\n\t// 4.1. Main fetch, step 2.7\r\n\t// > If request's referrer is not \"no-referrer\", set request's referrer to the result of invoking\r\n\t// > determine request's referrer.\r\n\tif (request.referrer && request.referrer !== 'no-referrer') {\r\n\t\trequest[INTERNALS].referrer = (0,_utils_referrer_js__WEBPACK_IMPORTED_MODULE_5__.determineRequestsReferrer)(request);\r\n\t} else {\r\n\t\trequest[INTERNALS].referrer = 'no-referrer';\r\n\t}\r\n\r\n\t// 4.5. HTTP-network-or-cache fetch, step 6.9\r\n\t// > If httpRequest's referrer is a URL, then append `Referer`/httpRequest's referrer, serialized\r\n\t// >  and isomorphic encoded, to httpRequest's header list.\r\n\tif (request[INTERNALS].referrer instanceof URL) {\r\n\t\theaders.set('Referer', request.referrer);\r\n\t}\r\n\r\n\t// HTTP-network-or-cache fetch step 2.11\r\n\tif (!headers.has('User-Agent')) {\r\n\t\theaders.set('User-Agent', 'node-fetch');\r\n\t}\r\n\r\n\t// HTTP-network-or-cache fetch step 2.15\r\n\tif (request.compress && !headers.has('Accept-Encoding')) {\r\n\t\theaders.set('Accept-Encoding', 'gzip, deflate, br');\r\n\t}\r\n\r\n\tlet {agent} = request;\r\n\tif (typeof agent === 'function') {\r\n\t\tagent = agent(parsedURL);\r\n\t}\r\n\r\n\t// HTTP-network fetch step 4.2\r\n\t// chunked encoding is handled by Node.js\r\n\r\n\tconst search = (0,_utils_get_search_js__WEBPACK_IMPORTED_MODULE_6__.getSearch)(parsedURL);\r\n\r\n\t// Pass the full URL directly to request(), but overwrite the following\r\n\t// options:\r\n\tconst options = {\r\n\t\t// Overwrite search to retain trailing ? (issue #776)\r\n\t\tpath: parsedURL.pathname + search,\r\n\t\t// The following options are not expressed in the URL\r\n\t\tmethod: request.method,\r\n\t\theaders: headers[Symbol.for('nodejs.util.inspect.custom')](),\r\n\t\tinsecureHTTPParser: request.insecureHTTPParser,\r\n\t\tagent\r\n\t};\r\n\r\n\treturn {\r\n\t\t/** @type {URL} */\r\n\t\tparsedURL,\r\n\t\toptions\r\n\t};\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/node-fetch/src/request.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/node-fetch/src/response.js":
/*!*************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/node-fetch/src/response.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Response)\n/* harmony export */ });\n/* harmony import */ var _headers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./headers.js */ \"(rsc)/./node_modules/google-gax/node_modules/node-fetch/src/headers.js\");\n/* harmony import */ var _body_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./body.js */ \"(rsc)/./node_modules/google-gax/node_modules/node-fetch/src/body.js\");\n/* harmony import */ var _utils_is_redirect_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/is-redirect.js */ \"(rsc)/./node_modules/google-gax/node_modules/node-fetch/src/utils/is-redirect.js\");\n/**\r\n * Response.js\r\n *\r\n * Response class provides content decoding\r\n */\r\n\r\n\r\n\r\n\r\n\r\nconst INTERNALS = Symbol('Response internals');\r\n\r\n/**\r\n * Response class\r\n *\r\n * Ref: https://fetch.spec.whatwg.org/#response-class\r\n *\r\n * @param   Stream  body  Readable stream\r\n * @param   Object  opts  Response options\r\n * @return  Void\r\n */\r\nclass Response extends _body_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\r\n\tconstructor(body = null, options = {}) {\r\n\t\tsuper(body, options);\r\n\r\n\t\t// eslint-disable-next-line no-eq-null, eqeqeq, no-negated-condition\r\n\t\tconst status = options.status != null ? options.status : 200;\r\n\r\n\t\tconst headers = new _headers_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](options.headers);\r\n\r\n\t\tif (body !== null && !headers.has('Content-Type')) {\r\n\t\t\tconst contentType = (0,_body_js__WEBPACK_IMPORTED_MODULE_0__.extractContentType)(body, this);\r\n\t\t\tif (contentType) {\r\n\t\t\t\theaders.append('Content-Type', contentType);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis[INTERNALS] = {\r\n\t\t\ttype: 'default',\r\n\t\t\turl: options.url,\r\n\t\t\tstatus,\r\n\t\t\tstatusText: options.statusText || '',\r\n\t\t\theaders,\r\n\t\t\tcounter: options.counter,\r\n\t\t\thighWaterMark: options.highWaterMark\r\n\t\t};\r\n\t}\r\n\r\n\tget type() {\r\n\t\treturn this[INTERNALS].type;\r\n\t}\r\n\r\n\tget url() {\r\n\t\treturn this[INTERNALS].url || '';\r\n\t}\r\n\r\n\tget status() {\r\n\t\treturn this[INTERNALS].status;\r\n\t}\r\n\r\n\t/**\r\n\t * Convenience property representing if the request ended normally\r\n\t */\r\n\tget ok() {\r\n\t\treturn this[INTERNALS].status >= 200 && this[INTERNALS].status < 300;\r\n\t}\r\n\r\n\tget redirected() {\r\n\t\treturn this[INTERNALS].counter > 0;\r\n\t}\r\n\r\n\tget statusText() {\r\n\t\treturn this[INTERNALS].statusText;\r\n\t}\r\n\r\n\tget headers() {\r\n\t\treturn this[INTERNALS].headers;\r\n\t}\r\n\r\n\tget highWaterMark() {\r\n\t\treturn this[INTERNALS].highWaterMark;\r\n\t}\r\n\r\n\t/**\r\n\t * Clone this response\r\n\t *\r\n\t * @return  Response\r\n\t */\r\n\tclone() {\r\n\t\treturn new Response((0,_body_js__WEBPACK_IMPORTED_MODULE_0__.clone)(this, this.highWaterMark), {\r\n\t\t\ttype: this.type,\r\n\t\t\turl: this.url,\r\n\t\t\tstatus: this.status,\r\n\t\t\tstatusText: this.statusText,\r\n\t\t\theaders: this.headers,\r\n\t\t\tok: this.ok,\r\n\t\t\tredirected: this.redirected,\r\n\t\t\tsize: this.size,\r\n\t\t\thighWaterMark: this.highWaterMark\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} url    The URL that the new response is to originate from.\r\n\t * @param {number} status An optional status code for the response (e.g., 302.)\r\n\t * @returns {Response}    A Response object.\r\n\t */\r\n\tstatic redirect(url, status = 302) {\r\n\t\tif (!(0,_utils_is_redirect_js__WEBPACK_IMPORTED_MODULE_2__.isRedirect)(status)) {\r\n\t\t\tthrow new RangeError('Failed to execute \"redirect\" on \"response\": Invalid status code');\r\n\t\t}\r\n\r\n\t\treturn new Response(null, {\r\n\t\t\theaders: {\r\n\t\t\t\tlocation: new URL(url).toString()\r\n\t\t\t},\r\n\t\t\tstatus\r\n\t\t});\r\n\t}\r\n\r\n\tstatic error() {\r\n\t\tconst response = new Response(null, {status: 0, statusText: ''});\r\n\t\tresponse[INTERNALS].type = 'error';\r\n\t\treturn response;\r\n\t}\r\n\r\n\tstatic json(data = undefined, init = {}) {\r\n\t\tconst body = JSON.stringify(data);\r\n\r\n\t\tif (body === undefined) {\r\n\t\t\tthrow new TypeError('data is not JSON serializable');\r\n\t\t}\r\n\r\n\t\tconst headers = new _headers_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](init && init.headers);\r\n\r\n\t\tif (!headers.has('content-type')) {\r\n\t\t\theaders.set('content-type', 'application/json');\r\n\t\t}\r\n\r\n\t\treturn new Response(body, {\r\n\t\t\t...init,\r\n\t\t\theaders\r\n\t\t});\r\n\t}\r\n\r\n\tget [Symbol.toStringTag]() {\r\n\t\treturn 'Response';\r\n\t}\r\n}\r\n\r\nObject.defineProperties(Response.prototype, {\r\n\ttype: {enumerable: true},\r\n\turl: {enumerable: true},\r\n\tstatus: {enumerable: true},\r\n\tok: {enumerable: true},\r\n\tredirected: {enumerable: true},\r\n\tstatusText: {enumerable: true},\r\n\theaders: {enumerable: true},\r\n\tclone: {enumerable: true}\r\n});\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9ub2RlX21vZHVsZXMvbm9kZS1mZXRjaC9zcmMvcmVzcG9uc2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNtQztBQUN1QjtBQUNSO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNlLHVCQUF1QixnREFBSTtBQUMxQyxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixtREFBTztBQUM3QjtBQUNBO0FBQ0EsdUJBQXVCLDREQUFrQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsK0NBQUs7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLFlBQVksUUFBUTtBQUNwQixZQUFZLFFBQVE7QUFDcEIsY0FBYyxhQUFhO0FBQzNCO0FBQ0E7QUFDQSxPQUFPLGlFQUFVO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsMEJBQTBCO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixtREFBTztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlCQUFpQjtBQUN6QixPQUFPLGlCQUFpQjtBQUN4QixVQUFVLGlCQUFpQjtBQUMzQixNQUFNLGlCQUFpQjtBQUN2QixjQUFjLGlCQUFpQjtBQUMvQixjQUFjLGlCQUFpQjtBQUMvQixXQUFXLGlCQUFpQjtBQUM1QixTQUFTO0FBQ1QsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2RhbmlzaC1idWRkeS8uL25vZGVfbW9kdWxlcy9nb29nbGUtZ2F4L25vZGVfbW9kdWxlcy9ub2RlLWZldGNoL3NyYy9yZXNwb25zZS5qcz80YzJiIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBSZXNwb25zZS5qc1xyXG4gKlxyXG4gKiBSZXNwb25zZSBjbGFzcyBwcm92aWRlcyBjb250ZW50IGRlY29kaW5nXHJcbiAqL1xyXG5cclxuaW1wb3J0IEhlYWRlcnMgZnJvbSAnLi9oZWFkZXJzLmpzJztcclxuaW1wb3J0IEJvZHksIHtjbG9uZSwgZXh0cmFjdENvbnRlbnRUeXBlfSBmcm9tICcuL2JvZHkuanMnO1xyXG5pbXBvcnQge2lzUmVkaXJlY3R9IGZyb20gJy4vdXRpbHMvaXMtcmVkaXJlY3QuanMnO1xyXG5cclxuY29uc3QgSU5URVJOQUxTID0gU3ltYm9sKCdSZXNwb25zZSBpbnRlcm5hbHMnKTtcclxuXHJcbi8qKlxyXG4gKiBSZXNwb25zZSBjbGFzc1xyXG4gKlxyXG4gKiBSZWY6IGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNyZXNwb25zZS1jbGFzc1xyXG4gKlxyXG4gKiBAcGFyYW0gICBTdHJlYW0gIGJvZHkgIFJlYWRhYmxlIHN0cmVhbVxyXG4gKiBAcGFyYW0gICBPYmplY3QgIG9wdHMgIFJlc3BvbnNlIG9wdGlvbnNcclxuICogQHJldHVybiAgVm9pZFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVzcG9uc2UgZXh0ZW5kcyBCb2R5IHtcclxuXHRjb25zdHJ1Y3Rvcihib2R5ID0gbnVsbCwgb3B0aW9ucyA9IHt9KSB7XHJcblx0XHRzdXBlcihib2R5LCBvcHRpb25zKTtcclxuXHJcblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXEtbnVsbCwgZXFlcWVxLCBuby1uZWdhdGVkLWNvbmRpdGlvblxyXG5cdFx0Y29uc3Qgc3RhdHVzID0gb3B0aW9ucy5zdGF0dXMgIT0gbnVsbCA/IG9wdGlvbnMuc3RhdHVzIDogMjAwO1xyXG5cclxuXHRcdGNvbnN0IGhlYWRlcnMgPSBuZXcgSGVhZGVycyhvcHRpb25zLmhlYWRlcnMpO1xyXG5cclxuXHRcdGlmIChib2R5ICE9PSBudWxsICYmICFoZWFkZXJzLmhhcygnQ29udGVudC1UeXBlJykpIHtcclxuXHRcdFx0Y29uc3QgY29udGVudFR5cGUgPSBleHRyYWN0Q29udGVudFR5cGUoYm9keSwgdGhpcyk7XHJcblx0XHRcdGlmIChjb250ZW50VHlwZSkge1xyXG5cdFx0XHRcdGhlYWRlcnMuYXBwZW5kKCdDb250ZW50LVR5cGUnLCBjb250ZW50VHlwZSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzW0lOVEVSTkFMU10gPSB7XHJcblx0XHRcdHR5cGU6ICdkZWZhdWx0JyxcclxuXHRcdFx0dXJsOiBvcHRpb25zLnVybCxcclxuXHRcdFx0c3RhdHVzLFxyXG5cdFx0XHRzdGF0dXNUZXh0OiBvcHRpb25zLnN0YXR1c1RleHQgfHwgJycsXHJcblx0XHRcdGhlYWRlcnMsXHJcblx0XHRcdGNvdW50ZXI6IG9wdGlvbnMuY291bnRlcixcclxuXHRcdFx0aGlnaFdhdGVyTWFyazogb3B0aW9ucy5oaWdoV2F0ZXJNYXJrXHJcblx0XHR9O1xyXG5cdH1cclxuXHJcblx0Z2V0IHR5cGUoKSB7XHJcblx0XHRyZXR1cm4gdGhpc1tJTlRFUk5BTFNdLnR5cGU7XHJcblx0fVxyXG5cclxuXHRnZXQgdXJsKCkge1xyXG5cdFx0cmV0dXJuIHRoaXNbSU5URVJOQUxTXS51cmwgfHwgJyc7XHJcblx0fVxyXG5cclxuXHRnZXQgc3RhdHVzKCkge1xyXG5cdFx0cmV0dXJuIHRoaXNbSU5URVJOQUxTXS5zdGF0dXM7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBDb252ZW5pZW5jZSBwcm9wZXJ0eSByZXByZXNlbnRpbmcgaWYgdGhlIHJlcXVlc3QgZW5kZWQgbm9ybWFsbHlcclxuXHQgKi9cclxuXHRnZXQgb2soKSB7XHJcblx0XHRyZXR1cm4gdGhpc1tJTlRFUk5BTFNdLnN0YXR1cyA+PSAyMDAgJiYgdGhpc1tJTlRFUk5BTFNdLnN0YXR1cyA8IDMwMDtcclxuXHR9XHJcblxyXG5cdGdldCByZWRpcmVjdGVkKCkge1xyXG5cdFx0cmV0dXJuIHRoaXNbSU5URVJOQUxTXS5jb3VudGVyID4gMDtcclxuXHR9XHJcblxyXG5cdGdldCBzdGF0dXNUZXh0KCkge1xyXG5cdFx0cmV0dXJuIHRoaXNbSU5URVJOQUxTXS5zdGF0dXNUZXh0O1xyXG5cdH1cclxuXHJcblx0Z2V0IGhlYWRlcnMoKSB7XHJcblx0XHRyZXR1cm4gdGhpc1tJTlRFUk5BTFNdLmhlYWRlcnM7XHJcblx0fVxyXG5cclxuXHRnZXQgaGlnaFdhdGVyTWFyaygpIHtcclxuXHRcdHJldHVybiB0aGlzW0lOVEVSTkFMU10uaGlnaFdhdGVyTWFyaztcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIENsb25lIHRoaXMgcmVzcG9uc2VcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gIFJlc3BvbnNlXHJcblx0ICovXHJcblx0Y2xvbmUoKSB7XHJcblx0XHRyZXR1cm4gbmV3IFJlc3BvbnNlKGNsb25lKHRoaXMsIHRoaXMuaGlnaFdhdGVyTWFyayksIHtcclxuXHRcdFx0dHlwZTogdGhpcy50eXBlLFxyXG5cdFx0XHR1cmw6IHRoaXMudXJsLFxyXG5cdFx0XHRzdGF0dXM6IHRoaXMuc3RhdHVzLFxyXG5cdFx0XHRzdGF0dXNUZXh0OiB0aGlzLnN0YXR1c1RleHQsXHJcblx0XHRcdGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcclxuXHRcdFx0b2s6IHRoaXMub2ssXHJcblx0XHRcdHJlZGlyZWN0ZWQ6IHRoaXMucmVkaXJlY3RlZCxcclxuXHRcdFx0c2l6ZTogdGhpcy5zaXplLFxyXG5cdFx0XHRoaWdoV2F0ZXJNYXJrOiB0aGlzLmhpZ2hXYXRlck1hcmtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogQHBhcmFtIHtzdHJpbmd9IHVybCAgICBUaGUgVVJMIHRoYXQgdGhlIG5ldyByZXNwb25zZSBpcyB0byBvcmlnaW5hdGUgZnJvbS5cclxuXHQgKiBAcGFyYW0ge251bWJlcn0gc3RhdHVzIEFuIG9wdGlvbmFsIHN0YXR1cyBjb2RlIGZvciB0aGUgcmVzcG9uc2UgKGUuZy4sIDMwMi4pXHJcblx0ICogQHJldHVybnMge1Jlc3BvbnNlfSAgICBBIFJlc3BvbnNlIG9iamVjdC5cclxuXHQgKi9cclxuXHRzdGF0aWMgcmVkaXJlY3QodXJsLCBzdGF0dXMgPSAzMDIpIHtcclxuXHRcdGlmICghaXNSZWRpcmVjdChzdGF0dXMpKSB7XHJcblx0XHRcdHRocm93IG5ldyBSYW5nZUVycm9yKCdGYWlsZWQgdG8gZXhlY3V0ZSBcInJlZGlyZWN0XCIgb24gXCJyZXNwb25zZVwiOiBJbnZhbGlkIHN0YXR1cyBjb2RlJyk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIG5ldyBSZXNwb25zZShudWxsLCB7XHJcblx0XHRcdGhlYWRlcnM6IHtcclxuXHRcdFx0XHRsb2NhdGlvbjogbmV3IFVSTCh1cmwpLnRvU3RyaW5nKClcclxuXHRcdFx0fSxcclxuXHRcdFx0c3RhdHVzXHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBlcnJvcigpIHtcclxuXHRcdGNvbnN0IHJlc3BvbnNlID0gbmV3IFJlc3BvbnNlKG51bGwsIHtzdGF0dXM6IDAsIHN0YXR1c1RleHQ6ICcnfSk7XHJcblx0XHRyZXNwb25zZVtJTlRFUk5BTFNdLnR5cGUgPSAnZXJyb3InO1xyXG5cdFx0cmV0dXJuIHJlc3BvbnNlO1xyXG5cdH1cclxuXHJcblx0c3RhdGljIGpzb24oZGF0YSA9IHVuZGVmaW5lZCwgaW5pdCA9IHt9KSB7XHJcblx0XHRjb25zdCBib2R5ID0gSlNPTi5zdHJpbmdpZnkoZGF0YSk7XHJcblxyXG5cdFx0aWYgKGJvZHkgPT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdkYXRhIGlzIG5vdCBKU09OIHNlcmlhbGl6YWJsZScpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGNvbnN0IGhlYWRlcnMgPSBuZXcgSGVhZGVycyhpbml0ICYmIGluaXQuaGVhZGVycyk7XHJcblxyXG5cdFx0aWYgKCFoZWFkZXJzLmhhcygnY29udGVudC10eXBlJykpIHtcclxuXHRcdFx0aGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi9qc29uJyk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIG5ldyBSZXNwb25zZShib2R5LCB7XHJcblx0XHRcdC4uLmluaXQsXHJcblx0XHRcdGhlYWRlcnNcclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0Z2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkge1xyXG5cdFx0cmV0dXJuICdSZXNwb25zZSc7XHJcblx0fVxyXG59XHJcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhSZXNwb25zZS5wcm90b3R5cGUsIHtcclxuXHR0eXBlOiB7ZW51bWVyYWJsZTogdHJ1ZX0sXHJcblx0dXJsOiB7ZW51bWVyYWJsZTogdHJ1ZX0sXHJcblx0c3RhdHVzOiB7ZW51bWVyYWJsZTogdHJ1ZX0sXHJcblx0b2s6IHtlbnVtZXJhYmxlOiB0cnVlfSxcclxuXHRyZWRpcmVjdGVkOiB7ZW51bWVyYWJsZTogdHJ1ZX0sXHJcblx0c3RhdHVzVGV4dDoge2VudW1lcmFibGU6IHRydWV9LFxyXG5cdGhlYWRlcnM6IHtlbnVtZXJhYmxlOiB0cnVlfSxcclxuXHRjbG9uZToge2VudW1lcmFibGU6IHRydWV9XHJcbn0pO1xyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/node-fetch/src/response.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/node-fetch/src/utils/get-search.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/node-fetch/src/utils/get-search.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getSearch: () => (/* binding */ getSearch)\n/* harmony export */ });\nconst getSearch = parsedURL => {\r\n\tif (parsedURL.search) {\r\n\t\treturn parsedURL.search;\r\n\t}\r\n\r\n\tconst lastOffset = parsedURL.href.length - 1;\r\n\tconst hash = parsedURL.hash || (parsedURL.href[lastOffset] === '#' ? '#' : '');\r\n\treturn parsedURL.href[lastOffset - hash.length] === '?' ? '?' : '';\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9ub2RlX21vZHVsZXMvbm9kZS1mZXRjaC9zcmMvdXRpbHMvZ2V0LXNlYXJjaC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFuaXNoLWJ1ZGR5Ly4vbm9kZV9tb2R1bGVzL2dvb2dsZS1nYXgvbm9kZV9tb2R1bGVzL25vZGUtZmV0Y2gvc3JjL3V0aWxzL2dldC1zZWFyY2guanM/NTE1NyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgZ2V0U2VhcmNoID0gcGFyc2VkVVJMID0+IHtcclxuXHRpZiAocGFyc2VkVVJMLnNlYXJjaCkge1xyXG5cdFx0cmV0dXJuIHBhcnNlZFVSTC5zZWFyY2g7XHJcblx0fVxyXG5cclxuXHRjb25zdCBsYXN0T2Zmc2V0ID0gcGFyc2VkVVJMLmhyZWYubGVuZ3RoIC0gMTtcclxuXHRjb25zdCBoYXNoID0gcGFyc2VkVVJMLmhhc2ggfHwgKHBhcnNlZFVSTC5ocmVmW2xhc3RPZmZzZXRdID09PSAnIycgPyAnIycgOiAnJyk7XHJcblx0cmV0dXJuIHBhcnNlZFVSTC5ocmVmW2xhc3RPZmZzZXQgLSBoYXNoLmxlbmd0aF0gPT09ICc/JyA/ICc/JyA6ICcnO1xyXG59O1xyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/node-fetch/src/utils/get-search.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/node-fetch/src/utils/is-redirect.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/node-fetch/src/utils/is-redirect.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isRedirect: () => (/* binding */ isRedirect)\n/* harmony export */ });\nconst redirectStatus = new Set([301, 302, 303, 307, 308]);\r\n\r\n/**\r\n * Redirect code matching\r\n *\r\n * @param {number} code - Status code\r\n * @return {boolean}\r\n */\r\nconst isRedirect = code => {\r\n\treturn redirectStatus.has(code);\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9ub2RlX21vZHVsZXMvbm9kZS1mZXRjaC9zcmMvdXRpbHMvaXMtcmVkaXJlY3QuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsWUFBWTtBQUNaO0FBQ087QUFDUDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFuaXNoLWJ1ZGR5Ly4vbm9kZV9tb2R1bGVzL2dvb2dsZS1nYXgvbm9kZV9tb2R1bGVzL25vZGUtZmV0Y2gvc3JjL3V0aWxzL2lzLXJlZGlyZWN0LmpzP2E0Y2MiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgcmVkaXJlY3RTdGF0dXMgPSBuZXcgU2V0KFszMDEsIDMwMiwgMzAzLCAzMDcsIDMwOF0pO1xyXG5cclxuLyoqXHJcbiAqIFJlZGlyZWN0IGNvZGUgbWF0Y2hpbmdcclxuICpcclxuICogQHBhcmFtIHtudW1iZXJ9IGNvZGUgLSBTdGF0dXMgY29kZVxyXG4gKiBAcmV0dXJuIHtib29sZWFufVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGlzUmVkaXJlY3QgPSBjb2RlID0+IHtcclxuXHRyZXR1cm4gcmVkaXJlY3RTdGF0dXMuaGFzKGNvZGUpO1xyXG59O1xyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/node-fetch/src/utils/is-redirect.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/node-fetch/src/utils/is.js":
/*!*************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/node-fetch/src/utils/is.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isAbortSignal: () => (/* binding */ isAbortSignal),\n/* harmony export */   isBlob: () => (/* binding */ isBlob),\n/* harmony export */   isDomainOrSubdomain: () => (/* binding */ isDomainOrSubdomain),\n/* harmony export */   isSameProtocol: () => (/* binding */ isSameProtocol),\n/* harmony export */   isURLSearchParameters: () => (/* binding */ isURLSearchParameters)\n/* harmony export */ });\n/**\r\n * Is.js\r\n *\r\n * Object type checks.\r\n */\r\n\r\nconst NAME = Symbol.toStringTag;\r\n\r\n/**\r\n * Check if `obj` is a URLSearchParams object\r\n * ref: https://github.com/node-fetch/node-fetch/issues/296#issuecomment-307598143\r\n * @param {*} object - Object to check for\r\n * @return {boolean}\r\n */\r\nconst isURLSearchParameters = object => {\r\n\treturn (\r\n\t\ttypeof object === 'object' &&\r\n\t\ttypeof object.append === 'function' &&\r\n\t\ttypeof object.delete === 'function' &&\r\n\t\ttypeof object.get === 'function' &&\r\n\t\ttypeof object.getAll === 'function' &&\r\n\t\ttypeof object.has === 'function' &&\r\n\t\ttypeof object.set === 'function' &&\r\n\t\ttypeof object.sort === 'function' &&\r\n\t\tobject[NAME] === 'URLSearchParams'\r\n\t);\r\n};\r\n\r\n/**\r\n * Check if `object` is a W3C `Blob` object (which `File` inherits from)\r\n * @param {*} object - Object to check for\r\n * @return {boolean}\r\n */\r\nconst isBlob = object => {\r\n\treturn (\r\n\t\tobject &&\r\n\t\ttypeof object === 'object' &&\r\n\t\ttypeof object.arrayBuffer === 'function' &&\r\n\t\ttypeof object.type === 'string' &&\r\n\t\ttypeof object.stream === 'function' &&\r\n\t\ttypeof object.constructor === 'function' &&\r\n\t\t/^(Blob|File)$/.test(object[NAME])\r\n\t);\r\n};\r\n\r\n/**\r\n * Check if `obj` is an instance of AbortSignal.\r\n * @param {*} object - Object to check for\r\n * @return {boolean}\r\n */\r\nconst isAbortSignal = object => {\r\n\treturn (\r\n\t\ttypeof object === 'object' && (\r\n\t\t\tobject[NAME] === 'AbortSignal' ||\r\n\t\t\tobject[NAME] === 'EventTarget'\r\n\t\t)\r\n\t);\r\n};\r\n\r\n/**\r\n * isDomainOrSubdomain reports whether sub is a subdomain (or exact match) of\r\n * the parent domain.\r\n *\r\n * Both domains must already be in canonical form.\r\n * @param {string|URL} original\r\n * @param {string|URL} destination\r\n */\r\nconst isDomainOrSubdomain = (destination, original) => {\r\n\tconst orig = new URL(original).hostname;\r\n\tconst dest = new URL(destination).hostname;\r\n\r\n\treturn orig === dest || orig.endsWith(`.${dest}`);\r\n};\r\n\r\n/**\r\n * isSameProtocol reports whether the two provided URLs use the same protocol.\r\n *\r\n * Both domains must already be in canonical form.\r\n * @param {string|URL} original\r\n * @param {string|URL} destination\r\n */\r\nconst isSameProtocol = (destination, original) => {\r\n\tconst orig = new URL(original).protocol;\r\n\tconst dest = new URL(destination).protocol;\r\n\r\n\treturn orig === dest;\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9ub2RlX21vZHVsZXMvbm9kZS1mZXRjaC9zcmMvdXRpbHMvaXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxHQUFHO0FBQ2QsWUFBWTtBQUNaO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEdBQUc7QUFDZCxZQUFZO0FBQ1o7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxHQUFHO0FBQ2QsWUFBWTtBQUNaO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsWUFBWTtBQUN2QixXQUFXLFlBQVk7QUFDdkI7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyxLQUFLO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsWUFBWTtBQUN2QixXQUFXLFlBQVk7QUFDdkI7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYW5pc2gtYnVkZHkvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWdheC9ub2RlX21vZHVsZXMvbm9kZS1mZXRjaC9zcmMvdXRpbHMvaXMuanM/ZDRjYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogSXMuanNcclxuICpcclxuICogT2JqZWN0IHR5cGUgY2hlY2tzLlxyXG4gKi9cclxuXHJcbmNvbnN0IE5BTUUgPSBTeW1ib2wudG9TdHJpbmdUYWc7XHJcblxyXG4vKipcclxuICogQ2hlY2sgaWYgYG9iamAgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0XHJcbiAqIHJlZjogaHR0cHM6Ly9naXRodWIuY29tL25vZGUtZmV0Y2gvbm9kZS1mZXRjaC9pc3N1ZXMvMjk2I2lzc3VlY29tbWVudC0zMDc1OTgxNDNcclxuICogQHBhcmFtIHsqfSBvYmplY3QgLSBPYmplY3QgdG8gY2hlY2sgZm9yXHJcbiAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAqL1xyXG5leHBvcnQgY29uc3QgaXNVUkxTZWFyY2hQYXJhbWV0ZXJzID0gb2JqZWN0ID0+IHtcclxuXHRyZXR1cm4gKFxyXG5cdFx0dHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiZcclxuXHRcdHR5cGVvZiBvYmplY3QuYXBwZW5kID09PSAnZnVuY3Rpb24nICYmXHJcblx0XHR0eXBlb2Ygb2JqZWN0LmRlbGV0ZSA9PT0gJ2Z1bmN0aW9uJyAmJlxyXG5cdFx0dHlwZW9mIG9iamVjdC5nZXQgPT09ICdmdW5jdGlvbicgJiZcclxuXHRcdHR5cGVvZiBvYmplY3QuZ2V0QWxsID09PSAnZnVuY3Rpb24nICYmXHJcblx0XHR0eXBlb2Ygb2JqZWN0LmhhcyA9PT0gJ2Z1bmN0aW9uJyAmJlxyXG5cdFx0dHlwZW9mIG9iamVjdC5zZXQgPT09ICdmdW5jdGlvbicgJiZcclxuXHRcdHR5cGVvZiBvYmplY3Quc29ydCA9PT0gJ2Z1bmN0aW9uJyAmJlxyXG5cdFx0b2JqZWN0W05BTUVdID09PSAnVVJMU2VhcmNoUGFyYW1zJ1xyXG5cdCk7XHJcbn07XHJcblxyXG4vKipcclxuICogQ2hlY2sgaWYgYG9iamVjdGAgaXMgYSBXM0MgYEJsb2JgIG9iamVjdCAod2hpY2ggYEZpbGVgIGluaGVyaXRzIGZyb20pXHJcbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IC0gT2JqZWN0IHRvIGNoZWNrIGZvclxyXG4gKiBAcmV0dXJuIHtib29sZWFufVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGlzQmxvYiA9IG9iamVjdCA9PiB7XHJcblx0cmV0dXJuIChcclxuXHRcdG9iamVjdCAmJlxyXG5cdFx0dHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiZcclxuXHRcdHR5cGVvZiBvYmplY3QuYXJyYXlCdWZmZXIgPT09ICdmdW5jdGlvbicgJiZcclxuXHRcdHR5cGVvZiBvYmplY3QudHlwZSA9PT0gJ3N0cmluZycgJiZcclxuXHRcdHR5cGVvZiBvYmplY3Quc3RyZWFtID09PSAnZnVuY3Rpb24nICYmXHJcblx0XHR0eXBlb2Ygb2JqZWN0LmNvbnN0cnVjdG9yID09PSAnZnVuY3Rpb24nICYmXHJcblx0XHQvXihCbG9ifEZpbGUpJC8udGVzdChvYmplY3RbTkFNRV0pXHJcblx0KTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDaGVjayBpZiBgb2JqYCBpcyBhbiBpbnN0YW5jZSBvZiBBYm9ydFNpZ25hbC5cclxuICogQHBhcmFtIHsqfSBvYmplY3QgLSBPYmplY3QgdG8gY2hlY2sgZm9yXHJcbiAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAqL1xyXG5leHBvcnQgY29uc3QgaXNBYm9ydFNpZ25hbCA9IG9iamVjdCA9PiB7XHJcblx0cmV0dXJuIChcclxuXHRcdHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmIChcclxuXHRcdFx0b2JqZWN0W05BTUVdID09PSAnQWJvcnRTaWduYWwnIHx8XHJcblx0XHRcdG9iamVjdFtOQU1FXSA9PT0gJ0V2ZW50VGFyZ2V0J1xyXG5cdFx0KVxyXG5cdCk7XHJcbn07XHJcblxyXG4vKipcclxuICogaXNEb21haW5PclN1YmRvbWFpbiByZXBvcnRzIHdoZXRoZXIgc3ViIGlzIGEgc3ViZG9tYWluIChvciBleGFjdCBtYXRjaCkgb2ZcclxuICogdGhlIHBhcmVudCBkb21haW4uXHJcbiAqXHJcbiAqIEJvdGggZG9tYWlucyBtdXN0IGFscmVhZHkgYmUgaW4gY2Fub25pY2FsIGZvcm0uXHJcbiAqIEBwYXJhbSB7c3RyaW5nfFVSTH0gb3JpZ2luYWxcclxuICogQHBhcmFtIHtzdHJpbmd8VVJMfSBkZXN0aW5hdGlvblxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGlzRG9tYWluT3JTdWJkb21haW4gPSAoZGVzdGluYXRpb24sIG9yaWdpbmFsKSA9PiB7XHJcblx0Y29uc3Qgb3JpZyA9IG5ldyBVUkwob3JpZ2luYWwpLmhvc3RuYW1lO1xyXG5cdGNvbnN0IGRlc3QgPSBuZXcgVVJMKGRlc3RpbmF0aW9uKS5ob3N0bmFtZTtcclxuXHJcblx0cmV0dXJuIG9yaWcgPT09IGRlc3QgfHwgb3JpZy5lbmRzV2l0aChgLiR7ZGVzdH1gKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBpc1NhbWVQcm90b2NvbCByZXBvcnRzIHdoZXRoZXIgdGhlIHR3byBwcm92aWRlZCBVUkxzIHVzZSB0aGUgc2FtZSBwcm90b2NvbC5cclxuICpcclxuICogQm90aCBkb21haW5zIG11c3QgYWxyZWFkeSBiZSBpbiBjYW5vbmljYWwgZm9ybS5cclxuICogQHBhcmFtIHtzdHJpbmd8VVJMfSBvcmlnaW5hbFxyXG4gKiBAcGFyYW0ge3N0cmluZ3xVUkx9IGRlc3RpbmF0aW9uXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgaXNTYW1lUHJvdG9jb2wgPSAoZGVzdGluYXRpb24sIG9yaWdpbmFsKSA9PiB7XHJcblx0Y29uc3Qgb3JpZyA9IG5ldyBVUkwob3JpZ2luYWwpLnByb3RvY29sO1xyXG5cdGNvbnN0IGRlc3QgPSBuZXcgVVJMKGRlc3RpbmF0aW9uKS5wcm90b2NvbDtcclxuXHJcblx0cmV0dXJuIG9yaWcgPT09IGRlc3Q7XHJcbn07XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/node-fetch/src/utils/is.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/node-fetch/src/utils/multipart-parser.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/node-fetch/src/utils/multipart-parser.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toFormData: () => (/* binding */ toFormData)\n/* harmony export */ });\n/* harmony import */ var fetch_blob_from_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fetch-blob/from.js */ \"(rsc)/./node_modules/fetch-blob/from.js\");\n/* harmony import */ var formdata_polyfill_esm_min_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! formdata-polyfill/esm.min.js */ \"(rsc)/./node_modules/formdata-polyfill/esm.min.js\");\n\r\n\r\n\r\nlet s = 0;\r\nconst S = {\r\n\tSTART_BOUNDARY: s++,\r\n\tHEADER_FIELD_START: s++,\r\n\tHEADER_FIELD: s++,\r\n\tHEADER_VALUE_START: s++,\r\n\tHEADER_VALUE: s++,\r\n\tHEADER_VALUE_ALMOST_DONE: s++,\r\n\tHEADERS_ALMOST_DONE: s++,\r\n\tPART_DATA_START: s++,\r\n\tPART_DATA: s++,\r\n\tEND: s++\r\n};\r\n\r\nlet f = 1;\r\nconst F = {\r\n\tPART_BOUNDARY: f,\r\n\tLAST_BOUNDARY: f *= 2\r\n};\r\n\r\nconst LF = 10;\r\nconst CR = 13;\r\nconst SPACE = 32;\r\nconst HYPHEN = 45;\r\nconst COLON = 58;\r\nconst A = 97;\r\nconst Z = 122;\r\n\r\nconst lower = c => c | 0x20;\r\n\r\nconst noop = () => {};\r\n\r\nclass MultipartParser {\r\n\t/**\r\n\t * @param {string} boundary\r\n\t */\r\n\tconstructor(boundary) {\r\n\t\tthis.index = 0;\r\n\t\tthis.flags = 0;\r\n\r\n\t\tthis.onHeaderEnd = noop;\r\n\t\tthis.onHeaderField = noop;\r\n\t\tthis.onHeadersEnd = noop;\r\n\t\tthis.onHeaderValue = noop;\r\n\t\tthis.onPartBegin = noop;\r\n\t\tthis.onPartData = noop;\r\n\t\tthis.onPartEnd = noop;\r\n\r\n\t\tthis.boundaryChars = {};\r\n\r\n\t\tboundary = '\\r\\n--' + boundary;\r\n\t\tconst ui8a = new Uint8Array(boundary.length);\r\n\t\tfor (let i = 0; i < boundary.length; i++) {\r\n\t\t\tui8a[i] = boundary.charCodeAt(i);\r\n\t\t\tthis.boundaryChars[ui8a[i]] = true;\r\n\t\t}\r\n\r\n\t\tthis.boundary = ui8a;\r\n\t\tthis.lookbehind = new Uint8Array(this.boundary.length + 8);\r\n\t\tthis.state = S.START_BOUNDARY;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {Uint8Array} data\r\n\t */\r\n\twrite(data) {\r\n\t\tlet i = 0;\r\n\t\tconst length_ = data.length;\r\n\t\tlet previousIndex = this.index;\r\n\t\tlet {lookbehind, boundary, boundaryChars, index, state, flags} = this;\r\n\t\tconst boundaryLength = this.boundary.length;\r\n\t\tconst boundaryEnd = boundaryLength - 1;\r\n\t\tconst bufferLength = data.length;\r\n\t\tlet c;\r\n\t\tlet cl;\r\n\r\n\t\tconst mark = name => {\r\n\t\t\tthis[name + 'Mark'] = i;\r\n\t\t};\r\n\r\n\t\tconst clear = name => {\r\n\t\t\tdelete this[name + 'Mark'];\r\n\t\t};\r\n\r\n\t\tconst callback = (callbackSymbol, start, end, ui8a) => {\r\n\t\t\tif (start === undefined || start !== end) {\r\n\t\t\t\tthis[callbackSymbol](ui8a && ui8a.subarray(start, end));\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tconst dataCallback = (name, clear) => {\r\n\t\t\tconst markSymbol = name + 'Mark';\r\n\t\t\tif (!(markSymbol in this)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (clear) {\r\n\t\t\t\tcallback(name, this[markSymbol], i, data);\r\n\t\t\t\tdelete this[markSymbol];\r\n\t\t\t} else {\r\n\t\t\t\tcallback(name, this[markSymbol], data.length, data);\r\n\t\t\t\tthis[markSymbol] = 0;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tfor (i = 0; i < length_; i++) {\r\n\t\t\tc = data[i];\r\n\r\n\t\t\tswitch (state) {\r\n\t\t\t\tcase S.START_BOUNDARY:\r\n\t\t\t\t\tif (index === boundary.length - 2) {\r\n\t\t\t\t\t\tif (c === HYPHEN) {\r\n\t\t\t\t\t\t\tflags |= F.LAST_BOUNDARY;\r\n\t\t\t\t\t\t} else if (c !== CR) {\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tindex++;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t} else if (index - 1 === boundary.length - 2) {\r\n\t\t\t\t\t\tif (flags & F.LAST_BOUNDARY && c === HYPHEN) {\r\n\t\t\t\t\t\t\tstate = S.END;\r\n\t\t\t\t\t\t\tflags = 0;\r\n\t\t\t\t\t\t} else if (!(flags & F.LAST_BOUNDARY) && c === LF) {\r\n\t\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\t\tcallback('onPartBegin');\r\n\t\t\t\t\t\t\tstate = S.HEADER_FIELD_START;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (c !== boundary[index + 2]) {\r\n\t\t\t\t\t\tindex = -2;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (c === boundary[index + 2]) {\r\n\t\t\t\t\t\tindex++;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase S.HEADER_FIELD_START:\r\n\t\t\t\t\tstate = S.HEADER_FIELD;\r\n\t\t\t\t\tmark('onHeaderField');\r\n\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t// falls through\r\n\t\t\t\tcase S.HEADER_FIELD:\r\n\t\t\t\t\tif (c === CR) {\r\n\t\t\t\t\t\tclear('onHeaderField');\r\n\t\t\t\t\t\tstate = S.HEADERS_ALMOST_DONE;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tindex++;\r\n\t\t\t\t\tif (c === HYPHEN) {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (c === COLON) {\r\n\t\t\t\t\t\tif (index === 1) {\r\n\t\t\t\t\t\t\t// empty header field\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tdataCallback('onHeaderField', true);\r\n\t\t\t\t\t\tstate = S.HEADER_VALUE_START;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcl = lower(c);\r\n\t\t\t\t\tif (cl < A || cl > Z) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase S.HEADER_VALUE_START:\r\n\t\t\t\t\tif (c === SPACE) {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tmark('onHeaderValue');\r\n\t\t\t\t\tstate = S.HEADER_VALUE;\r\n\t\t\t\t\t// falls through\r\n\t\t\t\tcase S.HEADER_VALUE:\r\n\t\t\t\t\tif (c === CR) {\r\n\t\t\t\t\t\tdataCallback('onHeaderValue', true);\r\n\t\t\t\t\t\tcallback('onHeaderEnd');\r\n\t\t\t\t\t\tstate = S.HEADER_VALUE_ALMOST_DONE;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase S.HEADER_VALUE_ALMOST_DONE:\r\n\t\t\t\t\tif (c !== LF) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tstate = S.HEADER_FIELD_START;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase S.HEADERS_ALMOST_DONE:\r\n\t\t\t\t\tif (c !== LF) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcallback('onHeadersEnd');\r\n\t\t\t\t\tstate = S.PART_DATA_START;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase S.PART_DATA_START:\r\n\t\t\t\t\tstate = S.PART_DATA;\r\n\t\t\t\t\tmark('onPartData');\r\n\t\t\t\t\t// falls through\r\n\t\t\t\tcase S.PART_DATA:\r\n\t\t\t\t\tpreviousIndex = index;\r\n\r\n\t\t\t\t\tif (index === 0) {\r\n\t\t\t\t\t\t// boyer-moore derrived algorithm to safely skip non-boundary data\r\n\t\t\t\t\t\ti += boundaryEnd;\r\n\t\t\t\t\t\twhile (i < bufferLength && !(data[i] in boundaryChars)) {\r\n\t\t\t\t\t\t\ti += boundaryLength;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\ti -= boundaryEnd;\r\n\t\t\t\t\t\tc = data[i];\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (index < boundary.length) {\r\n\t\t\t\t\t\tif (boundary[index] === c) {\r\n\t\t\t\t\t\t\tif (index === 0) {\r\n\t\t\t\t\t\t\t\tdataCallback('onPartData', true);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tindex++;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (index === boundary.length) {\r\n\t\t\t\t\t\tindex++;\r\n\t\t\t\t\t\tif (c === CR) {\r\n\t\t\t\t\t\t\t// CR = part boundary\r\n\t\t\t\t\t\t\tflags |= F.PART_BOUNDARY;\r\n\t\t\t\t\t\t} else if (c === HYPHEN) {\r\n\t\t\t\t\t\t\t// HYPHEN = end boundary\r\n\t\t\t\t\t\t\tflags |= F.LAST_BOUNDARY;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (index - 1 === boundary.length) {\r\n\t\t\t\t\t\tif (flags & F.PART_BOUNDARY) {\r\n\t\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\t\tif (c === LF) {\r\n\t\t\t\t\t\t\t\t// unset the PART_BOUNDARY flag\r\n\t\t\t\t\t\t\t\tflags &= ~F.PART_BOUNDARY;\r\n\t\t\t\t\t\t\t\tcallback('onPartEnd');\r\n\t\t\t\t\t\t\t\tcallback('onPartBegin');\r\n\t\t\t\t\t\t\t\tstate = S.HEADER_FIELD_START;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (flags & F.LAST_BOUNDARY) {\r\n\t\t\t\t\t\t\tif (c === HYPHEN) {\r\n\t\t\t\t\t\t\t\tcallback('onPartEnd');\r\n\t\t\t\t\t\t\t\tstate = S.END;\r\n\t\t\t\t\t\t\t\tflags = 0;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tindex = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (index > 0) {\r\n\t\t\t\t\t\t// when matching a possible boundary, keep a lookbehind reference\r\n\t\t\t\t\t\t// in case it turns out to be a false lead\r\n\t\t\t\t\t\tlookbehind[index - 1] = c;\r\n\t\t\t\t\t} else if (previousIndex > 0) {\r\n\t\t\t\t\t\t// if our boundary turned out to be rubbish, the captured lookbehind\r\n\t\t\t\t\t\t// belongs to partData\r\n\t\t\t\t\t\tconst _lookbehind = new Uint8Array(lookbehind.buffer, lookbehind.byteOffset, lookbehind.byteLength);\r\n\t\t\t\t\t\tcallback('onPartData', 0, previousIndex, _lookbehind);\r\n\t\t\t\t\t\tpreviousIndex = 0;\r\n\t\t\t\t\t\tmark('onPartData');\r\n\r\n\t\t\t\t\t\t// reconsider the current character even so it interrupted the sequence\r\n\t\t\t\t\t\t// it could be the beginning of a new sequence\r\n\t\t\t\t\t\ti--;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase S.END:\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error(`Unexpected state entered: ${state}`);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tdataCallback('onHeaderField');\r\n\t\tdataCallback('onHeaderValue');\r\n\t\tdataCallback('onPartData');\r\n\r\n\t\t// Update properties for the next call\r\n\t\tthis.index = index;\r\n\t\tthis.state = state;\r\n\t\tthis.flags = flags;\r\n\t}\r\n\r\n\tend() {\r\n\t\tif ((this.state === S.HEADER_FIELD_START && this.index === 0) ||\r\n\t\t\t(this.state === S.PART_DATA && this.index === this.boundary.length)) {\r\n\t\t\tthis.onPartEnd();\r\n\t\t} else if (this.state !== S.END) {\r\n\t\t\tthrow new Error('MultipartParser.end(): stream ended unexpectedly');\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction _fileName(headerValue) {\r\n\t// matches either a quoted-string or a token (RFC 2616 section 19.5.1)\r\n\tconst m = headerValue.match(/\\bfilename=(\"(.*?)\"|([^()<>@,;:\\\\\"/[\\]?={}\\s\\t]+))($|;\\s)/i);\r\n\tif (!m) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tconst match = m[2] || m[3] || '';\r\n\tlet filename = match.slice(match.lastIndexOf('\\\\') + 1);\r\n\tfilename = filename.replace(/%22/g, '\"');\r\n\tfilename = filename.replace(/&#(\\d{4});/g, (m, code) => {\r\n\t\treturn String.fromCharCode(code);\r\n\t});\r\n\treturn filename;\r\n}\r\n\r\nasync function toFormData(Body, ct) {\r\n\tif (!/multipart/i.test(ct)) {\r\n\t\tthrow new TypeError('Failed to fetch');\r\n\t}\r\n\r\n\tconst m = ct.match(/boundary=(?:\"([^\"]+)\"|([^;]+))/i);\r\n\r\n\tif (!m) {\r\n\t\tthrow new TypeError('no or bad content-type header, no multipart boundary');\r\n\t}\r\n\r\n\tconst parser = new MultipartParser(m[1] || m[2]);\r\n\r\n\tlet headerField;\r\n\tlet headerValue;\r\n\tlet entryValue;\r\n\tlet entryName;\r\n\tlet contentType;\r\n\tlet filename;\r\n\tconst entryChunks = [];\r\n\tconst formData = new formdata_polyfill_esm_min_js__WEBPACK_IMPORTED_MODULE_1__.FormData();\r\n\r\n\tconst onPartData = ui8a => {\r\n\t\tentryValue += decoder.decode(ui8a, {stream: true});\r\n\t};\r\n\r\n\tconst appendToFile = ui8a => {\r\n\t\tentryChunks.push(ui8a);\r\n\t};\r\n\r\n\tconst appendFileToFormData = () => {\r\n\t\tconst file = new fetch_blob_from_js__WEBPACK_IMPORTED_MODULE_0__.File(entryChunks, filename, {type: contentType});\r\n\t\tformData.append(entryName, file);\r\n\t};\r\n\r\n\tconst appendEntryToFormData = () => {\r\n\t\tformData.append(entryName, entryValue);\r\n\t};\r\n\r\n\tconst decoder = new TextDecoder('utf-8');\r\n\tdecoder.decode();\r\n\r\n\tparser.onPartBegin = function () {\r\n\t\tparser.onPartData = onPartData;\r\n\t\tparser.onPartEnd = appendEntryToFormData;\r\n\r\n\t\theaderField = '';\r\n\t\theaderValue = '';\r\n\t\tentryValue = '';\r\n\t\tentryName = '';\r\n\t\tcontentType = '';\r\n\t\tfilename = null;\r\n\t\tentryChunks.length = 0;\r\n\t};\r\n\r\n\tparser.onHeaderField = function (ui8a) {\r\n\t\theaderField += decoder.decode(ui8a, {stream: true});\r\n\t};\r\n\r\n\tparser.onHeaderValue = function (ui8a) {\r\n\t\theaderValue += decoder.decode(ui8a, {stream: true});\r\n\t};\r\n\r\n\tparser.onHeaderEnd = function () {\r\n\t\theaderValue += decoder.decode();\r\n\t\theaderField = headerField.toLowerCase();\r\n\r\n\t\tif (headerField === 'content-disposition') {\r\n\t\t\t// matches either a quoted-string or a token (RFC 2616 section 19.5.1)\r\n\t\t\tconst m = headerValue.match(/\\bname=(\"([^\"]*)\"|([^()<>@,;:\\\\\"/[\\]?={}\\s\\t]+))/i);\r\n\r\n\t\t\tif (m) {\r\n\t\t\t\tentryName = m[2] || m[3] || '';\r\n\t\t\t}\r\n\r\n\t\t\tfilename = _fileName(headerValue);\r\n\r\n\t\t\tif (filename) {\r\n\t\t\t\tparser.onPartData = appendToFile;\r\n\t\t\t\tparser.onPartEnd = appendFileToFormData;\r\n\t\t\t}\r\n\t\t} else if (headerField === 'content-type') {\r\n\t\t\tcontentType = headerValue;\r\n\t\t}\r\n\r\n\t\theaderValue = '';\r\n\t\theaderField = '';\r\n\t};\r\n\r\n\tfor await (const chunk of Body) {\r\n\t\tparser.write(chunk);\r\n\t}\r\n\r\n\tparser.end();\r\n\r\n\treturn formData;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/node-fetch/src/utils/multipart-parser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/node_modules/node-fetch/src/utils/referrer.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/google-gax/node_modules/node-fetch/src/utils/referrer.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_REFERRER_POLICY: () => (/* binding */ DEFAULT_REFERRER_POLICY),\n/* harmony export */   ReferrerPolicy: () => (/* binding */ ReferrerPolicy),\n/* harmony export */   determineRequestsReferrer: () => (/* binding */ determineRequestsReferrer),\n/* harmony export */   isOriginPotentiallyTrustworthy: () => (/* binding */ isOriginPotentiallyTrustworthy),\n/* harmony export */   isUrlPotentiallyTrustworthy: () => (/* binding */ isUrlPotentiallyTrustworthy),\n/* harmony export */   parseReferrerPolicyFromHeader: () => (/* binding */ parseReferrerPolicyFromHeader),\n/* harmony export */   stripURLForUseAsAReferrer: () => (/* binding */ stripURLForUseAsAReferrer),\n/* harmony export */   validateReferrerPolicy: () => (/* binding */ validateReferrerPolicy)\n/* harmony export */ });\n/* harmony import */ var node_net__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:net */ \"node:net\");\n\r\n\r\n/**\r\n * @external URL\r\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/URL|URL}\r\n */\r\n\r\n/**\r\n * @module utils/referrer\r\n * @private\r\n */\r\n\r\n/**\r\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#strip-url|Referrer Policy §8.4. Strip url for use as a referrer}\r\n * @param {string} URL\r\n * @param {boolean} [originOnly=false]\r\n */\r\nfunction stripURLForUseAsAReferrer(url, originOnly = false) {\r\n\t// 1. If url is null, return no referrer.\r\n\tif (url == null) { // eslint-disable-line no-eq-null, eqeqeq\r\n\t\treturn 'no-referrer';\r\n\t}\r\n\r\n\turl = new URL(url);\r\n\r\n\t// 2. If url's scheme is a local scheme, then return no referrer.\r\n\tif (/^(about|blob|data):$/.test(url.protocol)) {\r\n\t\treturn 'no-referrer';\r\n\t}\r\n\r\n\t// 3. Set url's username to the empty string.\r\n\turl.username = '';\r\n\r\n\t// 4. Set url's password to null.\r\n\t// Note: `null` appears to be a mistake as this actually results in the password being `\"null\"`.\r\n\turl.password = '';\r\n\r\n\t// 5. Set url's fragment to null.\r\n\t// Note: `null` appears to be a mistake as this actually results in the fragment being `\"#null\"`.\r\n\turl.hash = '';\r\n\r\n\t// 6. If the origin-only flag is true, then:\r\n\tif (originOnly) {\r\n\t\t// 6.1. Set url's path to null.\r\n\t\t// Note: `null` appears to be a mistake as this actually results in the path being `\"/null\"`.\r\n\t\turl.pathname = '';\r\n\r\n\t\t// 6.2. Set url's query to null.\r\n\t\t// Note: `null` appears to be a mistake as this actually results in the query being `\"?null\"`.\r\n\t\turl.search = '';\r\n\t}\r\n\r\n\t// 7. Return url.\r\n\treturn url;\r\n}\r\n\r\n/**\r\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#enumdef-referrerpolicy|enum ReferrerPolicy}\r\n */\r\nconst ReferrerPolicy = new Set([\r\n\t'',\r\n\t'no-referrer',\r\n\t'no-referrer-when-downgrade',\r\n\t'same-origin',\r\n\t'origin',\r\n\t'strict-origin',\r\n\t'origin-when-cross-origin',\r\n\t'strict-origin-when-cross-origin',\r\n\t'unsafe-url'\r\n]);\r\n\r\n/**\r\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#default-referrer-policy|default referrer policy}\r\n */\r\nconst DEFAULT_REFERRER_POLICY = 'strict-origin-when-cross-origin';\r\n\r\n/**\r\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#referrer-policies|Referrer Policy §3. Referrer Policies}\r\n * @param {string} referrerPolicy\r\n * @returns {string} referrerPolicy\r\n */\r\nfunction validateReferrerPolicy(referrerPolicy) {\r\n\tif (!ReferrerPolicy.has(referrerPolicy)) {\r\n\t\tthrow new TypeError(`Invalid referrerPolicy: ${referrerPolicy}`);\r\n\t}\r\n\r\n\treturn referrerPolicy;\r\n}\r\n\r\n/**\r\n * @see {@link https://w3c.github.io/webappsec-secure-contexts/#is-origin-trustworthy|Referrer Policy §3.2. Is origin potentially trustworthy?}\r\n * @param {external:URL} url\r\n * @returns `true`: \"Potentially Trustworthy\", `false`: \"Not Trustworthy\"\r\n */\r\nfunction isOriginPotentiallyTrustworthy(url) {\r\n\t// 1. If origin is an opaque origin, return \"Not Trustworthy\".\r\n\t// Not applicable\r\n\r\n\t// 2. Assert: origin is a tuple origin.\r\n\t// Not for implementations\r\n\r\n\t// 3. If origin's scheme is either \"https\" or \"wss\", return \"Potentially Trustworthy\".\r\n\tif (/^(http|ws)s:$/.test(url.protocol)) {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// 4. If origin's host component matches one of the CIDR notations 127.0.0.0/8 or ::1/128 [RFC4632], return \"Potentially Trustworthy\".\r\n\tconst hostIp = url.host.replace(/(^\\[)|(]$)/g, '');\r\n\tconst hostIPVersion = (0,node_net__WEBPACK_IMPORTED_MODULE_0__.isIP)(hostIp);\r\n\r\n\tif (hostIPVersion === 4 && /^127\\./.test(hostIp)) {\r\n\t\treturn true;\r\n\t}\r\n\r\n\tif (hostIPVersion === 6 && /^(((0+:){7})|(::(0+:){0,6}))0*1$/.test(hostIp)) {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// 5. If origin's host component is \"localhost\" or falls within \".localhost\", and the user agent conforms to the name resolution rules in [let-localhost-be-localhost], return \"Potentially Trustworthy\".\r\n\t// We are returning FALSE here because we cannot ensure conformance to\r\n\t// let-localhost-be-loalhost (https://tools.ietf.org/html/draft-west-let-localhost-be-localhost)\r\n\tif (url.host === 'localhost' || url.host.endsWith('.localhost')) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// 6. If origin's scheme component is file, return \"Potentially Trustworthy\".\r\n\tif (url.protocol === 'file:') {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// 7. If origin's scheme component is one which the user agent considers to be authenticated, return \"Potentially Trustworthy\".\r\n\t// Not supported\r\n\r\n\t// 8. If origin has been configured as a trustworthy origin, return \"Potentially Trustworthy\".\r\n\t// Not supported\r\n\r\n\t// 9. Return \"Not Trustworthy\".\r\n\treturn false;\r\n}\r\n\r\n/**\r\n * @see {@link https://w3c.github.io/webappsec-secure-contexts/#is-url-trustworthy|Referrer Policy §3.3. Is url potentially trustworthy?}\r\n * @param {external:URL} url\r\n * @returns `true`: \"Potentially Trustworthy\", `false`: \"Not Trustworthy\"\r\n */\r\nfunction isUrlPotentiallyTrustworthy(url) {\r\n\t// 1. If url is \"about:blank\" or \"about:srcdoc\", return \"Potentially Trustworthy\".\r\n\tif (/^about:(blank|srcdoc)$/.test(url)) {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// 2. If url's scheme is \"data\", return \"Potentially Trustworthy\".\r\n\tif (url.protocol === 'data:') {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// Note: The origin of blob: and filesystem: URLs is the origin of the context in which they were\r\n\t// created. Therefore, blobs created in a trustworthy origin will themselves be potentially\r\n\t// trustworthy.\r\n\tif (/^(blob|filesystem):$/.test(url.protocol)) {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// 3. Return the result of executing §3.2 Is origin potentially trustworthy? on url's origin.\r\n\treturn isOriginPotentiallyTrustworthy(url);\r\n}\r\n\r\n/**\r\n * Modifies the referrerURL to enforce any extra security policy considerations.\r\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer|Referrer Policy §8.3. Determine request's Referrer}, step 7\r\n * @callback module:utils/referrer~referrerURLCallback\r\n * @param {external:URL} referrerURL\r\n * @returns {external:URL} modified referrerURL\r\n */\r\n\r\n/**\r\n * Modifies the referrerOrigin to enforce any extra security policy considerations.\r\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer|Referrer Policy §8.3. Determine request's Referrer}, step 7\r\n * @callback module:utils/referrer~referrerOriginCallback\r\n * @param {external:URL} referrerOrigin\r\n * @returns {external:URL} modified referrerOrigin\r\n */\r\n\r\n/**\r\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer|Referrer Policy §8.3. Determine request's Referrer}\r\n * @param {Request} request\r\n * @param {object} o\r\n * @param {module:utils/referrer~referrerURLCallback} o.referrerURLCallback\r\n * @param {module:utils/referrer~referrerOriginCallback} o.referrerOriginCallback\r\n * @returns {external:URL} Request's referrer\r\n */\r\nfunction determineRequestsReferrer(request, {referrerURLCallback, referrerOriginCallback} = {}) {\r\n\t// There are 2 notes in the specification about invalid pre-conditions.  We return null, here, for\r\n\t// these cases:\r\n\t// > Note: If request's referrer is \"no-referrer\", Fetch will not call into this algorithm.\r\n\t// > Note: If request's referrer policy is the empty string, Fetch will not call into this\r\n\t// > algorithm.\r\n\tif (request.referrer === 'no-referrer' || request.referrerPolicy === '') {\r\n\t\treturn null;\r\n\t}\r\n\r\n\t// 1. Let policy be request's associated referrer policy.\r\n\tconst policy = request.referrerPolicy;\r\n\r\n\t// 2. Let environment be request's client.\r\n\t// not applicable to node.js\r\n\r\n\t// 3. Switch on request's referrer:\r\n\tif (request.referrer === 'about:client') {\r\n\t\treturn 'no-referrer';\r\n\t}\r\n\r\n\t// \"a URL\": Let referrerSource be request's referrer.\r\n\tconst referrerSource = request.referrer;\r\n\r\n\t// 4. Let request's referrerURL be the result of stripping referrerSource for use as a referrer.\r\n\tlet referrerURL = stripURLForUseAsAReferrer(referrerSource);\r\n\r\n\t// 5. Let referrerOrigin be the result of stripping referrerSource for use as a referrer, with the\r\n\t//    origin-only flag set to true.\r\n\tlet referrerOrigin = stripURLForUseAsAReferrer(referrerSource, true);\r\n\r\n\t// 6. If the result of serializing referrerURL is a string whose length is greater than 4096, set\r\n\t//    referrerURL to referrerOrigin.\r\n\tif (referrerURL.toString().length > 4096) {\r\n\t\treferrerURL = referrerOrigin;\r\n\t}\r\n\r\n\t// 7. The user agent MAY alter referrerURL or referrerOrigin at this point to enforce arbitrary\r\n\t//    policy considerations in the interests of minimizing data leakage. For example, the user\r\n\t//    agent could strip the URL down to an origin, modify its host, replace it with an empty\r\n\t//    string, etc.\r\n\tif (referrerURLCallback) {\r\n\t\treferrerURL = referrerURLCallback(referrerURL);\r\n\t}\r\n\r\n\tif (referrerOriginCallback) {\r\n\t\treferrerOrigin = referrerOriginCallback(referrerOrigin);\r\n\t}\r\n\r\n\t// 8.Execute the statements corresponding to the value of policy:\r\n\tconst currentURL = new URL(request.url);\r\n\r\n\tswitch (policy) {\r\n\t\tcase 'no-referrer':\r\n\t\t\treturn 'no-referrer';\r\n\r\n\t\tcase 'origin':\r\n\t\t\treturn referrerOrigin;\r\n\r\n\t\tcase 'unsafe-url':\r\n\t\t\treturn referrerURL;\r\n\r\n\t\tcase 'strict-origin':\r\n\t\t\t// 1. If referrerURL is a potentially trustworthy URL and request's current URL is not a\r\n\t\t\t//    potentially trustworthy URL, then return no referrer.\r\n\t\t\tif (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {\r\n\t\t\t\treturn 'no-referrer';\r\n\t\t\t}\r\n\r\n\t\t\t// 2. Return referrerOrigin.\r\n\t\t\treturn referrerOrigin.toString();\r\n\r\n\t\tcase 'strict-origin-when-cross-origin':\r\n\t\t\t// 1. If the origin of referrerURL and the origin of request's current URL are the same, then\r\n\t\t\t//    return referrerURL.\r\n\t\t\tif (referrerURL.origin === currentURL.origin) {\r\n\t\t\t\treturn referrerURL;\r\n\t\t\t}\r\n\r\n\t\t\t// 2. If referrerURL is a potentially trustworthy URL and request's current URL is not a\r\n\t\t\t//    potentially trustworthy URL, then return no referrer.\r\n\t\t\tif (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {\r\n\t\t\t\treturn 'no-referrer';\r\n\t\t\t}\r\n\r\n\t\t\t// 3. Return referrerOrigin.\r\n\t\t\treturn referrerOrigin;\r\n\r\n\t\tcase 'same-origin':\r\n\t\t\t// 1. If the origin of referrerURL and the origin of request's current URL are the same, then\r\n\t\t\t//    return referrerURL.\r\n\t\t\tif (referrerURL.origin === currentURL.origin) {\r\n\t\t\t\treturn referrerURL;\r\n\t\t\t}\r\n\r\n\t\t\t// 2. Return no referrer.\r\n\t\t\treturn 'no-referrer';\r\n\r\n\t\tcase 'origin-when-cross-origin':\r\n\t\t\t// 1. If the origin of referrerURL and the origin of request's current URL are the same, then\r\n\t\t\t//    return referrerURL.\r\n\t\t\tif (referrerURL.origin === currentURL.origin) {\r\n\t\t\t\treturn referrerURL;\r\n\t\t\t}\r\n\r\n\t\t\t// Return referrerOrigin.\r\n\t\t\treturn referrerOrigin;\r\n\r\n\t\tcase 'no-referrer-when-downgrade':\r\n\t\t\t// 1. If referrerURL is a potentially trustworthy URL and request's current URL is not a\r\n\t\t\t//    potentially trustworthy URL, then return no referrer.\r\n\t\t\tif (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {\r\n\t\t\t\treturn 'no-referrer';\r\n\t\t\t}\r\n\r\n\t\t\t// 2. Return referrerURL.\r\n\t\t\treturn referrerURL;\r\n\r\n\t\tdefault:\r\n\t\t\tthrow new TypeError(`Invalid referrerPolicy: ${policy}`);\r\n\t}\r\n}\r\n\r\n/**\r\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#parse-referrer-policy-from-header|Referrer Policy §8.1. Parse a referrer policy from a Referrer-Policy header}\r\n * @param {Headers} headers Response headers\r\n * @returns {string} policy\r\n */\r\nfunction parseReferrerPolicyFromHeader(headers) {\r\n\t// 1. Let policy-tokens be the result of extracting header list values given `Referrer-Policy`\r\n\t//    and response’s header list.\r\n\tconst policyTokens = (headers.get('referrer-policy') || '').split(/[,\\s]+/);\r\n\r\n\t// 2. Let policy be the empty string.\r\n\tlet policy = '';\r\n\r\n\t// 3. For each token in policy-tokens, if token is a referrer policy and token is not the empty\r\n\t//    string, then set policy to token.\r\n\t// Note: This algorithm loops over multiple policy values to allow deployment of new policy\r\n\t// values with fallbacks for older user agents, as described in § 11.1 Unknown Policy Values.\r\n\tfor (const token of policyTokens) {\r\n\t\tif (token && ReferrerPolicy.has(token)) {\r\n\t\t\tpolicy = token;\r\n\t\t}\r\n\t}\r\n\r\n\t// 4. Return policy.\r\n\treturn policy;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-gax/node_modules/node-fetch/src/utils/referrer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/protos/iam_service.json":
/*!***************************************************************!*\
  !*** ./node_modules/google-gax/build/protos/iam_service.json ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"nested":{"google":{"nested":{"iam":{"nested":{"v1":{"options":{"cc_enable_arenas":true,"csharp_namespace":"Google.Cloud.Iam.V1","go_package":"google.golang.org/genproto/googleapis/iam/v1;iam","java_multiple_files":true,"java_outer_classname":"PolicyProto","java_package":"com.google.iam.v1","php_namespace":"Google\\\\Cloud\\\\Iam\\\\V1"},"nested":{"IAMPolicy":{"options":{"(google.api.default_host)":"iam-meta-api.googleapis.com"},"methods":{"SetIamPolicy":{"requestType":"SetIamPolicyRequest","responseType":"Policy","options":{"(google.api.http).post":"/v1/{resource=**}:setIamPolicy","(google.api.http).body":"*"},"parsedOptions":[{"(google.api.http)":{"post":"/v1/{resource=**}:setIamPolicy","body":"*"}}]},"GetIamPolicy":{"requestType":"GetIamPolicyRequest","responseType":"Policy","options":{"(google.api.http).post":"/v1/{resource=**}:getIamPolicy","(google.api.http).body":"*"},"parsedOptions":[{"(google.api.http)":{"post":"/v1/{resource=**}:getIamPolicy","body":"*"}}]},"TestIamPermissions":{"requestType":"TestIamPermissionsRequest","responseType":"TestIamPermissionsResponse","options":{"(google.api.http).post":"/v1/{resource=**}:testIamPermissions","(google.api.http).body":"*"},"parsedOptions":[{"(google.api.http)":{"post":"/v1/{resource=**}:testIamPermissions","body":"*"}}]}}},"SetIamPolicyRequest":{"fields":{"resource":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED","(google.api.resource_reference).type":"*"}},"policy":{"type":"Policy","id":2,"options":{"(google.api.field_behavior)":"REQUIRED"}}}},"GetIamPolicyRequest":{"fields":{"resource":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED","(google.api.resource_reference).type":"*"}},"options":{"type":"GetPolicyOptions","id":2}}},"TestIamPermissionsRequest":{"fields":{"resource":{"type":"string","id":1,"options":{"(google.api.field_behavior)":"REQUIRED","(google.api.resource_reference).type":"*"}},"permissions":{"rule":"repeated","type":"string","id":2,"options":{"(google.api.field_behavior)":"REQUIRED"}}}},"TestIamPermissionsResponse":{"fields":{"permissions":{"rule":"repeated","type":"string","id":1}}},"GetPolicyOptions":{"fields":{"requestedPolicyVersion":{"type":"int32","id":1}}},"Policy":{"fields":{"version":{"type":"int32","id":1},"bindings":{"rule":"repeated","type":"Binding","id":4},"etag":{"type":"bytes","id":3}}},"Binding":{"fields":{"role":{"type":"string","id":1},"members":{"rule":"repeated","type":"string","id":2},"condition":{"type":"google.type.Expr","id":3}}},"PolicyDelta":{"fields":{"bindingDeltas":{"rule":"repeated","type":"BindingDelta","id":1},"auditConfigDeltas":{"rule":"repeated","type":"AuditConfigDelta","id":2}}},"BindingDelta":{"fields":{"action":{"type":"Action","id":1},"role":{"type":"string","id":2},"member":{"type":"string","id":3},"condition":{"type":"google.type.Expr","id":4}},"nested":{"Action":{"values":{"ACTION_UNSPECIFIED":0,"ADD":1,"REMOVE":2}}}},"AuditConfigDelta":{"fields":{"action":{"type":"Action","id":1},"service":{"type":"string","id":2},"exemptedMember":{"type":"string","id":3},"logType":{"type":"string","id":4}},"nested":{"Action":{"values":{"ACTION_UNSPECIFIED":0,"ADD":1,"REMOVE":2}}}},"logging":{"options":{"csharp_namespace":"Google.Cloud.Iam.V1.Logging","go_package":"google.golang.org/genproto/googleapis/iam/v1/logging;logging","java_multiple_files":true,"java_outer_classname":"AuditDataProto","java_package":"com.google.iam.v1.logging"},"nested":{"AuditData":{"fields":{"policyDelta":{"type":"google.iam.v1.PolicyDelta","id":2}}}}}}}}},"api":{"options":{"go_package":"google.golang.org/genproto/googleapis/api/annotations;annotations","java_multiple_files":true,"java_outer_classname":"ResourceProto","java_package":"com.google.api","objc_class_prefix":"GAPI","cc_enable_arenas":true},"nested":{"http":{"type":"HttpRule","id":72295728,"extend":"google.protobuf.MethodOptions"},"Http":{"fields":{"rules":{"rule":"repeated","type":"HttpRule","id":1},"fullyDecodeReservedExpansion":{"type":"bool","id":2}}},"HttpRule":{"oneofs":{"pattern":{"oneof":["get","put","post","delete","patch","custom"]}},"fields":{"selector":{"type":"string","id":1},"get":{"type":"string","id":2},"put":{"type":"string","id":3},"post":{"type":"string","id":4},"delete":{"type":"string","id":5},"patch":{"type":"string","id":6},"custom":{"type":"CustomHttpPattern","id":8},"body":{"type":"string","id":7},"responseBody":{"type":"string","id":12},"additionalBindings":{"rule":"repeated","type":"HttpRule","id":11}}},"CustomHttpPattern":{"fields":{"kind":{"type":"string","id":1},"path":{"type":"string","id":2}}},"methodSignature":{"rule":"repeated","type":"string","id":1051,"extend":"google.protobuf.MethodOptions"},"defaultHost":{"type":"string","id":1049,"extend":"google.protobuf.ServiceOptions"},"oauthScopes":{"type":"string","id":1050,"extend":"google.protobuf.ServiceOptions"},"fieldBehavior":{"rule":"repeated","type":"google.api.FieldBehavior","id":1052,"extend":"google.protobuf.FieldOptions"},"FieldBehavior":{"values":{"FIELD_BEHAVIOR_UNSPECIFIED":0,"OPTIONAL":1,"REQUIRED":2,"OUTPUT_ONLY":3,"INPUT_ONLY":4,"IMMUTABLE":5}},"resourceReference":{"type":"google.api.ResourceReference","id":1055,"extend":"google.protobuf.FieldOptions"},"resourceDefinition":{"rule":"repeated","type":"google.api.ResourceDescriptor","id":1053,"extend":"google.protobuf.FileOptions"},"resource":{"type":"google.api.ResourceDescriptor","id":1053,"extend":"google.protobuf.MessageOptions"},"ResourceDescriptor":{"fields":{"type":{"type":"string","id":1},"pattern":{"rule":"repeated","type":"string","id":2},"nameField":{"type":"string","id":3},"history":{"type":"History","id":4},"plural":{"type":"string","id":5},"singular":{"type":"string","id":6}},"nested":{"History":{"values":{"HISTORY_UNSPECIFIED":0,"ORIGINALLY_SINGLE_PATTERN":1,"FUTURE_MULTI_PATTERN":2}}}},"ResourceReference":{"fields":{"type":{"type":"string","id":1},"childType":{"type":"string","id":2}}}}},"protobuf":{"options":{"go_package":"github.com/golang/protobuf/protoc-gen-go/descriptor;descriptor","java_package":"com.google.protobuf","java_outer_classname":"DescriptorProtos","csharp_namespace":"Google.Protobuf.Reflection","objc_class_prefix":"GPB","cc_enable_arenas":true,"optimize_for":"SPEED"},"nested":{"FileDescriptorSet":{"fields":{"file":{"rule":"repeated","type":"FileDescriptorProto","id":1}}},"FileDescriptorProto":{"fields":{"name":{"type":"string","id":1},"package":{"type":"string","id":2},"dependency":{"rule":"repeated","type":"string","id":3},"publicDependency":{"rule":"repeated","type":"int32","id":10,"options":{"packed":false}},"weakDependency":{"rule":"repeated","type":"int32","id":11,"options":{"packed":false}},"messageType":{"rule":"repeated","type":"DescriptorProto","id":4},"enumType":{"rule":"repeated","type":"EnumDescriptorProto","id":5},"service":{"rule":"repeated","type":"ServiceDescriptorProto","id":6},"extension":{"rule":"repeated","type":"FieldDescriptorProto","id":7},"options":{"type":"FileOptions","id":8},"sourceCodeInfo":{"type":"SourceCodeInfo","id":9},"syntax":{"type":"string","id":12}}},"DescriptorProto":{"fields":{"name":{"type":"string","id":1},"field":{"rule":"repeated","type":"FieldDescriptorProto","id":2},"extension":{"rule":"repeated","type":"FieldDescriptorProto","id":6},"nestedType":{"rule":"repeated","type":"DescriptorProto","id":3},"enumType":{"rule":"repeated","type":"EnumDescriptorProto","id":4},"extensionRange":{"rule":"repeated","type":"ExtensionRange","id":5},"oneofDecl":{"rule":"repeated","type":"OneofDescriptorProto","id":8},"options":{"type":"MessageOptions","id":7},"reservedRange":{"rule":"repeated","type":"ReservedRange","id":9},"reservedName":{"rule":"repeated","type":"string","id":10}},"nested":{"ExtensionRange":{"fields":{"start":{"type":"int32","id":1},"end":{"type":"int32","id":2},"options":{"type":"ExtensionRangeOptions","id":3}}},"ReservedRange":{"fields":{"start":{"type":"int32","id":1},"end":{"type":"int32","id":2}}}}},"ExtensionRangeOptions":{"fields":{"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"FieldDescriptorProto":{"fields":{"name":{"type":"string","id":1},"number":{"type":"int32","id":3},"label":{"type":"Label","id":4},"type":{"type":"Type","id":5},"typeName":{"type":"string","id":6},"extendee":{"type":"string","id":2},"defaultValue":{"type":"string","id":7},"oneofIndex":{"type":"int32","id":9},"jsonName":{"type":"string","id":10},"options":{"type":"FieldOptions","id":8},"proto3Optional":{"type":"bool","id":17}},"nested":{"Type":{"values":{"TYPE_DOUBLE":1,"TYPE_FLOAT":2,"TYPE_INT64":3,"TYPE_UINT64":4,"TYPE_INT32":5,"TYPE_FIXED64":6,"TYPE_FIXED32":7,"TYPE_BOOL":8,"TYPE_STRING":9,"TYPE_GROUP":10,"TYPE_MESSAGE":11,"TYPE_BYTES":12,"TYPE_UINT32":13,"TYPE_ENUM":14,"TYPE_SFIXED32":15,"TYPE_SFIXED64":16,"TYPE_SINT32":17,"TYPE_SINT64":18}},"Label":{"values":{"LABEL_OPTIONAL":1,"LABEL_REQUIRED":2,"LABEL_REPEATED":3}}}},"OneofDescriptorProto":{"fields":{"name":{"type":"string","id":1},"options":{"type":"OneofOptions","id":2}}},"EnumDescriptorProto":{"fields":{"name":{"type":"string","id":1},"value":{"rule":"repeated","type":"EnumValueDescriptorProto","id":2},"options":{"type":"EnumOptions","id":3},"reservedRange":{"rule":"repeated","type":"EnumReservedRange","id":4},"reservedName":{"rule":"repeated","type":"string","id":5}},"nested":{"EnumReservedRange":{"fields":{"start":{"type":"int32","id":1},"end":{"type":"int32","id":2}}}}},"EnumValueDescriptorProto":{"fields":{"name":{"type":"string","id":1},"number":{"type":"int32","id":2},"options":{"type":"EnumValueOptions","id":3}}},"ServiceDescriptorProto":{"fields":{"name":{"type":"string","id":1},"method":{"rule":"repeated","type":"MethodDescriptorProto","id":2},"options":{"type":"ServiceOptions","id":3}}},"MethodDescriptorProto":{"fields":{"name":{"type":"string","id":1},"inputType":{"type":"string","id":2},"outputType":{"type":"string","id":3},"options":{"type":"MethodOptions","id":4},"clientStreaming":{"type":"bool","id":5,"options":{"default":false}},"serverStreaming":{"type":"bool","id":6,"options":{"default":false}}}},"FileOptions":{"fields":{"javaPackage":{"type":"string","id":1},"javaOuterClassname":{"type":"string","id":8},"javaMultipleFiles":{"type":"bool","id":10,"options":{"default":false}},"javaGenerateEqualsAndHash":{"type":"bool","id":20,"options":{"deprecated":true}},"javaStringCheckUtf8":{"type":"bool","id":27,"options":{"default":false}},"optimizeFor":{"type":"OptimizeMode","id":9,"options":{"default":"SPEED"}},"goPackage":{"type":"string","id":11},"ccGenericServices":{"type":"bool","id":16,"options":{"default":false}},"javaGenericServices":{"type":"bool","id":17,"options":{"default":false}},"pyGenericServices":{"type":"bool","id":18,"options":{"default":false}},"phpGenericServices":{"type":"bool","id":42,"options":{"default":false}},"deprecated":{"type":"bool","id":23,"options":{"default":false}},"ccEnableArenas":{"type":"bool","id":31,"options":{"default":true}},"objcClassPrefix":{"type":"string","id":36},"csharpNamespace":{"type":"string","id":37},"swiftPrefix":{"type":"string","id":39},"phpClassPrefix":{"type":"string","id":40},"phpNamespace":{"type":"string","id":41},"phpMetadataNamespace":{"type":"string","id":44},"rubyPackage":{"type":"string","id":45},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[38,38]],"nested":{"OptimizeMode":{"values":{"SPEED":1,"CODE_SIZE":2,"LITE_RUNTIME":3}}}},"MessageOptions":{"fields":{"messageSetWireFormat":{"type":"bool","id":1,"options":{"default":false}},"noStandardDescriptorAccessor":{"type":"bool","id":2,"options":{"default":false}},"deprecated":{"type":"bool","id":3,"options":{"default":false}},"mapEntry":{"type":"bool","id":7},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[8,8],[9,9]]},"FieldOptions":{"fields":{"ctype":{"type":"CType","id":1,"options":{"default":"STRING"}},"packed":{"type":"bool","id":2},"jstype":{"type":"JSType","id":6,"options":{"default":"JS_NORMAL"}},"lazy":{"type":"bool","id":5,"options":{"default":false}},"deprecated":{"type":"bool","id":3,"options":{"default":false}},"weak":{"type":"bool","id":10,"options":{"default":false}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[4,4]],"nested":{"CType":{"values":{"STRING":0,"CORD":1,"STRING_PIECE":2}},"JSType":{"values":{"JS_NORMAL":0,"JS_STRING":1,"JS_NUMBER":2}}}},"OneofOptions":{"fields":{"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"EnumOptions":{"fields":{"allowAlias":{"type":"bool","id":2},"deprecated":{"type":"bool","id":3,"options":{"default":false}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[5,5]]},"EnumValueOptions":{"fields":{"deprecated":{"type":"bool","id":1,"options":{"default":false}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"ServiceOptions":{"fields":{"deprecated":{"type":"bool","id":33,"options":{"default":false}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"MethodOptions":{"fields":{"deprecated":{"type":"bool","id":33,"options":{"default":false}},"idempotencyLevel":{"type":"IdempotencyLevel","id":34,"options":{"default":"IDEMPOTENCY_UNKNOWN"}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"nested":{"IdempotencyLevel":{"values":{"IDEMPOTENCY_UNKNOWN":0,"NO_SIDE_EFFECTS":1,"IDEMPOTENT":2}}}},"UninterpretedOption":{"fields":{"name":{"rule":"repeated","type":"NamePart","id":2},"identifierValue":{"type":"string","id":3},"positiveIntValue":{"type":"uint64","id":4},"negativeIntValue":{"type":"int64","id":5},"doubleValue":{"type":"double","id":6},"stringValue":{"type":"bytes","id":7},"aggregateValue":{"type":"string","id":8}},"nested":{"NamePart":{"fields":{"namePart":{"rule":"required","type":"string","id":1},"isExtension":{"rule":"required","type":"bool","id":2}}}}},"SourceCodeInfo":{"fields":{"location":{"rule":"repeated","type":"Location","id":1}},"nested":{"Location":{"fields":{"path":{"rule":"repeated","type":"int32","id":1},"span":{"rule":"repeated","type":"int32","id":2},"leadingComments":{"type":"string","id":3},"trailingComments":{"type":"string","id":4},"leadingDetachedComments":{"rule":"repeated","type":"string","id":6}}}}},"GeneratedCodeInfo":{"fields":{"annotation":{"rule":"repeated","type":"Annotation","id":1}},"nested":{"Annotation":{"fields":{"path":{"rule":"repeated","type":"int32","id":1},"sourceFile":{"type":"string","id":2},"begin":{"type":"int32","id":3},"end":{"type":"int32","id":4}}}}}}},"type":{"options":{"go_package":"google.golang.org/genproto/googleapis/type/expr;expr","java_multiple_files":true,"java_outer_classname":"ExprProto","java_package":"com.google.type","objc_class_prefix":"GTP"},"nested":{"Expr":{"fields":{"expression":{"type":"string","id":1},"title":{"type":"string","id":2},"description":{"type":"string","id":3},"location":{"type":"string","id":4}}}}}}}}}');

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/protos/locations.json":
/*!*************************************************************!*\
  !*** ./node_modules/google-gax/build/protos/locations.json ***!
  \*************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"nested":{"google":{"nested":{"cloud":{"nested":{"location":{"options":{"cc_enable_arenas":true,"go_package":"google.golang.org/genproto/googleapis/cloud/location;location","java_multiple_files":true,"java_outer_classname":"LocationsProto","java_package":"com.google.cloud.location"},"nested":{"Locations":{"options":{"(google.api.default_host)":"cloud.googleapis.com","(google.api.oauth_scopes)":"https://www.googleapis.com/auth/cloud-platform"},"methods":{"ListLocations":{"requestType":"ListLocationsRequest","responseType":"ListLocationsResponse","options":{"(google.api.http).get":"/v1/{name=locations}","(google.api.http).additional_bindings.get":"/v1/{name=projects/*}/locations"},"parsedOptions":[{"(google.api.http)":{"get":"/v1/{name=locations}","additional_bindings":{"get":"/v1/{name=projects/*}/locations"}}}]},"GetLocation":{"requestType":"GetLocationRequest","responseType":"Location","options":{"(google.api.http).get":"/v1/{name=locations/*}","(google.api.http).additional_bindings.get":"/v1/{name=projects/*/locations/*}"},"parsedOptions":[{"(google.api.http)":{"get":"/v1/{name=locations/*}","additional_bindings":{"get":"/v1/{name=projects/*/locations/*}"}}}]}}},"ListLocationsRequest":{"fields":{"name":{"type":"string","id":1},"filter":{"type":"string","id":2},"pageSize":{"type":"int32","id":3},"pageToken":{"type":"string","id":4}}},"ListLocationsResponse":{"fields":{"locations":{"rule":"repeated","type":"Location","id":1},"nextPageToken":{"type":"string","id":2}}},"GetLocationRequest":{"fields":{"name":{"type":"string","id":1}}},"Location":{"fields":{"name":{"type":"string","id":1},"locationId":{"type":"string","id":4},"displayName":{"type":"string","id":5},"labels":{"keyType":"string","type":"string","id":2},"metadata":{"type":"google.protobuf.Any","id":3}}}}}}},"api":{"options":{"go_package":"google.golang.org/genproto/googleapis/api/annotations;annotations","java_multiple_files":true,"java_outer_classname":"ClientProto","java_package":"com.google.api","objc_class_prefix":"GAPI","cc_enable_arenas":true},"nested":{"http":{"type":"HttpRule","id":72295728,"extend":"google.protobuf.MethodOptions"},"Http":{"fields":{"rules":{"rule":"repeated","type":"HttpRule","id":1},"fullyDecodeReservedExpansion":{"type":"bool","id":2}}},"HttpRule":{"oneofs":{"pattern":{"oneof":["get","put","post","delete","patch","custom"]}},"fields":{"selector":{"type":"string","id":1},"get":{"type":"string","id":2},"put":{"type":"string","id":3},"post":{"type":"string","id":4},"delete":{"type":"string","id":5},"patch":{"type":"string","id":6},"custom":{"type":"CustomHttpPattern","id":8},"body":{"type":"string","id":7},"responseBody":{"type":"string","id":12},"additionalBindings":{"rule":"repeated","type":"HttpRule","id":11}}},"CustomHttpPattern":{"fields":{"kind":{"type":"string","id":1},"path":{"type":"string","id":2}}},"methodSignature":{"rule":"repeated","type":"string","id":1051,"extend":"google.protobuf.MethodOptions"},"defaultHost":{"type":"string","id":1049,"extend":"google.protobuf.ServiceOptions"},"oauthScopes":{"type":"string","id":1050,"extend":"google.protobuf.ServiceOptions"}}},"protobuf":{"options":{"go_package":"google.golang.org/protobuf/types/descriptorpb","java_package":"com.google.protobuf","java_outer_classname":"DescriptorProtos","csharp_namespace":"Google.Protobuf.Reflection","objc_class_prefix":"GPB","cc_enable_arenas":true,"optimize_for":"SPEED"},"nested":{"FileDescriptorSet":{"fields":{"file":{"rule":"repeated","type":"FileDescriptorProto","id":1}}},"FileDescriptorProto":{"fields":{"name":{"type":"string","id":1},"package":{"type":"string","id":2},"dependency":{"rule":"repeated","type":"string","id":3},"publicDependency":{"rule":"repeated","type":"int32","id":10,"options":{"packed":false}},"weakDependency":{"rule":"repeated","type":"int32","id":11,"options":{"packed":false}},"messageType":{"rule":"repeated","type":"DescriptorProto","id":4},"enumType":{"rule":"repeated","type":"EnumDescriptorProto","id":5},"service":{"rule":"repeated","type":"ServiceDescriptorProto","id":6},"extension":{"rule":"repeated","type":"FieldDescriptorProto","id":7},"options":{"type":"FileOptions","id":8},"sourceCodeInfo":{"type":"SourceCodeInfo","id":9},"syntax":{"type":"string","id":12}}},"DescriptorProto":{"fields":{"name":{"type":"string","id":1},"field":{"rule":"repeated","type":"FieldDescriptorProto","id":2},"extension":{"rule":"repeated","type":"FieldDescriptorProto","id":6},"nestedType":{"rule":"repeated","type":"DescriptorProto","id":3},"enumType":{"rule":"repeated","type":"EnumDescriptorProto","id":4},"extensionRange":{"rule":"repeated","type":"ExtensionRange","id":5},"oneofDecl":{"rule":"repeated","type":"OneofDescriptorProto","id":8},"options":{"type":"MessageOptions","id":7},"reservedRange":{"rule":"repeated","type":"ReservedRange","id":9},"reservedName":{"rule":"repeated","type":"string","id":10}},"nested":{"ExtensionRange":{"fields":{"start":{"type":"int32","id":1},"end":{"type":"int32","id":2},"options":{"type":"ExtensionRangeOptions","id":3}}},"ReservedRange":{"fields":{"start":{"type":"int32","id":1},"end":{"type":"int32","id":2}}}}},"ExtensionRangeOptions":{"fields":{"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"FieldDescriptorProto":{"fields":{"name":{"type":"string","id":1},"number":{"type":"int32","id":3},"label":{"type":"Label","id":4},"type":{"type":"Type","id":5},"typeName":{"type":"string","id":6},"extendee":{"type":"string","id":2},"defaultValue":{"type":"string","id":7},"oneofIndex":{"type":"int32","id":9},"jsonName":{"type":"string","id":10},"options":{"type":"FieldOptions","id":8},"proto3Optional":{"type":"bool","id":17}},"nested":{"Type":{"values":{"TYPE_DOUBLE":1,"TYPE_FLOAT":2,"TYPE_INT64":3,"TYPE_UINT64":4,"TYPE_INT32":5,"TYPE_FIXED64":6,"TYPE_FIXED32":7,"TYPE_BOOL":8,"TYPE_STRING":9,"TYPE_GROUP":10,"TYPE_MESSAGE":11,"TYPE_BYTES":12,"TYPE_UINT32":13,"TYPE_ENUM":14,"TYPE_SFIXED32":15,"TYPE_SFIXED64":16,"TYPE_SINT32":17,"TYPE_SINT64":18}},"Label":{"values":{"LABEL_OPTIONAL":1,"LABEL_REQUIRED":2,"LABEL_REPEATED":3}}}},"OneofDescriptorProto":{"fields":{"name":{"type":"string","id":1},"options":{"type":"OneofOptions","id":2}}},"EnumDescriptorProto":{"fields":{"name":{"type":"string","id":1},"value":{"rule":"repeated","type":"EnumValueDescriptorProto","id":2},"options":{"type":"EnumOptions","id":3},"reservedRange":{"rule":"repeated","type":"EnumReservedRange","id":4},"reservedName":{"rule":"repeated","type":"string","id":5}},"nested":{"EnumReservedRange":{"fields":{"start":{"type":"int32","id":1},"end":{"type":"int32","id":2}}}}},"EnumValueDescriptorProto":{"fields":{"name":{"type":"string","id":1},"number":{"type":"int32","id":2},"options":{"type":"EnumValueOptions","id":3}}},"ServiceDescriptorProto":{"fields":{"name":{"type":"string","id":1},"method":{"rule":"repeated","type":"MethodDescriptorProto","id":2},"options":{"type":"ServiceOptions","id":3}}},"MethodDescriptorProto":{"fields":{"name":{"type":"string","id":1},"inputType":{"type":"string","id":2},"outputType":{"type":"string","id":3},"options":{"type":"MethodOptions","id":4},"clientStreaming":{"type":"bool","id":5,"options":{"default":false}},"serverStreaming":{"type":"bool","id":6,"options":{"default":false}}}},"FileOptions":{"fields":{"javaPackage":{"type":"string","id":1},"javaOuterClassname":{"type":"string","id":8},"javaMultipleFiles":{"type":"bool","id":10,"options":{"default":false}},"javaGenerateEqualsAndHash":{"type":"bool","id":20,"options":{"deprecated":true}},"javaStringCheckUtf8":{"type":"bool","id":27,"options":{"default":false}},"optimizeFor":{"type":"OptimizeMode","id":9,"options":{"default":"SPEED"}},"goPackage":{"type":"string","id":11},"ccGenericServices":{"type":"bool","id":16,"options":{"default":false}},"javaGenericServices":{"type":"bool","id":17,"options":{"default":false}},"pyGenericServices":{"type":"bool","id":18,"options":{"default":false}},"phpGenericServices":{"type":"bool","id":42,"options":{"default":false}},"deprecated":{"type":"bool","id":23,"options":{"default":false}},"ccEnableArenas":{"type":"bool","id":31,"options":{"default":true}},"objcClassPrefix":{"type":"string","id":36},"csharpNamespace":{"type":"string","id":37},"swiftPrefix":{"type":"string","id":39},"phpClassPrefix":{"type":"string","id":40},"phpNamespace":{"type":"string","id":41},"phpMetadataNamespace":{"type":"string","id":44},"rubyPackage":{"type":"string","id":45},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[38,38]],"nested":{"OptimizeMode":{"values":{"SPEED":1,"CODE_SIZE":2,"LITE_RUNTIME":3}}}},"MessageOptions":{"fields":{"messageSetWireFormat":{"type":"bool","id":1,"options":{"default":false}},"noStandardDescriptorAccessor":{"type":"bool","id":2,"options":{"default":false}},"deprecated":{"type":"bool","id":3,"options":{"default":false}},"mapEntry":{"type":"bool","id":7},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[8,8],[9,9]]},"FieldOptions":{"fields":{"ctype":{"type":"CType","id":1,"options":{"default":"STRING"}},"packed":{"type":"bool","id":2},"jstype":{"type":"JSType","id":6,"options":{"default":"JS_NORMAL"}},"lazy":{"type":"bool","id":5,"options":{"default":false}},"deprecated":{"type":"bool","id":3,"options":{"default":false}},"weak":{"type":"bool","id":10,"options":{"default":false}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[4,4]],"nested":{"CType":{"values":{"STRING":0,"CORD":1,"STRING_PIECE":2}},"JSType":{"values":{"JS_NORMAL":0,"JS_STRING":1,"JS_NUMBER":2}}}},"OneofOptions":{"fields":{"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"EnumOptions":{"fields":{"allowAlias":{"type":"bool","id":2},"deprecated":{"type":"bool","id":3,"options":{"default":false}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[5,5]]},"EnumValueOptions":{"fields":{"deprecated":{"type":"bool","id":1,"options":{"default":false}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"ServiceOptions":{"fields":{"deprecated":{"type":"bool","id":33,"options":{"default":false}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"MethodOptions":{"fields":{"deprecated":{"type":"bool","id":33,"options":{"default":false}},"idempotencyLevel":{"type":"IdempotencyLevel","id":34,"options":{"default":"IDEMPOTENCY_UNKNOWN"}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"nested":{"IdempotencyLevel":{"values":{"IDEMPOTENCY_UNKNOWN":0,"NO_SIDE_EFFECTS":1,"IDEMPOTENT":2}}}},"UninterpretedOption":{"fields":{"name":{"rule":"repeated","type":"NamePart","id":2},"identifierValue":{"type":"string","id":3},"positiveIntValue":{"type":"uint64","id":4},"negativeIntValue":{"type":"int64","id":5},"doubleValue":{"type":"double","id":6},"stringValue":{"type":"bytes","id":7},"aggregateValue":{"type":"string","id":8}},"nested":{"NamePart":{"fields":{"namePart":{"rule":"required","type":"string","id":1},"isExtension":{"rule":"required","type":"bool","id":2}}}}},"SourceCodeInfo":{"fields":{"location":{"rule":"repeated","type":"Location","id":1}},"nested":{"Location":{"fields":{"path":{"rule":"repeated","type":"int32","id":1},"span":{"rule":"repeated","type":"int32","id":2},"leadingComments":{"type":"string","id":3},"trailingComments":{"type":"string","id":4},"leadingDetachedComments":{"rule":"repeated","type":"string","id":6}}}}},"GeneratedCodeInfo":{"fields":{"annotation":{"rule":"repeated","type":"Annotation","id":1}},"nested":{"Annotation":{"fields":{"path":{"rule":"repeated","type":"int32","id":1},"sourceFile":{"type":"string","id":2},"begin":{"type":"int32","id":3},"end":{"type":"int32","id":4}}}}},"Any":{"fields":{"type_url":{"type":"string","id":1},"value":{"type":"bytes","id":2}}}}}}}}}');

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/protos/operations.json":
/*!**************************************************************!*\
  !*** ./node_modules/google-gax/build/protos/operations.json ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"nested":{"google":{"nested":{"longrunning":{"options":{"cc_enable_arenas":true,"csharp_namespace":"Google.LongRunning","go_package":"google.golang.org/genproto/googleapis/longrunning;longrunning","java_multiple_files":true,"java_outer_classname":"OperationsProto","java_package":"com.google.longrunning","php_namespace":"Google\\\\LongRunning"},"nested":{"operationInfo":{"type":"google.longrunning.OperationInfo","id":1049,"extend":"google.protobuf.MethodOptions"},"Operations":{"options":{"(google.api.default_host)":"longrunning.googleapis.com"},"methods":{"ListOperations":{"requestType":"ListOperationsRequest","responseType":"ListOperationsResponse","options":{"(google.api.http).get":"/v1/{name=operations}","(google.api.method_signature)":"name,filter"},"parsedOptions":[{"(google.api.http)":{"get":"/v1/{name=operations}"}},{"(google.api.method_signature)":"name,filter"}]},"GetOperation":{"requestType":"GetOperationRequest","responseType":"Operation","options":{"(google.api.http).get":"/v1/operations/{name}","(google.api.method_signature)":"name"},"parsedOptions":[{"(google.api.http)":{"get":"/v1/operations/{name}"}},{"(google.api.method_signature)":"name"}]},"DeleteOperation":{"requestType":"DeleteOperationRequest","responseType":"google.protobuf.Empty","options":{"(google.api.http).delete":"/v1/{name=operations/**}","(google.api.method_signature)":"name"},"parsedOptions":[{"(google.api.http)":{"delete":"/v1/{name=operations/**}"}},{"(google.api.method_signature)":"name"}]},"CancelOperation":{"requestType":"CancelOperationRequest","responseType":"google.protobuf.Empty","options":{"(google.api.http).post":"/v1/{name=operations/**}:cancel","(google.api.http).body":"*","(google.api.method_signature)":"name"},"parsedOptions":[{"(google.api.http)":{"post":"/v1/{name=operations/**}:cancel","body":"*"}},{"(google.api.method_signature)":"name"}]},"WaitOperation":{"requestType":"WaitOperationRequest","responseType":"Operation"}}},"Operation":{"oneofs":{"result":{"oneof":["error","response"]}},"fields":{"name":{"type":"string","id":1},"metadata":{"type":"google.protobuf.Any","id":2},"done":{"type":"bool","id":3},"error":{"type":"google.rpc.Status","id":4},"response":{"type":"google.protobuf.Any","id":5}}},"GetOperationRequest":{"fields":{"name":{"type":"string","id":1}}},"ListOperationsRequest":{"fields":{"name":{"type":"string","id":4},"filter":{"type":"string","id":1},"pageSize":{"type":"int32","id":2},"pageToken":{"type":"string","id":3}}},"ListOperationsResponse":{"fields":{"operations":{"rule":"repeated","type":"Operation","id":1},"nextPageToken":{"type":"string","id":2}}},"CancelOperationRequest":{"fields":{"name":{"type":"string","id":1}}},"DeleteOperationRequest":{"fields":{"name":{"type":"string","id":1}}},"WaitOperationRequest":{"fields":{"name":{"type":"string","id":1},"timeout":{"type":"google.protobuf.Duration","id":2}}},"OperationInfo":{"fields":{"responseType":{"type":"string","id":1},"metadataType":{"type":"string","id":2}}}}},"api":{"options":{"go_package":"google.golang.org/genproto/googleapis/api/annotations;annotations","java_multiple_files":true,"java_outer_classname":"ClientProto","java_package":"com.google.api","objc_class_prefix":"GAPI","cc_enable_arenas":true},"nested":{"http":{"type":"HttpRule","id":72295728,"extend":"google.protobuf.MethodOptions"},"Http":{"fields":{"rules":{"rule":"repeated","type":"HttpRule","id":1},"fullyDecodeReservedExpansion":{"type":"bool","id":2}}},"HttpRule":{"oneofs":{"pattern":{"oneof":["get","put","post","delete","patch","custom"]}},"fields":{"selector":{"type":"string","id":1},"get":{"type":"string","id":2},"put":{"type":"string","id":3},"post":{"type":"string","id":4},"delete":{"type":"string","id":5},"patch":{"type":"string","id":6},"custom":{"type":"CustomHttpPattern","id":8},"body":{"type":"string","id":7},"responseBody":{"type":"string","id":12},"additionalBindings":{"rule":"repeated","type":"HttpRule","id":11}}},"CustomHttpPattern":{"fields":{"kind":{"type":"string","id":1},"path":{"type":"string","id":2}}},"methodSignature":{"rule":"repeated","type":"string","id":1051,"extend":"google.protobuf.MethodOptions"},"defaultHost":{"type":"string","id":1049,"extend":"google.protobuf.ServiceOptions"},"oauthScopes":{"type":"string","id":1050,"extend":"google.protobuf.ServiceOptions"}}},"protobuf":{"options":{"go_package":"github.com/golang/protobuf/protoc-gen-go/descriptor;descriptor","java_package":"com.google.protobuf","java_outer_classname":"DescriptorProtos","csharp_namespace":"Google.Protobuf.Reflection","objc_class_prefix":"GPB","cc_enable_arenas":true,"optimize_for":"SPEED"},"nested":{"FileDescriptorSet":{"fields":{"file":{"rule":"repeated","type":"FileDescriptorProto","id":1}}},"FileDescriptorProto":{"fields":{"name":{"type":"string","id":1},"package":{"type":"string","id":2},"dependency":{"rule":"repeated","type":"string","id":3},"publicDependency":{"rule":"repeated","type":"int32","id":10,"options":{"packed":false}},"weakDependency":{"rule":"repeated","type":"int32","id":11,"options":{"packed":false}},"messageType":{"rule":"repeated","type":"DescriptorProto","id":4},"enumType":{"rule":"repeated","type":"EnumDescriptorProto","id":5},"service":{"rule":"repeated","type":"ServiceDescriptorProto","id":6},"extension":{"rule":"repeated","type":"FieldDescriptorProto","id":7},"options":{"type":"FileOptions","id":8},"sourceCodeInfo":{"type":"SourceCodeInfo","id":9},"syntax":{"type":"string","id":12}}},"DescriptorProto":{"fields":{"name":{"type":"string","id":1},"field":{"rule":"repeated","type":"FieldDescriptorProto","id":2},"extension":{"rule":"repeated","type":"FieldDescriptorProto","id":6},"nestedType":{"rule":"repeated","type":"DescriptorProto","id":3},"enumType":{"rule":"repeated","type":"EnumDescriptorProto","id":4},"extensionRange":{"rule":"repeated","type":"ExtensionRange","id":5},"oneofDecl":{"rule":"repeated","type":"OneofDescriptorProto","id":8},"options":{"type":"MessageOptions","id":7},"reservedRange":{"rule":"repeated","type":"ReservedRange","id":9},"reservedName":{"rule":"repeated","type":"string","id":10}},"nested":{"ExtensionRange":{"fields":{"start":{"type":"int32","id":1},"end":{"type":"int32","id":2},"options":{"type":"ExtensionRangeOptions","id":3}}},"ReservedRange":{"fields":{"start":{"type":"int32","id":1},"end":{"type":"int32","id":2}}}}},"ExtensionRangeOptions":{"fields":{"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"FieldDescriptorProto":{"fields":{"name":{"type":"string","id":1},"number":{"type":"int32","id":3},"label":{"type":"Label","id":4},"type":{"type":"Type","id":5},"typeName":{"type":"string","id":6},"extendee":{"type":"string","id":2},"defaultValue":{"type":"string","id":7},"oneofIndex":{"type":"int32","id":9},"jsonName":{"type":"string","id":10},"options":{"type":"FieldOptions","id":8},"proto3Optional":{"type":"bool","id":17}},"nested":{"Type":{"values":{"TYPE_DOUBLE":1,"TYPE_FLOAT":2,"TYPE_INT64":3,"TYPE_UINT64":4,"TYPE_INT32":5,"TYPE_FIXED64":6,"TYPE_FIXED32":7,"TYPE_BOOL":8,"TYPE_STRING":9,"TYPE_GROUP":10,"TYPE_MESSAGE":11,"TYPE_BYTES":12,"TYPE_UINT32":13,"TYPE_ENUM":14,"TYPE_SFIXED32":15,"TYPE_SFIXED64":16,"TYPE_SINT32":17,"TYPE_SINT64":18}},"Label":{"values":{"LABEL_OPTIONAL":1,"LABEL_REQUIRED":2,"LABEL_REPEATED":3}}}},"OneofDescriptorProto":{"fields":{"name":{"type":"string","id":1},"options":{"type":"OneofOptions","id":2}}},"EnumDescriptorProto":{"fields":{"name":{"type":"string","id":1},"value":{"rule":"repeated","type":"EnumValueDescriptorProto","id":2},"options":{"type":"EnumOptions","id":3},"reservedRange":{"rule":"repeated","type":"EnumReservedRange","id":4},"reservedName":{"rule":"repeated","type":"string","id":5}},"nested":{"EnumReservedRange":{"fields":{"start":{"type":"int32","id":1},"end":{"type":"int32","id":2}}}}},"EnumValueDescriptorProto":{"fields":{"name":{"type":"string","id":1},"number":{"type":"int32","id":2},"options":{"type":"EnumValueOptions","id":3}}},"ServiceDescriptorProto":{"fields":{"name":{"type":"string","id":1},"method":{"rule":"repeated","type":"MethodDescriptorProto","id":2},"options":{"type":"ServiceOptions","id":3}}},"MethodDescriptorProto":{"fields":{"name":{"type":"string","id":1},"inputType":{"type":"string","id":2},"outputType":{"type":"string","id":3},"options":{"type":"MethodOptions","id":4},"clientStreaming":{"type":"bool","id":5,"options":{"default":false}},"serverStreaming":{"type":"bool","id":6,"options":{"default":false}}}},"FileOptions":{"fields":{"javaPackage":{"type":"string","id":1},"javaOuterClassname":{"type":"string","id":8},"javaMultipleFiles":{"type":"bool","id":10,"options":{"default":false}},"javaGenerateEqualsAndHash":{"type":"bool","id":20,"options":{"deprecated":true}},"javaStringCheckUtf8":{"type":"bool","id":27,"options":{"default":false}},"optimizeFor":{"type":"OptimizeMode","id":9,"options":{"default":"SPEED"}},"goPackage":{"type":"string","id":11},"ccGenericServices":{"type":"bool","id":16,"options":{"default":false}},"javaGenericServices":{"type":"bool","id":17,"options":{"default":false}},"pyGenericServices":{"type":"bool","id":18,"options":{"default":false}},"phpGenericServices":{"type":"bool","id":42,"options":{"default":false}},"deprecated":{"type":"bool","id":23,"options":{"default":false}},"ccEnableArenas":{"type":"bool","id":31,"options":{"default":true}},"objcClassPrefix":{"type":"string","id":36},"csharpNamespace":{"type":"string","id":37},"swiftPrefix":{"type":"string","id":39},"phpClassPrefix":{"type":"string","id":40},"phpNamespace":{"type":"string","id":41},"phpMetadataNamespace":{"type":"string","id":44},"rubyPackage":{"type":"string","id":45},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[38,38]],"nested":{"OptimizeMode":{"values":{"SPEED":1,"CODE_SIZE":2,"LITE_RUNTIME":3}}}},"MessageOptions":{"fields":{"messageSetWireFormat":{"type":"bool","id":1,"options":{"default":false}},"noStandardDescriptorAccessor":{"type":"bool","id":2,"options":{"default":false}},"deprecated":{"type":"bool","id":3,"options":{"default":false}},"mapEntry":{"type":"bool","id":7},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[8,8],[9,9]]},"FieldOptions":{"fields":{"ctype":{"type":"CType","id":1,"options":{"default":"STRING"}},"packed":{"type":"bool","id":2},"jstype":{"type":"JSType","id":6,"options":{"default":"JS_NORMAL"}},"lazy":{"type":"bool","id":5,"options":{"default":false}},"deprecated":{"type":"bool","id":3,"options":{"default":false}},"weak":{"type":"bool","id":10,"options":{"default":false}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[4,4]],"nested":{"CType":{"values":{"STRING":0,"CORD":1,"STRING_PIECE":2}},"JSType":{"values":{"JS_NORMAL":0,"JS_STRING":1,"JS_NUMBER":2}}}},"OneofOptions":{"fields":{"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"EnumOptions":{"fields":{"allowAlias":{"type":"bool","id":2},"deprecated":{"type":"bool","id":3,"options":{"default":false}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[5,5]]},"EnumValueOptions":{"fields":{"deprecated":{"type":"bool","id":1,"options":{"default":false}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"ServiceOptions":{"fields":{"deprecated":{"type":"bool","id":33,"options":{"default":false}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"MethodOptions":{"fields":{"deprecated":{"type":"bool","id":33,"options":{"default":false}},"idempotencyLevel":{"type":"IdempotencyLevel","id":34,"options":{"default":"IDEMPOTENCY_UNKNOWN"}},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"nested":{"IdempotencyLevel":{"values":{"IDEMPOTENCY_UNKNOWN":0,"NO_SIDE_EFFECTS":1,"IDEMPOTENT":2}}}},"UninterpretedOption":{"fields":{"name":{"rule":"repeated","type":"NamePart","id":2},"identifierValue":{"type":"string","id":3},"positiveIntValue":{"type":"uint64","id":4},"negativeIntValue":{"type":"int64","id":5},"doubleValue":{"type":"double","id":6},"stringValue":{"type":"bytes","id":7},"aggregateValue":{"type":"string","id":8}},"nested":{"NamePart":{"fields":{"namePart":{"rule":"required","type":"string","id":1},"isExtension":{"rule":"required","type":"bool","id":2}}}}},"SourceCodeInfo":{"fields":{"location":{"rule":"repeated","type":"Location","id":1}},"nested":{"Location":{"fields":{"path":{"rule":"repeated","type":"int32","id":1},"span":{"rule":"repeated","type":"int32","id":2},"leadingComments":{"type":"string","id":3},"trailingComments":{"type":"string","id":4},"leadingDetachedComments":{"rule":"repeated","type":"string","id":6}}}}},"GeneratedCodeInfo":{"fields":{"annotation":{"rule":"repeated","type":"Annotation","id":1}},"nested":{"Annotation":{"fields":{"path":{"rule":"repeated","type":"int32","id":1},"sourceFile":{"type":"string","id":2},"begin":{"type":"int32","id":3},"end":{"type":"int32","id":4}}}}},"Any":{"fields":{"type_url":{"type":"string","id":1},"value":{"type":"bytes","id":2}}},"Duration":{"fields":{"seconds":{"type":"int64","id":1},"nanos":{"type":"int32","id":2}}},"Empty":{"fields":{}}}},"rpc":{"options":{"cc_enable_arenas":true,"go_package":"google.golang.org/genproto/googleapis/rpc/status;status","java_multiple_files":true,"java_outer_classname":"StatusProto","java_package":"com.google.rpc","objc_class_prefix":"RPC"},"nested":{"Status":{"fields":{"code":{"type":"int32","id":1},"message":{"type":"string","id":2},"details":{"rule":"repeated","type":"google.protobuf.Any","id":3}}}}}}}}}');

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/protos/status.json":
/*!**********************************************************!*\
  !*** ./node_modules/google-gax/build/protos/status.json ***!
  \**********************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"nested":{"google":{"nested":{"protobuf":{"nested":{"Any":{"fields":{"type_url":{"type":"string","id":1},"value":{"type":"bytes","id":2}}},"Duration":{"fields":{"seconds":{"type":"int64","id":1},"nanos":{"type":"int32","id":2}}}}},"rpc":{"options":{"cc_enable_arenas":true,"go_package":"google.golang.org/genproto/googleapis/rpc/errdetails;errdetails","java_multiple_files":true,"java_outer_classname":"ErrorDetailsProto","java_package":"com.google.rpc","objc_class_prefix":"RPC"},"nested":{"Status":{"fields":{"code":{"type":"int32","id":1},"message":{"type":"string","id":2},"details":{"rule":"repeated","type":"google.protobuf.Any","id":3}}},"RetryInfo":{"fields":{"retryDelay":{"type":"google.protobuf.Duration","id":1}}},"DebugInfo":{"fields":{"stackEntries":{"rule":"repeated","type":"string","id":1},"detail":{"type":"string","id":2}}},"QuotaFailure":{"fields":{"violations":{"rule":"repeated","type":"Violation","id":1}},"nested":{"Violation":{"fields":{"subject":{"type":"string","id":1},"description":{"type":"string","id":2}}}}},"ErrorInfo":{"fields":{"reason":{"type":"string","id":1},"domain":{"type":"string","id":2},"metadata":{"keyType":"string","type":"string","id":3}}},"PreconditionFailure":{"fields":{"violations":{"rule":"repeated","type":"Violation","id":1}},"nested":{"Violation":{"fields":{"type":{"type":"string","id":1},"subject":{"type":"string","id":2},"description":{"type":"string","id":3}}}}},"BadRequest":{"fields":{"fieldViolations":{"rule":"repeated","type":"FieldViolation","id":1}},"nested":{"FieldViolation":{"fields":{"field":{"type":"string","id":1},"description":{"type":"string","id":2}}}}},"RequestInfo":{"fields":{"requestId":{"type":"string","id":1},"servingData":{"type":"string","id":2}}},"ResourceInfo":{"fields":{"resourceType":{"type":"string","id":1},"resourceName":{"type":"string","id":2},"owner":{"type":"string","id":3},"description":{"type":"string","id":4}}},"Help":{"fields":{"links":{"rule":"repeated","type":"Link","id":1}},"nested":{"Link":{"fields":{"description":{"type":"string","id":1},"url":{"type":"string","id":2}}}}},"LocalizedMessage":{"fields":{"locale":{"type":"string","id":1},"message":{"type":"string","id":2}}}}}}}}}');

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/iam_policy_service_client_config.json":
/*!*********************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/iam_policy_service_client_config.json ***!
  \*********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"interfaces":{"google.iam.v1.IAMPolicy":{"retry_codes":{"non_idempotent":[],"idempotent":["DEADLINE_EXCEEDED","UNAVAILABLE"]},"retry_params":{"default":{"initial_retry_delay_millis":100,"retry_delay_multiplier":1.3,"max_retry_delay_millis":60000,"initial_rpc_timeout_millis":20000,"rpc_timeout_multiplier":1,"max_rpc_timeout_millis":20000,"total_timeout_millis":600000}},"methods":{"GetIamPolicy":{"retry_codes_name":"non_idempotent","retry_params_name":"default"},"SetIamPolicy":{"retry_codes_name":"non_idempotent","retry_params_name":"default"},"TestIamPermissions":{"retry_codes_name":"non_idempotent","retry_params_name":"default"}}}}}');

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/locations_client_config.json":
/*!************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/locations_client_config.json ***!
  \************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"interfaces":{"google.cloud.location.Locations":{"retry_codes":{"non_idempotent":[],"idempotent":["DEADLINE_EXCEEDED","UNAVAILABLE"]},"retry_params":{"default":{"initial_retry_delay_millis":100,"retry_delay_multiplier":1.3,"max_retry_delay_millis":60000,"initial_rpc_timeout_millis":60000,"rpc_timeout_multiplier":1,"max_rpc_timeout_millis":60000,"total_timeout_millis":600000}},"methods":{"ListLocations":{"retry_codes_name":"non_idempotent","retry_params_name":"default"},"GetLocation":{"retry_codes_name":"non_idempotent","retry_params_name":"default"}}}}}');

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/operations_client_config.json":
/*!*************************************************************************!*\
  !*** ./node_modules/google-gax/build/src/operations_client_config.json ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"interfaces":{"google.longrunning.Operations":{"retry_codes":{"idempotent":["DEADLINE_EXCEEDED","UNAVAILABLE"],"non_idempotent":[]},"retry_params":{"default":{"initial_retry_delay_millis":100,"retry_delay_multiplier":1.3,"max_retry_delay_millis":60000,"initial_rpc_timeout_millis":90000,"rpc_timeout_multiplier":1,"max_rpc_timeout_millis":90000,"total_timeout_millis":600000}},"methods":{"GetOperation":{"timeout_millis":60000,"retry_codes_name":"idempotent","retry_params_name":"default"},"ListOperations":{"timeout_millis":60000,"retry_codes_name":"idempotent","retry_params_name":"default"},"CancelOperation":{"timeout_millis":60000,"retry_codes_name":"idempotent","retry_params_name":"default"},"DeleteOperation":{"timeout_millis":60000,"retry_codes_name":"idempotent","retry_params_name":"default"}}}}}');

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/build/src/protosList.json":
/*!***********************************************************!*\
  !*** ./node_modules/google-gax/build/src/protosList.json ***!
  \***********************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('["google/api/annotations.proto","google/api/apikeys/v2/apikeys.proto","google/api/apikeys/v2/resources.proto","google/api/auth.proto","google/api/backend.proto","google/api/billing.proto","google/api/client.proto","google/api/cloudquotas/v1/cloudquotas.proto","google/api/cloudquotas/v1/resources.proto","google/api/config_change.proto","google/api/consumer.proto","google/api/context.proto","google/api/control.proto","google/api/distribution.proto","google/api/documentation.proto","google/api/endpoint.proto","google/api/error_reason.proto","google/api/expr/conformance/v1alpha1/conformance_service.proto","google/api/expr/v1alpha1/checked.proto","google/api/expr/v1alpha1/eval.proto","google/api/expr/v1alpha1/explain.proto","google/api/expr/v1alpha1/syntax.proto","google/api/expr/v1alpha1/value.proto","google/api/expr/v1beta1/decl.proto","google/api/expr/v1beta1/eval.proto","google/api/expr/v1beta1/expr.proto","google/api/expr/v1beta1/source.proto","google/api/expr/v1beta1/value.proto","google/api/field_behavior.proto","google/api/field_info.proto","google/api/http.proto","google/api/httpbody.proto","google/api/label.proto","google/api/launch_stage.proto","google/api/log.proto","google/api/logging.proto","google/api/metric.proto","google/api/monitored_resource.proto","google/api/monitoring.proto","google/api/policy.proto","google/api/quota.proto","google/api/resource.proto","google/api/routing.proto","google/api/service.proto","google/api/servicecontrol/v1/check_error.proto","google/api/servicecontrol/v1/distribution.proto","google/api/servicecontrol/v1/http_request.proto","google/api/servicecontrol/v1/log_entry.proto","google/api/servicecontrol/v1/metric_value.proto","google/api/servicecontrol/v1/operation.proto","google/api/servicecontrol/v1/quota_controller.proto","google/api/servicecontrol/v1/service_controller.proto","google/api/servicecontrol/v2/service_controller.proto","google/api/servicemanagement/v1/resources.proto","google/api/servicemanagement/v1/servicemanager.proto","google/api/serviceusage/v1/resources.proto","google/api/serviceusage/v1/serviceusage.proto","google/api/serviceusage/v1beta1/resources.proto","google/api/serviceusage/v1beta1/serviceusage.proto","google/api/source_info.proto","google/api/system_parameter.proto","google/api/usage.proto","google/api/visibility.proto","google/cloud/location/locations.proto","google/iam/v1/iam_policy.proto","google/iam/v1/logging/audit_data.proto","google/iam/v1/options.proto","google/iam/v1/policy.proto","google/logging/type/http_request.proto","google/logging/type/log_severity.proto","google/longrunning/operations.proto","google/monitoring/v3/alert.proto","google/monitoring/v3/alert_service.proto","google/monitoring/v3/common.proto","google/monitoring/v3/dropped_labels.proto","google/monitoring/v3/group.proto","google/monitoring/v3/group_service.proto","google/monitoring/v3/metric.proto","google/monitoring/v3/metric_service.proto","google/monitoring/v3/mutation_record.proto","google/monitoring/v3/notification.proto","google/monitoring/v3/notification_service.proto","google/monitoring/v3/query_service.proto","google/monitoring/v3/service.proto","google/monitoring/v3/service_service.proto","google/monitoring/v3/snooze.proto","google/monitoring/v3/snooze_service.proto","google/monitoring/v3/span_context.proto","google/monitoring/v3/uptime.proto","google/monitoring/v3/uptime_service.proto","google/protobuf/any.proto","google/protobuf/api.proto","google/protobuf/bridge/message_set.proto","google/protobuf/compiler/plugin.proto","google/protobuf/compiler/ruby/ruby_generated_code.proto","google/protobuf/compiler/ruby/ruby_generated_code_proto2.proto","google/protobuf/compiler/ruby/ruby_generated_code_proto2_import.proto","google/protobuf/compiler/ruby/ruby_generated_pkg_explicit.proto","google/protobuf/compiler/ruby/ruby_generated_pkg_explicit_legacy.proto","google/protobuf/compiler/ruby/ruby_generated_pkg_implicit.proto","google/protobuf/cpp_features.proto","google/protobuf/descriptor.proto","google/protobuf/duration.proto","google/protobuf/empty.proto","google/protobuf/field_mask.proto","google/protobuf/source_context.proto","google/protobuf/struct.proto","google/protobuf/timestamp.proto","google/protobuf/type.proto","google/protobuf/util/json_format.proto","google/protobuf/util/json_format_proto3.proto","google/protobuf/wrappers.proto","google/rpc/code.proto","google/rpc/context/attribute_context.proto","google/rpc/context/audit_context.proto","google/rpc/error_details.proto","google/rpc/http.proto","google/rpc/status.proto","google/type/calendar_period.proto","google/type/color.proto","google/type/date.proto","google/type/datetime.proto","google/type/dayofweek.proto","google/type/decimal.proto","google/type/expr.proto","google/type/fraction.proto","google/type/interval.proto","google/type/latlng.proto","google/type/localized_text.proto","google/type/money.proto","google/type/month.proto","google/type/phone_number.proto","google/type/postal_address.proto","google/type/quaternion.proto","google/type/timeofday.proto"]');

/***/ }),

/***/ "(rsc)/./node_modules/google-gax/package.json":
/*!**********************************************!*\
  !*** ./node_modules/google-gax/package.json ***!
  \**********************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"name":"google-gax","version":"5.0.1-rc.0","description":"Google API Extensions","main":"build/src/index.js","types":"build/src/index.d.ts","files":["build/src","build/protos/","!build/src/**/*.map"],"dependencies":{"@grpc/grpc-js":"^1.12.6","@grpc/proto-loader":"^0.7.13","@types/long":"^5.0.0","abort-controller":"^3.0.0","duplexify":"^4.1.3","google-auth-library":"^10.0.0-rc.1","google-logging-utils":"^1.1.1","node-fetch":"^3.3.2","object-hash":"^3.0.0","proto3-json-serializer":"^3.0.0","protobufjs":"^7.4.0","retry-request":"^8.0.0"},"devDependencies":{"@babel/plugin-proposal-private-methods":"^7.18.6","@types/mocha":"^10.0.10","@types/ncp":"^2.0.8","@types/node":"^20.5.0","@types/object-hash":"^3.0.6","@types/proxyquire":"^1.3.31","@types/pumpify":"^1.4.4","@types/sinon":"^17.0.3","@types/uglify-js":"^3.17.5","c8":"^10.1.3","codecov":"^3.8.3","execa":"^5.0.0","glob":"10.4.5","google-proto-files":"^4.2.0","gts":"^6.0.2","jackspeak":"^3.0.2","jsdoc":"^4.0.4","jsdoc-fresh":"^3.0.0","jsdoc-region-tag":"^3.0.0","linkinator":"^6.1.2","long":"^5.2.4","lru-cache":"^10.0.0","mkdirp":"^3.0.1","mocha":"^11.1.0","ncp":"^2.0.0","null-loader":"^4.0.1","pdfmake":"^0.2.18","protobufjs-cli":"^1.1.3","proxyquire":"^2.1.3","pumpify":"^2.0.1","sinon":"^19.0.2","stream-events":"^1.0.5","ts-loader":"^8.0.0","typescript":"^5.7.3","uglify-js":"^3.19.3","walkdir":"^0.4.1","webpack":"^5.97.1","webpack-cli":"^6.0.1"},"scripts":{"docs":"jsdoc -c .jsdoc.js","pretest":"npm run prepare","test":"c8 mocha build/test/unit","lint":"gts check src samples test","clean":"gts clean","compile":"tsc -p . && cp src/*.json build/src && cp -r test/fixtures build/test && cp -r protos build/","compile-operation-protos":"pbjs -t json google/longrunning/operations.proto -p ./protos > protos/operations.json && pbjs -t static-module -r operations_protos google/longrunning/operations.proto -p ./protos > protos/operations.js && pbts protos/operations.js -o protos/operations.d.ts","compile-compute-operations-protos":"pbjs -t json google/longrunning/compute_operations.proto -p ./protos > protos/compute_operations.json && pbjs -t static-module -r compute_operations_protos google/longrunning/compute_operations.proto -p ./protos > protos/compute_operations.js && pbts protos/compute_operations.js -o protos/compute_operations.d.ts","compile-iam-protos":"pbjs -t json google/iam/v1/iam_policy.proto google/iam/v1/options.proto google/iam/v1/policy.proto google/iam/v1/logging/audit_data.proto -p ./protos > protos/iam_service.json && pbjs -t static-module -r iam_protos google/iam/v1/iam_policy.proto google/iam/v1/options.proto google/iam/v1/policy.proto google/iam/v1/logging/audit_data.proto -p ./protos > protos/iam_service.js && pbts protos/iam_service.js -o protos/iam_service.d.ts","compile-location-protos":"pbjs -t json google/cloud/location/locations.proto -p ./protos > protos/locations.json && pbjs -t static-module -r locations_protos google/cloud/location/locations.proto -p ./protos > protos/locations.js && pbts protos/locations.js -o protos/locations.d.ts","compile-status-protos":"pbjs -t json google/rpc/status.proto google/rpc/error_details.proto -p ./protos > protos/status.json","compile-http-protos":"pbjs -t static-module -r http_proto --keep-case google/api/http.proto -p ./protos > protos/http.js && pbts protos/http.js -o protos/http.d.ts","fix":"gts fix","prepare":"npm run compile && cd ../tools && npm i && npm run compile && cd ../gax && pwd && node ../tools/build/src/prepublish.js . && mkdirp build/protos && cp -r protos/* build/protos/ && npm run minify-proto-json","system-test":"c8 mocha build/test/system-test --timeout 600000 && npm run test-application","samples-test":"cd samples/ && npm link ../ && npm test && cd ../","docs-test":"linkinator docs","predocs-test":"npm run docs","browser-test":"cd test/browser-test && npm run prefetch && npm install && npm test","test-application":"cd test/test-application && npm run prefetch && npm install && npm start","prelint":"cd samples; npm link ../; npm install","precompile":"gts clean","update-protos":"cd ../tools && npm i && npm run compile && cd ../gax && node ../tools/build/src/listProtos.js .","minify-proto-json":"cd ../tools && npm i && npm run compile && cd ../gax && node ../tools/build/src/minify.js"},"keywords":["grpc"],"exports":{".":"./build/src/index.js","./fallback":"./build/src/fallback.js","./gax":"./build/src/gax.js","./build/src/protobuf":"./build/src/protobuf.js"},"repository":{"type":"git","url":"https://github.com/googleapis/gax-nodejs.git","directory":"gax"},"author":"Google API Authors","license":"Apache-2.0","bugs":{"url":"https://github.com/googleapis/gax-nodejs/issues"},"homepage":"https://github.com/googleapis/gax-nodejs#readme","engines":{"node":">=18"},"browser":"build/src/fallback.js"}');

/***/ })

};
;