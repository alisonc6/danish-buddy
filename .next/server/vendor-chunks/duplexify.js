/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/duplexify";
exports.ids = ["vendor-chunks/duplexify"];
exports.modules = {

/***/ "(rsc)/./node_modules/duplexify/index.js":
/*!*****************************************!*\
  !*** ./node_modules/duplexify/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var stream = __webpack_require__(/*! readable-stream */ \"(rsc)/./node_modules/readable-stream/readable.js\")\r\nvar eos = __webpack_require__(/*! end-of-stream */ \"(rsc)/./node_modules/end-of-stream/index.js\")\r\nvar inherits = __webpack_require__(/*! inherits */ \"(rsc)/./node_modules/inherits/inherits.js\")\r\nvar shift = __webpack_require__(/*! stream-shift */ \"(rsc)/./node_modules/stream-shift/index.js\")\r\n\r\nvar SIGNAL_FLUSH = (Buffer.from && Buffer.from !== Uint8Array.from)\r\n  ? Buffer.from([0])\r\n  : new Buffer([0])\r\n\r\nvar onuncork = function(self, fn) {\r\n  if (self._corked) self.once('uncork', fn)\r\n  else fn()\r\n}\r\n\r\nvar autoDestroy = function (self, err) {\r\n  if (self._autoDestroy) self.destroy(err)\r\n}\r\n\r\nvar destroyer = function(self, end) {\r\n  return function(err) {\r\n    if (err) autoDestroy(self, err.message === 'premature close' ? null : err)\r\n    else if (end && !self._ended) self.end()\r\n  }\r\n}\r\n\r\nvar end = function(ws, fn) {\r\n  if (!ws) return fn()\r\n  if (ws._writableState && ws._writableState.finished) return fn()\r\n  if (ws._writableState) return ws.end(fn)\r\n  ws.end()\r\n  fn()\r\n}\r\n\r\nvar noop = function() {}\r\n\r\nvar toStreams2 = function(rs) {\r\n  return new (stream.Readable)({objectMode:true, highWaterMark:16}).wrap(rs)\r\n}\r\n\r\nvar Duplexify = function(writable, readable, opts) {\r\n  if (!(this instanceof Duplexify)) return new Duplexify(writable, readable, opts)\r\n  stream.Duplex.call(this, opts)\r\n\r\n  this._writable = null\r\n  this._readable = null\r\n  this._readable2 = null\r\n\r\n  this._autoDestroy = !opts || opts.autoDestroy !== false\r\n  this._forwardDestroy = !opts || opts.destroy !== false\r\n  this._forwardEnd = !opts || opts.end !== false\r\n  this._corked = 1 // start corked\r\n  this._ondrain = null\r\n  this._drained = false\r\n  this._forwarding = false\r\n  this._unwrite = null\r\n  this._unread = null\r\n  this._ended = false\r\n\r\n  this.destroyed = false\r\n\r\n  if (writable) this.setWritable(writable)\r\n  if (readable) this.setReadable(readable)\r\n}\r\n\r\ninherits(Duplexify, stream.Duplex)\r\n\r\nDuplexify.obj = function(writable, readable, opts) {\r\n  if (!opts) opts = {}\r\n  opts.objectMode = true\r\n  opts.highWaterMark = 16\r\n  return new Duplexify(writable, readable, opts)\r\n}\r\n\r\nDuplexify.prototype.cork = function() {\r\n  if (++this._corked === 1) this.emit('cork')\r\n}\r\n\r\nDuplexify.prototype.uncork = function() {\r\n  if (this._corked && --this._corked === 0) this.emit('uncork')\r\n}\r\n\r\nDuplexify.prototype.setWritable = function(writable) {\r\n  if (this._unwrite) this._unwrite()\r\n\r\n  if (this.destroyed) {\r\n    if (writable && writable.destroy) writable.destroy()\r\n    return\r\n  }\r\n\r\n  if (writable === null || writable === false) {\r\n    this.end()\r\n    return\r\n  }\r\n\r\n  var self = this\r\n  var unend = eos(writable, {writable:true, readable:false}, destroyer(this, this._forwardEnd))\r\n\r\n  var ondrain = function() {\r\n    var ondrain = self._ondrain\r\n    self._ondrain = null\r\n    if (ondrain) ondrain()\r\n  }\r\n\r\n  var clear = function() {\r\n    self._writable.removeListener('drain', ondrain)\r\n    unend()\r\n  }\r\n\r\n  if (this._unwrite) process.nextTick(ondrain) // force a drain on stream reset to avoid livelocks\r\n\r\n  this._writable = writable\r\n  this._writable.on('drain', ondrain)\r\n  this._unwrite = clear\r\n\r\n  this.uncork() // always uncork setWritable\r\n}\r\n\r\nDuplexify.prototype.setReadable = function(readable) {\r\n  if (this._unread) this._unread()\r\n\r\n  if (this.destroyed) {\r\n    if (readable && readable.destroy) readable.destroy()\r\n    return\r\n  }\r\n\r\n  if (readable === null || readable === false) {\r\n    this.push(null)\r\n    this.resume()\r\n    return\r\n  }\r\n\r\n  var self = this\r\n  var unend = eos(readable, {writable:false, readable:true}, destroyer(this))\r\n\r\n  var onreadable = function() {\r\n    self._forward()\r\n  }\r\n\r\n  var onend = function() {\r\n    self.push(null)\r\n  }\r\n\r\n  var clear = function() {\r\n    self._readable2.removeListener('readable', onreadable)\r\n    self._readable2.removeListener('end', onend)\r\n    unend()\r\n  }\r\n\r\n  this._drained = true\r\n  this._readable = readable\r\n  this._readable2 = readable._readableState ? readable : toStreams2(readable)\r\n  this._readable2.on('readable', onreadable)\r\n  this._readable2.on('end', onend)\r\n  this._unread = clear\r\n\r\n  this._forward()\r\n}\r\n\r\nDuplexify.prototype._read = function() {\r\n  this._drained = true\r\n  this._forward()\r\n}\r\n\r\nDuplexify.prototype._forward = function() {\r\n  if (this._forwarding || !this._readable2 || !this._drained) return\r\n  this._forwarding = true\r\n\r\n  var data\r\n\r\n  while (this._drained && (data = shift(this._readable2)) !== null) {\r\n    if (this.destroyed) continue\r\n    this._drained = this.push(data)\r\n  }\r\n\r\n  this._forwarding = false\r\n}\r\n\r\nDuplexify.prototype.destroy = function(err, cb) {\r\n  if (!cb) cb = noop\r\n  if (this.destroyed) return cb(null)\r\n  this.destroyed = true\r\n\r\n  var self = this\r\n  process.nextTick(function() {\r\n    self._destroy(err)\r\n    cb(null)\r\n  })\r\n}\r\n\r\nDuplexify.prototype._destroy = function(err) {\r\n  if (err) {\r\n    var ondrain = this._ondrain\r\n    this._ondrain = null\r\n    if (ondrain) ondrain(err)\r\n    else this.emit('error', err)\r\n  }\r\n\r\n  if (this._forwardDestroy) {\r\n    if (this._readable && this._readable.destroy) this._readable.destroy()\r\n    if (this._writable && this._writable.destroy) this._writable.destroy()\r\n  }\r\n\r\n  this.emit('close')\r\n}\r\n\r\nDuplexify.prototype._write = function(data, enc, cb) {\r\n  if (this.destroyed) return\r\n  if (this._corked) return onuncork(this, this._write.bind(this, data, enc, cb))\r\n  if (data === SIGNAL_FLUSH) return this._finish(cb)\r\n  if (!this._writable) return cb()\r\n\r\n  if (this._writable.write(data) === false) this._ondrain = cb\r\n  else if (!this.destroyed) cb()\r\n}\r\n\r\nDuplexify.prototype._finish = function(cb) {\r\n  var self = this\r\n  this.emit('preend')\r\n  onuncork(this, function() {\r\n    end(self._forwardEnd && self._writable, function() {\r\n      // haxx to not emit prefinish twice\r\n      if (self._writableState.prefinished === false) self._writableState.prefinished = true\r\n      self.emit('prefinish')\r\n      onuncork(self, cb)\r\n    })\r\n  })\r\n}\r\n\r\nDuplexify.prototype.end = function(data, enc, cb) {\r\n  if (typeof data === 'function') return this.end(null, null, data)\r\n  if (typeof enc === 'function') return this.end(data, null, enc)\r\n  this._ended = true\r\n  if (data) this.write(data)\r\n  if (!this._writableState.ending && !this._writableState.destroyed) this.write(SIGNAL_FLUSH)\r\n  return stream.Writable.prototype.end.call(this, cb)\r\n}\r\n\r\nmodule.exports = Duplexify\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZHVwbGV4aWZ5L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLGFBQWEsbUJBQU8sQ0FBQyx5RUFBaUI7QUFDdEMsVUFBVSxtQkFBTyxDQUFDLGtFQUFlO0FBQ2pDLGVBQWUsbUJBQU8sQ0FBQywyREFBVTtBQUNqQyxZQUFZLG1CQUFPLENBQUMsZ0VBQWM7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxrQ0FBa0M7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsOEJBQThCO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw4QkFBOEI7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFuaXNoLWJ1ZGR5Ly4vbm9kZV9tb2R1bGVzL2R1cGxleGlmeS9pbmRleC5qcz8zMDcyIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBzdHJlYW0gPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0nKVxyXG52YXIgZW9zID0gcmVxdWlyZSgnZW5kLW9mLXN0cmVhbScpXHJcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcclxudmFyIHNoaWZ0ID0gcmVxdWlyZSgnc3RyZWFtLXNoaWZ0JylcclxuXHJcbnZhciBTSUdOQUxfRkxVU0ggPSAoQnVmZmVyLmZyb20gJiYgQnVmZmVyLmZyb20gIT09IFVpbnQ4QXJyYXkuZnJvbSlcclxuICA/IEJ1ZmZlci5mcm9tKFswXSlcclxuICA6IG5ldyBCdWZmZXIoWzBdKVxyXG5cclxudmFyIG9udW5jb3JrID0gZnVuY3Rpb24oc2VsZiwgZm4pIHtcclxuICBpZiAoc2VsZi5fY29ya2VkKSBzZWxmLm9uY2UoJ3VuY29yaycsIGZuKVxyXG4gIGVsc2UgZm4oKVxyXG59XHJcblxyXG52YXIgYXV0b0Rlc3Ryb3kgPSBmdW5jdGlvbiAoc2VsZiwgZXJyKSB7XHJcbiAgaWYgKHNlbGYuX2F1dG9EZXN0cm95KSBzZWxmLmRlc3Ryb3koZXJyKVxyXG59XHJcblxyXG52YXIgZGVzdHJveWVyID0gZnVuY3Rpb24oc2VsZiwgZW5kKSB7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uKGVycikge1xyXG4gICAgaWYgKGVycikgYXV0b0Rlc3Ryb3koc2VsZiwgZXJyLm1lc3NhZ2UgPT09ICdwcmVtYXR1cmUgY2xvc2UnID8gbnVsbCA6IGVycilcclxuICAgIGVsc2UgaWYgKGVuZCAmJiAhc2VsZi5fZW5kZWQpIHNlbGYuZW5kKClcclxuICB9XHJcbn1cclxuXHJcbnZhciBlbmQgPSBmdW5jdGlvbih3cywgZm4pIHtcclxuICBpZiAoIXdzKSByZXR1cm4gZm4oKVxyXG4gIGlmICh3cy5fd3JpdGFibGVTdGF0ZSAmJiB3cy5fd3JpdGFibGVTdGF0ZS5maW5pc2hlZCkgcmV0dXJuIGZuKClcclxuICBpZiAod3MuX3dyaXRhYmxlU3RhdGUpIHJldHVybiB3cy5lbmQoZm4pXHJcbiAgd3MuZW5kKClcclxuICBmbigpXHJcbn1cclxuXHJcbnZhciBub29wID0gZnVuY3Rpb24oKSB7fVxyXG5cclxudmFyIHRvU3RyZWFtczIgPSBmdW5jdGlvbihycykge1xyXG4gIHJldHVybiBuZXcgKHN0cmVhbS5SZWFkYWJsZSkoe29iamVjdE1vZGU6dHJ1ZSwgaGlnaFdhdGVyTWFyazoxNn0pLndyYXAocnMpXHJcbn1cclxuXHJcbnZhciBEdXBsZXhpZnkgPSBmdW5jdGlvbih3cml0YWJsZSwgcmVhZGFibGUsIG9wdHMpIHtcclxuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRHVwbGV4aWZ5KSkgcmV0dXJuIG5ldyBEdXBsZXhpZnkod3JpdGFibGUsIHJlYWRhYmxlLCBvcHRzKVxyXG4gIHN0cmVhbS5EdXBsZXguY2FsbCh0aGlzLCBvcHRzKVxyXG5cclxuICB0aGlzLl93cml0YWJsZSA9IG51bGxcclxuICB0aGlzLl9yZWFkYWJsZSA9IG51bGxcclxuICB0aGlzLl9yZWFkYWJsZTIgPSBudWxsXHJcblxyXG4gIHRoaXMuX2F1dG9EZXN0cm95ID0gIW9wdHMgfHwgb3B0cy5hdXRvRGVzdHJveSAhPT0gZmFsc2VcclxuICB0aGlzLl9mb3J3YXJkRGVzdHJveSA9ICFvcHRzIHx8IG9wdHMuZGVzdHJveSAhPT0gZmFsc2VcclxuICB0aGlzLl9mb3J3YXJkRW5kID0gIW9wdHMgfHwgb3B0cy5lbmQgIT09IGZhbHNlXHJcbiAgdGhpcy5fY29ya2VkID0gMSAvLyBzdGFydCBjb3JrZWRcclxuICB0aGlzLl9vbmRyYWluID0gbnVsbFxyXG4gIHRoaXMuX2RyYWluZWQgPSBmYWxzZVxyXG4gIHRoaXMuX2ZvcndhcmRpbmcgPSBmYWxzZVxyXG4gIHRoaXMuX3Vud3JpdGUgPSBudWxsXHJcbiAgdGhpcy5fdW5yZWFkID0gbnVsbFxyXG4gIHRoaXMuX2VuZGVkID0gZmFsc2VcclxuXHJcbiAgdGhpcy5kZXN0cm95ZWQgPSBmYWxzZVxyXG5cclxuICBpZiAod3JpdGFibGUpIHRoaXMuc2V0V3JpdGFibGUod3JpdGFibGUpXHJcbiAgaWYgKHJlYWRhYmxlKSB0aGlzLnNldFJlYWRhYmxlKHJlYWRhYmxlKVxyXG59XHJcblxyXG5pbmhlcml0cyhEdXBsZXhpZnksIHN0cmVhbS5EdXBsZXgpXHJcblxyXG5EdXBsZXhpZnkub2JqID0gZnVuY3Rpb24od3JpdGFibGUsIHJlYWRhYmxlLCBvcHRzKSB7XHJcbiAgaWYgKCFvcHRzKSBvcHRzID0ge31cclxuICBvcHRzLm9iamVjdE1vZGUgPSB0cnVlXHJcbiAgb3B0cy5oaWdoV2F0ZXJNYXJrID0gMTZcclxuICByZXR1cm4gbmV3IER1cGxleGlmeSh3cml0YWJsZSwgcmVhZGFibGUsIG9wdHMpXHJcbn1cclxuXHJcbkR1cGxleGlmeS5wcm90b3R5cGUuY29yayA9IGZ1bmN0aW9uKCkge1xyXG4gIGlmICgrK3RoaXMuX2NvcmtlZCA9PT0gMSkgdGhpcy5lbWl0KCdjb3JrJylcclxufVxyXG5cclxuRHVwbGV4aWZ5LnByb3RvdHlwZS51bmNvcmsgPSBmdW5jdGlvbigpIHtcclxuICBpZiAodGhpcy5fY29ya2VkICYmIC0tdGhpcy5fY29ya2VkID09PSAwKSB0aGlzLmVtaXQoJ3VuY29yaycpXHJcbn1cclxuXHJcbkR1cGxleGlmeS5wcm90b3R5cGUuc2V0V3JpdGFibGUgPSBmdW5jdGlvbih3cml0YWJsZSkge1xyXG4gIGlmICh0aGlzLl91bndyaXRlKSB0aGlzLl91bndyaXRlKClcclxuXHJcbiAgaWYgKHRoaXMuZGVzdHJveWVkKSB7XHJcbiAgICBpZiAod3JpdGFibGUgJiYgd3JpdGFibGUuZGVzdHJveSkgd3JpdGFibGUuZGVzdHJveSgpXHJcbiAgICByZXR1cm5cclxuICB9XHJcblxyXG4gIGlmICh3cml0YWJsZSA9PT0gbnVsbCB8fCB3cml0YWJsZSA9PT0gZmFsc2UpIHtcclxuICAgIHRoaXMuZW5kKClcclxuICAgIHJldHVyblxyXG4gIH1cclxuXHJcbiAgdmFyIHNlbGYgPSB0aGlzXHJcbiAgdmFyIHVuZW5kID0gZW9zKHdyaXRhYmxlLCB7d3JpdGFibGU6dHJ1ZSwgcmVhZGFibGU6ZmFsc2V9LCBkZXN0cm95ZXIodGhpcywgdGhpcy5fZm9yd2FyZEVuZCkpXHJcblxyXG4gIHZhciBvbmRyYWluID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgb25kcmFpbiA9IHNlbGYuX29uZHJhaW5cclxuICAgIHNlbGYuX29uZHJhaW4gPSBudWxsXHJcbiAgICBpZiAob25kcmFpbikgb25kcmFpbigpXHJcbiAgfVxyXG5cclxuICB2YXIgY2xlYXIgPSBmdW5jdGlvbigpIHtcclxuICAgIHNlbGYuX3dyaXRhYmxlLnJlbW92ZUxpc3RlbmVyKCdkcmFpbicsIG9uZHJhaW4pXHJcbiAgICB1bmVuZCgpXHJcbiAgfVxyXG5cclxuICBpZiAodGhpcy5fdW53cml0ZSkgcHJvY2Vzcy5uZXh0VGljayhvbmRyYWluKSAvLyBmb3JjZSBhIGRyYWluIG9uIHN0cmVhbSByZXNldCB0byBhdm9pZCBsaXZlbG9ja3NcclxuXHJcbiAgdGhpcy5fd3JpdGFibGUgPSB3cml0YWJsZVxyXG4gIHRoaXMuX3dyaXRhYmxlLm9uKCdkcmFpbicsIG9uZHJhaW4pXHJcbiAgdGhpcy5fdW53cml0ZSA9IGNsZWFyXHJcblxyXG4gIHRoaXMudW5jb3JrKCkgLy8gYWx3YXlzIHVuY29yayBzZXRXcml0YWJsZVxyXG59XHJcblxyXG5EdXBsZXhpZnkucHJvdG90eXBlLnNldFJlYWRhYmxlID0gZnVuY3Rpb24ocmVhZGFibGUpIHtcclxuICBpZiAodGhpcy5fdW5yZWFkKSB0aGlzLl91bnJlYWQoKVxyXG5cclxuICBpZiAodGhpcy5kZXN0cm95ZWQpIHtcclxuICAgIGlmIChyZWFkYWJsZSAmJiByZWFkYWJsZS5kZXN0cm95KSByZWFkYWJsZS5kZXN0cm95KClcclxuICAgIHJldHVyblxyXG4gIH1cclxuXHJcbiAgaWYgKHJlYWRhYmxlID09PSBudWxsIHx8IHJlYWRhYmxlID09PSBmYWxzZSkge1xyXG4gICAgdGhpcy5wdXNoKG51bGwpXHJcbiAgICB0aGlzLnJlc3VtZSgpXHJcbiAgICByZXR1cm5cclxuICB9XHJcblxyXG4gIHZhciBzZWxmID0gdGhpc1xyXG4gIHZhciB1bmVuZCA9IGVvcyhyZWFkYWJsZSwge3dyaXRhYmxlOmZhbHNlLCByZWFkYWJsZTp0cnVlfSwgZGVzdHJveWVyKHRoaXMpKVxyXG5cclxuICB2YXIgb25yZWFkYWJsZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgc2VsZi5fZm9yd2FyZCgpXHJcbiAgfVxyXG5cclxuICB2YXIgb25lbmQgPSBmdW5jdGlvbigpIHtcclxuICAgIHNlbGYucHVzaChudWxsKVxyXG4gIH1cclxuXHJcbiAgdmFyIGNsZWFyID0gZnVuY3Rpb24oKSB7XHJcbiAgICBzZWxmLl9yZWFkYWJsZTIucmVtb3ZlTGlzdGVuZXIoJ3JlYWRhYmxlJywgb25yZWFkYWJsZSlcclxuICAgIHNlbGYuX3JlYWRhYmxlMi5yZW1vdmVMaXN0ZW5lcignZW5kJywgb25lbmQpXHJcbiAgICB1bmVuZCgpXHJcbiAgfVxyXG5cclxuICB0aGlzLl9kcmFpbmVkID0gdHJ1ZVxyXG4gIHRoaXMuX3JlYWRhYmxlID0gcmVhZGFibGVcclxuICB0aGlzLl9yZWFkYWJsZTIgPSByZWFkYWJsZS5fcmVhZGFibGVTdGF0ZSA/IHJlYWRhYmxlIDogdG9TdHJlYW1zMihyZWFkYWJsZSlcclxuICB0aGlzLl9yZWFkYWJsZTIub24oJ3JlYWRhYmxlJywgb25yZWFkYWJsZSlcclxuICB0aGlzLl9yZWFkYWJsZTIub24oJ2VuZCcsIG9uZW5kKVxyXG4gIHRoaXMuX3VucmVhZCA9IGNsZWFyXHJcblxyXG4gIHRoaXMuX2ZvcndhcmQoKVxyXG59XHJcblxyXG5EdXBsZXhpZnkucHJvdG90eXBlLl9yZWFkID0gZnVuY3Rpb24oKSB7XHJcbiAgdGhpcy5fZHJhaW5lZCA9IHRydWVcclxuICB0aGlzLl9mb3J3YXJkKClcclxufVxyXG5cclxuRHVwbGV4aWZ5LnByb3RvdHlwZS5fZm9yd2FyZCA9IGZ1bmN0aW9uKCkge1xyXG4gIGlmICh0aGlzLl9mb3J3YXJkaW5nIHx8ICF0aGlzLl9yZWFkYWJsZTIgfHwgIXRoaXMuX2RyYWluZWQpIHJldHVyblxyXG4gIHRoaXMuX2ZvcndhcmRpbmcgPSB0cnVlXHJcblxyXG4gIHZhciBkYXRhXHJcblxyXG4gIHdoaWxlICh0aGlzLl9kcmFpbmVkICYmIChkYXRhID0gc2hpZnQodGhpcy5fcmVhZGFibGUyKSkgIT09IG51bGwpIHtcclxuICAgIGlmICh0aGlzLmRlc3Ryb3llZCkgY29udGludWVcclxuICAgIHRoaXMuX2RyYWluZWQgPSB0aGlzLnB1c2goZGF0YSlcclxuICB9XHJcblxyXG4gIHRoaXMuX2ZvcndhcmRpbmcgPSBmYWxzZVxyXG59XHJcblxyXG5EdXBsZXhpZnkucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbihlcnIsIGNiKSB7XHJcbiAgaWYgKCFjYikgY2IgPSBub29wXHJcbiAgaWYgKHRoaXMuZGVzdHJveWVkKSByZXR1cm4gY2IobnVsbClcclxuICB0aGlzLmRlc3Ryb3llZCA9IHRydWVcclxuXHJcbiAgdmFyIHNlbGYgPSB0aGlzXHJcbiAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbigpIHtcclxuICAgIHNlbGYuX2Rlc3Ryb3koZXJyKVxyXG4gICAgY2IobnVsbClcclxuICB9KVxyXG59XHJcblxyXG5EdXBsZXhpZnkucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24oZXJyKSB7XHJcbiAgaWYgKGVycikge1xyXG4gICAgdmFyIG9uZHJhaW4gPSB0aGlzLl9vbmRyYWluXHJcbiAgICB0aGlzLl9vbmRyYWluID0gbnVsbFxyXG4gICAgaWYgKG9uZHJhaW4pIG9uZHJhaW4oZXJyKVxyXG4gICAgZWxzZSB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyKVxyXG4gIH1cclxuXHJcbiAgaWYgKHRoaXMuX2ZvcndhcmREZXN0cm95KSB7XHJcbiAgICBpZiAodGhpcy5fcmVhZGFibGUgJiYgdGhpcy5fcmVhZGFibGUuZGVzdHJveSkgdGhpcy5fcmVhZGFibGUuZGVzdHJveSgpXHJcbiAgICBpZiAodGhpcy5fd3JpdGFibGUgJiYgdGhpcy5fd3JpdGFibGUuZGVzdHJveSkgdGhpcy5fd3JpdGFibGUuZGVzdHJveSgpXHJcbiAgfVxyXG5cclxuICB0aGlzLmVtaXQoJ2Nsb3NlJylcclxufVxyXG5cclxuRHVwbGV4aWZ5LnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbihkYXRhLCBlbmMsIGNiKSB7XHJcbiAgaWYgKHRoaXMuZGVzdHJveWVkKSByZXR1cm5cclxuICBpZiAodGhpcy5fY29ya2VkKSByZXR1cm4gb251bmNvcmsodGhpcywgdGhpcy5fd3JpdGUuYmluZCh0aGlzLCBkYXRhLCBlbmMsIGNiKSlcclxuICBpZiAoZGF0YSA9PT0gU0lHTkFMX0ZMVVNIKSByZXR1cm4gdGhpcy5fZmluaXNoKGNiKVxyXG4gIGlmICghdGhpcy5fd3JpdGFibGUpIHJldHVybiBjYigpXHJcblxyXG4gIGlmICh0aGlzLl93cml0YWJsZS53cml0ZShkYXRhKSA9PT0gZmFsc2UpIHRoaXMuX29uZHJhaW4gPSBjYlxyXG4gIGVsc2UgaWYgKCF0aGlzLmRlc3Ryb3llZCkgY2IoKVxyXG59XHJcblxyXG5EdXBsZXhpZnkucHJvdG90eXBlLl9maW5pc2ggPSBmdW5jdGlvbihjYikge1xyXG4gIHZhciBzZWxmID0gdGhpc1xyXG4gIHRoaXMuZW1pdCgncHJlZW5kJylcclxuICBvbnVuY29yayh0aGlzLCBmdW5jdGlvbigpIHtcclxuICAgIGVuZChzZWxmLl9mb3J3YXJkRW5kICYmIHNlbGYuX3dyaXRhYmxlLCBmdW5jdGlvbigpIHtcclxuICAgICAgLy8gaGF4eCB0byBub3QgZW1pdCBwcmVmaW5pc2ggdHdpY2VcclxuICAgICAgaWYgKHNlbGYuX3dyaXRhYmxlU3RhdGUucHJlZmluaXNoZWQgPT09IGZhbHNlKSBzZWxmLl93cml0YWJsZVN0YXRlLnByZWZpbmlzaGVkID0gdHJ1ZVxyXG4gICAgICBzZWxmLmVtaXQoJ3ByZWZpbmlzaCcpXHJcbiAgICAgIG9udW5jb3JrKHNlbGYsIGNiKVxyXG4gICAgfSlcclxuICB9KVxyXG59XHJcblxyXG5EdXBsZXhpZnkucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uKGRhdGEsIGVuYywgY2IpIHtcclxuICBpZiAodHlwZW9mIGRhdGEgPT09ICdmdW5jdGlvbicpIHJldHVybiB0aGlzLmVuZChudWxsLCBudWxsLCBkYXRhKVxyXG4gIGlmICh0eXBlb2YgZW5jID09PSAnZnVuY3Rpb24nKSByZXR1cm4gdGhpcy5lbmQoZGF0YSwgbnVsbCwgZW5jKVxyXG4gIHRoaXMuX2VuZGVkID0gdHJ1ZVxyXG4gIGlmIChkYXRhKSB0aGlzLndyaXRlKGRhdGEpXHJcbiAgaWYgKCF0aGlzLl93cml0YWJsZVN0YXRlLmVuZGluZyAmJiAhdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQpIHRoaXMud3JpdGUoU0lHTkFMX0ZMVVNIKVxyXG4gIHJldHVybiBzdHJlYW0uV3JpdGFibGUucHJvdG90eXBlLmVuZC5jYWxsKHRoaXMsIGNiKVxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IER1cGxleGlmeVxyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/duplexify/index.js\n");

/***/ })

};
;