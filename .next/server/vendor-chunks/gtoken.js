"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/gtoken";
exports.ids = ["vendor-chunks/gtoken"];
exports.modules = {

/***/ "(rsc)/./node_modules/gtoken/build/cjs/src/index.cjs":
/*!*****************************************************!*\
  !*** ./node_modules/gtoken/build/cjs/src/index.cjs ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n\r\nObject.defineProperty(exports, \"__esModule\", ({\r\n  value: true\r\n}));\r\nexports.GoogleToken = void 0;\r\nvar fs = _interopRequireWildcard(__webpack_require__(/*! fs */ \"fs\"));\r\nvar _gaxios = __webpack_require__(/*! gaxios */ \"(rsc)/./node_modules/gaxios/build/cjs/src/index.js\");\r\nvar jws = _interopRequireWildcard(__webpack_require__(/*! jws */ \"(rsc)/./node_modules/jws/index.js\"));\r\nvar path = _interopRequireWildcard(__webpack_require__(/*! path */ \"path\"));\r\nvar _util = __webpack_require__(/*! util */ \"util\");\r\nfunction _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }\r\nfunction _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != _typeof(e) && \"function\" != typeof e) return { \"default\": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n[\"default\"] = e, t && t.set(e, n), n; }\r\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\r\nfunction _classPrivateMethodInitSpec(e, a) { _checkPrivateRedeclaration(e, a), a.add(e); }\r\nfunction _classPrivateFieldInitSpec(e, t, a) { _checkPrivateRedeclaration(e, t), t.set(e, a); }\r\nfunction _checkPrivateRedeclaration(e, t) { if (t.has(e)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); }\r\nfunction _classPrivateFieldSet(s, a, r) { return s.set(_assertClassBrand(s, a), r), r; }\r\nfunction _classPrivateFieldGet(s, a) { return s.get(_assertClassBrand(s, a)); }\r\nfunction _assertClassBrand(e, t, n) { if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError(\"Private element is not present on this object\"); }\r\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\r\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\r\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\r\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\r\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\r\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\r\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\r\nfunction _wrapNativeSuper(t) { var r = \"function\" == typeof Map ? new Map() : void 0; return _wrapNativeSuper = function _wrapNativeSuper(t) { if (null === t || !_isNativeFunction(t)) return t; if (\"function\" != typeof t) throw new TypeError(\"Super expression must either be null or a function\"); if (void 0 !== r) { if (r.has(t)) return r.get(t); r.set(t, Wrapper); } function Wrapper() { return _construct(t, arguments, _getPrototypeOf(this).constructor); } return Wrapper.prototype = Object.create(t.prototype, { constructor: { value: Wrapper, enumerable: !1, writable: !0, configurable: !0 } }), _setPrototypeOf(Wrapper, t); }, _wrapNativeSuper(t); }\r\nfunction _construct(t, e, r) { if (_isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments); var o = [null]; o.push.apply(o, e); var p = new (t.bind.apply(t, o))(); return r && _setPrototypeOf(p, r.prototype), p; }\r\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\r\nfunction _isNativeFunction(t) { try { return -1 !== Function.toString.call(t).indexOf(\"[native code]\"); } catch (n) { return \"function\" == typeof t; } }\r\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\r\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\r\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\r\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\r\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\r\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\r\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\r\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; } /**\r\n * Copyright 2018 Google LLC\r\n *\r\n * Distributed under MIT license.\r\n * See file LICENSE for detail or copy at https://opensource.org/licenses/MIT\r\n */\r\nvar readFile = fs.readFile ? (0, _util.promisify)(fs.readFile) : /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\r\n  return _regeneratorRuntime().wrap(function _callee$(_context) {\r\n    while (1) switch (_context.prev = _context.next) {\r\n      case 0:\r\n        throw new ErrorWithCode('use key rather than keyFile.', 'MISSING_CREDENTIALS');\r\n      case 1:\r\n      case \"end\":\r\n        return _context.stop();\r\n    }\r\n  }, _callee);\r\n}));\r\nvar GOOGLE_TOKEN_URL = 'https://oauth2.googleapis.com/token';\r\nvar GOOGLE_REVOKE_TOKEN_URL = 'https://oauth2.googleapis.com/revoke?token=';\r\nvar ErrorWithCode = /*#__PURE__*/function (_Error) {\r\n  function ErrorWithCode(message, code) {\r\n    var _this;\r\n    _classCallCheck(this, ErrorWithCode);\r\n    _this = _callSuper(this, ErrorWithCode, [message]);\r\n    _defineProperty(_this, \"code\", void 0);\r\n    _this.code = code;\r\n    return _this;\r\n  }\r\n  _inherits(ErrorWithCode, _Error);\r\n  return _createClass(ErrorWithCode);\r\n}(/*#__PURE__*/_wrapNativeSuper(Error));\r\nvar _inFlightRequest = /*#__PURE__*/new WeakMap();\r\nvar _GoogleToken_brand = /*#__PURE__*/new WeakSet();\r\nvar GoogleToken = exports.GoogleToken = /*#__PURE__*/function () {\r\n  /**\r\n   * Create a GoogleToken.\r\n   *\r\n   * @param options  Configuration object.\r\n   */\r\n  function GoogleToken(_options) {\r\n    _classCallCheck(this, GoogleToken);\r\n    _classPrivateMethodInitSpec(this, _GoogleToken_brand);\r\n    _defineProperty(this, \"expiresAt\", void 0);\r\n    _defineProperty(this, \"key\", void 0);\r\n    _defineProperty(this, \"keyFile\", void 0);\r\n    _defineProperty(this, \"iss\", void 0);\r\n    _defineProperty(this, \"sub\", void 0);\r\n    _defineProperty(this, \"scope\", void 0);\r\n    _defineProperty(this, \"rawToken\", void 0);\r\n    _defineProperty(this, \"tokenExpires\", void 0);\r\n    _defineProperty(this, \"email\", void 0);\r\n    _defineProperty(this, \"additionalClaims\", void 0);\r\n    _defineProperty(this, \"eagerRefreshThresholdMillis\", void 0);\r\n    _defineProperty(this, \"transporter\", {\r\n      request: function request(opts) {\r\n        return (0, _gaxios.request)(opts);\r\n      }\r\n    });\r\n    _classPrivateFieldInitSpec(this, _inFlightRequest, void 0);\r\n    _assertClassBrand(_GoogleToken_brand, this, _configure).call(this, _options);\r\n  }\r\n\r\n  /**\r\n   * Returns whether the token has expired.\r\n   *\r\n   * @return true if the token has expired, false otherwise.\r\n   */\r\n  return _createClass(GoogleToken, [{\r\n    key: \"accessToken\",\r\n    get: function get() {\r\n      return this.rawToken ? this.rawToken.access_token : undefined;\r\n    }\r\n  }, {\r\n    key: \"idToken\",\r\n    get: function get() {\r\n      return this.rawToken ? this.rawToken.id_token : undefined;\r\n    }\r\n  }, {\r\n    key: \"tokenType\",\r\n    get: function get() {\r\n      return this.rawToken ? this.rawToken.token_type : undefined;\r\n    }\r\n  }, {\r\n    key: \"refreshToken\",\r\n    get: function get() {\r\n      return this.rawToken ? this.rawToken.refresh_token : undefined;\r\n    }\r\n  }, {\r\n    key: \"hasExpired\",\r\n    value: function hasExpired() {\r\n      var now = new Date().getTime();\r\n      if (this.rawToken && this.expiresAt) {\r\n        return now >= this.expiresAt;\r\n      } else {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Returns whether the token will expire within eagerRefreshThresholdMillis\r\n     *\r\n     * @return true if the token will be expired within eagerRefreshThresholdMillis, false otherwise.\r\n     */\r\n  }, {\r\n    key: \"isTokenExpiring\",\r\n    value: function isTokenExpiring() {\r\n      var _this$eagerRefreshThr;\r\n      var now = new Date().getTime();\r\n      var eagerRefreshThresholdMillis = (_this$eagerRefreshThr = this.eagerRefreshThresholdMillis) !== null && _this$eagerRefreshThr !== void 0 ? _this$eagerRefreshThr : 0;\r\n      if (this.rawToken && this.expiresAt) {\r\n        return this.expiresAt <= now + eagerRefreshThresholdMillis;\r\n      } else {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Returns a cached token or retrieves a new one from Google.\r\n     *\r\n     * @param callback The callback function.\r\n     */\r\n  }, {\r\n    key: \"getToken\",\r\n    value: function getToken(callback) {\r\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n      if (_typeof(callback) === 'object') {\r\n        opts = callback;\r\n        callback = undefined;\r\n      }\r\n      opts = Object.assign({\r\n        forceRefresh: false\r\n      }, opts);\r\n      if (callback) {\r\n        var cb = callback;\r\n        _assertClassBrand(_GoogleToken_brand, this, _getTokenAsync).call(this, opts).then(function (t) {\r\n          return cb(null, t);\r\n        }, callback);\r\n        return;\r\n      }\r\n      return _assertClassBrand(_GoogleToken_brand, this, _getTokenAsync).call(this, opts);\r\n    }\r\n\r\n    /**\r\n     * Given a keyFile, extract the key and client email if available\r\n     * @param keyFile Path to a json, pem, or p12 file that contains the key.\r\n     * @returns an object with privateKey and clientEmail properties\r\n     */\r\n  }, {\r\n    key: \"getCredentials\",\r\n    value: (function () {\r\n      var _getCredentials = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(keyFile) {\r\n        var ext, key, body, privateKey, clientEmail, _privateKey;\r\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\r\n          while (1) switch (_context2.prev = _context2.next) {\r\n            case 0:\r\n              ext = path.extname(keyFile);\r\n              _context2.t0 = ext;\r\n              _context2.next = _context2.t0 === '.json' ? 4 : _context2.t0 === '.der' ? 13 : _context2.t0 === '.crt' ? 13 : _context2.t0 === '.pem' ? 13 : _context2.t0 === '.p12' ? 17 : _context2.t0 === '.pfx' ? 17 : 18;\r\n              break;\r\n            case 4:\r\n              _context2.next = 6;\r\n              return readFile(keyFile, 'utf8');\r\n            case 6:\r\n              key = _context2.sent;\r\n              body = JSON.parse(key);\r\n              privateKey = body.private_key;\r\n              clientEmail = body.client_email;\r\n              if (!(!privateKey || !clientEmail)) {\r\n                _context2.next = 12;\r\n                break;\r\n              }\r\n              throw new ErrorWithCode('private_key and client_email are required.', 'MISSING_CREDENTIALS');\r\n            case 12:\r\n              return _context2.abrupt(\"return\", {\r\n                privateKey: privateKey,\r\n                clientEmail: clientEmail\r\n              });\r\n            case 13:\r\n              _context2.next = 15;\r\n              return readFile(keyFile, 'utf8');\r\n            case 15:\r\n              _privateKey = _context2.sent;\r\n              return _context2.abrupt(\"return\", {\r\n                privateKey: _privateKey\r\n              });\r\n            case 17:\r\n              throw new ErrorWithCode('*.p12 certificates are not supported after v6.1.2. ' + 'Consider utilizing *.json format or converting *.p12 to *.pem using the OpenSSL CLI.', 'UNKNOWN_CERTIFICATE_TYPE');\r\n            case 18:\r\n              throw new ErrorWithCode('Unknown certificate type. Type is determined based on file extension. ' + 'Current supported extensions are *.json, and *.pem.', 'UNKNOWN_CERTIFICATE_TYPE');\r\n            case 19:\r\n            case \"end\":\r\n              return _context2.stop();\r\n          }\r\n        }, _callee2);\r\n      }));\r\n      function getCredentials(_x) {\r\n        return _getCredentials.apply(this, arguments);\r\n      }\r\n      return getCredentials;\r\n    }())\r\n  }, {\r\n    key: \"revokeToken\",\r\n    value: function revokeToken(callback) {\r\n      if (callback) {\r\n        _assertClassBrand(_GoogleToken_brand, this, _revokeTokenAsync).call(this).then(function () {\r\n          return callback();\r\n        }, callback);\r\n        return;\r\n      }\r\n      return _assertClassBrand(_GoogleToken_brand, this, _revokeTokenAsync).call(this);\r\n    }\r\n  }]);\r\n}();\r\nfunction _getTokenAsync(_x2) {\r\n  return _getTokenAsync2.apply(this, arguments);\r\n}\r\nfunction _getTokenAsync2() {\r\n  _getTokenAsync2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(opts) {\r\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\r\n      while (1) switch (_context3.prev = _context3.next) {\r\n        case 0:\r\n          if (!(_classPrivateFieldGet(_inFlightRequest, this) && !opts.forceRefresh)) {\r\n            _context3.next = 2;\r\n            break;\r\n          }\r\n          return _context3.abrupt(\"return\", _classPrivateFieldGet(_inFlightRequest, this));\r\n        case 2:\r\n          _context3.prev = 2;\r\n          _context3.next = 5;\r\n          return _classPrivateFieldSet(_inFlightRequest, this, _assertClassBrand(_GoogleToken_brand, this, _getTokenAsyncInner).call(this, opts));\r\n        case 5:\r\n          return _context3.abrupt(\"return\", _context3.sent);\r\n        case 6:\r\n          _context3.prev = 6;\r\n          _classPrivateFieldSet(_inFlightRequest, this, undefined);\r\n          return _context3.finish(6);\r\n        case 9:\r\n        case \"end\":\r\n          return _context3.stop();\r\n      }\r\n    }, _callee3, this, [[2,, 6, 9]]);\r\n  }));\r\n  return _getTokenAsync2.apply(this, arguments);\r\n}\r\nfunction _getTokenAsyncInner(_x3) {\r\n  return _getTokenAsyncInner2.apply(this, arguments);\r\n}\r\nfunction _getTokenAsyncInner2() {\r\n  _getTokenAsyncInner2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(opts) {\r\n    var creds;\r\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\r\n      while (1) switch (_context4.prev = _context4.next) {\r\n        case 0:\r\n          if (!(this.isTokenExpiring() === false && opts.forceRefresh === false)) {\r\n            _context4.next = 2;\r\n            break;\r\n          }\r\n          return _context4.abrupt(\"return\", Promise.resolve(this.rawToken));\r\n        case 2:\r\n          if (!(!this.key && !this.keyFile)) {\r\n            _context4.next = 4;\r\n            break;\r\n          }\r\n          throw new Error('No key or keyFile set.');\r\n        case 4:\r\n          if (!(!this.key && this.keyFile)) {\r\n            _context4.next = 11;\r\n            break;\r\n          }\r\n          _context4.next = 7;\r\n          return this.getCredentials(this.keyFile);\r\n        case 7:\r\n          creds = _context4.sent;\r\n          this.key = creds.privateKey;\r\n          this.iss = creds.clientEmail || this.iss;\r\n          if (!creds.clientEmail) {\r\n            _assertClassBrand(_GoogleToken_brand, this, _ensureEmail).call(this);\r\n          }\r\n        case 11:\r\n          return _context4.abrupt(\"return\", _assertClassBrand(_GoogleToken_brand, this, _requestToken).call(this));\r\n        case 12:\r\n        case \"end\":\r\n          return _context4.stop();\r\n      }\r\n    }, _callee4, this);\r\n  }));\r\n  return _getTokenAsyncInner2.apply(this, arguments);\r\n}\r\nfunction _ensureEmail() {\r\n  if (!this.iss) {\r\n    throw new ErrorWithCode('email is required.', 'MISSING_CREDENTIALS');\r\n  }\r\n}\r\nfunction _revokeTokenAsync() {\r\n  return _revokeTokenAsync2.apply(this, arguments);\r\n}\r\nfunction _revokeTokenAsync2() {\r\n  _revokeTokenAsync2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\r\n    var url;\r\n    return _regeneratorRuntime().wrap(function _callee5$(_context5) {\r\n      while (1) switch (_context5.prev = _context5.next) {\r\n        case 0:\r\n          if (this.accessToken) {\r\n            _context5.next = 2;\r\n            break;\r\n          }\r\n          throw new Error('No token to revoke.');\r\n        case 2:\r\n          url = GOOGLE_REVOKE_TOKEN_URL + this.accessToken;\r\n          _context5.next = 5;\r\n          return this.transporter.request({\r\n            url: url,\r\n            retry: true\r\n          });\r\n        case 5:\r\n          _assertClassBrand(_GoogleToken_brand, this, _configure).call(this, {\r\n            email: this.iss,\r\n            sub: this.sub,\r\n            key: this.key,\r\n            keyFile: this.keyFile,\r\n            scope: this.scope,\r\n            additionalClaims: this.additionalClaims\r\n          });\r\n        case 6:\r\n        case \"end\":\r\n          return _context5.stop();\r\n      }\r\n    }, _callee5, this);\r\n  }));\r\n  return _revokeTokenAsync2.apply(this, arguments);\r\n}\r\n/**\r\n * Configure the GoogleToken for re-use.\r\n * @param  {object} options Configuration object.\r\n */\r\nfunction _configure() {\r\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n  this.keyFile = options.keyFile;\r\n  this.key = options.key;\r\n  this.rawToken = undefined;\r\n  this.iss = options.email || options.iss;\r\n  this.sub = options.sub;\r\n  this.additionalClaims = options.additionalClaims;\r\n  if (_typeof(options.scope) === 'object') {\r\n    this.scope = options.scope.join(' ');\r\n  } else {\r\n    this.scope = options.scope;\r\n  }\r\n  this.eagerRefreshThresholdMillis = options.eagerRefreshThresholdMillis;\r\n  if (options.transporter) {\r\n    this.transporter = options.transporter;\r\n  }\r\n}\r\n/**\r\n * Request the token from Google.\r\n */\r\nfunction _requestToken() {\r\n  return _requestToken2.apply(this, arguments);\r\n}\r\nfunction _requestToken2() {\r\n  _requestToken2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\r\n    var iat, additionalClaims, payload, signedJWT, r, _response, _response2, body, desc;\r\n    return _regeneratorRuntime().wrap(function _callee6$(_context6) {\r\n      while (1) switch (_context6.prev = _context6.next) {\r\n        case 0:\r\n          iat = Math.floor(new Date().getTime() / 1000);\r\n          additionalClaims = this.additionalClaims || {};\r\n          payload = Object.assign({\r\n            iss: this.iss,\r\n            scope: this.scope,\r\n            aud: GOOGLE_TOKEN_URL,\r\n            exp: iat + 3600,\r\n            iat: iat,\r\n            sub: this.sub\r\n          }, additionalClaims);\r\n          signedJWT = jws.sign({\r\n            header: {\r\n              alg: 'RS256'\r\n            },\r\n            payload: payload,\r\n            secret: this.key\r\n          });\r\n          _context6.prev = 4;\r\n          _context6.next = 7;\r\n          return this.transporter.request({\r\n            method: 'POST',\r\n            url: GOOGLE_TOKEN_URL,\r\n            data: new URLSearchParams({\r\n              grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',\r\n              assertion: signedJWT\r\n            }),\r\n            responseType: 'json',\r\n            retryConfig: {\r\n              httpMethodsToRetry: ['POST']\r\n            }\r\n          });\r\n        case 7:\r\n          r = _context6.sent;\r\n          this.rawToken = r.data;\r\n          this.expiresAt = r.data.expires_in === null || r.data.expires_in === undefined ? undefined : (iat + r.data.expires_in) * 1000;\r\n          return _context6.abrupt(\"return\", this.rawToken);\r\n        case 13:\r\n          _context6.prev = 13;\r\n          _context6.t0 = _context6[\"catch\"](4);\r\n          this.rawToken = undefined;\r\n          this.tokenExpires = undefined;\r\n          body = _context6.t0.response && (_response = _context6.t0.response) !== null && _response !== void 0 && _response.data ? (_response2 = _context6.t0.response) === null || _response2 === void 0 ? void 0 : _response2.data : {};\r\n          if (body.error) {\r\n            desc = body.error_description ? \": \".concat(body.error_description) : '';\r\n            _context6.t0.message = \"\".concat(body.error).concat(desc);\r\n          }\r\n          throw _context6.t0;\r\n        case 20:\r\n        case \"end\":\r\n          return _context6.stop();\r\n      }\r\n    }, _callee6, this, [[4, 13]]);\r\n  }));\r\n  return _requestToken2.apply(this, arguments);\r\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/gtoken/build/cjs/src/index.cjs\n");

/***/ })

};
;