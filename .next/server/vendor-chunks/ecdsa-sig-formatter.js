"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/ecdsa-sig-formatter";
exports.ids = ["vendor-chunks/ecdsa-sig-formatter"];
exports.modules = {

/***/ "(rsc)/./node_modules/ecdsa-sig-formatter/src/ecdsa-sig-formatter.js":
/*!*********************************************************************!*\
  !*** ./node_modules/ecdsa-sig-formatter/src/ecdsa-sig-formatter.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\n\r\nvar Buffer = (__webpack_require__(/*! safe-buffer */ \"(rsc)/./node_modules/safe-buffer/index.js\").Buffer);\r\n\r\nvar getParamBytesForAlg = __webpack_require__(/*! ./param-bytes-for-alg */ \"(rsc)/./node_modules/ecdsa-sig-formatter/src/param-bytes-for-alg.js\");\r\n\r\nvar MAX_OCTET = 0x80,\r\n\tCLASS_UNIVERSAL = 0,\r\n\tPRIMITIVE_BIT = 0x20,\r\n\tTAG_SEQ = 0x10,\r\n\tTAG_INT = 0x02,\r\n\tENCODED_TAG_SEQ = (TAG_SEQ | PRIMITIVE_BIT) | (CLASS_UNIVERSAL << 6),\r\n\tENCODED_TAG_INT = TAG_INT | (CLASS_UNIVERSAL << 6);\r\n\r\nfunction base64Url(base64) {\r\n\treturn base64\r\n\t\t.replace(/=/g, '')\r\n\t\t.replace(/\\+/g, '-')\r\n\t\t.replace(/\\//g, '_');\r\n}\r\n\r\nfunction signatureAsBuffer(signature) {\r\n\tif (Buffer.isBuffer(signature)) {\r\n\t\treturn signature;\r\n\t} else if ('string' === typeof signature) {\r\n\t\treturn Buffer.from(signature, 'base64');\r\n\t}\r\n\r\n\tthrow new TypeError('ECDSA signature must be a Base64 string or a Buffer');\r\n}\r\n\r\nfunction derToJose(signature, alg) {\r\n\tsignature = signatureAsBuffer(signature);\r\n\tvar paramBytes = getParamBytesForAlg(alg);\r\n\r\n\t// the DER encoded param should at most be the param size, plus a padding\r\n\t// zero, since due to being a signed integer\r\n\tvar maxEncodedParamLength = paramBytes + 1;\r\n\r\n\tvar inputLength = signature.length;\r\n\r\n\tvar offset = 0;\r\n\tif (signature[offset++] !== ENCODED_TAG_SEQ) {\r\n\t\tthrow new Error('Could not find expected \"seq\"');\r\n\t}\r\n\r\n\tvar seqLength = signature[offset++];\r\n\tif (seqLength === (MAX_OCTET | 1)) {\r\n\t\tseqLength = signature[offset++];\r\n\t}\r\n\r\n\tif (inputLength - offset < seqLength) {\r\n\t\tthrow new Error('\"seq\" specified length of \"' + seqLength + '\", only \"' + (inputLength - offset) + '\" remaining');\r\n\t}\r\n\r\n\tif (signature[offset++] !== ENCODED_TAG_INT) {\r\n\t\tthrow new Error('Could not find expected \"int\" for \"r\"');\r\n\t}\r\n\r\n\tvar rLength = signature[offset++];\r\n\r\n\tif (inputLength - offset - 2 < rLength) {\r\n\t\tthrow new Error('\"r\" specified length of \"' + rLength + '\", only \"' + (inputLength - offset - 2) + '\" available');\r\n\t}\r\n\r\n\tif (maxEncodedParamLength < rLength) {\r\n\t\tthrow new Error('\"r\" specified length of \"' + rLength + '\", max of \"' + maxEncodedParamLength + '\" is acceptable');\r\n\t}\r\n\r\n\tvar rOffset = offset;\r\n\toffset += rLength;\r\n\r\n\tif (signature[offset++] !== ENCODED_TAG_INT) {\r\n\t\tthrow new Error('Could not find expected \"int\" for \"s\"');\r\n\t}\r\n\r\n\tvar sLength = signature[offset++];\r\n\r\n\tif (inputLength - offset !== sLength) {\r\n\t\tthrow new Error('\"s\" specified length of \"' + sLength + '\", expected \"' + (inputLength - offset) + '\"');\r\n\t}\r\n\r\n\tif (maxEncodedParamLength < sLength) {\r\n\t\tthrow new Error('\"s\" specified length of \"' + sLength + '\", max of \"' + maxEncodedParamLength + '\" is acceptable');\r\n\t}\r\n\r\n\tvar sOffset = offset;\r\n\toffset += sLength;\r\n\r\n\tif (offset !== inputLength) {\r\n\t\tthrow new Error('Expected to consume entire buffer, but \"' + (inputLength - offset) + '\" bytes remain');\r\n\t}\r\n\r\n\tvar rPadding = paramBytes - rLength,\r\n\t\tsPadding = paramBytes - sLength;\r\n\r\n\tvar dst = Buffer.allocUnsafe(rPadding + rLength + sPadding + sLength);\r\n\r\n\tfor (offset = 0; offset < rPadding; ++offset) {\r\n\t\tdst[offset] = 0;\r\n\t}\r\n\tsignature.copy(dst, offset, rOffset + Math.max(-rPadding, 0), rOffset + rLength);\r\n\r\n\toffset = paramBytes;\r\n\r\n\tfor (var o = offset; offset < o + sPadding; ++offset) {\r\n\t\tdst[offset] = 0;\r\n\t}\r\n\tsignature.copy(dst, offset, sOffset + Math.max(-sPadding, 0), sOffset + sLength);\r\n\r\n\tdst = dst.toString('base64');\r\n\tdst = base64Url(dst);\r\n\r\n\treturn dst;\r\n}\r\n\r\nfunction countPadding(buf, start, stop) {\r\n\tvar padding = 0;\r\n\twhile (start + padding < stop && buf[start + padding] === 0) {\r\n\t\t++padding;\r\n\t}\r\n\r\n\tvar needsSign = buf[start + padding] >= MAX_OCTET;\r\n\tif (needsSign) {\r\n\t\t--padding;\r\n\t}\r\n\r\n\treturn padding;\r\n}\r\n\r\nfunction joseToDer(signature, alg) {\r\n\tsignature = signatureAsBuffer(signature);\r\n\tvar paramBytes = getParamBytesForAlg(alg);\r\n\r\n\tvar signatureBytes = signature.length;\r\n\tif (signatureBytes !== paramBytes * 2) {\r\n\t\tthrow new TypeError('\"' + alg + '\" signatures must be \"' + paramBytes * 2 + '\" bytes, saw \"' + signatureBytes + '\"');\r\n\t}\r\n\r\n\tvar rPadding = countPadding(signature, 0, paramBytes);\r\n\tvar sPadding = countPadding(signature, paramBytes, signature.length);\r\n\tvar rLength = paramBytes - rPadding;\r\n\tvar sLength = paramBytes - sPadding;\r\n\r\n\tvar rsBytes = 1 + 1 + rLength + 1 + 1 + sLength;\r\n\r\n\tvar shortLength = rsBytes < MAX_OCTET;\r\n\r\n\tvar dst = Buffer.allocUnsafe((shortLength ? 2 : 3) + rsBytes);\r\n\r\n\tvar offset = 0;\r\n\tdst[offset++] = ENCODED_TAG_SEQ;\r\n\tif (shortLength) {\r\n\t\t// Bit 8 has value \"0\"\r\n\t\t// bits 7-1 give the length.\r\n\t\tdst[offset++] = rsBytes;\r\n\t} else {\r\n\t\t// Bit 8 of first octet has value \"1\"\r\n\t\t// bits 7-1 give the number of additional length octets.\r\n\t\tdst[offset++] = MAX_OCTET\t| 1;\r\n\t\t// length, base 256\r\n\t\tdst[offset++] = rsBytes & 0xff;\r\n\t}\r\n\tdst[offset++] = ENCODED_TAG_INT;\r\n\tdst[offset++] = rLength;\r\n\tif (rPadding < 0) {\r\n\t\tdst[offset++] = 0;\r\n\t\toffset += signature.copy(dst, offset, 0, paramBytes);\r\n\t} else {\r\n\t\toffset += signature.copy(dst, offset, rPadding, paramBytes);\r\n\t}\r\n\tdst[offset++] = ENCODED_TAG_INT;\r\n\tdst[offset++] = sLength;\r\n\tif (sPadding < 0) {\r\n\t\tdst[offset++] = 0;\r\n\t\tsignature.copy(dst, offset, paramBytes);\r\n\t} else {\r\n\t\tsignature.copy(dst, offset, paramBytes + sPadding);\r\n\t}\r\n\r\n\treturn dst;\r\n}\r\n\r\nmodule.exports = {\r\n\tderToJose: derToJose,\r\n\tjoseToDer: joseToDer\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ecdsa-sig-formatter/src/ecdsa-sig-formatter.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ecdsa-sig-formatter/src/param-bytes-for-alg.js":
/*!*********************************************************************!*\
  !*** ./node_modules/ecdsa-sig-formatter/src/param-bytes-for-alg.js ***!
  \*********************************************************************/
/***/ ((module) => {

eval("\r\n\r\nfunction getParamSize(keySize) {\r\n\tvar result = ((keySize / 8) | 0) + (keySize % 8 === 0 ? 0 : 1);\r\n\treturn result;\r\n}\r\n\r\nvar paramBytesForAlg = {\r\n\tES256: getParamSize(256),\r\n\tES384: getParamSize(384),\r\n\tES512: getParamSize(521)\r\n};\r\n\r\nfunction getParamBytesForAlg(alg) {\r\n\tvar paramBytes = paramBytesForAlg[alg];\r\n\tif (paramBytes) {\r\n\t\treturn paramBytes;\r\n\t}\r\n\r\n\tthrow new Error('Unknown algorithm \"' + alg + '\"');\r\n}\r\n\r\nmodule.exports = getParamBytesForAlg;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZWNkc2Etc2lnLWZvcm1hdHRlci9zcmMvcGFyYW0tYnl0ZXMtZm9yLWFsZy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGFuaXNoLWJ1ZGR5Ly4vbm9kZV9tb2R1bGVzL2VjZHNhLXNpZy1mb3JtYXR0ZXIvc3JjL3BhcmFtLWJ5dGVzLWZvci1hbGcuanM/MzliOCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcblxyXG5mdW5jdGlvbiBnZXRQYXJhbVNpemUoa2V5U2l6ZSkge1xyXG5cdHZhciByZXN1bHQgPSAoKGtleVNpemUgLyA4KSB8IDApICsgKGtleVNpemUgJSA4ID09PSAwID8gMCA6IDEpO1xyXG5cdHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbnZhciBwYXJhbUJ5dGVzRm9yQWxnID0ge1xyXG5cdEVTMjU2OiBnZXRQYXJhbVNpemUoMjU2KSxcclxuXHRFUzM4NDogZ2V0UGFyYW1TaXplKDM4NCksXHJcblx0RVM1MTI6IGdldFBhcmFtU2l6ZSg1MjEpXHJcbn07XHJcblxyXG5mdW5jdGlvbiBnZXRQYXJhbUJ5dGVzRm9yQWxnKGFsZykge1xyXG5cdHZhciBwYXJhbUJ5dGVzID0gcGFyYW1CeXRlc0ZvckFsZ1thbGddO1xyXG5cdGlmIChwYXJhbUJ5dGVzKSB7XHJcblx0XHRyZXR1cm4gcGFyYW1CeXRlcztcclxuXHR9XHJcblxyXG5cdHRocm93IG5ldyBFcnJvcignVW5rbm93biBhbGdvcml0aG0gXCInICsgYWxnICsgJ1wiJyk7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZ2V0UGFyYW1CeXRlc0ZvckFsZztcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ecdsa-sig-formatter/src/param-bytes-for-alg.js\n");

/***/ })

};
;