"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@js-sdsl";
exports.ids = ["vendor-chunks/@js-sdsl"];
exports.modules = {

/***/ "(rsc)/./node_modules/@js-sdsl/ordered-map/dist/esm/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@js-sdsl/ordered-map/dist/esm/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OrderedMap: () => (/* binding */ OrderedMap)\n/* harmony export */ });\nvar extendStatics = function(e, r) {\r\n    extendStatics = Object.setPrototypeOf || {\r\n        __proto__: []\r\n    } instanceof Array && function(e, r) {\r\n        e.__proto__ = r;\r\n    } || function(e, r) {\r\n        for (var t in r) if (Object.prototype.hasOwnProperty.call(r, t)) e[t] = r[t];\r\n    };\r\n    return extendStatics(e, r);\r\n};\r\n\r\nfunction __extends(e, r) {\r\n    if (typeof r !== \"function\" && r !== null) throw new TypeError(\"Class extends value \" + String(r) + \" is not a constructor or null\");\r\n    extendStatics(e, r);\r\n    function __() {\r\n        this.constructor = e;\r\n    }\r\n    e.prototype = r === null ? Object.create(r) : (__.prototype = r.prototype, new __);\r\n}\r\n\r\nfunction __generator(e, r) {\r\n    var t = {\r\n        label: 0,\r\n        sent: function() {\r\n            if (s[0] & 1) throw s[1];\r\n            return s[1];\r\n        },\r\n        trys: [],\r\n        ops: []\r\n    }, i, n, s, h;\r\n    return h = {\r\n        next: verb(0),\r\n        throw: verb(1),\r\n        return: verb(2)\r\n    }, typeof Symbol === \"function\" && (h[Symbol.iterator] = function() {\r\n        return this;\r\n    }), h;\r\n    function verb(e) {\r\n        return function(r) {\r\n            return step([ e, r ]);\r\n        };\r\n    }\r\n    function step(a) {\r\n        if (i) throw new TypeError(\"Generator is already executing.\");\r\n        while (h && (h = 0, a[0] && (t = 0)), t) try {\r\n            if (i = 1, n && (s = a[0] & 2 ? n[\"return\"] : a[0] ? n[\"throw\"] || ((s = n[\"return\"]) && s.call(n), \r\n            0) : n.next) && !(s = s.call(n, a[1])).done) return s;\r\n            if (n = 0, s) a = [ a[0] & 2, s.value ];\r\n            switch (a[0]) {\r\n              case 0:\r\n              case 1:\r\n                s = a;\r\n                break;\r\n\r\n              case 4:\r\n                t.label++;\r\n                return {\r\n                    value: a[1],\r\n                    done: false\r\n                };\r\n\r\n              case 5:\r\n                t.label++;\r\n                n = a[1];\r\n                a = [ 0 ];\r\n                continue;\r\n\r\n              case 7:\r\n                a = t.ops.pop();\r\n                t.trys.pop();\r\n                continue;\r\n\r\n              default:\r\n                if (!(s = t.trys, s = s.length > 0 && s[s.length - 1]) && (a[0] === 6 || a[0] === 2)) {\r\n                    t = 0;\r\n                    continue;\r\n                }\r\n                if (a[0] === 3 && (!s || a[1] > s[0] && a[1] < s[3])) {\r\n                    t.label = a[1];\r\n                    break;\r\n                }\r\n                if (a[0] === 6 && t.label < s[1]) {\r\n                    t.label = s[1];\r\n                    s = a;\r\n                    break;\r\n                }\r\n                if (s && t.label < s[2]) {\r\n                    t.label = s[2];\r\n                    t.ops.push(a);\r\n                    break;\r\n                }\r\n                if (s[2]) t.ops.pop();\r\n                t.trys.pop();\r\n                continue;\r\n            }\r\n            a = r.call(e, t);\r\n        } catch (e) {\r\n            a = [ 6, e ];\r\n            n = 0;\r\n        } finally {\r\n            i = s = 0;\r\n        }\r\n        if (a[0] & 5) throw a[1];\r\n        return {\r\n            value: a[0] ? a[1] : void 0,\r\n            done: true\r\n        };\r\n    }\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function(e, r, t) {\r\n    var i = new Error(t);\r\n    return i.name = \"SuppressedError\", i.error = e, i.suppressed = r, i;\r\n};\r\n\r\nvar TreeNode = function() {\r\n    function TreeNode(e, r, t) {\r\n        if (t === void 0) {\r\n            t = 1;\r\n        }\r\n        this.t = undefined;\r\n        this.i = undefined;\r\n        this.h = undefined;\r\n        this.u = e;\r\n        this.o = r;\r\n        this.l = t;\r\n    }\r\n    TreeNode.prototype.v = function() {\r\n        var e = this;\r\n        var r = e.h.h === e;\r\n        if (r && e.l === 1) {\r\n            e = e.i;\r\n        } else if (e.t) {\r\n            e = e.t;\r\n            while (e.i) {\r\n                e = e.i;\r\n            }\r\n        } else {\r\n            if (r) {\r\n                return e.h;\r\n            }\r\n            var t = e.h;\r\n            while (t.t === e) {\r\n                e = t;\r\n                t = e.h;\r\n            }\r\n            e = t;\r\n        }\r\n        return e;\r\n    };\r\n    TreeNode.prototype.p = function() {\r\n        var e = this;\r\n        if (e.i) {\r\n            e = e.i;\r\n            while (e.t) {\r\n                e = e.t;\r\n            }\r\n            return e;\r\n        } else {\r\n            var r = e.h;\r\n            while (r.i === e) {\r\n                e = r;\r\n                r = e.h;\r\n            }\r\n            if (e.i !== r) {\r\n                return r;\r\n            } else return e;\r\n        }\r\n    };\r\n    TreeNode.prototype.T = function() {\r\n        var e = this.h;\r\n        var r = this.i;\r\n        var t = r.t;\r\n        if (e.h === this) e.h = r; else if (e.t === this) e.t = r; else e.i = r;\r\n        r.h = e;\r\n        r.t = this;\r\n        this.h = r;\r\n        this.i = t;\r\n        if (t) t.h = this;\r\n        return r;\r\n    };\r\n    TreeNode.prototype.I = function() {\r\n        var e = this.h;\r\n        var r = this.t;\r\n        var t = r.i;\r\n        if (e.h === this) e.h = r; else if (e.t === this) e.t = r; else e.i = r;\r\n        r.h = e;\r\n        r.i = this;\r\n        this.h = r;\r\n        this.t = t;\r\n        if (t) t.h = this;\r\n        return r;\r\n    };\r\n    return TreeNode;\r\n}();\r\n\r\nvar TreeNodeEnableIndex = function(e) {\r\n    __extends(TreeNodeEnableIndex, e);\r\n    function TreeNodeEnableIndex() {\r\n        var r = e !== null && e.apply(this, arguments) || this;\r\n        r.O = 1;\r\n        return r;\r\n    }\r\n    TreeNodeEnableIndex.prototype.T = function() {\r\n        var r = e.prototype.T.call(this);\r\n        this.M();\r\n        r.M();\r\n        return r;\r\n    };\r\n    TreeNodeEnableIndex.prototype.I = function() {\r\n        var r = e.prototype.I.call(this);\r\n        this.M();\r\n        r.M();\r\n        return r;\r\n    };\r\n    TreeNodeEnableIndex.prototype.M = function() {\r\n        this.O = 1;\r\n        if (this.t) {\r\n            this.O += this.t.O;\r\n        }\r\n        if (this.i) {\r\n            this.O += this.i.O;\r\n        }\r\n    };\r\n    return TreeNodeEnableIndex;\r\n}(TreeNode);\r\n\r\nvar ContainerIterator = function() {\r\n    function ContainerIterator(e) {\r\n        if (e === void 0) {\r\n            e = 0;\r\n        }\r\n        this.iteratorType = e;\r\n    }\r\n    ContainerIterator.prototype.equals = function(e) {\r\n        return this.C === e.C;\r\n    };\r\n    return ContainerIterator;\r\n}();\r\n\r\nvar Base = function() {\r\n    function Base() {\r\n        this._ = 0;\r\n    }\r\n    Object.defineProperty(Base.prototype, \"length\", {\r\n        get: function() {\r\n            return this._;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Base.prototype.size = function() {\r\n        return this._;\r\n    };\r\n    Base.prototype.empty = function() {\r\n        return this._ === 0;\r\n    };\r\n    return Base;\r\n}();\r\n\r\nvar Container = function(e) {\r\n    __extends(Container, e);\r\n    function Container() {\r\n        return e !== null && e.apply(this, arguments) || this;\r\n    }\r\n    return Container;\r\n}(Base);\r\n\r\nfunction throwIteratorAccessError() {\r\n    throw new RangeError(\"Iterator access denied!\");\r\n}\r\n\r\nvar TreeContainer = function(e) {\r\n    __extends(TreeContainer, e);\r\n    function TreeContainer(r, t) {\r\n        if (r === void 0) {\r\n            r = function(e, r) {\r\n                if (e < r) return -1;\r\n                if (e > r) return 1;\r\n                return 0;\r\n            };\r\n        }\r\n        if (t === void 0) {\r\n            t = false;\r\n        }\r\n        var i = e.call(this) || this;\r\n        i.N = undefined;\r\n        i.g = r;\r\n        i.enableIndex = t;\r\n        i.S = t ? TreeNodeEnableIndex : TreeNode;\r\n        i.A = new i.S;\r\n        return i;\r\n    }\r\n    TreeContainer.prototype.m = function(e, r) {\r\n        var t = this.A;\r\n        while (e) {\r\n            var i = this.g(e.u, r);\r\n            if (i < 0) {\r\n                e = e.i;\r\n            } else if (i > 0) {\r\n                t = e;\r\n                e = e.t;\r\n            } else return e;\r\n        }\r\n        return t;\r\n    };\r\n    TreeContainer.prototype.B = function(e, r) {\r\n        var t = this.A;\r\n        while (e) {\r\n            var i = this.g(e.u, r);\r\n            if (i <= 0) {\r\n                e = e.i;\r\n            } else {\r\n                t = e;\r\n                e = e.t;\r\n            }\r\n        }\r\n        return t;\r\n    };\r\n    TreeContainer.prototype.j = function(e, r) {\r\n        var t = this.A;\r\n        while (e) {\r\n            var i = this.g(e.u, r);\r\n            if (i < 0) {\r\n                t = e;\r\n                e = e.i;\r\n            } else if (i > 0) {\r\n                e = e.t;\r\n            } else return e;\r\n        }\r\n        return t;\r\n    };\r\n    TreeContainer.prototype.k = function(e, r) {\r\n        var t = this.A;\r\n        while (e) {\r\n            var i = this.g(e.u, r);\r\n            if (i < 0) {\r\n                t = e;\r\n                e = e.i;\r\n            } else {\r\n                e = e.t;\r\n            }\r\n        }\r\n        return t;\r\n    };\r\n    TreeContainer.prototype.R = function(e) {\r\n        while (true) {\r\n            var r = e.h;\r\n            if (r === this.A) return;\r\n            if (e.l === 1) {\r\n                e.l = 0;\r\n                return;\r\n            }\r\n            if (e === r.t) {\r\n                var t = r.i;\r\n                if (t.l === 1) {\r\n                    t.l = 0;\r\n                    r.l = 1;\r\n                    if (r === this.N) {\r\n                        this.N = r.T();\r\n                    } else r.T();\r\n                } else {\r\n                    if (t.i && t.i.l === 1) {\r\n                        t.l = r.l;\r\n                        r.l = 0;\r\n                        t.i.l = 0;\r\n                        if (r === this.N) {\r\n                            this.N = r.T();\r\n                        } else r.T();\r\n                        return;\r\n                    } else if (t.t && t.t.l === 1) {\r\n                        t.l = 1;\r\n                        t.t.l = 0;\r\n                        t.I();\r\n                    } else {\r\n                        t.l = 1;\r\n                        e = r;\r\n                    }\r\n                }\r\n            } else {\r\n                var t = r.t;\r\n                if (t.l === 1) {\r\n                    t.l = 0;\r\n                    r.l = 1;\r\n                    if (r === this.N) {\r\n                        this.N = r.I();\r\n                    } else r.I();\r\n                } else {\r\n                    if (t.t && t.t.l === 1) {\r\n                        t.l = r.l;\r\n                        r.l = 0;\r\n                        t.t.l = 0;\r\n                        if (r === this.N) {\r\n                            this.N = r.I();\r\n                        } else r.I();\r\n                        return;\r\n                    } else if (t.i && t.i.l === 1) {\r\n                        t.l = 1;\r\n                        t.i.l = 0;\r\n                        t.T();\r\n                    } else {\r\n                        t.l = 1;\r\n                        e = r;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    TreeContainer.prototype.G = function(e) {\r\n        if (this._ === 1) {\r\n            this.clear();\r\n            return;\r\n        }\r\n        var r = e;\r\n        while (r.t || r.i) {\r\n            if (r.i) {\r\n                r = r.i;\r\n                while (r.t) r = r.t;\r\n            } else {\r\n                r = r.t;\r\n            }\r\n            var t = e.u;\r\n            e.u = r.u;\r\n            r.u = t;\r\n            var i = e.o;\r\n            e.o = r.o;\r\n            r.o = i;\r\n            e = r;\r\n        }\r\n        if (this.A.t === r) {\r\n            this.A.t = r.h;\r\n        } else if (this.A.i === r) {\r\n            this.A.i = r.h;\r\n        }\r\n        this.R(r);\r\n        var n = r.h;\r\n        if (r === n.t) {\r\n            n.t = undefined;\r\n        } else n.i = undefined;\r\n        this._ -= 1;\r\n        this.N.l = 0;\r\n        if (this.enableIndex) {\r\n            while (n !== this.A) {\r\n                n.O -= 1;\r\n                n = n.h;\r\n            }\r\n        }\r\n    };\r\n    TreeContainer.prototype.P = function(e) {\r\n        var r = typeof e === \"number\" ? e : undefined;\r\n        var t = typeof e === \"function\" ? e : undefined;\r\n        var i = typeof e === \"undefined\" ? [] : undefined;\r\n        var n = 0;\r\n        var s = this.N;\r\n        var h = [];\r\n        while (h.length || s) {\r\n            if (s) {\r\n                h.push(s);\r\n                s = s.t;\r\n            } else {\r\n                s = h.pop();\r\n                if (n === r) return s;\r\n                i && i.push(s);\r\n                t && t(s, n, this);\r\n                n += 1;\r\n                s = s.i;\r\n            }\r\n        }\r\n        return i;\r\n    };\r\n    TreeContainer.prototype.q = function(e) {\r\n        while (true) {\r\n            var r = e.h;\r\n            if (r.l === 0) return;\r\n            var t = r.h;\r\n            if (r === t.t) {\r\n                var i = t.i;\r\n                if (i && i.l === 1) {\r\n                    i.l = r.l = 0;\r\n                    if (t === this.N) return;\r\n                    t.l = 1;\r\n                    e = t;\r\n                    continue;\r\n                } else if (e === r.i) {\r\n                    e.l = 0;\r\n                    if (e.t) {\r\n                        e.t.h = r;\r\n                    }\r\n                    if (e.i) {\r\n                        e.i.h = t;\r\n                    }\r\n                    r.i = e.t;\r\n                    t.t = e.i;\r\n                    e.t = r;\r\n                    e.i = t;\r\n                    if (t === this.N) {\r\n                        this.N = e;\r\n                        this.A.h = e;\r\n                    } else {\r\n                        var n = t.h;\r\n                        if (n.t === t) {\r\n                            n.t = e;\r\n                        } else n.i = e;\r\n                    }\r\n                    e.h = t.h;\r\n                    r.h = e;\r\n                    t.h = e;\r\n                    t.l = 1;\r\n                } else {\r\n                    r.l = 0;\r\n                    if (t === this.N) {\r\n                        this.N = t.I();\r\n                    } else t.I();\r\n                    t.l = 1;\r\n                    return;\r\n                }\r\n            } else {\r\n                var i = t.t;\r\n                if (i && i.l === 1) {\r\n                    i.l = r.l = 0;\r\n                    if (t === this.N) return;\r\n                    t.l = 1;\r\n                    e = t;\r\n                    continue;\r\n                } else if (e === r.t) {\r\n                    e.l = 0;\r\n                    if (e.t) {\r\n                        e.t.h = t;\r\n                    }\r\n                    if (e.i) {\r\n                        e.i.h = r;\r\n                    }\r\n                    t.i = e.t;\r\n                    r.t = e.i;\r\n                    e.t = t;\r\n                    e.i = r;\r\n                    if (t === this.N) {\r\n                        this.N = e;\r\n                        this.A.h = e;\r\n                    } else {\r\n                        var n = t.h;\r\n                        if (n.t === t) {\r\n                            n.t = e;\r\n                        } else n.i = e;\r\n                    }\r\n                    e.h = t.h;\r\n                    r.h = e;\r\n                    t.h = e;\r\n                    t.l = 1;\r\n                } else {\r\n                    r.l = 0;\r\n                    if (t === this.N) {\r\n                        this.N = t.T();\r\n                    } else t.T();\r\n                    t.l = 1;\r\n                    return;\r\n                }\r\n            }\r\n            if (this.enableIndex) {\r\n                r.M();\r\n                t.M();\r\n                e.M();\r\n            }\r\n            return;\r\n        }\r\n    };\r\n    TreeContainer.prototype.D = function(e, r, t) {\r\n        if (this.N === undefined) {\r\n            this._ += 1;\r\n            this.N = new this.S(e, r, 0);\r\n            this.N.h = this.A;\r\n            this.A.h = this.A.t = this.A.i = this.N;\r\n            return this._;\r\n        }\r\n        var i;\r\n        var n = this.A.t;\r\n        var s = this.g(n.u, e);\r\n        if (s === 0) {\r\n            n.o = r;\r\n            return this._;\r\n        } else if (s > 0) {\r\n            n.t = new this.S(e, r);\r\n            n.t.h = n;\r\n            i = n.t;\r\n            this.A.t = i;\r\n        } else {\r\n            var h = this.A.i;\r\n            var a = this.g(h.u, e);\r\n            if (a === 0) {\r\n                h.o = r;\r\n                return this._;\r\n            } else if (a < 0) {\r\n                h.i = new this.S(e, r);\r\n                h.i.h = h;\r\n                i = h.i;\r\n                this.A.i = i;\r\n            } else {\r\n                if (t !== undefined) {\r\n                    var u = t.C;\r\n                    if (u !== this.A) {\r\n                        var f = this.g(u.u, e);\r\n                        if (f === 0) {\r\n                            u.o = r;\r\n                            return this._;\r\n                        } else if (f > 0) {\r\n                            var o = u.v();\r\n                            var d = this.g(o.u, e);\r\n                            if (d === 0) {\r\n                                o.o = r;\r\n                                return this._;\r\n                            } else if (d < 0) {\r\n                                i = new this.S(e, r);\r\n                                if (o.i === undefined) {\r\n                                    o.i = i;\r\n                                    i.h = o;\r\n                                } else {\r\n                                    u.t = i;\r\n                                    i.h = u;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (i === undefined) {\r\n                    i = this.N;\r\n                    while (true) {\r\n                        var c = this.g(i.u, e);\r\n                        if (c > 0) {\r\n                            if (i.t === undefined) {\r\n                                i.t = new this.S(e, r);\r\n                                i.t.h = i;\r\n                                i = i.t;\r\n                                break;\r\n                            }\r\n                            i = i.t;\r\n                        } else if (c < 0) {\r\n                            if (i.i === undefined) {\r\n                                i.i = new this.S(e, r);\r\n                                i.i.h = i;\r\n                                i = i.i;\r\n                                break;\r\n                            }\r\n                            i = i.i;\r\n                        } else {\r\n                            i.o = r;\r\n                            return this._;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (this.enableIndex) {\r\n            var l = i.h;\r\n            while (l !== this.A) {\r\n                l.O += 1;\r\n                l = l.h;\r\n            }\r\n        }\r\n        this.q(i);\r\n        this._ += 1;\r\n        return this._;\r\n    };\r\n    TreeContainer.prototype.F = function(e, r) {\r\n        while (e) {\r\n            var t = this.g(e.u, r);\r\n            if (t < 0) {\r\n                e = e.i;\r\n            } else if (t > 0) {\r\n                e = e.t;\r\n            } else return e;\r\n        }\r\n        return e || this.A;\r\n    };\r\n    TreeContainer.prototype.clear = function() {\r\n        this._ = 0;\r\n        this.N = undefined;\r\n        this.A.h = undefined;\r\n        this.A.t = this.A.i = undefined;\r\n    };\r\n    TreeContainer.prototype.updateKeyByIterator = function(e, r) {\r\n        var t = e.C;\r\n        if (t === this.A) {\r\n            throwIteratorAccessError();\r\n        }\r\n        if (this._ === 1) {\r\n            t.u = r;\r\n            return true;\r\n        }\r\n        var i = t.p().u;\r\n        if (t === this.A.t) {\r\n            if (this.g(i, r) > 0) {\r\n                t.u = r;\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n        var n = t.v().u;\r\n        if (t === this.A.i) {\r\n            if (this.g(n, r) < 0) {\r\n                t.u = r;\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n        if (this.g(n, r) >= 0 || this.g(i, r) <= 0) return false;\r\n        t.u = r;\r\n        return true;\r\n    };\r\n    TreeContainer.prototype.eraseElementByPos = function(e) {\r\n        if (e < 0 || e > this._ - 1) {\r\n            throw new RangeError;\r\n        }\r\n        var r = this.P(e);\r\n        this.G(r);\r\n        return this._;\r\n    };\r\n    TreeContainer.prototype.eraseElementByKey = function(e) {\r\n        if (this._ === 0) return false;\r\n        var r = this.F(this.N, e);\r\n        if (r === this.A) return false;\r\n        this.G(r);\r\n        return true;\r\n    };\r\n    TreeContainer.prototype.eraseElementByIterator = function(e) {\r\n        var r = e.C;\r\n        if (r === this.A) {\r\n            throwIteratorAccessError();\r\n        }\r\n        var t = r.i === undefined;\r\n        var i = e.iteratorType === 0;\r\n        if (i) {\r\n            if (t) e.next();\r\n        } else {\r\n            if (!t || r.t === undefined) e.next();\r\n        }\r\n        this.G(r);\r\n        return e;\r\n    };\r\n    TreeContainer.prototype.getHeight = function() {\r\n        if (this._ === 0) return 0;\r\n        function traversal(e) {\r\n            if (!e) return 0;\r\n            return Math.max(traversal(e.t), traversal(e.i)) + 1;\r\n        }\r\n        return traversal(this.N);\r\n    };\r\n    return TreeContainer;\r\n}(Container);\r\n\r\nvar TreeIterator = function(e) {\r\n    __extends(TreeIterator, e);\r\n    function TreeIterator(r, t, i) {\r\n        var n = e.call(this, i) || this;\r\n        n.C = r;\r\n        n.A = t;\r\n        if (n.iteratorType === 0) {\r\n            n.pre = function() {\r\n                if (this.C === this.A.t) {\r\n                    throwIteratorAccessError();\r\n                }\r\n                this.C = this.C.v();\r\n                return this;\r\n            };\r\n            n.next = function() {\r\n                if (this.C === this.A) {\r\n                    throwIteratorAccessError();\r\n                }\r\n                this.C = this.C.p();\r\n                return this;\r\n            };\r\n        } else {\r\n            n.pre = function() {\r\n                if (this.C === this.A.i) {\r\n                    throwIteratorAccessError();\r\n                }\r\n                this.C = this.C.p();\r\n                return this;\r\n            };\r\n            n.next = function() {\r\n                if (this.C === this.A) {\r\n                    throwIteratorAccessError();\r\n                }\r\n                this.C = this.C.v();\r\n                return this;\r\n            };\r\n        }\r\n        return n;\r\n    }\r\n    Object.defineProperty(TreeIterator.prototype, \"index\", {\r\n        get: function() {\r\n            var e = this.C;\r\n            var r = this.A.h;\r\n            if (e === this.A) {\r\n                if (r) {\r\n                    return r.O - 1;\r\n                }\r\n                return 0;\r\n            }\r\n            var t = 0;\r\n            if (e.t) {\r\n                t += e.t.O;\r\n            }\r\n            while (e !== r) {\r\n                var i = e.h;\r\n                if (e === i.i) {\r\n                    t += 1;\r\n                    if (i.t) {\r\n                        t += i.t.O;\r\n                    }\r\n                }\r\n                e = i;\r\n            }\r\n            return t;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    TreeIterator.prototype.isAccessible = function() {\r\n        return this.C !== this.A;\r\n    };\r\n    return TreeIterator;\r\n}(ContainerIterator);\r\n\r\nvar OrderedMapIterator = function(e) {\r\n    __extends(OrderedMapIterator, e);\r\n    function OrderedMapIterator(r, t, i, n) {\r\n        var s = e.call(this, r, t, n) || this;\r\n        s.container = i;\r\n        return s;\r\n    }\r\n    Object.defineProperty(OrderedMapIterator.prototype, \"pointer\", {\r\n        get: function() {\r\n            if (this.C === this.A) {\r\n                throwIteratorAccessError();\r\n            }\r\n            var e = this;\r\n            return new Proxy([], {\r\n                get: function(r, t) {\r\n                    if (t === \"0\") return e.C.u; else if (t === \"1\") return e.C.o;\r\n                    r[0] = e.C.u;\r\n                    r[1] = e.C.o;\r\n                    return r[t];\r\n                },\r\n                set: function(r, t, i) {\r\n                    if (t !== \"1\") {\r\n                        throw new TypeError(\"prop must be 1\");\r\n                    }\r\n                    e.C.o = i;\r\n                    return true;\r\n                }\r\n            });\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    OrderedMapIterator.prototype.copy = function() {\r\n        return new OrderedMapIterator(this.C, this.A, this.container, this.iteratorType);\r\n    };\r\n    return OrderedMapIterator;\r\n}(TreeIterator);\r\n\r\nvar OrderedMap = function(e) {\r\n    __extends(OrderedMap, e);\r\n    function OrderedMap(r, t, i) {\r\n        if (r === void 0) {\r\n            r = [];\r\n        }\r\n        var n = e.call(this, t, i) || this;\r\n        var s = n;\r\n        r.forEach((function(e) {\r\n            s.setElement(e[0], e[1]);\r\n        }));\r\n        return n;\r\n    }\r\n    OrderedMap.prototype.begin = function() {\r\n        return new OrderedMapIterator(this.A.t || this.A, this.A, this);\r\n    };\r\n    OrderedMap.prototype.end = function() {\r\n        return new OrderedMapIterator(this.A, this.A, this);\r\n    };\r\n    OrderedMap.prototype.rBegin = function() {\r\n        return new OrderedMapIterator(this.A.i || this.A, this.A, this, 1);\r\n    };\r\n    OrderedMap.prototype.rEnd = function() {\r\n        return new OrderedMapIterator(this.A, this.A, this, 1);\r\n    };\r\n    OrderedMap.prototype.front = function() {\r\n        if (this._ === 0) return;\r\n        var e = this.A.t;\r\n        return [ e.u, e.o ];\r\n    };\r\n    OrderedMap.prototype.back = function() {\r\n        if (this._ === 0) return;\r\n        var e = this.A.i;\r\n        return [ e.u, e.o ];\r\n    };\r\n    OrderedMap.prototype.lowerBound = function(e) {\r\n        var r = this.m(this.N, e);\r\n        return new OrderedMapIterator(r, this.A, this);\r\n    };\r\n    OrderedMap.prototype.upperBound = function(e) {\r\n        var r = this.B(this.N, e);\r\n        return new OrderedMapIterator(r, this.A, this);\r\n    };\r\n    OrderedMap.prototype.reverseLowerBound = function(e) {\r\n        var r = this.j(this.N, e);\r\n        return new OrderedMapIterator(r, this.A, this);\r\n    };\r\n    OrderedMap.prototype.reverseUpperBound = function(e) {\r\n        var r = this.k(this.N, e);\r\n        return new OrderedMapIterator(r, this.A, this);\r\n    };\r\n    OrderedMap.prototype.forEach = function(e) {\r\n        this.P((function(r, t, i) {\r\n            e([ r.u, r.o ], t, i);\r\n        }));\r\n    };\r\n    OrderedMap.prototype.setElement = function(e, r, t) {\r\n        return this.D(e, r, t);\r\n    };\r\n    OrderedMap.prototype.getElementByPos = function(e) {\r\n        if (e < 0 || e > this._ - 1) {\r\n            throw new RangeError;\r\n        }\r\n        var r = this.P(e);\r\n        return [ r.u, r.o ];\r\n    };\r\n    OrderedMap.prototype.find = function(e) {\r\n        var r = this.F(this.N, e);\r\n        return new OrderedMapIterator(r, this.A, this);\r\n    };\r\n    OrderedMap.prototype.getElementByKey = function(e) {\r\n        var r = this.F(this.N, e);\r\n        return r.o;\r\n    };\r\n    OrderedMap.prototype.union = function(e) {\r\n        var r = this;\r\n        e.forEach((function(e) {\r\n            r.setElement(e[0], e[1]);\r\n        }));\r\n        return this._;\r\n    };\r\n    OrderedMap.prototype[Symbol.iterator] = function() {\r\n        var e, r, t, i;\r\n        return __generator(this, (function(n) {\r\n            switch (n.label) {\r\n              case 0:\r\n                e = this._;\r\n                r = this.P();\r\n                t = 0;\r\n                n.label = 1;\r\n\r\n              case 1:\r\n                if (!(t < e)) return [ 3, 4 ];\r\n                i = r[t];\r\n                return [ 4, [ i.u, i.o ] ];\r\n\r\n              case 2:\r\n                n.sent();\r\n                n.label = 3;\r\n\r\n              case 3:\r\n                ++t;\r\n                return [ 3, 1 ];\r\n\r\n              case 4:\r\n                return [ 2 ];\r\n            }\r\n        }));\r\n    };\r\n    return OrderedMap;\r\n}(TreeContainer);\r\n\r\n\r\n//# sourceMappingURL=index.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@js-sdsl/ordered-map/dist/esm/index.js\n");

/***/ })

};
;