/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/lodash.camelcase";
exports.ids = ["vendor-chunks/lodash.camelcase"];
exports.modules = {

/***/ "(rsc)/./node_modules/lodash.camelcase/index.js":
/*!************************************************!*\
  !*** ./node_modules/lodash.camelcase/index.js ***!
  \************************************************/
/***/ ((module) => {

eval("/**\r\n * lodash (Custom Build) <https://lodash.com/>\r\n * Build: `lodash modularize exports=\"npm\" -o ./`\r\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\r\n * Released under MIT license <https://lodash.com/license>\r\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\r\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\r\n */\r\n\r\n/** Used as references for various `Number` constants. */\r\nvar INFINITY = 1 / 0;\r\n\r\n/** `Object#toString` result references. */\r\nvar symbolTag = '[object Symbol]';\r\n\r\n/** Used to match words composed of alphanumeric characters. */\r\nvar reAsciiWord = /[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g;\r\n\r\n/** Used to match Latin Unicode letters (excluding mathematical operators). */\r\nvar reLatin = /[\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff\\u0100-\\u017f]/g;\r\n\r\n/** Used to compose unicode character classes. */\r\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\r\n    rsComboMarksRange = '\\\\u0300-\\\\u036f\\\\ufe20-\\\\ufe23',\r\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20f0',\r\n    rsDingbatRange = '\\\\u2700-\\\\u27bf',\r\n    rsLowerRange = 'a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff',\r\n    rsMathOpRange = '\\\\xac\\\\xb1\\\\xd7\\\\xf7',\r\n    rsNonCharRange = '\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf',\r\n    rsPunctuationRange = '\\\\u2000-\\\\u206f',\r\n    rsSpaceRange = ' \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000',\r\n    rsUpperRange = 'A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde',\r\n    rsVarRange = '\\\\ufe0e\\\\ufe0f',\r\n    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;\r\n\r\n/** Used to compose unicode capture groups. */\r\nvar rsApos = \"['\\u2019]\",\r\n    rsAstral = '[' + rsAstralRange + ']',\r\n    rsBreak = '[' + rsBreakRange + ']',\r\n    rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',\r\n    rsDigits = '\\\\d+',\r\n    rsDingbat = '[' + rsDingbatRange + ']',\r\n    rsLower = '[' + rsLowerRange + ']',\r\n    rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',\r\n    rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\r\n    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\r\n    rsNonAstral = '[^' + rsAstralRange + ']',\r\n    rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\r\n    rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\r\n    rsUpper = '[' + rsUpperRange + ']',\r\n    rsZWJ = '\\\\u200d';\r\n\r\n/** Used to compose unicode regexes. */\r\nvar rsLowerMisc = '(?:' + rsLower + '|' + rsMisc + ')',\r\n    rsUpperMisc = '(?:' + rsUpper + '|' + rsMisc + ')',\r\n    rsOptLowerContr = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',\r\n    rsOptUpperContr = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',\r\n    reOptMod = rsModifier + '?',\r\n    rsOptVar = '[' + rsVarRange + ']?',\r\n    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\r\n    rsSeq = rsOptVar + reOptMod + rsOptJoin,\r\n    rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,\r\n    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\r\n\r\n/** Used to match apostrophes. */\r\nvar reApos = RegExp(rsApos, 'g');\r\n\r\n/**\r\n * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and\r\n * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).\r\n */\r\nvar reComboMark = RegExp(rsCombo, 'g');\r\n\r\n/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\r\nvar reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\r\n\r\n/** Used to match complex or compound words. */\r\nvar reUnicodeWord = RegExp([\r\n  rsUpper + '?' + rsLower + '+' + rsOptLowerContr + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',\r\n  rsUpperMisc + '+' + rsOptUpperContr + '(?=' + [rsBreak, rsUpper + rsLowerMisc, '$'].join('|') + ')',\r\n  rsUpper + '?' + rsLowerMisc + '+' + rsOptLowerContr,\r\n  rsUpper + '+' + rsOptUpperContr,\r\n  rsDigits,\r\n  rsEmoji\r\n].join('|'), 'g');\r\n\r\n/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\r\nvar reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');\r\n\r\n/** Used to detect strings that need a more robust regexp to match words. */\r\nvar reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;\r\n\r\n/** Used to map Latin Unicode letters to basic Latin letters. */\r\nvar deburredLetters = {\r\n  // Latin-1 Supplement block.\r\n  '\\xc0': 'A',  '\\xc1': 'A', '\\xc2': 'A', '\\xc3': 'A', '\\xc4': 'A', '\\xc5': 'A',\r\n  '\\xe0': 'a',  '\\xe1': 'a', '\\xe2': 'a', '\\xe3': 'a', '\\xe4': 'a', '\\xe5': 'a',\r\n  '\\xc7': 'C',  '\\xe7': 'c',\r\n  '\\xd0': 'D',  '\\xf0': 'd',\r\n  '\\xc8': 'E',  '\\xc9': 'E', '\\xca': 'E', '\\xcb': 'E',\r\n  '\\xe8': 'e',  '\\xe9': 'e', '\\xea': 'e', '\\xeb': 'e',\r\n  '\\xcc': 'I',  '\\xcd': 'I', '\\xce': 'I', '\\xcf': 'I',\r\n  '\\xec': 'i',  '\\xed': 'i', '\\xee': 'i', '\\xef': 'i',\r\n  '\\xd1': 'N',  '\\xf1': 'n',\r\n  '\\xd2': 'O',  '\\xd3': 'O', '\\xd4': 'O', '\\xd5': 'O', '\\xd6': 'O', '\\xd8': 'O',\r\n  '\\xf2': 'o',  '\\xf3': 'o', '\\xf4': 'o', '\\xf5': 'o', '\\xf6': 'o', '\\xf8': 'o',\r\n  '\\xd9': 'U',  '\\xda': 'U', '\\xdb': 'U', '\\xdc': 'U',\r\n  '\\xf9': 'u',  '\\xfa': 'u', '\\xfb': 'u', '\\xfc': 'u',\r\n  '\\xdd': 'Y',  '\\xfd': 'y', '\\xff': 'y',\r\n  '\\xc6': 'Ae', '\\xe6': 'ae',\r\n  '\\xde': 'Th', '\\xfe': 'th',\r\n  '\\xdf': 'ss',\r\n  // Latin Extended-A block.\r\n  '\\u0100': 'A',  '\\u0102': 'A', '\\u0104': 'A',\r\n  '\\u0101': 'a',  '\\u0103': 'a', '\\u0105': 'a',\r\n  '\\u0106': 'C',  '\\u0108': 'C', '\\u010a': 'C', '\\u010c': 'C',\r\n  '\\u0107': 'c',  '\\u0109': 'c', '\\u010b': 'c', '\\u010d': 'c',\r\n  '\\u010e': 'D',  '\\u0110': 'D', '\\u010f': 'd', '\\u0111': 'd',\r\n  '\\u0112': 'E',  '\\u0114': 'E', '\\u0116': 'E', '\\u0118': 'E', '\\u011a': 'E',\r\n  '\\u0113': 'e',  '\\u0115': 'e', '\\u0117': 'e', '\\u0119': 'e', '\\u011b': 'e',\r\n  '\\u011c': 'G',  '\\u011e': 'G', '\\u0120': 'G', '\\u0122': 'G',\r\n  '\\u011d': 'g',  '\\u011f': 'g', '\\u0121': 'g', '\\u0123': 'g',\r\n  '\\u0124': 'H',  '\\u0126': 'H', '\\u0125': 'h', '\\u0127': 'h',\r\n  '\\u0128': 'I',  '\\u012a': 'I', '\\u012c': 'I', '\\u012e': 'I', '\\u0130': 'I',\r\n  '\\u0129': 'i',  '\\u012b': 'i', '\\u012d': 'i', '\\u012f': 'i', '\\u0131': 'i',\r\n  '\\u0134': 'J',  '\\u0135': 'j',\r\n  '\\u0136': 'K',  '\\u0137': 'k', '\\u0138': 'k',\r\n  '\\u0139': 'L',  '\\u013b': 'L', '\\u013d': 'L', '\\u013f': 'L', '\\u0141': 'L',\r\n  '\\u013a': 'l',  '\\u013c': 'l', '\\u013e': 'l', '\\u0140': 'l', '\\u0142': 'l',\r\n  '\\u0143': 'N',  '\\u0145': 'N', '\\u0147': 'N', '\\u014a': 'N',\r\n  '\\u0144': 'n',  '\\u0146': 'n', '\\u0148': 'n', '\\u014b': 'n',\r\n  '\\u014c': 'O',  '\\u014e': 'O', '\\u0150': 'O',\r\n  '\\u014d': 'o',  '\\u014f': 'o', '\\u0151': 'o',\r\n  '\\u0154': 'R',  '\\u0156': 'R', '\\u0158': 'R',\r\n  '\\u0155': 'r',  '\\u0157': 'r', '\\u0159': 'r',\r\n  '\\u015a': 'S',  '\\u015c': 'S', '\\u015e': 'S', '\\u0160': 'S',\r\n  '\\u015b': 's',  '\\u015d': 's', '\\u015f': 's', '\\u0161': 's',\r\n  '\\u0162': 'T',  '\\u0164': 'T', '\\u0166': 'T',\r\n  '\\u0163': 't',  '\\u0165': 't', '\\u0167': 't',\r\n  '\\u0168': 'U',  '\\u016a': 'U', '\\u016c': 'U', '\\u016e': 'U', '\\u0170': 'U', '\\u0172': 'U',\r\n  '\\u0169': 'u',  '\\u016b': 'u', '\\u016d': 'u', '\\u016f': 'u', '\\u0171': 'u', '\\u0173': 'u',\r\n  '\\u0174': 'W',  '\\u0175': 'w',\r\n  '\\u0176': 'Y',  '\\u0177': 'y', '\\u0178': 'Y',\r\n  '\\u0179': 'Z',  '\\u017b': 'Z', '\\u017d': 'Z',\r\n  '\\u017a': 'z',  '\\u017c': 'z', '\\u017e': 'z',\r\n  '\\u0132': 'IJ', '\\u0133': 'ij',\r\n  '\\u0152': 'Oe', '\\u0153': 'oe',\r\n  '\\u0149': \"'n\", '\\u017f': 'ss'\r\n};\r\n\r\n/** Detect free variable `global` from Node.js. */\r\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\r\n\r\n/** Detect free variable `self`. */\r\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\r\n\r\n/** Used as a reference to the global object. */\r\nvar root = freeGlobal || freeSelf || Function('return this')();\r\n\r\n/**\r\n * A specialized version of `_.reduce` for arrays without support for\r\n * iteratee shorthands.\r\n *\r\n * @private\r\n * @param {Array} [array] The array to iterate over.\r\n * @param {Function} iteratee The function invoked per iteration.\r\n * @param {*} [accumulator] The initial value.\r\n * @param {boolean} [initAccum] Specify using the first element of `array` as\r\n *  the initial value.\r\n * @returns {*} Returns the accumulated value.\r\n */\r\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\r\n  var index = -1,\r\n      length = array ? array.length : 0;\r\n\r\n  if (initAccum && length) {\r\n    accumulator = array[++index];\r\n  }\r\n  while (++index < length) {\r\n    accumulator = iteratee(accumulator, array[index], index, array);\r\n  }\r\n  return accumulator;\r\n}\r\n\r\n/**\r\n * Converts an ASCII `string` to an array.\r\n *\r\n * @private\r\n * @param {string} string The string to convert.\r\n * @returns {Array} Returns the converted array.\r\n */\r\nfunction asciiToArray(string) {\r\n  return string.split('');\r\n}\r\n\r\n/**\r\n * Splits an ASCII `string` into an array of its words.\r\n *\r\n * @private\r\n * @param {string} The string to inspect.\r\n * @returns {Array} Returns the words of `string`.\r\n */\r\nfunction asciiWords(string) {\r\n  return string.match(reAsciiWord) || [];\r\n}\r\n\r\n/**\r\n * The base implementation of `_.propertyOf` without support for deep paths.\r\n *\r\n * @private\r\n * @param {Object} object The object to query.\r\n * @returns {Function} Returns the new accessor function.\r\n */\r\nfunction basePropertyOf(object) {\r\n  return function(key) {\r\n    return object == null ? undefined : object[key];\r\n  };\r\n}\r\n\r\n/**\r\n * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A\r\n * letters to basic Latin letters.\r\n *\r\n * @private\r\n * @param {string} letter The matched letter to deburr.\r\n * @returns {string} Returns the deburred letter.\r\n */\r\nvar deburrLetter = basePropertyOf(deburredLetters);\r\n\r\n/**\r\n * Checks if `string` contains Unicode symbols.\r\n *\r\n * @private\r\n * @param {string} string The string to inspect.\r\n * @returns {boolean} Returns `true` if a symbol is found, else `false`.\r\n */\r\nfunction hasUnicode(string) {\r\n  return reHasUnicode.test(string);\r\n}\r\n\r\n/**\r\n * Checks if `string` contains a word composed of Unicode symbols.\r\n *\r\n * @private\r\n * @param {string} string The string to inspect.\r\n * @returns {boolean} Returns `true` if a word is found, else `false`.\r\n */\r\nfunction hasUnicodeWord(string) {\r\n  return reHasUnicodeWord.test(string);\r\n}\r\n\r\n/**\r\n * Converts `string` to an array.\r\n *\r\n * @private\r\n * @param {string} string The string to convert.\r\n * @returns {Array} Returns the converted array.\r\n */\r\nfunction stringToArray(string) {\r\n  return hasUnicode(string)\r\n    ? unicodeToArray(string)\r\n    : asciiToArray(string);\r\n}\r\n\r\n/**\r\n * Converts a Unicode `string` to an array.\r\n *\r\n * @private\r\n * @param {string} string The string to convert.\r\n * @returns {Array} Returns the converted array.\r\n */\r\nfunction unicodeToArray(string) {\r\n  return string.match(reUnicode) || [];\r\n}\r\n\r\n/**\r\n * Splits a Unicode `string` into an array of its words.\r\n *\r\n * @private\r\n * @param {string} The string to inspect.\r\n * @returns {Array} Returns the words of `string`.\r\n */\r\nfunction unicodeWords(string) {\r\n  return string.match(reUnicodeWord) || [];\r\n}\r\n\r\n/** Used for built-in method references. */\r\nvar objectProto = Object.prototype;\r\n\r\n/**\r\n * Used to resolve the\r\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\r\n * of values.\r\n */\r\nvar objectToString = objectProto.toString;\r\n\r\n/** Built-in value references. */\r\nvar Symbol = root.Symbol;\r\n\r\n/** Used to convert symbols to primitives and strings. */\r\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\r\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\r\n\r\n/**\r\n * The base implementation of `_.slice` without an iteratee call guard.\r\n *\r\n * @private\r\n * @param {Array} array The array to slice.\r\n * @param {number} [start=0] The start position.\r\n * @param {number} [end=array.length] The end position.\r\n * @returns {Array} Returns the slice of `array`.\r\n */\r\nfunction baseSlice(array, start, end) {\r\n  var index = -1,\r\n      length = array.length;\r\n\r\n  if (start < 0) {\r\n    start = -start > length ? 0 : (length + start);\r\n  }\r\n  end = end > length ? length : end;\r\n  if (end < 0) {\r\n    end += length;\r\n  }\r\n  length = start > end ? 0 : ((end - start) >>> 0);\r\n  start >>>= 0;\r\n\r\n  var result = Array(length);\r\n  while (++index < length) {\r\n    result[index] = array[index + start];\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * The base implementation of `_.toString` which doesn't convert nullish\r\n * values to empty strings.\r\n *\r\n * @private\r\n * @param {*} value The value to process.\r\n * @returns {string} Returns the string.\r\n */\r\nfunction baseToString(value) {\r\n  // Exit early for strings to avoid a performance hit in some environments.\r\n  if (typeof value == 'string') {\r\n    return value;\r\n  }\r\n  if (isSymbol(value)) {\r\n    return symbolToString ? symbolToString.call(value) : '';\r\n  }\r\n  var result = (value + '');\r\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\r\n}\r\n\r\n/**\r\n * Casts `array` to a slice if it's needed.\r\n *\r\n * @private\r\n * @param {Array} array The array to inspect.\r\n * @param {number} start The start position.\r\n * @param {number} [end=array.length] The end position.\r\n * @returns {Array} Returns the cast slice.\r\n */\r\nfunction castSlice(array, start, end) {\r\n  var length = array.length;\r\n  end = end === undefined ? length : end;\r\n  return (!start && end >= length) ? array : baseSlice(array, start, end);\r\n}\r\n\r\n/**\r\n * Creates a function like `_.lowerFirst`.\r\n *\r\n * @private\r\n * @param {string} methodName The name of the `String` case method to use.\r\n * @returns {Function} Returns the new case function.\r\n */\r\nfunction createCaseFirst(methodName) {\r\n  return function(string) {\r\n    string = toString(string);\r\n\r\n    var strSymbols = hasUnicode(string)\r\n      ? stringToArray(string)\r\n      : undefined;\r\n\r\n    var chr = strSymbols\r\n      ? strSymbols[0]\r\n      : string.charAt(0);\r\n\r\n    var trailing = strSymbols\r\n      ? castSlice(strSymbols, 1).join('')\r\n      : string.slice(1);\r\n\r\n    return chr[methodName]() + trailing;\r\n  };\r\n}\r\n\r\n/**\r\n * Creates a function like `_.camelCase`.\r\n *\r\n * @private\r\n * @param {Function} callback The function to combine each word.\r\n * @returns {Function} Returns the new compounder function.\r\n */\r\nfunction createCompounder(callback) {\r\n  return function(string) {\r\n    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');\r\n  };\r\n}\r\n\r\n/**\r\n * Checks if `value` is object-like. A value is object-like if it's not `null`\r\n * and has a `typeof` result of \"object\".\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\r\n * @example\r\n *\r\n * _.isObjectLike({});\r\n * // => true\r\n *\r\n * _.isObjectLike([1, 2, 3]);\r\n * // => true\r\n *\r\n * _.isObjectLike(_.noop);\r\n * // => false\r\n *\r\n * _.isObjectLike(null);\r\n * // => false\r\n */\r\nfunction isObjectLike(value) {\r\n  return !!value && typeof value == 'object';\r\n}\r\n\r\n/**\r\n * Checks if `value` is classified as a `Symbol` primitive or object.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\r\n * @example\r\n *\r\n * _.isSymbol(Symbol.iterator);\r\n * // => true\r\n *\r\n * _.isSymbol('abc');\r\n * // => false\r\n */\r\nfunction isSymbol(value) {\r\n  return typeof value == 'symbol' ||\r\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\r\n}\r\n\r\n/**\r\n * Converts `value` to a string. An empty string is returned for `null`\r\n * and `undefined` values. The sign of `-0` is preserved.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to process.\r\n * @returns {string} Returns the string.\r\n * @example\r\n *\r\n * _.toString(null);\r\n * // => ''\r\n *\r\n * _.toString(-0);\r\n * // => '-0'\r\n *\r\n * _.toString([1, 2, 3]);\r\n * // => '1,2,3'\r\n */\r\nfunction toString(value) {\r\n  return value == null ? '' : baseToString(value);\r\n}\r\n\r\n/**\r\n * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 3.0.0\r\n * @category String\r\n * @param {string} [string=''] The string to convert.\r\n * @returns {string} Returns the camel cased string.\r\n * @example\r\n *\r\n * _.camelCase('Foo Bar');\r\n * // => 'fooBar'\r\n *\r\n * _.camelCase('--foo-bar--');\r\n * // => 'fooBar'\r\n *\r\n * _.camelCase('__FOO_BAR__');\r\n * // => 'fooBar'\r\n */\r\nvar camelCase = createCompounder(function(result, word, index) {\r\n  word = word.toLowerCase();\r\n  return result + (index ? capitalize(word) : word);\r\n});\r\n\r\n/**\r\n * Converts the first character of `string` to upper case and the remaining\r\n * to lower case.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 3.0.0\r\n * @category String\r\n * @param {string} [string=''] The string to capitalize.\r\n * @returns {string} Returns the capitalized string.\r\n * @example\r\n *\r\n * _.capitalize('FRED');\r\n * // => 'Fred'\r\n */\r\nfunction capitalize(string) {\r\n  return upperFirst(toString(string).toLowerCase());\r\n}\r\n\r\n/**\r\n * Deburrs `string` by converting\r\n * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\r\n * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)\r\n * letters to basic Latin letters and removing\r\n * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 3.0.0\r\n * @category String\r\n * @param {string} [string=''] The string to deburr.\r\n * @returns {string} Returns the deburred string.\r\n * @example\r\n *\r\n * _.deburr('déjà vu');\r\n * // => 'deja vu'\r\n */\r\nfunction deburr(string) {\r\n  string = toString(string);\r\n  return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');\r\n}\r\n\r\n/**\r\n * Converts the first character of `string` to upper case.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category String\r\n * @param {string} [string=''] The string to convert.\r\n * @returns {string} Returns the converted string.\r\n * @example\r\n *\r\n * _.upperFirst('fred');\r\n * // => 'Fred'\r\n *\r\n * _.upperFirst('FRED');\r\n * // => 'FRED'\r\n */\r\nvar upperFirst = createCaseFirst('toUpperCase');\r\n\r\n/**\r\n * Splits `string` into an array of its words.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 3.0.0\r\n * @category String\r\n * @param {string} [string=''] The string to inspect.\r\n * @param {RegExp|string} [pattern] The pattern to match words.\r\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\r\n * @returns {Array} Returns the words of `string`.\r\n * @example\r\n *\r\n * _.words('fred, barney, & pebbles');\r\n * // => ['fred', 'barney', 'pebbles']\r\n *\r\n * _.words('fred, barney, & pebbles', /[^, ]+/g);\r\n * // => ['fred', 'barney', '&', 'pebbles']\r\n */\r\nfunction words(string, pattern, guard) {\r\n  string = toString(string);\r\n  pattern = guard ? undefined : pattern;\r\n\r\n  if (pattern === undefined) {\r\n    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);\r\n  }\r\n  return string.match(pattern) || [];\r\n}\r\n\r\nmodule.exports = camelCase;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/lodash.camelcase/index.js\n");

/***/ })

};
;